{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "7c307094-1318-4391-9bdd-dd100b9842a3",
        "name": "Clear Cache",
        "item": [
          {
            "id": "78362c75-986c-410c-866f-f4cf79820242",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "427545c3-20a3-43ec-895d-2ddb00ae232e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "a60a42b6-50c6-4643-b076-2e0d0283a0d2"
                }
              }
            ]
          },
          {
            "id": "f2aeca0c-9732-4851-aac3-3801ff6bc5f1",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ee5da443-012a-4a0f-a698-3d82c2363816",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "808a514c-b29d-4e55-8bb6-c324ad14e9c7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f2836cee-2b83-486f-9587-b07d08978bdf",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b1eab1d8-fc75-40e4-bfe4-ea90dde4d3ab",
            "name": "Positive Testing",
            "item": [
              {
                "id": "adf05499-962a-4f72-b930-f45430dc6ccf",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d2027396-f36f-4732-bdf0-8d76b5dd44ac",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6abc916-07df-401a-8d47-a3a6d7860fb3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "375e735d-0a47-4e8d-889e-18643e355037",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08848a5f-3a82-4e4d-9dea-07d552ace49a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "25af9e00-790e-43e9-8f04-6f84c88137ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "90291fc7-139f-4a65-b43c-baa755ffa907"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9dcaf66-02e3-4b2b-8a0b-7352f30aaaab",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "ffd92a4a-8e65-4a51-bd2f-66644b8504cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9d7e88ee-9f79-424e-aaa2-ccce31a92478",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cac04327-2382-4a2a-82ab-60595564f90b"
            }
          }
        ]
      },
      {
        "id": "65fa41bf-664a-4fd7-8ffd-7787766c89e6",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "63e910ba-24aa-4230-b208-df56ac6e24fe",
            "name": "Negative Testing",
            "item": [
              {
                "id": "be28d473-ae8f-4b62-979b-a8a7a6570f17",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3301f35a-1bd1-492a-98e6-0c32c8e60765",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aafc264-8929-4945-b54d-0616269ff064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a04a6ec-007e-45d2-a2d6-012bd1d98097"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40094c4c-90b7-4b03-987a-4a30e4ef22b4",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deeda695-eb20-4a96-a5a1-042cb595665e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c99e599-018c-4780-a8cf-e206681849a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd503a59-2a0f-49d2-a9c2-f8b0280a2814",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797bb350-a56e-4693-bb1d-00bb8289459a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b14fd98b-131d-4cd5-ba30-e92788b890d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b29b1f68-eada-491c-bcb9-5ae223cbf2f8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7784ed9c-87f3-4b1e-9f34-6fc18c802f0f",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8541b8aa-6b86-4ea7-8312-50efb66af385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4b1fbdd5-86dd-409c-9cf2-d90010ffbcd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f46fc0-bd7d-4451-8a6f-c894b5dfff50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d858e0d-577e-4aa6-9812-14979a306b38"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b4578685-fc32-4b80-b074-c47e9342c28c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "86e7c5ba-7671-4620-9413-b32c10279e5f",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ba1b9469-61d2-4eb8-9caa-9dec4afe5dba",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "0cffe69e-b8fb-4c5c-9463-8fa32fdc8a72"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a8ad653f-d87b-40af-877b-32dbd795ec54",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "52398843-626c-4fe6-9000-6ea5b78ff669"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35a70a0e-1e92-408d-92b9-72b6ff795919",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d813685-d6e7-4df0-b5d4-7d9efb27fc46"
            }
          }
        ]
      },
      {
        "id": "85161367-28d9-4049-be37-4ab8ae35980b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "deb04d98-c0b6-4787-b431-afb35ad6c704",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5131fb05-ed96-4d25-9a4b-38823db3854e",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b0a9002a-a8b2-4d67-821c-5c8a38337594",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ea23ddf-5bdb-4b7f-9eda-f038978da6ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff64138f-7989-4190-8400-1f7fdbbfc4f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1786bef-1a90-48cb-a869-96b44e8b3cfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b490d700-6310-4ea4-b5d6-057fed072004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14495303-fb6f-47be-9dd8-ca43eddfcf51",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c5ac31-e4dc-404c-a0de-0b71804e8abc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c12923-5173-4d81-879b-086cb00e7000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9210e59f-a031-4b72-9914-380068efae50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63c31c9c-f9c5-42e8-adf0-8caf66b0c7dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34084ad9-64b7-4baf-a74a-5eb314a1430a",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f026e89-b248-4aa0-9477-ed958e55a212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78ddd218-de69-4156-aea4-f2320688da2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f4dde68-64bf-473d-b06d-aab48e8f36a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "083f552a-fe12-4240-9b74-1873dd5483e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75acf9c0-4073-465c-8dba-52d008ad7cf5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77eb38f2-e875-4508-8e08-6627f63fcaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42ee3256-c31d-4388-8d2f-69ef6fcd03d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "900defc6-df2e-4274-8dab-6747a75708dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a0ec3cc-a58b-4587-a1ad-eac3d192fe8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19ed3db-1682-4edf-bfc6-9a21a1349399",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec61013-e9fa-4106-95c6-5113e1dc60b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbe19ef4-d589-42af-88cd-febd30603c58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae0f96d-cf66-4b1a-b519-5ebade1b1d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "afd4655e-bffb-46ac-a2ae-dfbc9aac44ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32f28f9f-e2af-4946-8185-e518b310b663",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "616b23da-7780-4582-b7e6-fc01b3b33f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0afadfd4-124a-4e46-a653-408fbda26b67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90302374-097c-49af-b594-80b2c776c604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec228fa9-7285-4ca0-92ad-7cfd546f5f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d31554b4-a1bb-4201-bae0-7d0c51aa6bd0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e182dec2-42ea-43ec-bb6e-4e3441888965",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39232d3-ef63-4363-9774-c80e0098bc2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697b9510-79d2-45ee-be02-36239f4a1614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9542ecba-6636-45dd-8614-ebe77a20ec68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305a50bf-23b8-4fef-b0d7-827bbf263321",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19eca584-33b0-4780-a869-67dd7b336e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90eb0dcf-433b-4346-9a6f-08c1b3eb4924"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f878d1e-3c08-40bb-9aa0-7ca8a5068463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b81c94ed-3022-40fd-b318-596a1f8e7240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f35867c9-9dd9-425e-9bcb-08df9f326c53",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a28a598-664c-4739-9e23-84576d96aeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c9fc7f7-bc96-47c3-8d71-fcaa51b26f3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c63b2251-8e00-4bc3-8d0c-610a2e9fbc2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "502a832e-7b6a-4be6-88c0-3965bd3a06b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16a5fb0-8a79-4d68-99de-c14a31daf477",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0906b8-1139-470d-88bd-31733af5cc09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6a12f97-abf1-4d3b-a161-dcbeeef7884c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2aeff9-68f6-4668-af8f-18e7e198b8a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fce11a3-781a-4def-9352-31127a42a7bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edc5277-cda6-4d95-ae6a-5c90a67ed3e5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d74208-7723-44ca-ae26-01daad999bfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eded95d-9d59-4d8c-9d93-3d481266bf61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70431bce-9e07-4d96-bde1-bec9af3afe89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab402af7-e767-4ce1-a3b8-328bf46c9c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6daec15f-50b5-4b02-a48e-07474d2aa25b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2422c44e-77c1-4ebc-8005-29ec5ed85a6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "988448c4-e22d-4a6d-8cd0-73f6147e7a8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f240fa22-21df-4f46-8ef0-976d6f58f5cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "247bf368-2bdb-45d1-a84b-49b6c19c0484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efe0563d-dbf4-4fae-8d09-bd4d46b6814c",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbdc1bc5-dd96-4834-a155-a306cbe704ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209af0a6-4c9f-45a5-aeac-923055d5d173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cac3db7-63b4-42e4-8cbc-da837f760c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e32bb5a8-aea4-4d6a-9f28-14e1fe2fa884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e768b1c8-7fbc-4072-b59c-db58bda7b984",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cff7bf6-37b7-43be-8c8a-5feab732c4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f20527ae-0c06-4094-b4f8-88c0ec8c12e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f371546-af54-4f06-973d-228c5c6ab9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92203dc3-8e76-4633-a633-68a9e4543a7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17805b6a-0f50-4d16-97e7-54bffc56848e",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "236e9e45-3212-42f0-81ab-cc7864ec7aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd6aee7-5e2e-40b6-b05a-96f13e548956"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82e4308-7902-4f2d-b8da-7e601e6e5ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e6e49e40-811b-4c35-aab0-0ce58949fe15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5ee7964-88ac-44ac-a984-569bc592b631",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de7b634-2f55-462f-9230-2a35d94c4956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16dab595-74b1-42b7-8b0e-f079dd642473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14104620-00cd-4002-bd01-e4eb51fc8fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "990b0aa4-3afa-4b58-9f99-422bcb587776"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cb71a17-00bf-4fc4-89f8-c33899452a15",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23f5147f-a1ac-4f4a-8dcd-c5477bf1ccb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "844904d4-dd3d-4232-b264-e5431f618d7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58d1be17-5e2a-4861-b9c6-9215b4c419c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0599fba5-988a-40eb-8cc1-c1233aab3411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a713adb6-addc-4a6b-bf40-f9d8fc1893c0",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bde8278-a7df-4c38-8578-8168be78a4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6165bb-1262-4b2f-b1c0-ec16aadd2f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0fcf4ee-1a5b-43d1-9e75-33a6c829c114",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3214c380-2e38-410a-8cc0-b34b6624f8d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5313b696-80c4-43f3-9ed2-b4ca25d9bb57",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2665b753-9640-4f31-941c-a404efdb68b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94d8f2e3-a9ad-4855-ae1c-bf5540f6ae1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d482d2f9-9d8a-4ac3-8765-221b13464b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfef3b87-aed2-4349-b9b3-337ac7177029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f879386-2223-4772-9df2-e56f189fefa0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0a7f9e2-7a1e-426e-a933-dfa729cff47e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1770f00-62dd-4012-9727-2f021cb65dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11b04ffc-e4e1-4571-ac7c-3b272253a7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3acd2b7-f3d9-41fe-a3b4-6cf7df602921"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b8deb87-bf04-44f4-95d9-ac10404d5fb9",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a759ffb1-220a-4232-ade9-06e7a9269d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "669b61c1-77a2-47e3-ac0f-2565b88e3b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e03957a-f47a-458a-959f-7e73c3e1ae63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a60ecef0-4487-4ec6-96a5-9704071d7cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7e97f78-e83b-4f6f-bb15-54e6fcf00820",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8262af-7f0a-4980-a13b-7500301f43a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34006b04-43b5-41c3-8fb4-478aec05fc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5deb03-8a2a-4e17-ac7b-c620dea3aa4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d365c2f8-d0f3-4600-bdcc-1f4d066841cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fe69115-8525-43a8-8b8e-5bc922fd406f",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98c30d0-055e-40a5-b77f-b300ffe4e1af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84225ac3-42a4-4e6c-9dec-d46bb35ce544"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a94f2fa-19de-4cf5-b1b8-99fcf588f4a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b270cd3-0e94-4ccb-85ca-1f874dc15057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c50d9bc-6811-4807-9bda-bc03085b85ca",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e6ccfa-762c-462f-b853-59f52b7fd086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6280d0b-ad01-4a67-805f-151b80d0e3e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460f919c-853e-492a-8fa0-1dce94a011a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a425a9e7-74c1-4b43-bc05-1b8bb23f49b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e7d6caf-11ab-406e-bd0f-0703b0da0dea",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30003109-d93c-447e-b019-ca4688554fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a6383c-621f-44b2-aa31-ceb27403cf7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4811363e-f2d2-4c63-b212-6d5e44900459",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b37714d6-1cdc-4fca-accf-6a5e4a5b4660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7bc2c7a-7703-4c37-9f2e-37066fd7ad5b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67efaf0f-bc29-423b-8355-8911d3e53323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2083ac19-6b6e-46ee-9f5e-dde9388211d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff4c8186-7c60-4f23-b6a6-1a43b76dbbfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b0073e1-235b-4638-94c3-8ce0bdfccbaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "378f6b40-3072-4425-8299-319b22df927b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5fc8cde-eb07-4c28-8f4a-78cb7d88fa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8400c0-19d0-47a3-8d80-7ff7ca96e926"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac8161e2-cd04-4a23-b206-29be93c09a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd38b78-7ddc-4df3-91e1-19bdf1e90c3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d1f2fc1-1fee-4ba7-b82b-2aa8890a6b29",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d34d5d18-2e59-4e2b-89ac-b107fe5e6be1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5666fa0a-54fd-4a4c-b420-f21717d6337f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1aa1de-892b-4914-be8c-167c83897a3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "16f70c8b-c90f-4839-ab0a-481257ec775b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e91a53b-d972-4e78-a867-66ad0af21b2e",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46563e42-2bdd-4b0f-99fc-73522ee71331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ca24766-dad6-4d4b-8f9e-608b95a76b21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05aad78-2bc3-45ba-bd81-e23bc92dc7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f242d42-5d02-4f18-b328-191e49e0d4dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e02a76b-46b5-4be9-8432-d5675d2c926a",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "315c774a-6f32-46aa-a392-17175e2f5a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84ebdab-3771-4cfd-bd33-3523dcaf05c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b294d3-f46f-404f-a1be-8c283d2cbeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "5030b0b9-1837-43da-88bf-246484f9dea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "630ada82-ddc2-44f4-9384-2cd72efb5da2",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "364d2927-649d-413f-a236-cecf6f9d2f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df68ae4f-7b16-4538-9bee-147e11199835"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c360a70-5513-45c1-b8d6-07c079e95dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21c2bb46-0e8b-4e63-9df0-c5ac5ca107d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546a4e59-41fd-495a-902d-e751304e4458",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a1677ae-71ff-4e94-8b54-419c2a8378c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a383e0-4ef5-4035-9b97-5dfccd23e827"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af30b6e9-8b63-46de-ad72-3d73c94f8dc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d56d8f78-54d2-4708-a282-52b79020a8ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c997a9-a05b-4ec1-a580-3486e5e26487",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099bcba5-f57b-4575-a221-e3d784776e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aeb09b3-f46e-4e17-bf43-c2498cc51411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9c18ce-c838-4d7f-a84d-b15cdf913e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "042243be-1035-43c5-816e-232fb3dee229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85a9cd4-8974-4f1f-8554-d25ef8fb0471",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d5e5a57-53a5-4f21-90eb-a96963d49255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94da28b9-3299-405c-b156-538983d0bd56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06d3c48-c1e6-4ce3-a876-db5232d78da0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd77e16f-6b8d-48bd-b3f6-4ee8bd60abc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd68fc6-6fb9-475d-ae6a-12fb10bc59a6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0bb9fa-b5e4-4e00-bc23-8a973735a383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b651e31-923f-4ac9-a5f2-387da71512ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30735b7c-a58b-4cef-ba0d-24c63d638316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "876fbdec-ca64-4863-ba7b-47051e614b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "259a2d7e-9b1e-49ed-9b6f-b779cd4604c0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b00bb45-4732-48d6-9722-00db069cddda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "477e6fb3-4e89-4f4f-a0e7-7b14695557b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13ce28cf-d226-4635-84e7-7c3b3066b076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e1759ccd-c72b-43fe-82c2-4c0e900a7bf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bd4a06-8ca4-4c37-a78b-a5049fe82c32",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "138757a2-734c-41dc-86d8-6f65de4658a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46c83f7f-9b49-40b6-9fc3-e1beac43bbb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e734801-772b-4970-8611-d17458b71b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "126158dc-52ab-412e-b195-9482dfe54522"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e7b831e-5337-4c85-9488-f2b7e66ef40b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f67917d-f0ef-4175-b94a-ed4cadd7e2a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da5d65ad-1526-4146-bf4f-b949f53a9b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff67cf42-2c37-4056-967d-a7ed573284cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea82b9b-6501-46cb-ad17-9b90b3251416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c372c355-3847-4449-b1b7-a77daf68728f",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde8859f-d797-41f5-9025-d32a25b0e781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d94f5710-5cf4-4511-9805-69e888b0a129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a70b1fa9-49d0-43ae-98d3-8d33c1262910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e631e071-e401-4360-ab07-2f91b5c3ca4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fb20b69-5cd0-4664-a5b5-36d1243213f6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03371698-4b28-4352-b15d-25a676e59135",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9b1c1b3-1796-41cf-91ff-7318f8d28fa6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef0958d-95c8-457d-a756-de4bec9524b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8854e18c-f585-4beb-9de6-1997cf82d32d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99b5473-eccc-4971-8aa2-7227168ed361",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5215174-5a55-4f39-a0ca-561dabe058c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b693a4eb-53d4-4343-96ca-548a9bfb220f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcc753dc-7345-42d2-9cd9-b7a3c333951f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a2f2bb1-0990-4fad-a7c2-95b065e58f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11462948-8536-4f7d-9344-3bd67d146c4e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5a1f61a-164c-48bc-a850-9109e9e38764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f25c4d-43e4-4e4b-b8d4-79ecac71513a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d410dbc-57a4-42b0-b802-e09ba538560c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e7af145b-b0de-4b7b-9d69-7c33e38227d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1794f64f-4ff2-49a9-853f-c4aeb2257adf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f916aee1-15b9-4b51-aa90-4ca38775c60a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c52b08d-df1f-4594-a5e5-a4bd27793db0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ffa937f-74d2-4b78-8c39-bd3c071a97f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "246c223e-cea4-4e99-b298-e2cad189043d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7eff7bd-47f4-4642-81ff-8f1791befc8e",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c50f091-e409-4334-9dc8-5d0c60c80c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5222d91-50fe-4139-a89e-3001febc4658"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50396341-defb-4507-a9e9-ed5b9b3e1e25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2997ace-7eab-4aec-b45e-68ff34b6a7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34bcc248-4836-45f8-bc24-6ed91e69c823",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "521ecd3c-f064-4b58-b01d-e7c1c786e4ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d6c63b-3bc9-4fd6-8140-f7e39bfaa492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813a533e-450f-4c15-9f6d-413e155948a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "819b315e-b5f8-47ea-834f-8d8b1ebab880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f274eed-3831-4078-b5e2-01dfec84c959",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7c06eb-9969-41c8-95aa-d59997f5580c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75e91f8-f998-4dfb-bf9b-40d0bbe0deea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07adc816-4de1-4c34-92b8-fdd9c4a84651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cdbce87-bcda-4ca1-abdc-99352e623f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab935af0-7f99-4b5b-ba10-c7f2650581de",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ede9fea-dfad-4dfd-9e31-315a091d8ea4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43879c13-434c-4f6e-9832-e2c12bf51100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a576a882-d576-439c-a295-1da396568032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "419464c6-39a4-49b0-af79-f94c0b9552f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cab3fab-8bfd-4c3f-ba41-6a732cd49d2a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "087b5952-b53d-4808-acf4-011d697c2c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc8f18a-d951-437c-b57f-22b46c7890ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6dcb8f5-0ef4-4620-ad3c-895dda667db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "393aa3dd-2dc7-4bdb-ba91-e381e1f20ae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ce5595e-d903-4f69-9dee-ed3953fa263a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dee12117-1bde-4822-824d-91381c231d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b82037c-9f57-45d1-9176-6b7da7f285ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd99e921-9e51-43e7-aa56-4ad6833ddb65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "56523c41-7894-4733-9a4d-9c2e9e3f3d83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1309e3-19e9-46e8-9825-0a1c88e7fa68",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "231db56d-0a56-41cc-be1e-4028f16f7f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5868a81-8893-4f2c-b9ca-44de2e1610f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65cd92a-d5b0-4a1f-84f2-336899174769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78adcbbe-8493-41ba-861f-fb9a8f31d05b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1221e21a-0a65-467f-83d8-3bbfae47aacd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e09e591-fe50-45b3-8c7f-5f9c7117056a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91c826dc-192a-45a0-9d94-f68827e5db1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea961015-bb30-47b8-9e1b-087e62049425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "26305f94-37c4-4d68-9781-1c934082c087"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7409ccf0-cca2-46e7-bf3f-30173ae9c0eb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52dec4e5-9d81-459a-bc0c-458af3986c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8959ee6a-757e-4ea3-9d72-c0c50f2bd49e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bf290b-7eaf-43f7-9236-10a846a9f8f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbfc0f2-8451-437a-93e6-ce8c6cd9b172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdec9e48-8a37-4c4a-92c7-b6794e9edec3",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cf19a1c-0282-4a8e-b972-9ca2c11d6a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bcdeaa-2930-4b14-ad43-cc0db97dd858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80cff15a-0225-429b-8cc8-18469b6f1d94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e55ed319-60ac-47d5-934f-d8bf8052cf25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0b33de3-b9f6-410b-968a-85ad69c5af3d",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "310390fe-10b9-495a-8a08-3a2838ae44f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b591e06a-c721-430b-a302-d73020b31b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fc514e7-4901-4a49-b149-35b8c7a5286c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f571c89e-ae0c-4d1b-ae0c-65136cf16933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f1e4001-137a-4a50-b2d8-caf14e786d11",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fac59970-dc33-43e6-9572-d484a17e7c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "554860cf-1475-409e-bb8a-effb466a471c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad5d2e0-496b-4313-ba7d-d14502636620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5c6c3b-9343-4ffa-ac52-b29b0f07839c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1268dd08-49c7-4c99-82ec-5147114f6251",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a76a3677-0c31-4c09-b680-57e2a8197494",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "822a4660-8ba0-4974-98b9-684e2b7bc81f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fb09a0-a45a-4de5-9b77-d1da72f9a1d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "d31de76f-4a27-4acf-929b-25b05dfd79b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34b77e3f-8870-4e6e-ac87-76b2055af84d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58505131-46f2-432e-ad9c-b656d82c6bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e34cde1-66ab-4599-933b-c1111d255d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb18a96-9820-449f-8532-1b7c2a0971ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7015910e-a289-479c-ae57-16ea45de874f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6f1e4b-1b87-405c-8796-00eb7768af4a",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a64d28c-73a4-4f3e-b840-8b7b6c78f5fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4af9919-5050-497e-9425-579539db4de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0930a5dd-63af-4ed3-a74a-a8b8a22a2b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4b8fa636-04af-4c28-8ae9-efd2630543f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82021ed0-26a4-4896-b8a1-ae7da3dffe45",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b865136-f6e1-4570-a9f3-d5a4ddc0b64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0426c341-84ae-4ef2-bd60-97d161c24f0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91b05484-8d21-4721-b8c2-2f3bb80cf946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "150df94f-6bba-478c-a095-122e51213aab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2938bcd-b480-4084-9c44-154f5fc5b2fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7999fc-f77c-4f9c-856d-7f8298c6d15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b291272-8fb9-4785-b6f3-021e5bb5fd4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccc59f5c-0373-41c1-a791-55b6c01460fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7564d887-bbaf-425b-b459-afcc51e97d50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8641d1cb-b0e3-4cec-a8c3-e4e3ece68271",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06571e38-7270-4a0e-b9db-ab9c83e456b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e10550c7-cfac-4656-a704-f5ffa488f4d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "287bc527-91cb-40ab-b751-134c2548b3cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "70b9b888-3f8d-40fa-86bc-0d9f00ce85e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5d3863d-2621-4b9b-862f-6af73832543b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "594cc1f2-d84c-443e-a75c-5680843d8b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98517d0e-361a-4154-9159-247b5d9ed8aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a3a0ee9-d5f6-4d79-b896-465c5a5fa3d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "77640936-0b3b-40ce-9d91-dcd1887e94b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd83d65-5641-481b-9b3f-7fc04f962405",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abae394-4d18-4a8e-a87f-3465b36efa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6aae5ca-0d6c-44a1-bad6-59a412008947"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe42b87-e091-4d34-a80b-68d0301eeda3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7f36cc81-34e7-41d3-aa3f-046016e1b944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e5f9ebc-6ff4-423e-a2b3-5d461a2fafb4",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7e094e2-daa4-4e99-9b6f-35b611d801ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0065d338-4170-4601-984e-6cca545a60b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97acc354-59d9-4429-8dce-bba9cf085bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db878767-b360-49b0-83a1-b345b692d5ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a19bc02-3053-43e7-a533-29503a512064",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5fef51-dfcd-48b4-af6e-2fa15eeb746b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dae473e9-4fac-401e-b7a2-a155014819f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7521cf98-4581-4d20-b2d2-7e58dc9e5657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb0f7da6-7c28-4546-8e86-0bd083b6b0d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68e5625-d681-482c-b13b-33df2da5a8ac",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8ac11d0-f561-4b8c-b227-5bdb7306777a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e5547f-07d6-4264-9cc9-1e52279791c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb0f549-19f7-4704-b429-98205e1c7944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f653ed1-db99-4a12-8ca5-ec47858eabdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fe0ff3-6e73-484a-a035-2e40958e6aa2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe74d2a3-aed6-445b-ad16-248c10aa2f89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "479bb327-2771-4e6f-b6fc-0b68fa6a3f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce1f18e-c251-4288-8b8d-b1f79da94b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3c3925b9-0980-40fc-b49d-92b01d778a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "193ae162-a881-4314-bebf-35cc0230ff32",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "660fc788-a22c-4196-9330-f697e290c13a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e089b52-2426-4ed9-99a4-59d6f4dbfbd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bffc72-0f4a-4e65-b603-3406d69c507a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "5fd6cbc2-2432-4b16-a370-fff484ca824d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8e55e4-5d59-4456-a131-91fb67a4d677",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2981c55-fb75-4eeb-9eeb-db41ccd77efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a772be64-8d06-49f2-8aa5-ef71f40e0762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1583b063-d14a-47b4-b428-93ba590116f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "39b1b3ae-9431-4dce-a864-a627c845f3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0ecbbd-7bd9-421c-8001-d0ecb232cb6b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6452370d-9e98-4b7d-8868-61d9f1c0216d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d82af2d-b12d-4ff1-8839-749b3e04d664"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f03f277f-de3d-47e5-a975-4b540df91ce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c3fd4a5-1995-42f1-9570-565283dbc581"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd24d642-0c33-4d30-84c2-8fcf2b085801",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9470998c-ad0d-4f4f-bdda-0b741b35461a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fafe08b-5146-466d-ac07-db2a0088f659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bc826ee-db19-41a1-8d97-e2cbc1df59ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "67e48b5c-1f5f-4e57-acef-bb9ff567095d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c761e669-33ea-4347-8b54-ee911f0b7137",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ebd343c-e757-4bd6-b455-d07b99c84abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbd42e6-e764-47aa-be13-bae51ec24083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6aded65-8881-4283-9914-018d7be29adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d1a1b66-4548-4673-a71d-525b43daf8e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0d6dad-cf4e-4cc1-aad9-c2716c99650c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d239ebc-9e0b-4f10-9453-fd51b10da0b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911374b8-7101-40c2-a5ce-74207c739c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad581ca6-24d3-40ff-a48b-037c2b56ee18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9d9916fe-123f-4b1f-8148-9d6a48d2cbcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af16e30a-80ad-4143-b76b-6618eeb0dc8a",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c98ca8cf-0703-412f-a45a-1d20497536ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d7ef190-fb94-4aa2-bf76-d1288dbc2c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719d54ec-116d-43fe-8ff2-d0c201081858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2277cd2f-bebd-42e7-8fd9-612211a3ced4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1edc8a5-96dc-4a62-b945-551b446bf77f",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bdda1f0-9d25-44df-b54d-7bb4578ee17e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c91a81c9-0b54-4e28-8580-d9b92ed7181e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d7093f-fc5d-4b70-bbea-5b2e04f07fe0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cc56f3e-0a89-43ad-ad18-87cdd719abf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca697f8-940d-4650-a9b7-4a1037ad46d1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed60de66-ac7d-441b-979e-5a7af0ba5767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e494127d-7094-44b1-a2a4-7810af0d5f8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a74e6f1-09c9-49ed-aa10-276e44a930a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "28ba001c-0f7c-42f2-8f99-6b02ee6fa049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b375943f-cd0b-4d1f-949c-23c6d760905e",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682a65a2-1a98-4895-a1be-b84605c4a510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4ea2cec-ad04-4507-b4d6-3cbd2d843628"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb42bd29-72c2-43ce-9ecf-58714c417523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "220a8b7b-d3a6-4e0d-8b95-4686c62bfcfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "455447ca-5946-41b3-b325-8d9bd89452c2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91a0b60-8eeb-41bb-bdfb-1b52a66a9c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43528cc3-8326-4d29-9d39-efa6bcabc2d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb87df42-cead-4a93-9ca7-0968f1ed3903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "35b57361-93fe-49d3-8fbc-40ba20b4ff96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf7f3e9-46d3-4e84-bd58-dbcbe8d494c8",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da4b964-de25-412c-9db1-c0c451d0dbf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5afae2d-2162-49bb-8b2c-c2c370e68b89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44846fc7-5a5e-4337-959d-519537c766da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b59b095d-b403-4a45-aebd-fe143c0b83c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9676d336-3e56-42af-97f0-2a1de33a8c8e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bd0440-0820-4856-8eaa-98fab47360da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e36046a-f7c9-405a-838a-7267b54e179a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e4bd5f-3aaa-4350-8512-823f3031e90b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e487586-1164-462d-a042-58d981c54830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67b849ef-6b09-4b26-81d5-b9182cf2f1e1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d935e7ae-1357-4690-a3f2-b1e5c0e156ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39b1c4ff-45ea-445e-a27e-d743d62f5eef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22973b09-0fa7-44d5-8601-168c86c35e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3415a107-9a51-41e7-a35f-3b38cad02f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10b9217-ad82-4d81-916c-c0d700d2b79d",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0221eff1-e80f-4832-a688-d2ce4aef1391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01518d48-da4b-4817-b6cc-124fece6c0f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773b8efa-20b5-4a1b-abae-ab00b543205b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f848310c-2375-4edb-87f4-f480b279d46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e1bd992-b88d-4fe2-878e-c0eeb8bae8c3",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bd254f9-f6eb-4261-aa5b-6e925dc32fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178d7a49-1c13-40e9-919e-ae196ece7c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea92ca83-d69a-48e0-8db2-984d2422b8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b46e01c8-e13c-44ea-8bc3-5cb1c3048dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05168c7-3414-4880-95db-a862ce2f74d7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd520b7-3213-4de4-bbc7-d10b99a3126d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbde02a-5e0b-4005-a43e-34ac3f1c5410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5013b0d-bb79-436b-96df-bffec05fe770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7bd8f8-adca-4737-b669-0372c7c708a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d63642-20d6-4dff-9ecf-bf26e1641a0a",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a90a07-e286-4a30-b003-f0563d21484b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92d2c573-89af-4cce-bd08-02b4d0b887a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd648e6c-bfa0-4c4a-bf6b-263f4b911789",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "844400c9-d506-4b4d-b100-9ad990b650c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22107c0d-0a38-4bde-b354-468dff917393",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49fc046c-2906-44a1-867c-e4039b44e07f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2db657f-6c59-4bf0-98c5-d1802c9ff1ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e58a40e5-3797-4671-9452-28a64ba88941",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a858fb18-1ece-4ca7-bf39-807509ea5082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d2604f-6de8-43fd-b6fe-052a3e56baaf",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092281a5-ee33-447d-9a0b-ddf0952e97e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f83c9cc-733d-4ea9-8efa-fcc0c901de9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e2b854-1917-4fa2-b310-e66a4721bc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "63ef4293-b523-4893-9c52-c5779ee3eeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a51188c1-f11b-472a-8d57-78a0e52d4482",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b8d765-7326-4467-a1b5-661ee2b994bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffa1ad2f-8f86-44bd-a441-a91e8f7bf1ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38edf774-3b1a-4cd0-826f-734308409b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbc4a760-82fd-4cfa-9891-582269983354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3abd214-d3eb-449c-a8e9-b26382910339",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1321f4cc-b6bd-4204-aca1-3d3d6ada561e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8656af79-a396-4fd4-ba33-b5f63e3d523e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2672ac41-ecce-4368-ad7b-0fbdfe7b4595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a32b659-4a33-43ba-b0ed-5c1fd452831f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6500324-44b4-42aa-9498-e1ddad1bc5b2",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bacf8d41-3581-4862-a99c-59c26cf81a16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd00a747-81e4-44be-88b9-04a304dd0bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca38ea7-91f5-44ca-8033-bba2610a1788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "898c866c-77e4-4483-8b3e-2aedbcf2fe72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5d0335-2cf1-4f20-9861-fb2ca5c2779e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d93644-b42d-4fc5-b4a5-2716c8700a80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4528d6-4a49-48d3-8f01-af46206a6b75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6751db-2156-4bab-8156-e7d2eec5baa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c553ba4-7458-42a1-94ae-ec435ce004fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8189ef-79d9-4ecb-8fcf-77bb6a2a5770",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca79a589-03b1-4ea0-b212-fc247c38431c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "17a75786-e4aa-439b-979e-46ebad13261a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "730fc480-393c-4e67-a6f0-f5b5688e9bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6c112bc-73db-4f92-a482-ddd796ecafdc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ebda4d8b-b9e3-44ab-b714-deec7a7419c3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9fefbf6d-1019-43cb-b3dc-bc5b7bbecc62",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa99f97-fa93-48f8-a139-a6fa97568aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca7a3227-db8e-4e77-a95c-361674d107ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e01fc7d8-455f-4536-88d8-d25979e910ff",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85833ea3-9199-4fe4-bd10-329446f853f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6b5f836e-7ca6-419b-9f17-e12985d3c76f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f60bf4a4-1f98-4816-9da1-12256b2f909b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b7043ab0-45e3-4ed2-9c6f-9068d9c94421",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "646e657c-e330-4cc0-a20c-8493e57698d5"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7b93b5be-9f25-417b-b256-aec3ef69beed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bfb6d389-b189-4d73-923d-b3c81eed5f79"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c4e490c0-78fd-4b23-bb87-79a80d95c441",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "921f0d4e-aed5-4d98-90ad-29f20b7d1c90"
                }
              }
            ]
          },
          {
            "id": "5b9d3e39-215a-4366-9129-479efe8b02ea",
            "name": "Positive Testing",
            "item": [
              {
                "id": "382ed375-1383-4ff1-958b-21ac5439bdb6",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "84639199-1d80-4f2b-b699-1a67d6ff05f2",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f519db10-bed9-49a5-8e3f-3d87b8100aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d8c80a9a-9ff8-43b5-b0c1-afcb84e43c85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57ba223-3a47-4f16-9517-bd4e778e9a5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1856b01-10e1-43ed-92da-40a76607c8c9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "06c6f87f-397c-4c9f-90dd-e30ee78fba7f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67dcffc6-9f49-4bd8-9344-ddddc35c16df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7963d400-c4f2-42bb-9f69-14848767ca3c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a107bdb8-c1cf-4084-82ac-43c0bcd756fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "afd88b96-c995-4672-bb4e-a2c9c32ed378"
                    }
                  }
                ]
              },
              {
                "id": "8936204d-d674-4461-8ab8-556d3633ceb3",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fbff9a43-bdb2-46c5-86b5-ccc990cfa397",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fbd287c2-47b3-48a1-aefe-ffb016d98670"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e40dfbb2-26ac-4f6b-a833-e07b0f59c80d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "767d1ea9-1495-44d2-bfdb-74ea01b3db14"
                    }
                  }
                ]
              },
              {
                "id": "8ed91d21-5047-4fa4-840c-dc37cab4bbb3",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "36b654ab-6179-45f5-9fd5-1f4f96cf2826",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e2abddb1-9a97-41cb-b03d-d071c007322f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9353f6c2-9d32-436a-b80c-f9ff32a2bfc6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "daff4661-6b0e-44ad-9c30-77f9a793bc44"
                    }
                  }
                ]
              },
              {
                "id": "5c96a498-479e-46ee-a6d3-32939cdf27ba",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18b57d3c-590b-4726-8ebd-e6dcb440d5b0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9521631c-1d45-45c3-a505-8305314e9589"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "50ce2b6b-7c2e-4e85-b7bc-211cc63dc0a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4942c393-c47a-4392-81aa-4b9644f0c9c2"
                    }
                  }
                ]
              },
              {
                "id": "769f78e0-3e40-4058-82e7-f85dbf41e575",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3890a58c-db43-40d3-b413-3e645810abb5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9d4e9b03-b3a8-48a8-910b-292166d3814a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddf81ee2-58b6-476c-bcbf-a56334d6094a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "80ca448b-5647-424d-a301-198f36fc05ed"
                    }
                  }
                ]
              },
              {
                "id": "5fc57bd5-5bcf-43de-bda5-2d458c420895",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a1a1bf99-63bc-4665-9fb9-0bc9526c5e23",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c66b6fa4-504e-4b85-b15d-05844b05fd02"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01e3570c-de98-4d65-a020-dad4d72467b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "2e1efadd-51d9-43c4-bd0a-e896c6d96aa2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "765ed0a4-ced6-4f14-aa37-43c0465c363f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2ce2c48e-605a-4084-af42-98afba261cb1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c30385bf-60da-4a7a-8092-7b71a6b7513b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a49efabe-4d0f-49d3-bea1-8f9af97a3e48"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f58227e0-f8a4-4921-b127-63e8626d5bbf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "8aa74818-3e75-43df-9a2f-cd3ed201c8c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35fcb0c3-955b-4ed8-8d77-5bb6c2d11d6f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4b2c884-a743-47a4-bb6e-b5720fd029c5"
            }
          }
        ]
      },
      {
        "id": "bea4d62a-8fd1-4c0f-b15e-840db24f6443",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "257a46f2-ce44-4292-b693-02ae6d4d04df",
            "name": "Negative Testing",
            "item": [
              {
                "id": "992cfd27-2bb4-4fce-93be-5fe5f6aa06ab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "21b74251-0bb9-49e9-9405-ed45f634c924",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c409ddfa-89a1-4baf-90e7-96b9b8f78025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8def10ff-bc69-461c-a32b-3c14d8513331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1116187-0cb3-4984-a6b5-4d92d97f9948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1838e5bb-58e8-4a7c-980b-c4c9ef9d82fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df5a4bdf-0eb1-45cf-9ddf-3fed8855a3b7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b62772-db0a-4979-b140-325a77136879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3662ad4b-aee6-4708-9021-d6482c2734ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f9b2482-53e3-4a6d-8039-3eb114b5b97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b995be75-126d-484b-b12a-75c88023f4e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0190e072-d74d-487a-9e60-dab9092cd26b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a948ce7e-2d6d-4bb0-bfb8-df53446ddfc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28811410-12a0-48bc-8a5c-c40b50a14018"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f37959-1cc5-4384-aee9-5635ecad3b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8cedd30-35c9-431c-b290-d7919790b964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2e33983-60d9-4b4c-bcf4-ba5ecd44bd2b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aee7de9-666f-42b6-a446-28554ae2d6b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834d54bf-1f69-4f5a-9e67-2dc856641a5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "247f6d06-1e8b-4f05-9650-4046a65a7472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "12f80a50-993a-4a60-8a2f-55a0910b3c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deeb51e7-d761-4203-aff9-e50687cd76b3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7188f80-815b-4bf1-b004-b9baa2964d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764145ab-bb0b-469e-9799-78f53405bf87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "889daa35-e09a-4e6e-8aaa-14a18eea45da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba475ccc-00dc-4e95-8750-98af711d89c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffffe9cf-a476-48d2-bb35-22d6f65be236",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7e7e09-18bf-406c-ad15-476675c51fa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6ea209-e06e-4b37-b919-9796fd0a3156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b78f593-9bfa-48d5-99d3-774ba310e8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "598594e8-f178-4b55-96ca-22a18ba0a47f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9df4f8a-5e1b-4d63-aca1-48084081f1ee",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffa79eab-5490-4968-ac85-605ed4779a81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab000a6-6972-4e2c-b4e7-5495624c8396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348f4166-0911-4c2e-a6d4-31a905cc3fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "06c78d77-8606-41b8-b0f5-8cd329745618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019b0267-b6d6-49ec-b1f9-77249d4ae469",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4094ce-bd90-424d-9443-203a01bfdf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69d22975-7fea-454c-868e-3cc03a6db959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd71cc29-aad8-4de3-8205-e78e2e40d7f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b154c3f9-2626-4f75-8f48-290553833f60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2d53400-ee06-41a0-b376-0bf80f84dc0d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99c24eb-b684-4997-88a2-3d803d706df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97409b53-cc5c-4a18-a311-9e5033121bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a48a5b4-6a5d-4f98-9489-7f9c499ce7bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcfed34c-c10e-4170-80eb-cd6f24dfc068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b479e7d-925e-4f09-b255-f8cca3de8bd2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41e684f2-e13a-4ffc-8a45-cd3dd15c5b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f436e9-29bb-4e63-b418-b735faa1fbe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c58e96b-50c4-4faf-94b0-a39f808f32cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "256e47aa-de3d-433c-8efb-8aff5b4b8efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e86fc123-1330-4dd7-bc5f-82e6494e01fd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4465e7c5-2951-4c1a-8eaf-325deab19740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2e76490-634f-41ab-b478-cc19f2ffa981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ae2d60-fa12-4e79-a58f-2281a5c5c54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ea3cafc1-a47d-413c-b7ae-2ff98dfc45e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa7aa54-ae39-4c4a-ba2e-5b82a96384d7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480193b9-3e07-4ec5-82d9-0ac6f0854e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "056377cc-a4e4-478c-8181-21b0f6d016cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee87101d-5ce1-401c-9780-7ad41fa1dd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f43acfe3-6be7-4296-a687-7d01aafcef47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fc0665f-e0b3-4d06-887e-c690cac3cbe1",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc0ff6f-42e4-4757-b54e-a97a61c5a310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d6458b1-4cf5-4a0d-a624-c30e93e8fada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc6c652a-5e12-4e44-9090-1213e0dcc683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "67d860c3-b446-4352-8692-a9cd2fab1036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2a8bc2-26ce-48a8-874d-52374d48d62e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c36c25c-a9f7-409a-bc8f-ae93c0835e52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e2ccc0-efa4-42eb-8713-6a9fd483c03e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40ee793a-38e5-461e-b7d0-075f82d0b13b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "99af1a7e-53e9-41b7-9f0a-bf1e23337c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c142aa8-ac97-4442-9bd7-26914adb036a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b65c747-e2ba-4916-b88b-7cd6bc377f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b553926c-495e-44b1-8d8a-129d9efa7074"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e9c3db1-1e63-4780-8833-e7b44fa3ee87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "485ed12d-ce41-44b6-ab9b-8153731d57ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c1e99c-2fbe-482b-aa4a-3272cf54e8bd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a3d597-cf0f-465b-a304-317f9f9bc78f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49656f2b-96ca-43b7-9980-ddea3eb72f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6bd0fe-9862-4945-8cf2-d842ad13c5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5abb81a-22c5-43dd-a599-79087ff9835f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983b22eb-d509-44ee-b592-5a527384cfcb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffaa356-cb73-440a-b45b-7b26855acf9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75ebde8-d1a6-4f6b-8a7e-c13625e6d89a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09d8d040-16ab-4c3c-b490-4aa202c99dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "61257a1b-fbdb-46cf-bf43-5b107223701f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2488226-d76f-428b-9378-705218688018",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aaf8eea-5b3a-47ca-ba0f-401adf33cea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "feaaee5d-3585-40b2-a15f-0ea1864c6ee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743e6fa3-933e-4f88-a28d-49b06a563da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3d978be-0a2a-4b98-92c7-39d7a451bdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8f149f-423b-447d-8e5e-734e86e587b5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5fc2a84-907c-409d-aa51-b440c07cc305",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "787eb7be-2058-41b3-83ed-79a4a302be11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b55b0ba6-1cc1-43d3-8838-47065075021a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a42c9ff5-0e39-4ee9-9729-d9890f6bbfe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6993f45-eb93-4531-a354-87cfc699ce0f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2b1eb92-4f15-47a7-8444-a488e61754cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c71c7b07-bbdc-4ca8-97b3-56f4c493bda2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555cd394-1791-4287-852a-f93a8b137fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b8a9f03-5ee3-4b22-ba7a-b965a620f709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c1be8e0-43ea-40fd-adc2-542c93739e01",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a5ef817-4121-46e6-b15f-cbfbecaf7858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05423ee4-9700-49d9-802d-07096247ff10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b5725d-a369-46a4-b986-b3e6644bf2c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3897a6-d8a6-4942-86bb-46e75bd0e461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b381410b-0cb8-48d1-a116-fc6a25835ebc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b873b5ae-33f9-4ea9-9300-5c44b7617816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cba6916-17b9-4596-b231-7bed9b7ed79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a51de90-e15c-4ab6-b5ee-81d56dc17946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ce43708-38e8-4b93-968e-e94fc730ee82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85380a8-e8be-4e68-8265-a320dc96b590",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58496a48-eca4-4824-a695-531dcdb9e764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "800727d6-b450-40a1-8b93-71cc4be46d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba11d0d-8fb1-494d-a476-e8ec9295e83e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5330e3-9c06-401c-9386-dcf53ab3d383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "122b11be-b934-4f0a-831b-163d4b0e6af5",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6307b2bc-0d6e-460b-8ec4-c08cfa11e339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f519927-8e3b-4f51-b008-e7822df2f5fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cc74d2-418e-4cd6-9213-0dde94e9b8fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71cf891a-8487-4735-8fee-a2194d3031b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a30f19df-c814-496a-b360-89f07021a73f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02ca0135-ed92-41bf-896b-ef8adf1694de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2fbf3c1-436d-4adc-b1bd-0950d703cee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c00b3f4-226a-430b-91be-40f89562d6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6137fc34-084d-4501-be10-0280bee9e63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aba0627-b0f6-46f6-b7e3-aa55261245bc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9aa72b-1a14-4a14-82c5-6aa056bf9b62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b8eea9d-e6c2-4d97-8979-068de1b2c5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "659e8472-6545-48ef-b250-54d87059fa08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "522f0931-4e8a-440e-9900-c82a43466f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3521f5-405d-489c-b0a3-577119655fe0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3eb524-1f2c-47dd-9925-0e52b5d0493f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57204679-fc59-4656-9fd9-6075e0c69b02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1dea8b4-2aa8-46ba-be6d-4dd43d4073cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0557dcf5-046c-4fe8-9900-c079cb6f5023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbf3ea9d-cff9-49ae-9a50-4f5a8fda0ac3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b00da6-8e44-4801-8e5c-d97a014ce035",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e8d6ef2-3cf0-4e7c-b1ca-12b1631e2474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46126c08-6a64-4af1-8ae5-12a2e131144c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9da1728-6f9d-43a6-b555-8a34c3ae1828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fa12544-6048-41f6-9d81-57cdd27a1d6f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "154a6fe3-61fe-4aa1-bc81-121f813031a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f988d230-f635-458a-bac7-4ed9fcfad4c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4394c839-f7b6-4401-a9eb-bdbce156e950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7d8183f0-d4bc-4f82-827b-0354580a69d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a717c95c-2b09-4315-92b5-35e5d55ff2f3",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ceead7-5eb9-40e2-b91c-f62e30a82788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "538c824c-6820-4063-af3d-50522e0e4548"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787b77bc-c1e4-4ada-a42f-45bb8c7c724a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "254f9f7f-9018-4abd-9b2c-4b18d243a19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7407b0-2cd5-45fc-8e16-11e123d8715b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fed66a-daf5-4d1e-87df-871172501c92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e094f62-345a-4267-935d-1d6a91619083"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cccd91e-39ec-4a7d-8c29-0b84c0a3aa48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5889b5e-a831-4cdd-aa11-4c671d011992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22d63d5-13bd-4fce-b72d-708b163124b9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8914340b-c896-4e92-acca-48b7096fd7f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f2b93bd-2473-4780-83cf-51942e30a35a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ceecbc-cbc9-43ba-9ca4-7efe433b80a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b472d928-24f2-478a-b4d3-e1009dcc17ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "566000f0-1bdb-4755-bae1-46b82fc7f98f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbcb948c-a724-4ea5-b60e-59a721862bc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3bd9292-2e8c-4406-ab77-d68f69f18fb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f0dc740-1881-48b8-b13a-b31324da527a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fea210be-b377-41fe-b79e-b530ce564135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeea387a-0b13-4755-8e05-a9092ee98872",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5171c47-ec54-43f4-b552-26abff624097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b31558cc-d22b-4829-a000-dea5af32ccbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46377c46-9008-49c1-b0c5-4acc9c2292db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8c02e22-e709-4e61-9b72-469901738be3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b486117a-2286-4cea-8aea-63020d5eb2f2",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb298fb9-6475-4930-a356-af80bf463558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d669682e-371e-4e96-b811-c79f02b7be92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fd68ebb-d806-4a36-90b4-23a32909dcdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "de6bfa45-7c9e-45a0-a780-707a9b6c8d53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70abd58d-6e6b-4ae1-8937-9a87e20b7695",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b1a170-c376-48b0-be24-46935e384a01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8498a83-4ad5-4bfd-8003-730fffb2fb77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9dd9429-7580-40af-aa24-2f458f99efc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d7ff165-2e38-4aa1-a434-0fdde803775b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6de46d1-3caf-4fba-9cb2-2f28b54ac1af",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8af53c9-ebe4-4da9-90ef-a7ea547879bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9dfa931-3079-4a69-bdb8-fc285ce89733"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7e994f2-5bb9-4ef1-9d14-8d581c039dbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2f4efa-3ebc-4e8d-b943-4d36e1648f3a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "bc183e60-9588-41dd-ae8c-6f02ff76b41d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3acac1b-36a5-4053-b525-9c39455a4fb9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1805a728-db16-4aac-b7db-3af6356e0f07",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2f2deace-9c7e-4600-a252-b876b6650f23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55897764-f729-4f75-a6c4-93addaee0927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c85948d3-72ff-44a8-bf25-30b0fc086b9e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7690881e-ca03-4e37-aefc-9349ec3110c5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dc4a3442-6d36-49da-b636-742421db25e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "40da29ca-3f37-4728-b6b2-6c3f10f4b59c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "549d027c-5551-4867-833e-9744ba96eda8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "80103c8b-b6b8-4eb5-9eb2-909bdc62ed74",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "95aef87c-ad4e-4c74-8c4c-5d7e3ae189d0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd59457d-73a1-4c53-84a3-0b2beaaad098",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c71cbca2-49f3-4682-a066-7dbe7fac1f9a"
            }
          }
        ]
      },
      {
        "id": "bd2459f8-faec-4baa-ad86-133d0474a6d4",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "40721a06-97a3-44f2-a5c4-14715d569716",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4065d657-c302-4e52-b91e-09a750ac323c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e7aa14d5-bfdf-492d-8322-f3092996a810",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "847918ba-0c24-4dfd-9187-a033eaa2a2f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02754816-16bb-462e-9aaa-fee6283ef4cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f213a5-eb37-46d6-97bd-5b25c30ba08c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2292c0f6-6798-421b-82af-1567f7ecba52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20933b65-9179-41b6-a352-741a27e1ba59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c8dfbcd-f1b0-4d36-957f-742030eb467f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0df670d6-3879-4f33-9645-93067a522931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55621a0-81a5-484f-ae86-d273dc8a30d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48d9ea6-f026-426e-965d-cbc3ffd24dc5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56a0140-d8e5-46f5-9989-14f3d518374a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c1f892-ae89-43bc-8a44-e17d29231674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f642569-467e-4a37-b902-5540dc57d5d6",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3388fb3b-f91c-44a0-b8cc-b07af976d28d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16495e92-fa1b-4ec8-87e3-c42316a79ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da49cf48-7332-4fc6-8d17-33439cae8af7",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82047e4b-67d1-4f79-b202-f212a38b6392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "412d410e-71d9-4fc4-a23d-7e1261e68f1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5888d58-285a-4bff-b5d0-1f79c3c23e0a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e393113b-0217-4000-89bc-c132422db6e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32581d3f-d47a-4b8a-8fe9-684cc1ac843a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98d9d80-537c-41b8-8d63-6d74491f9925",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d44c3607-04d4-4e01-9c9d-53282444e55d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05661f98-b5af-4e07-9e3b-2d07bfa6ad55",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387db338-bcf4-4d0c-8e13-3c1b33df2404",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bac03b7b-676c-4579-8fdd-7878d564059c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "153c151d-af39-4696-b37d-b50487ec0061",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35d4daac-af1e-4980-bb3c-e270bd241d08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513bcfc7-7449-4b88-be61-f4d15f691178",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e217f2-5575-4efe-9050-e61ba21fd810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1bddead6-171e-4107-9c27-e7b5a8f119b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce75446c-b631-4629-b3f7-b77b1587e9aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b683ead5-08b8-4ebf-b909-e176a691dd67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f6f661-a62e-4ee6-b1ec-61c4ccce0551",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a2c699-8ed4-4aa6-abfe-2970915ff8f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "845df4d7-c872-4aca-a803-5a0d7530226a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ac7c6be-c640-4f70-beea-4e8faa3ef656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87072728-1cd5-458a-be3a-06b2f477d521"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc56b690-f1d5-4a0c-9143-e53b9e67d2a8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7136d52d-6914-4d73-8218-c97ebb90a409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b620cf8e-9359-4aef-ba11-2b5d4c297785"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bf3d09-f8c4-402d-b633-0a20e6364e9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a050d818-4da5-45ed-82e6-19a07e7f59f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195681aa-8ec7-406b-a252-f7264a625734",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82238dd2-deb0-40f2-bba1-c7e8aba6b3b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569304f1-6e1c-41ec-aaae-3e734d662ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e267cd8e-ac20-47af-9283-313a82a74cf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de2d2308-6e27-466a-b13a-260e74bb81e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99d7859-c692-4811-b0fc-029f2bb093d0",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "949e9c66-72b9-4c2a-96d2-f69960e50594",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6736b78-4fd4-488c-9541-3aa1a23c418f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff9044d-95ea-471b-b6e3-10171475c475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aec3e9d-44ff-4fef-a3d1-666a8215d5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8885972-a5f0-4ccb-8d71-9d54bdc46d5b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "812d6ecb-01ae-4db3-b8dc-e39712a632f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "218711b0-9948-4761-b070-124eda0a95fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d143b7cd-b0f6-4c81-b3b4-a6f46800c399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75527b44-c7b2-4bcf-8380-4bd9a48593f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c1b6a8-7643-4299-96e2-b8b8a76774e7",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a1669e-eb21-4127-827d-9dcfb8d14ec5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de88b12a-c9eb-433e-bc97-897c31ee9434"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "319e32e6-0ee9-412d-8bce-8183bc2c3498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf40625-f9b8-48ae-bb24-5290a5b269d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d55a91-4fd0-452e-8968-54629f83d077",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c6fbab-ba5f-47e3-ad85-0b923677f806",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec78b21e-f5c8-4ca5-be98-e2fd776d3688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "494c4053-97b4-43a1-bb46-c3da7fb8d18d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884a979f-4c76-4054-9067-c398d6f6d4f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9fd223e-62d1-4af1-85d0-aa423bd8c379",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffcf6e8f-b6ea-47b6-a3f8-9cba97e30087",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ab3134-94e0-4c9b-ae38-5f547928cb5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2e64705-95fe-42f5-9a19-fc07acb74027",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d6e92e8-5d83-4146-a069-49d5311fa8c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda382b4-fa9b-4941-b488-0260f9d2bb2a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff7110d6-c54d-4de6-89c8-63c7b868e206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c00eed0-2038-4cd8-8311-fa147541f3a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e187f491-922d-42e0-bb59-c8ca2412aa0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a83867c-cfaf-4dde-ab9b-3cd4c923884c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb75b78e-86ad-473f-8e61-7c909823c40f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a099570c-376f-4ff5-82a2-dbb8c4c3fab7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b19b7e3-771b-4dda-bd95-0baacac991aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "546b58e8-9f4b-4535-a53c-f02d8a0645db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09949e5c-bd60-4243-a97a-0479602611a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64f96a99-5b05-41dc-89af-f13529c64ffc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d4830ff-ab96-4521-a124-9049592f6fa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7cc00d-1daa-4cb2-ba95-d0155c2656ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2536049-1bf6-41ed-8016-a62a450ec58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0e3ff6-3cbc-44c5-8ef9-133a7610ebb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112cbc15-5372-4f76-a39f-33a5ef393034",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e00a6e-f900-4c28-b286-25e5f13c1c43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28f22593-0a31-41c4-9f77-9619e7e78f62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68317eed-2f1e-4935-adac-1f18de911f82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cef45ef5-844d-46bf-ada9-7ba1e3c26251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5b7aad1-0974-4d4f-abc5-292c06f35210",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e625ac83-5b73-4ee8-b5e5-e7cab3c5b621",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b32cbfe1-52f3-4c93-aeda-35debbd7fb96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d10fd8d3-d513-4363-8507-72c00b7fd0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac2bcab6-2feb-4825-91e7-c49273ca86bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66683e83-284c-40c9-9235-63a5f8604f88",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bedf2af1-fd68-4950-923c-b9f7e18c1cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19eb1e95-d85f-4ec4-aaaa-1058e24470a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b066a4-eeba-4c43-9cc3-ecff75ef373e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09241df-6bee-41ab-8bd1-5a9c90a778ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09708ec6-d620-4548-9f53-0184a0455e5a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "537d0649-2b6b-471a-942b-16d6616a5adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f0659b2-6815-4cb5-89e4-0b425fed6f11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "625ad9fc-c4d6-4df9-b29c-09db9f0118bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89487cfc-d91e-4070-9926-df7c892d28a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ce9ef8-72e5-4d59-84fe-256be31da00c",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dca7b22-57d5-49f3-aabd-27a2501ba80d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cebf824-5362-4bef-a2e5-a05de7ab0615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e245f27-0275-418d-b467-fbbd3b20f08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3108a04-6ceb-4628-b0b5-3d6cfbcf3de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5489261-5ca5-425c-a4b2-7f1322b002b7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b234ee3b-155d-41f5-830f-78a333b19f84",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "567cd601-3771-4f6c-8fcf-77ca89257781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "900f6cdf-998f-4939-83aa-85471487597b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d07e0fcf-b753-4c7b-802d-94a8ac2a7576"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a31c568-59b3-4087-816a-4b46606653c9",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7905e82c-f50f-4d63-ac00-aa2481793d33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f7bea9-7398-4ad5-951f-3b9fa1972343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dc869a6-c0e5-4f67-8b90-22990391eb26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7498cbd9-ada7-4a9e-a882-53125e3792a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7a5831-f8a0-4183-a433-fbd2511d6375",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6684076-bb33-4d29-9b6d-fcd1ba74103b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b5f009-9373-4aa2-bfd6-bcf7b7a05018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75355981-fbd7-42a6-ad3e-86f2091b1d1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fc5684f-a9b1-4692-b3bf-6e7f3df85606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02a00c00-b83d-48e5-aecf-8be414ee50dd",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9b7257-396a-4ea9-933c-b4968fb75c5d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6bde5c4e-05b2-46c6-b103-ed42dd4cac57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc8966cf-2f7b-4be6-953f-7d8b463632bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9498491a-0ead-4cd9-a8eb-80a34d6afdce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b755f7-1853-4c45-b0b3-83edd08a305a",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26be5e2e-1ad4-4428-8d84-7863cb96586f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "074773ea-17d4-4203-a059-9e85372500ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82820b93-d681-433c-ac70-e504b46ed471",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0dceafa5-5680-4f4d-b81f-37f362f903af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7853cd0a-24b2-48db-8f50-d15f91ed1fe2",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233f06e4-b4e2-4ef6-b63c-d437695d7240",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "257809a3-7c11-4b22-a6e8-2f05e193a70d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98eaff39-f68f-40a6-97d8-d73cf2579ca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9f153c8-42a5-4f22-b4cb-75fde1eb0f1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f9e013-5c78-4d11-908a-28dca0be3087",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5be00fb2-5747-4b9e-8ba7-02b6f52918b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e29d6ab-ffdb-4909-acc3-dc5286e685a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de61bef2-1e05-4d5b-8333-9de9e6bc6c2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13713ca5-7aa7-4f04-84c6-08141e0622a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f98a73-7971-4e55-87f2-44bf434cda6b",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa732c4e-ef8d-46d0-9415-d2901fedc2b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a24ee987-c5d2-41d1-b508-6c24725af190"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4c5a0a9-788d-4a13-b698-c38084b8bbc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14888d36-7f19-4584-a591-6b0b2fc43ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3894ee-af90-4a45-b510-7f2d4404ce2c",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d0b0441-76e6-4fcb-8482-4832f4e2fad0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "55f0e12d-fe4a-4b15-985d-7c2f12a3fe27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3737fcef-8843-4526-92e5-05185cf6a532",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d99b0e1-4762-4348-8db9-952b53101352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04dbdccc-77fb-4072-9b65-da762f89ae2e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df9a091-6333-4dee-aecb-424bbf042d9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cb6b0ec-9f7c-4fe3-ac9f-623685263623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b764e0d-2b38-4961-8129-b0bf445e28ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77b55a37-4dfa-4aba-a9b9-4188ede7e1d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bf0501-5fbe-4f42-8724-4a7c083ddd5d",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfff1fb7-aeb4-407a-aee7-34cdd501f6d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0eb8fb90-50fb-4b6b-b9e5-566b4f24b7ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6034382c-d7eb-4ffd-841a-80f512543955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c1a034-d3d0-4f0d-8dc4-55f532880c89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ab4a2c-86cb-40aa-869a-fb0937c0a9c6",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1c30b3-6483-47ae-a19d-fcf1fdaf8c19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0f7c882-460c-40d8-9234-e9958647ecfe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecbd48f6-103d-4db1-9968-6689a976fca1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e2203f-e502-411a-adf1-eb9d1066b932"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bff99b0-6d76-4c40-bd74-9a2282f9cfd3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36323ccc-2750-427f-8019-cd4c07d85c0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac7bda6-f7f4-4a5f-ad6a-61f836563d50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562c737e-bedf-457c-8a73-d4b46e2901a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35fa0e71-07bd-4e52-b825-a483e093515e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef9dac2-2cce-4936-9427-cdf8a04f1256",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103aa751-22e8-4dcc-bba8-3d15220f8a1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c835139-c72d-453a-98ab-a9216a9a593e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32a507c-0343-412b-9880-2b256f896083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80be0e69-e698-4f36-acf0-6844767e082d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ec94fc-56b8-4025-af22-25d3947cd1c8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7f4e84-75f6-4942-ae9e-8700d7f614eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73a50673-224a-466e-b10c-c8e94e0794c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f30b3e-425b-40dc-8cc3-d87d081da789",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1501ae9c-de83-466e-ac45-08c9b5c710ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2813928e-ad8f-47b2-9d38-e0c7a8f1fd76",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81268adf-1684-4b0e-8fda-a104cedc09cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8943a94b-229c-43d0-bafa-3be88ec240f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865569b2-fe2e-4e32-a9fc-172e31e07329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ef116e-1179-4b63-a56a-b0043d5b7c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc7f601-f7bc-4056-bf5a-f251db525927",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8cb3e4-b05a-4e47-a2fd-e11c6cf01409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "376cac5d-9383-4f04-a678-9ee80a8ac122"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85bbe2d2-a527-475a-8460-830949be6246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd925b5c-a72f-4fce-9723-55759bc5add6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e2f5f6a-958c-4d8a-95b4-f969dda35dd5",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55841002-0acb-4fd7-bcda-7d345e134f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761fa9b9-295d-43d8-b653-6415b12565f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "315914f2-6a01-4a4a-a960-bd3aa4bcbb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbb70d8-82c9-41b7-b47f-d33ee5d7069e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1567058-f7f6-48b5-83ef-744acfee115b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad69009-f1be-4237-9143-130febaaac22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e25b10c3-0bc5-4cac-a115-751beb66d1d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6ffbb56-6a35-409e-85a9-4b722004e211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9394c12-dc1c-4a32-850d-a07d016e8f42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a391d5-aaf7-4c60-8085-3beb2ae8db93",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2bfd715-ee28-4bdc-bcf6-2ccb20f8c719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b47b6cb9-d7a9-492c-87ca-11cc23e025a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "918af264-f837-4f3c-83d9-c481e326162b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f454c35f-9847-4eef-98a0-8e650ae6f948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0880b3-0a23-4ab2-87c8-1f8f3ef347b7",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a34e0947-0c2d-440a-8590-ad6c0c12c5ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94ce8a86-9843-4ce1-8963-2e7c86890274"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14676b65-7e0a-4852-9a6d-8d445f2f6df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a32da043-c5f3-468d-a878-a3f6b18de3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e1545e-cca4-4e2a-be6e-612a8d9e850c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2017d193-4f5e-4c06-9c09-cab233086b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c307bfc-0207-4176-8a98-03c02a0a310b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a823efd-6711-4d9d-8aa3-214fe1308428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c1f1820-8d5d-4b67-87d4-f7ad71f31c8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48b15a81-8b96-488b-b47a-0000c174c2a9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d904577-b6e7-4854-8158-60516a21a2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8b716a1-b7f6-41c3-bfd2-d5357d99b2e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75349354-01c1-4d9d-baed-1afcac91e4ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28b117d5-9f5c-4cb7-b900-bfe11758c7fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a2147f-451c-4f1a-aee1-74772da24ab3",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e211a4a7-7842-4a3d-8d3e-f09463bf9ef6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5deff3fe-7ce6-47aa-8281-34aff32dfc9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "243eb703-c72f-433c-9a49-f34dc3f8396b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5c7ccf-1f10-4ace-8a87-74eefb707c7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9a8466a-f2f9-4284-82cc-f605d4d2594c",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1421b6e1-ae63-468a-aa20-5c8b91254ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2550613e-b65d-4320-a59d-1595f6a03217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "355d130a-13ea-46c4-98a5-0296a6516ee3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab8b5af-8a68-48cf-995e-da0d87c04a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a135d258-f465-4b43-9cda-f3a3a6bf86b4",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0312ff78-a9fa-44e0-8bc8-ace9c0f048c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abaec05f-02f0-4ccb-8422-fea029ff2d39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c713ca-132b-4e8c-abea-11f6a5cf5a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8370832e-d30c-40e9-bbf8-fcef457909b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1a199cf-e0ca-46ab-b1d7-968be9673df7",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eb24ed2-e72e-4be6-83b5-a3846e146a61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "571ebf52-297d-4267-b828-7676c4ac9309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fb7eba-b219-456d-9325-7d571539c298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aed05c8-f761-4677-9d29-bfa1a285a84b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01073f1a-45db-4942-b6c8-6ada5c232171",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc5a7b65-2ec2-4a57-85f1-c5aa3d2a1e80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f369441b-8377-46d3-b9a3-38d6bad968d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "607c6c7b-f032-4590-997b-2aeee736ccdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "610420fe-3649-41e1-a896-93aa533032c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "592c8b1e-4832-40ec-a4f5-509408cbf3b7",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f247e70b-d7c4-4f16-a539-3ec36ed2ba62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f557cc7f-120d-4810-9446-b8bc59f2695e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4b40abc-fcab-4581-94cc-35c013e9593b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b71d73ea-e55f-44a8-893f-91b079a85250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2cd1b9-d188-4c41-8017-4030b47bc304",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f292a7b-fb6e-47cd-a741-2654c5a6e8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae63598-1078-4bd1-8be8-72be3c308114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8963d6-98c7-46e9-b421-1853671b6e43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79ff4c48-8cc6-4999-8986-0247b7a495e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7621bc91-172b-4d20-bbe9-fb7699ec791e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f153aa0-8d04-4728-b8fa-c8bb36cf4fd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06bdbe4-8f58-423d-88fa-2de6d8efc066"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c81512f-72c5-4289-8465-a210e835a941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e996e56-d0f7-45f2-a398-7bf390c2cbfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3f6819-1e21-4f80-9d10-194737aec2fc",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76d31d88-bbe3-4bbd-8fae-6585babe1de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248bb733-c8ba-43ad-a028-cca56ebe3a52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a364dadf-fcc1-4e39-8b55-9d8220642430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5caf1f6b-8a68-491d-8edd-e14305415511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1864d192-1c69-45bc-a4df-915a00d1e251",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9459149-cace-4d25-a94e-3a0bf8f2d569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ad0238b-3d64-4dc8-8d7d-b6390f8d0386"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea8b0228-5214-4aac-bd7d-ed349a524e6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7902ffc-8fef-4879-b02c-c5f2e94fb179"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b09e3ea-130a-4ed5-9998-6d9e9ddf3434",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83bfe1fa-56ed-40c5-93b5-c85c513ab9d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16ba1827-cbce-4906-a1e0-39b3ee4d3872"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06280ded-f161-4e21-94e6-ef78526cc9cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "594ec9ed-68a7-4957-85ae-8f7830ca5f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c50f9b6-6e88-49bb-90c8-51470d1f3234",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ebbc3fd-5fdc-4320-97e9-1e5f8cb2b7a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b141090-a550-4fc6-a237-5246f8fcb5a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49d5f20-9ddb-4c20-8875-4d63c76858c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2c1eb09-a72b-4cb8-af2d-ca340cf11e74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdf76bf-192c-4d6b-a629-b39e6f9c01b6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "209f6614-6b9d-4988-8da5-7989cd5cdacb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7772827d-fc3b-4f99-9201-f43f086ce77a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4648be-8bd9-43a4-922a-f4a9354bee78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "429bbaad-68cf-4dcb-863c-71bb23e457c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27db8402-51c5-4066-831c-909f9b338724",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a83a0d-f631-4711-b583-f8bf2939cd56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce21af0b-afd6-41d3-849e-648c234d3ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "459f4321-363f-4609-a101-f93cceaf3218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa6b849-4e15-4ea0-b430-afc0eb962fde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84d39dac-de8f-4050-b2cd-74f2c39b05e3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f720a9f-2c79-415b-bdbc-7034ca8dbce7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36261605-07ce-4d67-b7b6-072844946e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e1e178e-ecf4-42db-a813-81c577ab59f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea744f24-daf5-4d83-8a1a-9a36f1a4ac8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2b372f1-0578-4137-94ad-66b10b33144b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f29d51c-d8bb-449f-8a2e-4348354b187d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1641f438-697f-4325-a28e-3a18f16c0d83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2140833f-44f9-4725-a46f-c2a0e8f04dfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f84920d9-24dc-49a5-a233-28b9bd5cfd72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4141d014-c641-484d-91b4-91874d7d1755",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8720e32-c5d6-43af-9bba-8a4103e03408",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "181638a0-a08b-4fda-ae28-c42393afb3b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8906c19c-8f35-40f2-97b4-1e5d9e436545",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cd7e277-eb7c-4bf5-a242-9e5ee3ebf34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a2b10d5-fa10-4c38-b389-c4e9c3620a1b",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace09307-4cb3-482d-a1e0-b6c5cee313a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e9f7b4d-40b9-47ea-9e95-611c7c69a226"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1192395-15cf-4de2-b11d-80515edca0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06587b24-0fe2-433e-9077-23d974661d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b256e027-30bd-4ea8-abf0-2860a345393a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b0f562-dfaf-4c79-8ca8-7d2ce4687717",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6704ad9-ec7f-4fb2-91e9-9b89fa5c3fa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5e1922c-33e1-456d-8e7c-e91e5bc337da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9c6e0d-4a34-415d-88a1-2878d99ac1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39e0c4f7-3071-43ec-9629-878976bd04cf",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "150f9499-5a37-4e33-8ee2-970fdb1d0973",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "baf049b1-e17d-4c55-957d-29792a3ea164"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba96bf4-52ec-42c2-9a2c-54b30266e837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f58128a1-ed6c-4f6a-a7cf-1f9504ec80f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3043c3-ca13-4d57-ba11-e85c7d726cc0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31ebc00-f4f2-4c13-a3bd-54772b3a1754",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52b97238-fe90-47ff-a4b7-30336ae4c4f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b29c98b-b8c8-44af-92a2-9e04139b25cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62781b0b-c97e-4d8e-818d-27fa7f6ae791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1b66bd3-2402-4571-b7c5-a2dc443c5328",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc6d73fe-a7ed-4784-b767-ded23c889e4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3e1ac20-ff71-462f-8496-df24243a6a0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7792c9d9-ee0b-4068-96b0-e00bd4a24887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64e6b01-25d3-4cea-a142-5db1990ad6b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89b289cc-dd17-42d7-8a94-ee6e47dc1631",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e43a87e8-f409-4141-ab57-be4978ed5b12",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c15f4ac8-3564-4130-8c70-bcba51a7c638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f397bff5-3e01-46aa-8464-a9b619d0aa75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59b5d1ff-2f8e-43fc-863d-0549858fc462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8530e6b2-a679-4a94-b702-7194b2c4f30d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e6be57-30b7-4e9d-afe9-11f2f8ef6b32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d0db7c3-9c75-4e18-9dff-5ad3d37865b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3841f34c-b03b-408d-8ee7-9d26e058c9de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f149d70a-fa4a-43b5-8542-f0fd28882aec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5cde9d9-b8ec-4031-966c-a0b860f9731f",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "685b3d36-6233-4319-8376-ee1d9db2ee6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43bb5a26-2960-42d3-a206-62720d6d2f0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ba59e9-8629-434f-baa0-81205ef47d02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7384bff0-ba7e-4814-89b0-8a7850d60231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4134158-de6b-4652-889c-1a1f71e02072",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "682835a2-f336-44ed-b3c6-81df383de977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e39afb0d-e801-48cf-986e-e218842befb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4223c31d-3c53-4af8-a925-d1c9f80f5998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f4be33-4c9f-4d8a-8dc3-d786436a2519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9beaee30-c297-44fc-8bc7-54594cd76110",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "397f8365-6062-4bb8-9be5-935d2d9e1079",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b15fd6f1-59cc-4f83-bae3-757931f1ba15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db7bc06-e002-4a56-8905-e9b78a4ddcb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6879001f-7c1c-496d-9cec-7be395e8c363"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5aa946e-ed82-4cc5-aa80-ef358f5ba755",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde6092d-3aaf-46ca-8f7c-302726cb79c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b74edf8-fcda-4082-9de2-f7d655e7848b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fcd779d-15b1-477d-b90f-0d6ebf5117ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd35e835-f64c-4d0d-ae9a-85691e245e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "849f99fd-914e-4764-8027-6fbbeeeb4ac3",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f5c191-f102-4a45-8b02-880a1302c71f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a0b4465f-7aeb-4451-8a86-10b88dd53467"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8089c04f-d14d-40d8-bdef-5c69239d746c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1db8f58-551a-4985-ada3-6d54bb9eecdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e202a4f-7087-400b-b9ae-29a644f45508",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78626102-18c7-4307-8566-739c04d7072e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4154798-ae3e-4439-a051-f0be759afd4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a20ad73-cf84-4e41-bfdd-3a4000b98ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41473de6-27c3-4377-9ef0-a56b02f3b499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff9a66f1-4840-4920-9ef7-7aecc914ef69",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c80118-b274-49df-b8dd-dadfe978bac4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d45a4f60-b6f6-4cd8-bb97-586602a7121b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8063769c-94fa-49f0-a059-0fbc4f99ba0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98a0724-0db5-430a-b20f-94ce3651c212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f94deb-e503-47b4-ba08-20ef9915e0de",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d04d1d7e-10f9-4302-83a0-4130d6168169",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44349c4a-eaf0-45ca-8ad9-641736e7ba02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d3cf9b-b10c-4251-945f-51221641572c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9aeacd2f-276c-45dd-b898-4a7692caf2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94dc6511-565e-4440-b7af-a807d91174f8",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56894f59-ed35-454b-9972-3154fa6c203d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "87b53765-7077-4c64-b2d3-93546ab6a791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a1a2777-2dcb-4d04-a63d-1fb206f2e82e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b8c74b-8ee1-478c-85bf-0dccd743a73f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c5b6673-0e39-4dbd-afbb-731e359509b2",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "213c0e7c-11e5-4420-8622-8da4e007c6f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17d214a2-1d7a-48f8-afe3-fd61c0249874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1851e8d-e45c-4264-ba2c-610e7ef76987",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2f239ef-8d4d-4aaf-9f8c-8dea18d06bd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9988578-da7c-4aa9-8b59-27087a844d8b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04453b1d-4664-46cd-8d3b-9dba1db586a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "020210c7-f425-46f4-8067-fde56f175991"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66d53179-2943-45ce-8a52-59d82ff79941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9479a06-f849-49a5-85e9-c2cfbb4916ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d48c885-143d-4629-8a44-7b42b164dedc",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33a0c3f-030d-45f3-a6f8-baaf3ea3e7d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b7e94aa-19e5-49eb-b34f-c2ec3f482b3e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65aead2f-7031-49ce-bc56-7452c6e4240f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc80958c-5b8c-4d74-893d-6528ccafb222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866ae8a4-ee3f-40e0-a8d2-2cb0c9ee7fc3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62d2680a-0f57-4c66-a469-c76b704a1308",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f677fb6-90e4-4834-ae91-fae3e7339b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84d96d3e-d0a8-4f8c-8f83-560ba7789c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a87f2bda-dd66-4607-b35b-4dd3ce1ae621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "809bf732-ca0f-44bd-8886-90b7e7bf4184",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a1af84a-27a1-49e2-b636-1a3af4f66009",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ad67b96-ce8a-42b3-96f7-71d49dd4b6a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12ab8380-22ef-4e7d-bb77-475506dea373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d94252d-f19d-45f0-9adc-49cf9ba456bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de8bdb70-18d5-4f3e-b6fa-5763e4efe979",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f54344-9c8c-4f66-9564-38d2a3dcc1f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9672afd8-3638-4ed2-81c9-96d518520adc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26322b1e-15db-4c6f-966f-e5a80a197b49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5489a21-879b-4cb8-805e-590f971574b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7903ed5b-2fff-4bc6-8373-cfdf1fd8552d",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26d9b15-9cd3-4cc7-afab-b4244f2f8dbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72939507-99b5-4438-9b11-d63144cba993"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f62b6f-fb3c-4775-a309-58bba20b38fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0edab2f3-302b-47c7-87b8-bfc4e7bc920a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8fc6bb-fa12-4f56-a779-24aa3a9bc6b2",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77607fc6-9380-4ba2-9617-f17312163c6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8353af1d-2faf-425d-b8eb-d6b543543c08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "249a4b5b-507c-4e6e-90f8-2eecb17d8aed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14dc96f8-5825-4db0-af95-989f6e9fa3d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3d9fcf4-6bfb-463f-a375-2d5249d8a089",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe26ddf2-6d21-478c-b3dc-847d75192211",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "61daae16-7a6f-4747-aacd-b70cc1dcd357"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5ff8636-6692-4bad-82a6-a9daa27cb06a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc419aa-8901-4b20-8ee5-dd77c304eec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb59343a-0026-4519-ab3e-9efc1bc89e54",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4319b5bf-acab-427e-860e-87e138fafbfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40120afb-cec9-4de3-9a92-478e7cfc4365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe6186a-ce3f-4ed8-878a-f06260056d00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06a7ffdf-a3c1-415f-a8ce-5a9e38279396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f1de5e-22de-409f-9ca1-1cb504251557",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aed0b103-99b2-452d-98d9-af08a079b64b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dbac3dc-3946-45ac-90a3-1eb5e4aca19b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73216ac-c864-4b7d-8a63-b0bcba3f085b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f032d105-7513-4470-9dea-b947d91629cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bde582-a791-4550-9cab-c327a2a10c6c",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212c7548-0749-429f-a464-f1e05af28697",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d6814740-2afa-480c-b49e-4e40f6ffaedd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c334ed-d7c1-4b44-948f-612f5d91e9b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b832fb01-0486-47ef-bf8a-048a16dd1618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e377ad-26a6-47b0-8c35-3077ad217c77",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32492bfb-7494-46c6-b2cc-8c9f44ee2359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a18e7a8d-ed7c-4e6d-b4fa-23d9ecadd98c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f48bbf5e-6aa7-4d73-8b19-1089b798b23a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2c63454-7730-49e7-ad38-918ed46bf4d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6201626-08e5-4ee5-af6e-d4354fe47bc1",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8dcb17-14d4-49b6-98e9-5b8c0b7b268b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66719af3-be7c-4f80-8e5c-837f9010addf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "262b8e83-94c2-4435-ad0b-66d6e5de12b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af043ba0-abed-4a4b-92ae-ad7c106d385c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6461d33e-8dfd-4b3f-bc54-06b569ccc38b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e6e8fe-8c57-4a3c-8c8d-a870892529a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "698753a3-4d35-4d14-9597-48d501ca28cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d62737-490d-425e-a89e-490e3ec7b37e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da3b61cb-f72c-47b9-b1f3-12e514bc38b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3596c8f6-d31f-42f2-817c-98a2fc10d494",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa5c886-4923-40bf-8d50-a39a4e3f4b6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f2f7ba8-2390-45bf-b7a0-2ac151302553"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca79d0a5-eeb4-41af-afb2-5cf82e0c8caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b25f5b-d7a3-4588-b6bd-e3d2bec21df8"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "372cff8b-a7f2-4b40-9279-a520396ee201",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "236192ee-85ce-4c42-8249-573c252b7639"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "96a37bfb-c5d7-48f0-8d5a-d9cff34a3e07",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c0d086cd-a4ff-4b78-8f62-7a39052a2e84"
                    }
                  }
                ]
              },
              {
                "id": "2960a9b5-2182-4e72-a39c-22581c86c512",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60b4f578-c1aa-4487-95a7-fa607778a026",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39199cb9-0ff6-479e-a958-055c2213d77b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4f581747-829c-4561-9a66-3b41597abaa9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a677f4e-3459-4763-a2f5-4824921ad96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f82f6cc-466e-4e8f-adc4-6cd0ce8f60c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "dedacf73-91d4-49bd-b15b-d8ff11072604",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fb454492-3166-41d1-b0dc-b4070206ec95"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77fd095f-c534-4a3c-b6d8-091045d91057",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f1ec55b-4fc6-4227-ae33-f62c28ec2153"
                    }
                  }
                ]
              },
              {
                "id": "ce33dd00-ed8a-44d9-950f-ec1c1f774862",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3e507674-a980-43b1-981b-7c0f13c9701f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cdca6ff-d888-4e00-a7dc-7f86cf72acc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "69d5a986-5f84-4ed3-8674-d9f27578c2ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619bcc20-d34e-4203-b0c0-3ded7fb61ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a305d797-6fd5-4a84-9069-b953d420e846"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a51f77cd-640f-4964-af68-7fbfa2545aa1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e1cf5dff-8568-4ee7-903c-54aa27934b77",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "86944815-5dd9-4112-adfb-b8080e226130",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "04d655af-8c21-4324-8653-9ec988bf0b42"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f55d2b3f-c5ff-495b-8969-9836e541a1c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "92d68b62-ac35-4624-8258-6350a5594ea0"
                    }
                  }
                ]
              },
              {
                "id": "a0756309-c2be-4145-afd1-486443ea0f50",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da7e0a67-1196-4cde-9b75-92b380cb1d96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cabb860f-f8e8-4abe-9998-da6da016a022"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b573f443-ab0b-408d-989c-74c3f55cfb8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a5425eb2-7bfb-4d7f-bf5a-02a67c5e1b6d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd522b9d-0c5c-4059-aac2-7b3aa523cf69",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3e70a20c-f3fb-4fee-bac3-9879e8d93c03"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "062534a8-942a-4ba6-9f34-bd48e09e97b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e020b773-8674-4e12-b429-e5e8d9c72ff2"
            }
          }
        ]
      },
      {
        "id": "ae9268a8-5f6c-43f0-a1ff-8b14eac7de19",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cfc39574-99f6-4a06-b718-e4970f346c6d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "665f3861-99b0-4ca8-a88b-f677ff066719",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5ac52083-e1c1-4fe6-bc16-6069b6869821",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3320f896-feeb-4c9b-9786-615f62ff5bc5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ab03ef6-dc3d-411e-9295-020d30b2e460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0a359e-955e-48a3-83c3-df0eb8b45a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2143e318-c4f3-4010-bfb7-53bbb723613c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ffb4039-2989-45f8-8406-4b0cfdb9851c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27a300f4-e21b-4b97-a4f8-56e066806a05"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c56dcdcb-b180-4b66-954b-78fa6f855377",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e30fbff-afe2-4384-a173-462c8f75273c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ae53c8c-78bd-40dd-b34a-4e1fb705ae21",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e3f035fd-cb09-4a4e-9b44-73c5f5ca59fc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ae3df2c6-673c-4806-bd0b-034e9d11073c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f48ff7c9-d868-4b3e-a63d-fcf4cda1983a"
            }
          }
        ]
      },
      {
        "id": "6f159a62-eb14-41cf-a018-63a948a17323",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e2fe8253-5110-4d00-9115-c16937710071",
            "name": "Negative Testing",
            "item": [
              {
                "id": "921ecb1d-5ca1-43fd-a5a6-fd236b6d1710",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ed6d44c7-161b-42ab-8771-89abd4fb5d0d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc5d148-35b8-49cc-a706-fca7dbcf4538",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b06e633-2555-4af0-8a9c-435a1c4fe854"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6a92f8-c52c-4f80-a59e-ea90c5c54a09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a58ca519-d835-438f-96df-a784f9ae3aae"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4753b731-2103-419a-805c-1ff0c64c2dab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da1d6517-7d51-412b-bc98-086fedec3b71"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bc86175c-61f5-4cfe-af2f-803c7a43fc8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b165899-68fd-4749-9450-3f176103fcf4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cbb1cb49-40cb-4f71-b9d7-34397da989a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "36f5336b-5fa9-4e59-b859-4c7a74bd2194"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75b7bb41-7b5d-45c1-be0d-d67752540057",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d26dd93a-c21f-46ee-b038-ed089a412395"
            }
          }
        ]
      },
      {
        "id": "4a285118-c409-4087-b8df-68cef959a2d4",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "edb33b86-c579-497f-8a99-98759c209b28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "588d95a6-dd8a-4705-9968-a90e87825986",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "02a6a086-bd8a-4db7-9c0d-a630915ce4c6",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "237baa05-c559-4d3b-a94f-de4ffaa02093",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55b0f66f-ba87-446a-9672-d84bc20594ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49574497-91b7-4c86-ae01-d397f5ca444b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2aabece-ec33-4a16-ab50-296430bcb35f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "35f9a3f9-9d87-4270-a7c9-12b404289bec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea95a75c-c56b-4e26-8d64-8e7eed569a99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5cf4bd32-e882-40c2-a4b9-e079f935956c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f7b532b-2b94-49b3-ab80-c9eb5ac77b53"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "252ef049-0019-4d8d-8227-0ece792fce0e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "e321b311-c253-4045-b6ef-f59df181a228"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8c1efef9-dc7b-4c4f-a703-978c7bc91fcc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "08f3a521-eb23-41d0-ba22-338a2bc7ece3"
            }
          }
        ]
      },
      {
        "id": "e0653f13-6345-4b61-bc11-2fa756c82d55",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05eafcf3-988a-4db3-9201-2ccb4b4221b3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "859bc958-a509-434d-abea-b6dc3c3b0288",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f2638d52-2579-4ac6-858f-c2f7a17e4114",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "84f4a9f0-7bdf-4890-ad32-4d45b0541e6d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f0a63af7-b2ed-499b-b185-6fc4d6f6d491",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 68.7261904761904,
      "responseMin": 7,
      "responseMax": 1351,
      "responseSd": 118.67920792381447,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1725583350066,
      "completed": 1725583375701
    },
    "executions": [
      {
        "id": "78362c75-986c-410c-866f-f4cf79820242",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "111e9de0-e720-478f-b7e6-1eca3406881e",
          "httpRequestId": "5cda7281-3ad3-4513-97fa-86652a2e0844"
        },
        "item": {
          "id": "78362c75-986c-410c-866f-f4cf79820242",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "39b9a276-6223-42f4-875f-f49a400f1387",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "f2aeca0c-9732-4851-aac3-3801ff6bc5f1",
        "cursor": {
          "ref": "cc2f4e1c-407b-4a88-9a95-a4b2dcf65679",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c7fbb606-0555-4d80-a865-2e3c401250ed"
        },
        "item": {
          "id": "f2aeca0c-9732-4851-aac3-3801ff6bc5f1",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "031765de-436f-4550-a29b-9fd0d85aecf1",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "adf05499-962a-4f72-b930-f45430dc6ccf",
        "cursor": {
          "ref": "854a575d-9b77-4299-9b17-433c8831463b",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a4d35349-5e44-4038-b7df-a4a2eea96a98"
        },
        "item": {
          "id": "adf05499-962a-4f72-b930-f45430dc6ccf",
          "name": "did_json"
        },
        "response": {
          "id": "7c5ac40f-8f5d-4777-921c-c3fd6c6ec0bf",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3301f35a-1bd1-492a-98e6-0c32c8e60765",
        "cursor": {
          "ref": "21a5058d-035c-4466-b29f-c90b7a0b59e9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7ae71ca2-16a0-46a6-941f-32c3ce065e6c"
        },
        "item": {
          "id": "3301f35a-1bd1-492a-98e6-0c32c8e60765",
          "name": "did:invalid"
        },
        "response": {
          "id": "f3eff517-297c-4a43-a38c-f151f6602145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3301f35a-1bd1-492a-98e6-0c32c8e60765",
        "cursor": {
          "ref": "21a5058d-035c-4466-b29f-c90b7a0b59e9",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7ae71ca2-16a0-46a6-941f-32c3ce065e6c"
        },
        "item": {
          "id": "3301f35a-1bd1-492a-98e6-0c32c8e60765",
          "name": "did:invalid"
        },
        "response": {
          "id": "f3eff517-297c-4a43-a38c-f151f6602145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40094c4c-90b7-4b03-987a-4a30e4ef22b4",
        "cursor": {
          "ref": "908c224a-92d3-4edb-a92e-6d4af446b1f9",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f6f37114-a23a-4d6b-8dc5-dc94f6093b2e"
        },
        "item": {
          "id": "40094c4c-90b7-4b03-987a-4a30e4ef22b4",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "f8403cbe-a0b2-48a1-b263-183039115673",
          "status": "Not Found",
          "code": 404,
          "responseTime": 189,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd503a59-2a0f-49d2-a9c2-f8b0280a2814",
        "cursor": {
          "ref": "a467c18d-45b6-4133-9215-f407a4845a7c",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9fe1b471-6c6b-4ae1-88cb-ff8cb0161e0a"
        },
        "item": {
          "id": "bd503a59-2a0f-49d2-a9c2-f8b0280a2814",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "6fb9e348-2343-4dd5-aa08-21d1393b9302",
          "status": "Not Found",
          "code": 404,
          "responseTime": 29,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7784ed9c-87f3-4b1e-9f34-6fc18c802f0f",
        "cursor": {
          "ref": "16945d15-7a8f-48d1-b957-092fdf1aab75",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "168520fa-1291-4ccc-87dd-35882e4db98e"
        },
        "item": {
          "id": "7784ed9c-87f3-4b1e-9f34-6fc18c802f0f",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "307cb778-a994-4c42-ad01-3e5e679e58d6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e7c5ba-7671-4620-9413-b32c10279e5f",
        "cursor": {
          "ref": "d83a8292-64eb-4d3b-bb09-33e836e15abc",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b4c37f13-da16-4498-aae7-1120970a3be8"
        },
        "item": {
          "id": "86e7c5ba-7671-4620-9413-b32c10279e5f",
          "name": "identifiers"
        },
        "response": {
          "id": "f5a6e92c-076e-46d4-81f7-94fddbcdbcae",
          "status": "OK",
          "code": 200,
          "responseTime": 282,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0a9002a-a8b2-4d67-821c-5c8a38337594",
        "cursor": {
          "ref": "015bb082-4323-46bb-99b1-3f7c0565576c",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "033e2de7-0551-4257-922b-6bd18234bc73"
        },
        "item": {
          "id": "b0a9002a-a8b2-4d67-821c-5c8a38337594",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "13abb755-2f2c-45e4-846b-4eb4ede4d544",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "14495303-fb6f-47be-9dd8-ca43eddfcf51",
        "cursor": {
          "ref": "eca9a71d-bbed-448a-9770-29e4ce530add",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4241911f-853e-4e81-ab31-688d2fc770c4"
        },
        "item": {
          "id": "14495303-fb6f-47be-9dd8-ca43eddfcf51",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8eabab1e-6b2c-487e-848e-7e5e1d8a8450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "34084ad9-64b7-4baf-a74a-5eb314a1430a",
        "cursor": {
          "ref": "8f3fb630-84ea-4c79-a9d0-a9a29c766691",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a2be2a1e-5424-4982-ac54-4bfc932e2e57"
        },
        "item": {
          "id": "34084ad9-64b7-4baf-a74a-5eb314a1430a",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "e271a11f-a032-418e-86a9-182067d507b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "75acf9c0-4073-465c-8dba-52d008ad7cf5",
        "cursor": {
          "ref": "5c256b52-38ac-46f8-a63e-540540592258",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "0a492f1b-dd7e-425f-a46e-68a9b789fd62"
        },
        "item": {
          "id": "75acf9c0-4073-465c-8dba-52d008ad7cf5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "2a88dfb5-8e39-435d-a4c1-f29ba5e89faa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "a19ed3db-1682-4edf-bfc6-9a21a1349399",
        "cursor": {
          "ref": "fb6adb2b-1f73-4869-a7b6-2d1fae07403c",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b7a482a2-7858-4970-95c0-6a2391b418a1"
        },
        "item": {
          "id": "a19ed3db-1682-4edf-bfc6-9a21a1349399",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "206849a5-7afe-4cc4-9c9f-9f4e4f1568ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "32f28f9f-e2af-4946-8185-e518b310b663",
        "cursor": {
          "ref": "0ae9364a-0c6b-453f-acca-46fadf6fd538",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "dc3bcbb3-530e-465b-bf00-1fafdabe9205"
        },
        "item": {
          "id": "32f28f9f-e2af-4946-8185-e518b310b663",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "66d968c5-ba58-457d-8a14-3819187d45da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "d31554b4-a1bb-4201-bae0-7d0c51aa6bd0",
        "cursor": {
          "ref": "b04a6d0c-1d5a-4682-a29d-bf3ac7083583",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "15f434f2-29e3-4b46-b83c-23562d8867e8"
        },
        "item": {
          "id": "d31554b4-a1bb-4201-bae0-7d0c51aa6bd0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a4e2f0e7-43c6-4840-a2a7-5291c2f8db8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "305a50bf-23b8-4fef-b0d7-827bbf263321",
        "cursor": {
          "ref": "5c6e43ed-a8fa-4a69-91e8-b194a26970e2",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "d93e8765-5e09-457e-aeb3-828f7fcc6814"
        },
        "item": {
          "id": "305a50bf-23b8-4fef-b0d7-827bbf263321",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "b76ac97f-5c8f-4f74-a543-7464a5744171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "f35867c9-9dd9-425e-9bcb-08df9f326c53",
        "cursor": {
          "ref": "e756c388-bfd2-45e7-af54-21796d202b9f",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "08d07ef3-53cc-4e7f-8d39-b64dcf1eb728"
        },
        "item": {
          "id": "f35867c9-9dd9-425e-9bcb-08df9f326c53",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "59731c54-ef44-4e3c-a93b-e773d4497e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "b16a5fb0-8a79-4d68-99de-c14a31daf477",
        "cursor": {
          "ref": "ec6ad282-6ed8-4b91-b555-72814732337d",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a9073e1f-0114-4901-8d7b-21450e21d38f"
        },
        "item": {
          "id": "b16a5fb0-8a79-4d68-99de-c14a31daf477",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "c8c39acf-835e-4a8d-aaee-3315218bf2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "2edc5277-cda6-4d95-ae6a-5c90a67ed3e5",
        "cursor": {
          "ref": "ced94772-acb2-4757-98ac-67a49113ca06",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4dd563b1-4b7f-49c4-9512-44032d937a0b"
        },
        "item": {
          "id": "2edc5277-cda6-4d95-ae6a-5c90a67ed3e5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2dc025c3-a38a-4f1b-af21-cd8597a1f7c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "6daec15f-50b5-4b02-a48e-07474d2aa25b",
        "cursor": {
          "ref": "6ff20754-0f50-439c-8c28-1b089939c885",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "d1ba6902-3e3c-43bb-83c4-ceb0481bb662"
        },
        "item": {
          "id": "6daec15f-50b5-4b02-a48e-07474d2aa25b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "aac834a5-0e6e-4104-ba16-a004ae623e1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "efe0563d-dbf4-4fae-8d09-bd4d46b6814c",
        "cursor": {
          "ref": "0b25ff31-fde0-4c52-8cb5-783489eee129",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "d1c9dea5-8f0a-4cf6-bb8d-cc13e1e9a33e"
        },
        "item": {
          "id": "efe0563d-dbf4-4fae-8d09-bd4d46b6814c",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "c524455c-f628-4a98-a1ed-9f4b024effcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "e768b1c8-7fbc-4072-b59c-db58bda7b984",
        "cursor": {
          "ref": "e0cdcd68-d6b3-4287-8104-cf7e32266590",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "48831f36-f315-482a-9520-c5a1d2468bc2"
        },
        "item": {
          "id": "e768b1c8-7fbc-4072-b59c-db58bda7b984",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "d05087b2-02a8-4de9-b8fd-21e7dc2b11a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "17805b6a-0f50-4d16-97e7-54bffc56848e",
        "cursor": {
          "ref": "5f9fafd6-5a66-479a-b7e4-d8b2e98dd0c0",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "aa924a6e-d7fd-4534-af4a-19d62d057646"
        },
        "item": {
          "id": "17805b6a-0f50-4d16-97e7-54bffc56848e",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "22caa1c0-5d90-441c-8a47-09072ad43d9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "d5ee7964-88ac-44ac-a984-569bc592b631",
        "cursor": {
          "ref": "7c14d375-bb54-42d8-a8f6-1fb75cfa3a2a",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6c3e0716-9db9-4b8b-8177-5e7990655eb8"
        },
        "item": {
          "id": "d5ee7964-88ac-44ac-a984-569bc592b631",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "48b18f02-1c4e-4b28-9560-d6368900e2d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "7cb71a17-00bf-4fc4-89f8-c33899452a15",
        "cursor": {
          "ref": "ebf4734c-8ac8-4ee3-8e7d-873dd057811e",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "93c4d4b9-0eae-469b-be10-db49ba1385e9"
        },
        "item": {
          "id": "7cb71a17-00bf-4fc4-89f8-c33899452a15",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "c5344395-b03a-4e3b-9278-ec72bd07e69c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "a713adb6-addc-4a6b-bf40-f9d8fc1893c0",
        "cursor": {
          "ref": "e04caea1-badc-44a2-aaf5-ac80d543e10c",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d20a1abe-97e3-484a-baac-ea581673907c"
        },
        "item": {
          "id": "a713adb6-addc-4a6b-bf40-f9d8fc1893c0",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "434ab5fa-5449-494e-8656-c6a2d1c88610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "5313b696-80c4-43f3-9ed2-b4ca25d9bb57",
        "cursor": {
          "ref": "aae9d120-27fb-44c3-84c5-34064abbc202",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "86e86421-2a99-40d3-b91f-c50f8c562528"
        },
        "item": {
          "id": "5313b696-80c4-43f3-9ed2-b4ca25d9bb57",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "831d27a2-d6b3-46ee-adb1-8a98a6f45c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "3f879386-2223-4772-9df2-e56f189fefa0",
        "cursor": {
          "ref": "fe442670-0947-414a-9992-6152b0e68304",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "24af034e-4260-4568-9c46-b1a02d8ae208"
        },
        "item": {
          "id": "3f879386-2223-4772-9df2-e56f189fefa0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a8edd786-e524-4206-aa7e-0181c3165567",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "1b8deb87-bf04-44f4-95d9-ac10404d5fb9",
        "cursor": {
          "ref": "b0bca91a-6f42-4359-8fe1-bb8cf13da5a0",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "a71e7b71-e6fd-4243-8942-b2d836a0a465"
        },
        "item": {
          "id": "1b8deb87-bf04-44f4-95d9-ac10404d5fb9",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "2debc2f0-0494-484e-a05e-472a32f92e9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "a7e97f78-e83b-4f6f-bb15-54e6fcf00820",
        "cursor": {
          "ref": "8680be46-74e2-4d7f-bd0a-f0b9f45adb8d",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "d636b3a9-2ae4-4054-847b-4ff5e32132df"
        },
        "item": {
          "id": "a7e97f78-e83b-4f6f-bb15-54e6fcf00820",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "528dc10a-148f-4e70-8414-52bc26d40135",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "8fe69115-8525-43a8-8b8e-5bc922fd406f",
        "cursor": {
          "ref": "ecf0391a-9b5f-445e-a971-112f288fd1d4",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "85df797b-2add-4bf5-a2a3-48bc20cb4d05"
        },
        "item": {
          "id": "8fe69115-8525-43a8-8b8e-5bc922fd406f",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "eee01bbd-51d7-4de3-af31-1e357bb577c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "3c50d9bc-6811-4807-9bda-bc03085b85ca",
        "cursor": {
          "ref": "7b96db79-5219-42cf-82e5-40fce5336d9c",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bf8a409a-578f-4e1a-b906-d6c7c9f49cb2"
        },
        "item": {
          "id": "3c50d9bc-6811-4807-9bda-bc03085b85ca",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "10388cc8-a345-42d1-aa01-dd18ebe8d16c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "6e7d6caf-11ab-406e-bd0f-0703b0da0dea",
        "cursor": {
          "ref": "eca0ef05-2685-4c32-907b-d3b6edc01798",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "2cc894a1-37ca-460f-b7ca-1fffdcd87aef"
        },
        "item": {
          "id": "6e7d6caf-11ab-406e-bd0f-0703b0da0dea",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "fc7cf413-ae31-420f-88c6-8593778192a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "d7bc2c7a-7703-4c37-9f2e-37066fd7ad5b",
        "cursor": {
          "ref": "47b4ffe7-e5a6-4bb0-9e00-41182b4b740b",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "ee3cdbd0-46c9-4d4a-a620-9bb933faf2e4"
        },
        "item": {
          "id": "d7bc2c7a-7703-4c37-9f2e-37066fd7ad5b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "a85c6e60-ed84-4834-b3b2-15764ac26a95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "378f6b40-3072-4425-8299-319b22df927b",
        "cursor": {
          "ref": "a1988c39-56bd-474a-a03c-d949445af5a4",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "ed8873d3-9249-4e90-aaf5-eb9a2d562af8"
        },
        "item": {
          "id": "378f6b40-3072-4425-8299-319b22df927b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "93930302-500f-43d4-8df9-44eb8c6d7087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "2d1f2fc1-1fee-4ba7-b82b-2aa8890a6b29",
        "cursor": {
          "ref": "d302222a-b084-40e3-99fc-18afeb3acaca",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "95cc66b2-653e-4331-a3b7-45d49ed6e31e"
        },
        "item": {
          "id": "2d1f2fc1-1fee-4ba7-b82b-2aa8890a6b29",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "1f88c452-d632-4c7e-a4d3-b5018b10b49c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "3e91a53b-d972-4e78-a867-66ad0af21b2e",
        "cursor": {
          "ref": "6a3b75a8-2dc3-469a-8754-0a18aff9b4bc",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "26d5e35c-a40e-4538-a9eb-15c0b1d14db3"
        },
        "item": {
          "id": "3e91a53b-d972-4e78-a867-66ad0af21b2e",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ba50b402-57db-4e2f-83ac-ad92b56540bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "7e02a76b-46b5-4be9-8432-d5675d2c926a",
        "cursor": {
          "ref": "f15a0864-823e-4fd2-a8b8-9ad7c2f3df90",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dfa303b6-02e4-44cc-87d7-efb58d8e83a7"
        },
        "item": {
          "id": "7e02a76b-46b5-4be9-8432-d5675d2c926a",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "542a2835-37f7-49c1-ad05-b3ff58c886b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "630ada82-ddc2-44f4-9384-2cd72efb5da2",
        "cursor": {
          "ref": "c50c3d64-195b-4b6d-a9dd-0d7d10fc309e",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "40cfd2f0-a3a5-40ca-855e-debd68756830"
        },
        "item": {
          "id": "630ada82-ddc2-44f4-9384-2cd72efb5da2",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3fbe8074-0684-41b2-8f73-32b5d1ff2051",
          "status": "Created",
          "code": 201,
          "responseTime": 1351,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "546a4e59-41fd-495a-902d-e751304e4458",
        "cursor": {
          "ref": "f7bda23a-6bd9-4d3a-9ccc-d9b04f621be8",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "20472537-b3dc-4e40-b087-30a464939bb6"
        },
        "item": {
          "id": "546a4e59-41fd-495a-902d-e751304e4458",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "73a9e3a3-31b0-4f44-9827-e9ea7846e150",
          "status": "Created",
          "code": 201,
          "responseTime": 335,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "13c997a9-a05b-4ec1-a580-3486e5e26487",
        "cursor": {
          "ref": "9642c56b-acb2-442e-9673-483e39cb3fbc",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f709ac38-b22c-448d-8403-7ccc9414d106"
        },
        "item": {
          "id": "13c997a9-a05b-4ec1-a580-3486e5e26487",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "fab3b74f-987c-4c75-a390-3a4ad8a2255e",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "a85a9cd4-8974-4f1f-8554-d25ef8fb0471",
        "cursor": {
          "ref": "c4cf1270-0c7e-47a5-a67b-70c0b1fc14f5",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "4089d3c8-18c1-4897-8264-3126b83c8e61"
        },
        "item": {
          "id": "a85a9cd4-8974-4f1f-8554-d25ef8fb0471",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "3bd7b2d0-73ee-4570-96eb-ccfa2be01257",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "efd68fc6-6fb9-475d-ae6a-12fb10bc59a6",
        "cursor": {
          "ref": "24681f6b-926d-4065-8a49-4db4e26513c8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "d35eb9cd-49a6-4fc4-a37a-dc5925f2e8e7"
        },
        "item": {
          "id": "efd68fc6-6fb9-475d-ae6a-12fb10bc59a6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "5701f8e7-1971-4eb1-bb17-df4b2f0277de",
          "status": "Created",
          "code": 201,
          "responseTime": 375,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "259a2d7e-9b1e-49ed-9b6f-b779cd4604c0",
        "cursor": {
          "ref": "edc52600-a98e-425b-9dd7-4383e11a05af",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "cb87d16e-72d4-4bc8-9099-c0e054dad791"
        },
        "item": {
          "id": "259a2d7e-9b1e-49ed-9b6f-b779cd4604c0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "75a440b2-bb6d-4533-b108-d58506608982",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "a6bd4a06-8ca4-4c37-a78b-a5049fe82c32",
        "cursor": {
          "ref": "98a229c5-e379-4421-a9bd-4baf34306bc2",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "3cad6b68-a4ab-4c17-b019-2ce49d33a333"
        },
        "item": {
          "id": "a6bd4a06-8ca4-4c37-a78b-a5049fe82c32",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9a8e290d-aa52-4382-831e-20bc59c64bdb",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "5e7b831e-5337-4c85-9488-f2b7e66ef40b",
        "cursor": {
          "ref": "2af1a57c-5de7-4a16-9a2d-128c52a1d368",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "cc9f9e32-584c-4ce9-a9e5-c4a8669461d4"
        },
        "item": {
          "id": "5e7b831e-5337-4c85-9488-f2b7e66ef40b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6f0c176b-3561-490a-b2dd-9db172a802b1",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "c372c355-3847-4449-b1b7-a77daf68728f",
        "cursor": {
          "ref": "2666c368-8e76-481e-98b1-64a3e0521184",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "d5a06f8c-8185-4ec5-b53a-41ca54df72ef"
        },
        "item": {
          "id": "c372c355-3847-4449-b1b7-a77daf68728f",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "2f533ab6-e30d-46db-9d75-cbcd76358bee",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "4fb20b69-5cd0-4664-a5b5-36d1243213f6",
        "cursor": {
          "ref": "c6a49b28-0906-401d-981b-c61cee62e8e6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "d59291eb-84e2-470b-bad4-b63cb0dcc2ad"
        },
        "item": {
          "id": "4fb20b69-5cd0-4664-a5b5-36d1243213f6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "ad193ba6-940c-4f1d-ab44-e1e0362fa00c",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f99b5473-eccc-4971-8aa2-7227168ed361",
        "cursor": {
          "ref": "5b5bb16b-b05b-40d1-8b27-33ba9b3dd76c",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c77d7eb8-e11d-4ec2-8d67-9e0fd6efd438"
        },
        "item": {
          "id": "f99b5473-eccc-4971-8aa2-7227168ed361",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "091baf1b-3e77-45bd-b10c-3cf22bf6eb7c",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "11462948-8536-4f7d-9344-3bd67d146c4e",
        "cursor": {
          "ref": "47862cda-115c-4af6-a413-f189204e518e",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "50ef78c7-7a68-4505-b8ad-6a3aadc54139"
        },
        "item": {
          "id": "11462948-8536-4f7d-9344-3bd67d146c4e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "dbf0d653-93fa-4f0e-92e8-be9c7680466c",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1794f64f-4ff2-49a9-853f-c4aeb2257adf",
        "cursor": {
          "ref": "e1f08ceb-a791-4f67-95fc-4f9a34284588",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "5ef9f27e-5362-4091-85a5-7b252bebb76b"
        },
        "item": {
          "id": "1794f64f-4ff2-49a9-853f-c4aeb2257adf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bca12d22-01be-4717-943d-b26fdd866c4a",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a7eff7bd-47f4-4642-81ff-8f1791befc8e",
        "cursor": {
          "ref": "1481fb6c-7dc6-4b98-b287-64594e535556",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "396245eb-bbe9-4d73-84e8-6bdf6e5b0445"
        },
        "item": {
          "id": "a7eff7bd-47f4-4642-81ff-8f1791befc8e",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "6d221255-2687-4edd-ab54-5cf0db3afa63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "34bcc248-4836-45f8-bc24-6ed91e69c823",
        "cursor": {
          "ref": "9286aa8e-a138-42d6-9527-9f8078782c44",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "c3105ac5-ea93-43c2-a0b4-06681d815a44"
        },
        "item": {
          "id": "34bcc248-4836-45f8-bc24-6ed91e69c823",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "faa89f59-59a8-4921-8c29-b7853681ddc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "1f274eed-3831-4078-b5e2-01dfec84c959",
        "cursor": {
          "ref": "4262c06c-4811-4a94-a906-132bb45b2cac",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "0e86838f-a169-44b8-9264-b2582ef9e36c"
        },
        "item": {
          "id": "1f274eed-3831-4078-b5e2-01dfec84c959",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "380ebeed-0d3c-44b7-bbb5-0a385b55145c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "ab935af0-7f99-4b5b-ba10-c7f2650581de",
        "cursor": {
          "ref": "ee58e1a8-d499-40b4-af8c-b35f8aef06e8",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "179046bd-7a81-4465-a532-f3ed47296e51"
        },
        "item": {
          "id": "ab935af0-7f99-4b5b-ba10-c7f2650581de",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "d488c1c2-1d97-4d95-a289-a37279bcbaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "8cab3fab-8bfd-4c3f-ba41-6a732cd49d2a",
        "cursor": {
          "ref": "36f9fcbf-a06a-480f-8ff0-8e5f328a88f7",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "20052dfe-64d1-4302-b56e-1205b4b1c94a"
        },
        "item": {
          "id": "8cab3fab-8bfd-4c3f-ba41-6a732cd49d2a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1468ed98-2cd7-4601-90ec-5efa23c73a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "5ce5595e-d903-4f69-9dee-ed3953fa263a",
        "cursor": {
          "ref": "b5392161-418b-4553-b17f-832ffd9a08b5",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "fd45d21d-fbc9-4998-9e90-17728f27cea8"
        },
        "item": {
          "id": "5ce5595e-d903-4f69-9dee-ed3953fa263a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8bdfb7b5-1b80-4baf-b03f-a76807305077",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "fe1309e3-19e9-46e8-9825-0a1c88e7fa68",
        "cursor": {
          "ref": "af438efd-8f7d-4335-aa62-482bb3497560",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "174e37d4-a1dc-4a29-a836-a16fe305eb77"
        },
        "item": {
          "id": "fe1309e3-19e9-46e8-9825-0a1c88e7fa68",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "47eafd2b-6252-4b86-8982-1999c4ad9561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "1221e21a-0a65-467f-83d8-3bbfae47aacd",
        "cursor": {
          "ref": "7f07f082-bc1a-4251-8b18-f03022e0e6e3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ba732fb4-161f-4b14-8406-6aa0056797bc"
        },
        "item": {
          "id": "1221e21a-0a65-467f-83d8-3bbfae47aacd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "9486a9fc-e71c-4969-ab30-feb2b7690a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "7409ccf0-cca2-46e7-bf3f-30173ae9c0eb",
        "cursor": {
          "ref": "2fab2d26-7ef2-44de-890d-ab56750c7314",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ea9e248e-d599-4373-98c3-3cadbab8f06f"
        },
        "item": {
          "id": "7409ccf0-cca2-46e7-bf3f-30173ae9c0eb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "306a0c9d-62d1-4ddb-8c39-ec95234ea905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "bdec9e48-8a37-4c4a-92c7-b6794e9edec3",
        "cursor": {
          "ref": "fa5a78c4-0b66-4b99-b0cc-dd58ad59bdf4",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "3236c759-7e13-4bbb-82ed-2d1c48436756"
        },
        "item": {
          "id": "bdec9e48-8a37-4c4a-92c7-b6794e9edec3",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "f2c8956f-9124-454c-9338-ee9895e9482b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "d0b33de3-b9f6-410b-968a-85ad69c5af3d",
        "cursor": {
          "ref": "b3a3f315-3e01-4f88-bcff-06dc3e92e310",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "01784d27-1f78-4d86-ae70-da984b0a1c9b"
        },
        "item": {
          "id": "d0b33de3-b9f6-410b-968a-85ad69c5af3d",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1218ebee-1019-4e46-973b-29a3993ce721",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "8f1e4001-137a-4a50-b2d8-caf14e786d11",
        "cursor": {
          "ref": "26aec171-5dc8-4de0-883c-7b0366a3406d",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "062384b9-b19d-4803-9160-386da0b2fbd5"
        },
        "item": {
          "id": "8f1e4001-137a-4a50-b2d8-caf14e786d11",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d8bf58b8-0fe2-4c04-a70a-7a11c30361f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "1268dd08-49c7-4c99-82ec-5147114f6251",
        "cursor": {
          "ref": "00a880ff-a5fc-4c81-a8df-537ba4d8888e",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8c2ceeb2-f80b-4fef-bade-f93c11272006"
        },
        "item": {
          "id": "1268dd08-49c7-4c99-82ec-5147114f6251",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "cfba7c62-7641-4044-a021-e8754fcdcb3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "34b77e3f-8870-4e6e-ac87-76b2055af84d",
        "cursor": {
          "ref": "a2756117-aeb0-4b24-b602-6ae65be1a95c",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "413444f4-1e50-41e6-be93-bc7e9a8125ca"
        },
        "item": {
          "id": "34b77e3f-8870-4e6e-ac87-76b2055af84d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a6f3df9e-d1d8-4276-b34b-32239854455b",
          "status": "Created",
          "code": 201,
          "responseTime": 353,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ad6f1e4b-1b87-405c-8796-00eb7768af4a",
        "cursor": {
          "ref": "6e55886c-24e5-4bc1-82f6-3d3c41da5d22",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "98e0b221-721a-44f7-86cb-6fe84b409fc5"
        },
        "item": {
          "id": "ad6f1e4b-1b87-405c-8796-00eb7768af4a",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b133bf29-475c-4f01-b769-dc3ba6933c27",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "82021ed0-26a4-4896-b8a1-ae7da3dffe45",
        "cursor": {
          "ref": "7cf0b9db-ca13-484c-93b6-9c1da5186f59",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "bab5b47d-8cf6-4c37-9d2a-a19af0aaa629"
        },
        "item": {
          "id": "82021ed0-26a4-4896-b8a1-ae7da3dffe45",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d16a6fb6-19ed-4d2f-9fd9-73a827563faa",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d2938bcd-b480-4084-9c44-154f5fc5b2fd",
        "cursor": {
          "ref": "33c35a71-af69-4955-8847-05227b7acb70",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "57077886-cbe5-40ff-9f42-f693a8523eb1"
        },
        "item": {
          "id": "d2938bcd-b480-4084-9c44-154f5fc5b2fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f28f8253-e00e-4a33-96f2-1c596f661f25",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8641d1cb-b0e3-4cec-a8c3-e4e3ece68271",
        "cursor": {
          "ref": "b409fdd2-fb13-4180-a8c1-5ad68e6fc5f2",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "ed90c235-a8df-4d30-bc8a-5db054490691"
        },
        "item": {
          "id": "8641d1cb-b0e3-4cec-a8c3-e4e3ece68271",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "c4477b61-fe90-4d2a-8e44-3ce316a3c701",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "f5d3863d-2621-4b9b-862f-6af73832543b",
        "cursor": {
          "ref": "d1bf9ff5-547e-4bec-81e5-51f6a9a10cfb",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "609fb4bc-0cdc-4508-8822-ecfacb75741f"
        },
        "item": {
          "id": "f5d3863d-2621-4b9b-862f-6af73832543b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "66cc4696-a701-46f1-b23e-0aec034f0154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "bfd83d65-5641-481b-9b3f-7fc04f962405",
        "cursor": {
          "ref": "dd67bc75-4e97-41a7-bb2e-3c781e01df58",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2c473338-7a7a-4c5d-9b78-a8e64a5530ce"
        },
        "item": {
          "id": "bfd83d65-5641-481b-9b3f-7fc04f962405",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "288af737-05ed-4940-b6b2-247bd3c90c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "7e5f9ebc-6ff4-423e-a2b3-5d461a2fafb4",
        "cursor": {
          "ref": "a2035075-effc-41e6-acab-e5f5abbeb0f0",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "12cec273-c6f7-475d-ac07-ab6fb1ca8d5b"
        },
        "item": {
          "id": "7e5f9ebc-6ff4-423e-a2b3-5d461a2fafb4",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "59547f0c-459d-4d38-b72c-b5fd7e2c360d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "7a19bc02-3053-43e7-a533-29503a512064",
        "cursor": {
          "ref": "17f4e1e1-1ff2-4445-9800-c07db6747b02",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "d61d0551-e945-4dc3-9daa-14b9cece02f4"
        },
        "item": {
          "id": "7a19bc02-3053-43e7-a533-29503a512064",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ac4090cd-3964-4ddb-b75e-167ac015874a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "a68e5625-d681-482c-b13b-33df2da5a8ac",
        "cursor": {
          "ref": "fb85831d-1eb0-499a-b1c4-2b4d8d1e1985",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a4c5faa4-f859-4984-90ed-df2de10638ba"
        },
        "item": {
          "id": "a68e5625-d681-482c-b13b-33df2da5a8ac",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "44bbce40-7a1a-4ad1-8514-fdcb7a724c1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "26fe0ff3-6e73-484a-a035-2e40958e6aa2",
        "cursor": {
          "ref": "28c29fdb-068c-4d6f-bafa-18896cedeea0",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2613dcef-ea64-4d12-a770-c6fb5abcd985"
        },
        "item": {
          "id": "26fe0ff3-6e73-484a-a035-2e40958e6aa2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "556901de-e8b7-4b24-b4ce-ea971d0707a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "193ae162-a881-4314-bebf-35cc0230ff32",
        "cursor": {
          "ref": "0121bd0d-2583-4173-8756-bbccc1374616",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "fe3413ca-1391-49e1-8186-3746e12b029e"
        },
        "item": {
          "id": "193ae162-a881-4314-bebf-35cc0230ff32",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "d81ad824-10a6-406f-9192-478cb7598cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "8a8e55e4-5d59-4456-a131-91fb67a4d677",
        "cursor": {
          "ref": "2d58184f-ebb3-4ca4-8e1c-deb9beb1f8f4",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "73db4e0e-5039-4d19-ab35-69d410e404a2"
        },
        "item": {
          "id": "8a8e55e4-5d59-4456-a131-91fb67a4d677",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "f8e95f17-ac00-44a9-b95c-bf0ab0f2c0dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "bb0ecbbd-7bd9-421c-8001-d0ecb232cb6b",
        "cursor": {
          "ref": "25b9bc10-e484-4002-a418-9a357203fbae",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "869985fc-5c5d-4d74-94b7-834ab05cf25b"
        },
        "item": {
          "id": "bb0ecbbd-7bd9-421c-8001-d0ecb232cb6b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "33bcfa98-d7cf-4139-900b-f6166b6550ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "dd24d642-0c33-4d30-84c2-8fcf2b085801",
        "cursor": {
          "ref": "b2282830-4352-49ba-8021-1e99bc7bbad8",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "89101444-21e7-482a-a899-cb5a1b6e720e"
        },
        "item": {
          "id": "dd24d642-0c33-4d30-84c2-8fcf2b085801",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "96cad0a0-7693-4041-babd-3a5ea2f9571f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "c761e669-33ea-4347-8b54-ee911f0b7137",
        "cursor": {
          "ref": "db1db3ac-18dc-4656-b144-2ac90d47739b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c3fabace-60d9-4e77-b5f9-290f5968e7a7"
        },
        "item": {
          "id": "c761e669-33ea-4347-8b54-ee911f0b7137",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "74c553c9-6230-4ab8-ab6e-358b4f35ec4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "6b0d6dad-cf4e-4cc1-aad9-c2716c99650c",
        "cursor": {
          "ref": "796426c4-e918-4ff4-b66f-1285ba3f7f24",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "b8f1bdd6-422b-4fc1-95bf-6539bd1b2176"
        },
        "item": {
          "id": "6b0d6dad-cf4e-4cc1-aad9-c2716c99650c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "17f73d7f-b578-4b98-909e-cbe03a7438af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "af16e30a-80ad-4143-b76b-6618eeb0dc8a",
        "cursor": {
          "ref": "f573616b-2f0a-4fed-bbe5-a53acdfb2737",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0c2e10dc-2524-46d4-9226-8ccc5a808336"
        },
        "item": {
          "id": "af16e30a-80ad-4143-b76b-6618eeb0dc8a",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "be59f659-311e-4389-9e5e-96b600609208",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "d1edc8a5-96dc-4a62-b945-551b446bf77f",
        "cursor": {
          "ref": "379146ef-ff01-4c8a-a187-5a87c9618fb4",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "5311d8ff-2e8a-431b-a148-5a08b36a00a0"
        },
        "item": {
          "id": "d1edc8a5-96dc-4a62-b945-551b446bf77f",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4d448cb1-86ad-49de-a375-e75408732606",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "8ca697f8-940d-4650-a9b7-4a1037ad46d1",
        "cursor": {
          "ref": "1bff43a2-144a-44ac-8b95-c48c0c0ca0e2",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "38614021-4f05-49de-8e5f-7b02d7e651a6"
        },
        "item": {
          "id": "8ca697f8-940d-4650-a9b7-4a1037ad46d1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0daf8672-a6bd-413f-bc6a-e92a2c70c3e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "b375943f-cd0b-4d1f-949c-23c6d760905e",
        "cursor": {
          "ref": "1fb87a9e-ce41-4680-b8c4-2af051c1a8bd",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "978449d4-b4cc-4158-9397-72f6fc17f20f"
        },
        "item": {
          "id": "b375943f-cd0b-4d1f-949c-23c6d760905e",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "2da2713b-53cd-4426-8ef6-7429fd1ce6f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "455447ca-5946-41b3-b325-8d9bd89452c2",
        "cursor": {
          "ref": "79988cdd-702c-4f2f-b7b3-c07d6edde0a8",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "517722f3-b3e2-4000-8911-001459541bf1"
        },
        "item": {
          "id": "455447ca-5946-41b3-b325-8d9bd89452c2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a564e10a-4edb-4cd6-9973-8a5c7f5bf50c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "edf7f3e9-46d3-4e84-bd58-dbcbe8d494c8",
        "cursor": {
          "ref": "bfcb15c2-1dc9-4e07-9575-9b8cab9c87d1",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7119e76d-37f5-4777-a243-24fc92a8b754"
        },
        "item": {
          "id": "edf7f3e9-46d3-4e84-bd58-dbcbe8d494c8",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "499005de-4345-440f-be3f-11dc3bd0d241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "9676d336-3e56-42af-97f0-2a1de33a8c8e",
        "cursor": {
          "ref": "4d4bf754-d359-45c9-846e-1b17bb996067",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "973c794e-54bb-4506-b58e-b0aba5762fa9"
        },
        "item": {
          "id": "9676d336-3e56-42af-97f0-2a1de33a8c8e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8962d708-1af6-49a2-8fb6-ca02aabe891f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "67b849ef-6b09-4b26-81d5-b9182cf2f1e1",
        "cursor": {
          "ref": "6c5f2b30-a32d-49ba-80cb-deb85030199e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "971d2cf7-b3d2-4e41-a718-c79a0b60fe46"
        },
        "item": {
          "id": "67b849ef-6b09-4b26-81d5-b9182cf2f1e1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "dfd854cd-75a1-4852-ae16-c9845bd1f2e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c10b9217-ad82-4d81-916c-c0d700d2b79d",
        "cursor": {
          "ref": "353e4d28-0365-44e8-a59d-69cf724ce2e0",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "29c15587-0de6-4d45-888d-1b1618ca21aa"
        },
        "item": {
          "id": "c10b9217-ad82-4d81-916c-c0d700d2b79d",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8360b74e-f2cd-4b7b-931e-2348f70a8e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "8e1bd992-b88d-4fe2-878e-c0eeb8bae8c3",
        "cursor": {
          "ref": "50c92ba8-24fa-4559-8cb2-2e6fa49dd483",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "6e5f14ad-bb0a-4476-a92e-9d03d73e391b"
        },
        "item": {
          "id": "8e1bd992-b88d-4fe2-878e-c0eeb8bae8c3",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "a42c6846-a54a-47ac-adc8-416af9443245",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "d05168c7-3414-4880-95db-a862ce2f74d7",
        "cursor": {
          "ref": "b8f64c5f-c4b4-49ab-a806-dbead0ab940c",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "45a43a57-bd08-4c9b-9315-71dd0650dd04"
        },
        "item": {
          "id": "d05168c7-3414-4880-95db-a862ce2f74d7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4a290ac0-d806-453b-a697-d30e76496274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "24d63642-20d6-4dff-9ecf-bf26e1641a0a",
        "cursor": {
          "ref": "f166075d-e502-414f-8fed-0d971f464702",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8dc11f36-fe35-4e6e-82f9-0e1dc5f60d46"
        },
        "item": {
          "id": "24d63642-20d6-4dff-9ecf-bf26e1641a0a",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3f7c18cd-72e1-4224-b206-f4aaf77b3b81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "22107c0d-0a38-4bde-b354-468dff917393",
        "cursor": {
          "ref": "438f018d-f197-4ff1-bde7-7128bb34a628",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "df8c5a21-2af1-4e25-8770-e7567d8a03f5"
        },
        "item": {
          "id": "22107c0d-0a38-4bde-b354-468dff917393",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "de960551-4796-4961-ade6-43f237681c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "61d2604f-6de8-43fd-b6fe-052a3e56baaf",
        "cursor": {
          "ref": "7214ee33-71df-4703-b4d6-6120d0c65c35",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "63a394a3-8006-46f3-8920-7d2be61e44ed"
        },
        "item": {
          "id": "61d2604f-6de8-43fd-b6fe-052a3e56baaf",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "6c95c191-1998-4776-9755-bc0b1eab2037",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "a51188c1-f11b-472a-8d57-78a0e52d4482",
        "cursor": {
          "ref": "f685d986-3d3d-496d-bc52-e17055dd5293",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "f26a8cb9-9086-41bc-bb28-f9fe0629bc5f"
        },
        "item": {
          "id": "a51188c1-f11b-472a-8d57-78a0e52d4482",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "b9ed0141-33c4-49b7-8e56-c60411aae087",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "d3abd214-d3eb-449c-a8e9-b26382910339",
        "cursor": {
          "ref": "09822f07-989e-4d4a-b6c1-57fc888b02d0",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3c9ce359-94af-456c-8e73-40e6d1a1a2f3"
        },
        "item": {
          "id": "d3abd214-d3eb-449c-a8e9-b26382910339",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "bc4ecb45-9768-4a3a-8f5b-8776184dae29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "e6500324-44b4-42aa-9498-e1ddad1bc5b2",
        "cursor": {
          "ref": "b364c282-86bd-4c5a-8f24-65ef2ce5a54a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2eb013f0-0d8f-48ca-bd86-d31d35cb69d1"
        },
        "item": {
          "id": "e6500324-44b4-42aa-9498-e1ddad1bc5b2",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ce773aa4-0822-4e70-ab4b-140e6978423a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "cf5d0335-2cf1-4f20-9861-fb2ca5c2779e",
        "cursor": {
          "ref": "d2b3eea1-4736-46ad-b5ff-37db6ad34679",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "5d55f2c9-4d36-4963-a367-43001c4a260d"
        },
        "item": {
          "id": "cf5d0335-2cf1-4f20-9861-fb2ca5c2779e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "61ae0afa-6e1e-446b-a34f-b89855cb46a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "0b8189ef-79d9-4ecb-8fcf-77bb6a2a5770",
        "cursor": {
          "ref": "e38ed893-9c24-4ab5-97c0-ae6b7034ae94",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "7ed94459-8236-412d-9028-9c859ad00ed9"
        },
        "item": {
          "id": "0b8189ef-79d9-4ecb-8fcf-77bb6a2a5770",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "2ec674e3-d197-4a9b-b038-de3d6fb854ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "9fefbf6d-1019-43cb-b3dc-bc5b7bbecc62",
        "cursor": {
          "ref": "e80623f1-ea51-4eb8-a0c6-00a640a9577e",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d676a04a-0335-48f2-bff8-ebc34bea25b7"
        },
        "item": {
          "id": "9fefbf6d-1019-43cb-b3dc-bc5b7bbecc62",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "d6d0b73e-3f92-4398-ba7b-8afad22f2842",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84639199-1d80-4f2b-b699-1a67d6ff05f2",
        "cursor": {
          "ref": "bc021702-f932-495e-b637-74d52a8d414b",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4f9c6689-7ecb-49fb-9d3c-a60e780e74b2"
        },
        "item": {
          "id": "84639199-1d80-4f2b-b699-1a67d6ff05f2",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "63ee9e9b-58b3-4b84-b89a-7b30d91fa5b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "06c6f87f-397c-4c9f-90dd-e30ee78fba7f",
        "cursor": {
          "ref": "86e62b6b-2b6d-40fd-959a-7b2a804521ec",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dd185e40-7174-4c89-b65f-32f4c2052731"
        },
        "item": {
          "id": "06c6f87f-397c-4c9f-90dd-e30ee78fba7f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "755bd6dd-7c0e-4785-b93a-360876d9ff88",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8936204d-d674-4461-8ab8-556d3633ceb3",
        "cursor": {
          "ref": "8943a667-0d11-4e95-9295-8dd5f79bef7d",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "203e937a-bcea-4fc0-887e-36ad80a21f81"
        },
        "item": {
          "id": "8936204d-d674-4461-8ab8-556d3633ceb3",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "b32fb205-fb19-4842-b07c-50c1a6ca10ee",
          "status": "Created",
          "code": 201,
          "responseTime": 339,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ed91d21-5047-4fa4-840c-dc37cab4bbb3",
        "cursor": {
          "ref": "566734cd-ed5e-44cc-9416-42770d89534d",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "54283196-6abb-42dd-a4dd-006e22655598"
        },
        "item": {
          "id": "8ed91d21-5047-4fa4-840c-dc37cab4bbb3",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5f0fc902-1002-430a-bc2b-fbe256683bb3",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c96a498-479e-46ee-a6d3-32939cdf27ba",
        "cursor": {
          "ref": "b326a5d4-ffc6-4d11-bfd8-03cf0ba35c3a",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "65740b57-2539-4db5-909a-44776d566602"
        },
        "item": {
          "id": "5c96a498-479e-46ee-a6d3-32939cdf27ba",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "a5d19abb-3f04-4874-b321-9347fcb7b2e4",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "769f78e0-3e40-4058-82e7-f85dbf41e575",
        "cursor": {
          "ref": "010553be-5e76-48f3-b90b-52f11f8407ff",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7f714965-5854-416e-a2fe-1213d9992d3f"
        },
        "item": {
          "id": "769f78e0-3e40-4058-82e7-f85dbf41e575",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "9655fb8a-9888-4df1-bd69-e909c906e78b",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-09-06T00:42:45.346Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-09-06T00:42:45.346Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "5fc57bd5-5bcf-43de-bda5-2d458c420895",
        "cursor": {
          "ref": "e31fcaca-5d7f-421b-85fa-f1215c48a516",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "7eacc7a4-4450-445a-986a-1c8bbc00591e"
        },
        "item": {
          "id": "5fc57bd5-5bcf-43de-bda5-2d458c420895",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2c3d7d6c-f606-4426-952d-29576d18d691",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21b74251-0bb9-49e9-9405-ed45f634c924",
        "cursor": {
          "ref": "682664a1-810c-4752-8e60-6972a9d05967",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "9ecffd7e-7182-484b-9939-9c6908316b13"
        },
        "item": {
          "id": "21b74251-0bb9-49e9-9405-ed45f634c924",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4c8ad4c3-9bd0-45a1-a720-1ff33c92cb01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "df5a4bdf-0eb1-45cf-9ddf-3fed8855a3b7",
        "cursor": {
          "ref": "eaa89393-ba1b-47aa-a25f-e6587a49a7b8",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "109ad041-ede8-4ef5-91ff-d530a9ba8bc6"
        },
        "item": {
          "id": "df5a4bdf-0eb1-45cf-9ddf-3fed8855a3b7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "177a7ef5-42fe-4fca-9ffd-8e743b5399b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "0190e072-d74d-487a-9e60-dab9092cd26b",
        "cursor": {
          "ref": "b94c6803-45df-4c9e-aaa8-ac751c2cba3f",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "de58a9c4-ac4b-43f6-8008-4ac47f042363"
        },
        "item": {
          "id": "0190e072-d74d-487a-9e60-dab9092cd26b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ac6846d4-443d-4f60-bfc2-275691797b77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "c2e33983-60d9-4b4c-bcf4-ba5ecd44bd2b",
        "cursor": {
          "ref": "e10112ee-614f-4412-96fd-d1f71f8889f2",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "068a1956-4977-497f-ba4f-dd1d17ce681a"
        },
        "item": {
          "id": "c2e33983-60d9-4b4c-bcf4-ba5ecd44bd2b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "57197b22-ecaf-4bb4-8105-cf93e93c4c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "deeb51e7-d761-4203-aff9-e50687cd76b3",
        "cursor": {
          "ref": "15eaa2c3-2c56-4b47-83d6-7d30be5d7a87",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c6306eef-ac30-41ee-86b1-57c051b8aa71"
        },
        "item": {
          "id": "deeb51e7-d761-4203-aff9-e50687cd76b3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "20ccd572-c578-4d69-b12e-5369aa485306",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ffffe9cf-a476-48d2-bb35-22d6f65be236",
        "cursor": {
          "ref": "b67989ac-a583-4a82-8287-501fa42c9ab0",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "18cae8c9-3f3d-4d70-a90a-f0b96c257386"
        },
        "item": {
          "id": "ffffe9cf-a476-48d2-bb35-22d6f65be236",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6575fd73-2741-4295-ad10-71e406734ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "d9df4f8a-5e1b-4d63-aca1-48084081f1ee",
        "cursor": {
          "ref": "6064ab9e-1b81-4a67-b678-ad7f330480b0",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "98e092ef-d0e3-421d-af7a-94da9d627682"
        },
        "item": {
          "id": "d9df4f8a-5e1b-4d63-aca1-48084081f1ee",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e690e77d-2fe8-4e25-9f82-52d143736092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "019b0267-b6d6-49ec-b1f9-77249d4ae469",
        "cursor": {
          "ref": "d83f5792-f274-4728-a9fe-93e6e3e7de3e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "2addb930-9363-40f1-b0be-dc0e7ac1bdd4"
        },
        "item": {
          "id": "019b0267-b6d6-49ec-b1f9-77249d4ae469",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f5f20395-bdf4-4377-a892-c6f21541eda2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "e2d53400-ee06-41a0-b376-0bf80f84dc0d",
        "cursor": {
          "ref": "6100dcc3-5217-4df1-b393-24e9b2f59958",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a2482d5a-3df9-4391-8734-7bece5076f44"
        },
        "item": {
          "id": "e2d53400-ee06-41a0-b376-0bf80f84dc0d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b8574917-c76b-4ec5-8363-ad3eea0806a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "2b479e7d-925e-4f09-b255-f8cca3de8bd2",
        "cursor": {
          "ref": "650e2bd2-d349-41a5-8124-2c638a841aef",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "22c9bf43-2a5c-45d9-b318-71c3991ec370"
        },
        "item": {
          "id": "2b479e7d-925e-4f09-b255-f8cca3de8bd2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "3c40fd70-2b21-4322-b290-dc916d6f437c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "e86fc123-1330-4dd7-bc5f-82e6494e01fd",
        "cursor": {
          "ref": "d68ac41e-b340-44d5-a000-e2633505ddb6",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3a84960a-92e3-429d-b949-972948cc84c6"
        },
        "item": {
          "id": "e86fc123-1330-4dd7-bc5f-82e6494e01fd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "008ec538-23a2-40db-92e9-cff98038c62d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "cfa7aa54-ae39-4c4a-ba2e-5b82a96384d7",
        "cursor": {
          "ref": "2a2868d2-7bd5-465c-8c7e-3b24d1656183",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d42494ea-8f95-4c07-82dc-b5320e95df81"
        },
        "item": {
          "id": "cfa7aa54-ae39-4c4a-ba2e-5b82a96384d7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "400d1eaa-1b1e-4096-86e2-0231e9fc104d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "3fc0665f-e0b3-4d06-887e-c690cac3cbe1",
        "cursor": {
          "ref": "9891a43f-73e5-4847-bf42-d6a68f5708fa",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "78e11cd6-2c08-44fa-817b-4f80b5d78118"
        },
        "item": {
          "id": "3fc0665f-e0b3-4d06-887e-c690cac3cbe1",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6ea73fc4-2a51-434d-b3d0-ba170b6fb060",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "3a2a8bc2-26ce-48a8-874d-52374d48d62e",
        "cursor": {
          "ref": "44b0906e-d980-447e-bcf3-e61086213f4c",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "27a4c168-1f8a-4a25-a7af-59cf77bc280d"
        },
        "item": {
          "id": "3a2a8bc2-26ce-48a8-874d-52374d48d62e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3899b7e8-072c-49ef-be54-5b75480f92b0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 46,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3c142aa8-ac97-4442-9bd7-26914adb036a",
        "cursor": {
          "ref": "cc42698f-f3a9-43db-82e1-20f9d488c353",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "1bf26661-e60e-427c-851b-31786f8517cc"
        },
        "item": {
          "id": "3c142aa8-ac97-4442-9bd7-26914adb036a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "88588264-000d-4773-aaa9-0b7dadb443c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "24c1e99c-2fbe-482b-aa4a-3272cf54e8bd",
        "cursor": {
          "ref": "52c36b0c-25a1-43e0-b1c8-1fd034dd6b69",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "d543f9b6-205b-4c4b-b5b7-1dc10bdf7065"
        },
        "item": {
          "id": "24c1e99c-2fbe-482b-aa4a-3272cf54e8bd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "df7fe181-bea6-4138-bf39-f44c0950fb9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "983b22eb-d509-44ee-b592-5a527384cfcb",
        "cursor": {
          "ref": "9ed22db4-1aae-425a-b885-e4591ba6e049",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c14adfa2-72f7-4ea7-b507-a400e6bf7e8a"
        },
        "item": {
          "id": "983b22eb-d509-44ee-b592-5a527384cfcb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "66191366-5f8a-4691-a0d6-98c86327ed33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "c2488226-d76f-428b-9378-705218688018",
        "cursor": {
          "ref": "553752f5-dace-4dba-89a2-c479377e9233",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6650f205-299f-42b8-9806-9469cc9205ff"
        },
        "item": {
          "id": "c2488226-d76f-428b-9378-705218688018",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "78725e1d-f8fe-4c99-b175-30f499de5c64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "eb8f149f-423b-447d-8e5e-734e86e587b5",
        "cursor": {
          "ref": "1a286516-093a-4638-b514-27f5ea210d4e",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5a7eb444-121e-49c7-80c3-c198fc66d680"
        },
        "item": {
          "id": "eb8f149f-423b-447d-8e5e-734e86e587b5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "78f34526-a239-4285-9fa7-a94455bb92b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "c6993f45-eb93-4531-a354-87cfc699ce0f",
        "cursor": {
          "ref": "31be3187-e63d-43d7-9360-ce16cb1da724",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "9fc6e571-47cd-4e43-8dbc-66bcd25879fc"
        },
        "item": {
          "id": "c6993f45-eb93-4531-a354-87cfc699ce0f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b10b0835-3329-4888-8f47-8b027dfc74ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "7c1be8e0-43ea-40fd-adc2-542c93739e01",
        "cursor": {
          "ref": "86729967-fa27-4e91-b5a7-d10a619c138b",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ca143c59-025b-48e3-8154-56d8098e6883"
        },
        "item": {
          "id": "7c1be8e0-43ea-40fd-adc2-542c93739e01",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "61079041-f24c-44df-8c79-3843d99906d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "b381410b-0cb8-48d1-a116-fc6a25835ebc",
        "cursor": {
          "ref": "a977c2ba-15f1-4e5c-94a2-c778850af418",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "266aa5ef-d75d-4463-83ff-6ea950c8c333"
        },
        "item": {
          "id": "b381410b-0cb8-48d1-a116-fc6a25835ebc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "0a6c8139-40b3-4335-b4e4-f599e8a28876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "f85380a8-e8be-4e68-8265-a320dc96b590",
        "cursor": {
          "ref": "ba4f54d7-bc1a-48a3-a488-193e2c6ea218",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "62baa87d-d2da-4d5f-ad3d-fd51e28c2909"
        },
        "item": {
          "id": "f85380a8-e8be-4e68-8265-a320dc96b590",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "16cdefdf-a0d4-45fa-935b-312c397e01c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "122b11be-b934-4f0a-831b-163d4b0e6af5",
        "cursor": {
          "ref": "b5d9c5ac-c701-489d-8b06-f514b03fa64c",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "ff392f0d-1808-43e7-8f6b-6c60e721be47"
        },
        "item": {
          "id": "122b11be-b934-4f0a-831b-163d4b0e6af5",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f2e66185-2fd1-40ce-9afa-4cf32210ef06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "a30f19df-c814-496a-b360-89f07021a73f",
        "cursor": {
          "ref": "59d443c2-eef8-4889-b491-7764c1b8db44",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "72e9caaa-806f-45cb-9163-bc090e6557cb"
        },
        "item": {
          "id": "a30f19df-c814-496a-b360-89f07021a73f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ef933ef0-a2d2-4e69-9ce6-c1ba91cbdabc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "8aba0627-b0f6-46f6-b7e3-aa55261245bc",
        "cursor": {
          "ref": "c2d2a158-bb6a-4d4f-8988-64ca5e7c860b",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "73090883-6762-4b6a-b29f-56b0b156d9af"
        },
        "item": {
          "id": "8aba0627-b0f6-46f6-b7e3-aa55261245bc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "16c32045-8717-4ebe-bfed-cfe646c39018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "ca3521f5-405d-489c-b0a3-577119655fe0",
        "cursor": {
          "ref": "88b1bd0e-e4f1-41e5-8d9b-55200841501e",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "dc5cdb56-9afa-4590-b767-922bd88f66be"
        },
        "item": {
          "id": "ca3521f5-405d-489c-b0a3-577119655fe0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "13a724bf-30af-4bc9-8b5d-3f27caa97f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "bbf3ea9d-cff9-49ae-9a50-4f5a8fda0ac3",
        "cursor": {
          "ref": "180fd130-1b31-45b9-bc17-27b3cf7e2d61",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "d59185a8-20f4-4680-a970-6e2f8de152f7"
        },
        "item": {
          "id": "bbf3ea9d-cff9-49ae-9a50-4f5a8fda0ac3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "b1cb56b2-1965-4cea-a9fc-d81b3c9a9780",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "2fa12544-6048-41f6-9d81-57cdd27a1d6f",
        "cursor": {
          "ref": "6203d07d-4b4e-4df1-a4fe-653dc3b78c3d",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "eafaccb5-e871-4cd5-837a-dc0587275b7e"
        },
        "item": {
          "id": "2fa12544-6048-41f6-9d81-57cdd27a1d6f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a5841c14-9276-48da-85ce-05935ed63f58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "a717c95c-2b09-4315-92b5-35e5d55ff2f3",
        "cursor": {
          "ref": "35c70f08-a64b-4a8a-87b7-b40ae4161cda",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c07e1c1c-e72d-4c13-9896-7072bdd5b10b"
        },
        "item": {
          "id": "a717c95c-2b09-4315-92b5-35e5d55ff2f3",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "39b08faf-52b7-4913-b773-1a4a4b42cf8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "fb7407b0-2cd5-45fc-8e16-11e123d8715b",
        "cursor": {
          "ref": "75b79065-626b-4e86-a274-8ea66ff33f8e",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "5dcd5736-3983-4329-94aa-d6a414732102"
        },
        "item": {
          "id": "fb7407b0-2cd5-45fc-8e16-11e123d8715b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "61c8956d-8d49-4339-8dcd-5b0cab1147d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "d22d63d5-13bd-4fce-b72d-708b163124b9",
        "cursor": {
          "ref": "71820c1f-faee-4714-8d76-780b06fc6075",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3323c774-3fb3-4dd5-8956-07d6b6814647"
        },
        "item": {
          "id": "d22d63d5-13bd-4fce-b72d-708b163124b9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "b7dc2be8-4120-4937-9e14-dec33b431805",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "566000f0-1bdb-4755-bae1-46b82fc7f98f",
        "cursor": {
          "ref": "1ae90a57-bbd0-4456-a978-a1b887529ff8",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a95c7a20-f9c4-47de-a344-47ae91eea3a2"
        },
        "item": {
          "id": "566000f0-1bdb-4755-bae1-46b82fc7f98f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "9105aff0-4361-4ac5-a02d-450c497f56e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "aeea387a-0b13-4755-8e05-a9092ee98872",
        "cursor": {
          "ref": "749433d4-65b1-45ae-95e0-2260fdcb9413",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "3fe63a7b-3ab2-4a87-88aa-63412187a660"
        },
        "item": {
          "id": "aeea387a-0b13-4755-8e05-a9092ee98872",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "9204ddbe-21f8-4373-b956-6b9553388dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b486117a-2286-4cea-8aea-63020d5eb2f2",
        "cursor": {
          "ref": "55864a76-efad-44a7-8541-7b12ca82ec89",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "624caaed-fd85-4ea0-8f2a-56794fcc0d12"
        },
        "item": {
          "id": "b486117a-2286-4cea-8aea-63020d5eb2f2",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "d74db53f-d478-4174-8e95-b783d898f5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "70abd58d-6e6b-4ae1-8937-9a87e20b7695",
        "cursor": {
          "ref": "09eacf46-0214-4f83-805a-dd8b27b30c14",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7f8c86ef-566d-4c89-8965-516f6f581769"
        },
        "item": {
          "id": "70abd58d-6e6b-4ae1-8937-9a87e20b7695",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "cadb5037-c9b6-4b06-8801-cc8c92bee1b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "e6de46d1-3caf-4fba-9cb2-2f28b54ac1af",
        "cursor": {
          "ref": "e6189120-0ab4-49de-a19e-ede71dbd846e",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "05bed800-9100-4f9b-a53e-2e9ba8006485"
        },
        "item": {
          "id": "e6de46d1-3caf-4fba-9cb2-2f28b54ac1af",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "24f3a62d-9031-4d6a-91c3-ed1576dd95f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "c3acac1b-36a5-4053-b525-9c39455a4fb9",
        "cursor": {
          "ref": "29b4f48b-e18d-4187-876b-6c601873cff7",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "149fb037-ae15-46b3-b623-ebd94f7c5d2c"
        },
        "item": {
          "id": "c3acac1b-36a5-4053-b525-9c39455a4fb9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "344c30ff-a4a9-4059-b37d-d825c67efa0c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7aa14d5-bfdf-492d-8322-f3092996a810",
        "cursor": {
          "ref": "6a33eed1-b4fb-4a01-9862-a726a620dc94",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "f28718ef-dcb6-4f7c-bfd5-d04e9bee9826"
        },
        "item": {
          "id": "e7aa14d5-bfdf-492d-8322-f3092996a810",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3860cd44-f488-49e0-a764-adb7ddc5b867",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "24f213a5-eb37-46d6-97bd-5b25c30ba08c",
        "cursor": {
          "ref": "51f6a90c-0eda-4705-9e3a-dee5805496bd",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fecdee6d-eca7-40f7-aff5-cbd423133d10"
        },
        "item": {
          "id": "24f213a5-eb37-46d6-97bd-5b25c30ba08c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "eb766d95-eb15-4246-a2ac-01f527701658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "9c8dfbcd-f1b0-4d36-957f-742030eb467f",
        "cursor": {
          "ref": "34307c5b-46c5-48ce-8ee0-fb3fa000d18a",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "932017e9-eb2e-456c-96f7-647459c328f1"
        },
        "item": {
          "id": "9c8dfbcd-f1b0-4d36-957f-742030eb467f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "581cd3d4-f597-46e3-8f9a-6cc7ea7267f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "a48d9ea6-f026-426e-965d-cbc3ffd24dc5",
        "cursor": {
          "ref": "1619136e-70a4-4cfd-8466-85d2dd71da96",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "0b2cbdb0-87c0-4e47-9332-90c2f7ad2c72"
        },
        "item": {
          "id": "a48d9ea6-f026-426e-965d-cbc3ffd24dc5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "c3865160-365d-49ce-ad1e-2aefcc812705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "2f642569-467e-4a37-b902-5540dc57d5d6",
        "cursor": {
          "ref": "93a8e59d-f4d9-49c4-bcd8-77e5a8d7080a",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e1016dce-f51c-40b0-aad6-8ba1eac92c3e"
        },
        "item": {
          "id": "2f642569-467e-4a37-b902-5540dc57d5d6",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "cf26f249-f09a-48ab-b816-970a82cee3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "da49cf48-7332-4fc6-8d17-33439cae8af7",
        "cursor": {
          "ref": "73f83a7f-a9b2-4397-b096-6bea802a847a",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b0b92cd8-2244-423e-9cc1-7817689eafac"
        },
        "item": {
          "id": "da49cf48-7332-4fc6-8d17-33439cae8af7",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9de5f948-336c-471c-b835-09dbb5caddf1",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "b5888d58-285a-4bff-b5d0-1f79c3c23e0a",
        "cursor": {
          "ref": "c776dbec-5296-4681-bac0-ea27cfa0c59a",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "75e0a15f-b5ed-4dc7-87e6-996d31db0c8c"
        },
        "item": {
          "id": "b5888d58-285a-4bff-b5d0-1f79c3c23e0a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "f46b642b-3467-41cc-b567-4227e253424f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "05661f98-b5af-4e07-9e3b-2d07bfa6ad55",
        "cursor": {
          "ref": "20cde0e8-f2e3-476b-adc2-0d6970fd2276",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "25eb2f89-6ccf-4836-8133-eb004fdee60a"
        },
        "item": {
          "id": "05661f98-b5af-4e07-9e3b-2d07bfa6ad55",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "42d6b26b-f17c-43ff-837a-b74ee65222f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "513bcfc7-7449-4b88-be61-f4d15f691178",
        "cursor": {
          "ref": "dddbd2bd-8880-439f-8f5e-9f436a198d31",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "33d12439-116f-44fd-b54d-d8c35717b36f"
        },
        "item": {
          "id": "513bcfc7-7449-4b88-be61-f4d15f691178",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "fed2ff9c-620e-4d53-8525-c36b26e9a640",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "88f6f661-a62e-4ee6-b1ec-61c4ccce0551",
        "cursor": {
          "ref": "c8f70db9-cab5-404f-bcb8-34e3f78c4066",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "98de85b8-64c9-4a45-9a2d-d6794da4e754"
        },
        "item": {
          "id": "88f6f661-a62e-4ee6-b1ec-61c4ccce0551",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d74ce147-9773-49b1-9ca0-4bd37a8d3c43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "cc56b690-f1d5-4a0c-9143-e53b9e67d2a8",
        "cursor": {
          "ref": "52151bc2-545f-4410-b852-d0a83113002e",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e68f3764-b9c2-4246-874e-07d8d89b59f5"
        },
        "item": {
          "id": "cc56b690-f1d5-4a0c-9143-e53b9e67d2a8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "98f15a93-3003-4139-a9a4-6e3ed34a339e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "195681aa-8ec7-406b-a252-f7264a625734",
        "cursor": {
          "ref": "22b84b3c-d02e-4305-976f-c25e203bf51d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6b498e1e-15e0-48ec-8dbe-229dbc8d4471"
        },
        "item": {
          "id": "195681aa-8ec7-406b-a252-f7264a625734",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8cab19cd-f910-43ea-bdf2-12ec579c5844",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "b99d7859-c692-4811-b0fc-029f2bb093d0",
        "cursor": {
          "ref": "246a7f48-43bb-48f8-abf0-390a957594dd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c61109e8-6d96-46d6-96a0-2620099345c9"
        },
        "item": {
          "id": "b99d7859-c692-4811-b0fc-029f2bb093d0",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ef080c22-003d-41f8-916f-e0d0b5cc18e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "d8885972-a5f0-4ccb-8d71-9d54bdc46d5b",
        "cursor": {
          "ref": "7c0f0453-1ff6-48d1-9305-02539a1a4e5d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "e5ec50de-4ea8-40de-8f89-411170e24144"
        },
        "item": {
          "id": "d8885972-a5f0-4ccb-8d71-9d54bdc46d5b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "22c4bbae-5f3a-4b12-9873-ac26753d279f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "c0c1b6a8-7643-4299-96e2-b8b8a76774e7",
        "cursor": {
          "ref": "29816c70-ae0f-4c6a-bba2-6ccad07128c1",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "afcfec1d-9d26-409d-b9c6-e4b322cf9ec2"
        },
        "item": {
          "id": "c0c1b6a8-7643-4299-96e2-b8b8a76774e7",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "4d27e7d6-9fef-4fab-9ebf-05332b074569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "55d55a91-4fd0-452e-8968-54629f83d077",
        "cursor": {
          "ref": "c4020bc9-3bd2-4b5f-9fe6-0f4c7d934ebd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5e6dcffc-078d-48fa-ba68-704fa7015a90"
        },
        "item": {
          "id": "55d55a91-4fd0-452e-8968-54629f83d077",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d00ff49c-41b1-4287-8eee-ca032312aaa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "c9fd223e-62d1-4af1-85d0-aa423bd8c379",
        "cursor": {
          "ref": "6544c094-3c99-4700-8fe5-43f15e6bb334",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "f400d58a-956e-434e-879e-4acdd7a99734"
        },
        "item": {
          "id": "c9fd223e-62d1-4af1-85d0-aa423bd8c379",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "e80308ef-28b2-417a-9f24-b1a84dcf2654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "dda382b4-fa9b-4941-b488-0260f9d2bb2a",
        "cursor": {
          "ref": "e0cc5ace-71e7-43ad-8ecc-35e08a2bd4a2",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f8b8c012-38ca-4d4f-865d-481887eadcb7"
        },
        "item": {
          "id": "dda382b4-fa9b-4941-b488-0260f9d2bb2a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0a5a6a45-1bda-425e-bf9c-8a4d5ea62f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "bb75b78e-86ad-473f-8e61-7c909823c40f",
        "cursor": {
          "ref": "841e6508-4b23-4bb3-9b47-cf60892fcbfa",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "051aa2fe-7d9e-4b39-892f-7306dbf3d79b"
        },
        "item": {
          "id": "bb75b78e-86ad-473f-8e61-7c909823c40f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "4c69b81f-13d5-4850-9a53-ceda831697e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "64f96a99-5b05-41dc-89af-f13529c64ffc",
        "cursor": {
          "ref": "032cd2de-69fe-4d2b-b012-cb36db1695a8",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9de06f7c-37ad-4389-94e3-e1240d3d22ff"
        },
        "item": {
          "id": "64f96a99-5b05-41dc-89af-f13529c64ffc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "d721d123-aed5-46e2-a9d7-12a25499f6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "112cbc15-5372-4f76-a39f-33a5ef393034",
        "cursor": {
          "ref": "2e8081b1-59ac-4d71-ac59-dd8545acc1bd",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "1eaba96c-244f-4687-afbd-75a7f7424382"
        },
        "item": {
          "id": "112cbc15-5372-4f76-a39f-33a5ef393034",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6f25f749-c3ac-4c65-b306-98ba7afceade",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "e5b7aad1-0974-4d4f-abc5-292c06f35210",
        "cursor": {
          "ref": "9a21f8f1-434f-4c8f-90da-0feb69f447d0",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "ea4f60e8-f2b9-4aaf-a116-70cd3662e869"
        },
        "item": {
          "id": "e5b7aad1-0974-4d4f-abc5-292c06f35210",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2723bbbd-be63-4037-adf9-aadf6f796c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "66683e83-284c-40c9-9235-63a5f8604f88",
        "cursor": {
          "ref": "cc569cce-eb10-49a7-828f-11c7361e5ace",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "74c762f6-c679-4e88-a76a-102957ce9558"
        },
        "item": {
          "id": "66683e83-284c-40c9-9235-63a5f8604f88",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "364309b6-c77c-405e-89cd-b0bbc1dfa266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "09708ec6-d620-4548-9f53-0184a0455e5a",
        "cursor": {
          "ref": "f349c6fd-6cdd-449f-b2ce-55cf324fdad6",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "fb097c0e-1102-4c63-b9a3-df2bcd433fd2"
        },
        "item": {
          "id": "09708ec6-d620-4548-9f53-0184a0455e5a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "e8233d9e-3da9-4b69-a781-fb7b576b0caa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "e3ce9ef8-72e5-4d59-84fe-256be31da00c",
        "cursor": {
          "ref": "ef7dd914-623a-4464-9517-85523dc9f0d1",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1d0dff92-c7e7-4517-af9b-46c3970f6c9c"
        },
        "item": {
          "id": "e3ce9ef8-72e5-4d59-84fe-256be31da00c",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8c10b559-de32-4208-b213-39ed16978344",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "b5489261-5ca5-425c-a4b2-7f1322b002b7",
        "cursor": {
          "ref": "61f71967-0442-4e3e-905d-7a40263c8808",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "3f1a039e-c9ea-4c80-82d9-9d016775de6d"
        },
        "item": {
          "id": "b5489261-5ca5-425c-a4b2-7f1322b002b7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "82104159-3fee-4b9a-bcde-755d4d7e5266",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "0a31c568-59b3-4087-816a-4b46606653c9",
        "cursor": {
          "ref": "503d628e-e693-4c2e-8f30-449379fdb892",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4ecc9317-89a6-4e07-b0e3-34bde2ce9480"
        },
        "item": {
          "id": "0a31c568-59b3-4087-816a-4b46606653c9",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e0bbdafe-c869-4a48-a29a-c9e6ef4b741b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "5f7a5831-f8a0-4183-a433-fbd2511d6375",
        "cursor": {
          "ref": "979b06f8-ad49-433a-9c01-938b0ec6d4ca",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "fe13fdc7-5099-4710-9ff5-841beac05df8"
        },
        "item": {
          "id": "5f7a5831-f8a0-4183-a433-fbd2511d6375",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "01472b46-a504-4476-9a77-76b70d42d236",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "02a00c00-b83d-48e5-aecf-8be414ee50dd",
        "cursor": {
          "ref": "19486e6f-7e45-446f-9a35-41f530dc3fc8",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8be638cb-9255-406a-b986-7db56a4b5b09"
        },
        "item": {
          "id": "02a00c00-b83d-48e5-aecf-8be414ee50dd",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c3294ea7-ccb5-4bf5-8b16-967f40411502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "26b755f7-1853-4c45-b0b3-83edd08a305a",
        "cursor": {
          "ref": "d993b602-4ee7-49d3-8ae8-0e3b5f068b07",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "0aa656fe-95e7-4dd9-b9be-bb3a4f84e428"
        },
        "item": {
          "id": "26b755f7-1853-4c45-b0b3-83edd08a305a",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c3d8d268-9728-4760-8414-54b9342116c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "7853cd0a-24b2-48db-8f50-d15f91ed1fe2",
        "cursor": {
          "ref": "d627236d-855c-4a46-97b7-1ae6aa5a83bf",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "cecf65fc-1213-48a7-a334-b5e34c481022"
        },
        "item": {
          "id": "7853cd0a-24b2-48db-8f50-d15f91ed1fe2",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "830d9e56-d187-410d-b10f-d59c3983dd9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "96f9e013-5c78-4d11-908a-28dca0be3087",
        "cursor": {
          "ref": "180e6f29-5bef-432b-93be-88dfcd41aba5",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "50e24389-53af-4839-b999-4cc3aac1a328"
        },
        "item": {
          "id": "96f9e013-5c78-4d11-908a-28dca0be3087",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c18b2b55-20c6-4c39-9332-77e87feca58d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "f8f98a73-7971-4e55-87f2-44bf434cda6b",
        "cursor": {
          "ref": "d0192028-9f0a-4c92-bae2-dd0534b6a155",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "b2b73215-263f-4fc7-ad8e-14d4f42be9d5"
        },
        "item": {
          "id": "f8f98a73-7971-4e55-87f2-44bf434cda6b",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "f55643aa-7209-4108-8d1e-329a3c85a940",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "5d3894ee-af90-4a45-b510-7f2d4404ce2c",
        "cursor": {
          "ref": "433605aa-9809-4e6f-81e4-0ba123686ff8",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ff5483e0-67c9-4a96-80dc-061e3b8e23f3"
        },
        "item": {
          "id": "5d3894ee-af90-4a45-b510-7f2d4404ce2c",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b8eea5a1-c932-4cd9-a19e-c76a61772244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "04dbdccc-77fb-4072-9b65-da762f89ae2e",
        "cursor": {
          "ref": "bea7dee8-25d3-465f-9476-0c86504f219a",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bcc06558-34a7-4005-af35-b02ee0987417"
        },
        "item": {
          "id": "04dbdccc-77fb-4072-9b65-da762f89ae2e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c3a5ec80-e761-4f5e-833b-45033265c691",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "89bf0501-5fbe-4f42-8724-4a7c083ddd5d",
        "cursor": {
          "ref": "d568e3e4-5d26-4f30-b255-f6f499471412",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "2742e431-a05b-4349-9a16-fb36243e9b44"
        },
        "item": {
          "id": "89bf0501-5fbe-4f42-8724-4a7c083ddd5d",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "45a4fd80-0c2e-4f13-9ae9-45714ca4b329",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "c0ab4a2c-86cb-40aa-869a-fb0937c0a9c6",
        "cursor": {
          "ref": "53a5f6cb-f218-4326-88e7-2f85363f032f",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "9eb066bc-41ac-4556-81a0-476b0b6db087"
        },
        "item": {
          "id": "c0ab4a2c-86cb-40aa-869a-fb0937c0a9c6",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9002cdcc-2892-4cdf-82ad-fad58c05340e",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "4bff99b0-6d76-4c40-bd74-9a2282f9cfd3",
        "cursor": {
          "ref": "3002ef61-ec92-4f8f-bd22-f3d16fa307af",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "87a49ff5-e09d-44fe-83f7-5ee8c932a852"
        },
        "item": {
          "id": "4bff99b0-6d76-4c40-bd74-9a2282f9cfd3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "556726f0-ad02-4e8d-b828-242d9c53cde1",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "cef9dac2-2cce-4936-9427-cdf8a04f1256",
        "cursor": {
          "ref": "7dc95756-9f67-46ed-86fc-3230ea863035",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "8a7304f6-2f9a-4303-a472-1fe36b8c3ac9"
        },
        "item": {
          "id": "cef9dac2-2cce-4936-9427-cdf8a04f1256",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "b8a0ca94-b45f-4230-b16a-6a142b1e146d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "68ec94fc-56b8-4025-af22-25d3947cd1c8",
        "cursor": {
          "ref": "f999ae77-4ca2-4080-a1c2-bd54613b2874",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a688e43c-6c8d-4e5f-8e53-ac1b78ebc21b"
        },
        "item": {
          "id": "68ec94fc-56b8-4025-af22-25d3947cd1c8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "35743c0b-8368-4c09-a67c-9424c392dfdd",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "2813928e-ad8f-47b2-9d38-e0c7a8f1fd76",
        "cursor": {
          "ref": "f44bb6fc-a751-423a-b12e-deb775e8648a",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "9ec84df9-7b49-43f0-a41e-01a628a4734e"
        },
        "item": {
          "id": "2813928e-ad8f-47b2-9d38-e0c7a8f1fd76",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4b4e9895-63d1-435e-b94c-ba0f945c8900",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "ffc7f601-f7bc-4056-bf5a-f251db525927",
        "cursor": {
          "ref": "44af7c14-041c-4e80-b7a9-f3faae776239",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9fac9390-3dd2-4ea3-9db3-054986688cbe"
        },
        "item": {
          "id": "ffc7f601-f7bc-4056-bf5a-f251db525927",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0f053cdd-1d23-4989-bb85-b47a8522169d",
          "status": "OK",
          "code": 200,
          "responseTime": 103,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1e2f5f6a-958c-4d8a-95b4-f969dda35dd5",
        "cursor": {
          "ref": "bc04a0f1-a02b-4cd0-8216-0b563b46e8d2",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "171786f2-4222-4976-91ea-cc05c252500a"
        },
        "item": {
          "id": "1e2f5f6a-958c-4d8a-95b4-f969dda35dd5",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "34f03054-3529-487e-b450-3b2bf7ea6ee0",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "c1567058-f7f6-48b5-83ef-744acfee115b",
        "cursor": {
          "ref": "378bcda9-25c9-4a39-ba03-82108c1c40d8",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "70e36ff2-1092-4cac-ac24-3f819ffed972"
        },
        "item": {
          "id": "c1567058-f7f6-48b5-83ef-744acfee115b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "93e033fc-a776-48ef-84b6-7cfccd472840",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "79a391d5-aaf7-4c60-8085-3beb2ae8db93",
        "cursor": {
          "ref": "372b8188-d73b-4655-aecb-512ae450be4d",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "53798f69-632b-48a4-aef8-a277201ef03a"
        },
        "item": {
          "id": "79a391d5-aaf7-4c60-8085-3beb2ae8db93",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "7d7a2283-2afa-4f8d-9672-fa820d11df6f",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7d0880b3-0a23-4ab2-87c8-1f8f3ef347b7",
        "cursor": {
          "ref": "d47de4f0-7b86-4a0d-8b9a-51b9f9dc9159",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "086daae0-a285-4fb9-a99d-dfad8cdc92ac"
        },
        "item": {
          "id": "7d0880b3-0a23-4ab2-87c8-1f8f3ef347b7",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "41765694-2e51-490b-b3d4-625123fde098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "f0e1545e-cca4-4e2a-be6e-612a8d9e850c",
        "cursor": {
          "ref": "22c1f51c-1eb9-4c4c-a203-ec16c398b6ca",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2203142a-d049-437d-8678-dce1efbd5000"
        },
        "item": {
          "id": "f0e1545e-cca4-4e2a-be6e-612a8d9e850c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "8996c2fe-e957-4fe0-abcd-ee41653f4071",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "48b15a81-8b96-488b-b47a-0000c174c2a9",
        "cursor": {
          "ref": "f713e290-8f8b-4d46-bbd9-0bb081a31f9b",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8d3700c4-4e5d-464e-974c-206b85a74b75"
        },
        "item": {
          "id": "48b15a81-8b96-488b-b47a-0000c174c2a9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b8286055-523b-4518-9ada-116291ad1fd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "67a2147f-451c-4f1a-aee1-74772da24ab3",
        "cursor": {
          "ref": "9eca8be6-62cf-4f7b-b309-f66f5e4b3d7e",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4f4b4b90-55ed-4ad1-8ea5-eed61e2aa822"
        },
        "item": {
          "id": "67a2147f-451c-4f1a-aee1-74772da24ab3",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "04cb098f-f39d-41d0-ad91-8561c7676efc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "c9a8466a-f2f9-4284-82cc-f605d4d2594c",
        "cursor": {
          "ref": "3c0dd2bd-36f4-4cee-9571-c0eedf4c61e3",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "6c372b01-fa4e-4431-8fb0-823a73e25502"
        },
        "item": {
          "id": "c9a8466a-f2f9-4284-82cc-f605d4d2594c",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "86b28033-68a9-4905-9373-512abf6459a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "a135d258-f465-4b43-9cda-f3a3a6bf86b4",
        "cursor": {
          "ref": "5cfd1a58-1ebd-49f0-a720-aa55daef2201",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0bf280c5-74b1-4a9b-a706-328a8a530adc"
        },
        "item": {
          "id": "a135d258-f465-4b43-9cda-f3a3a6bf86b4",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "321c34c3-85ae-47d9-ac15-72d3f4f810e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "e1a199cf-e0ca-46ab-b1d7-968be9673df7",
        "cursor": {
          "ref": "810a8363-bdf7-4c82-861d-7aae03a843c5",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "cb80dd1c-9faa-4af5-9762-ad42a9450e12"
        },
        "item": {
          "id": "e1a199cf-e0ca-46ab-b1d7-968be9673df7",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "a6b3ce78-c4fa-4913-b362-9b174e0bca5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "01073f1a-45db-4942-b6c8-6ada5c232171",
        "cursor": {
          "ref": "948c719e-31c6-49c6-843d-207d708a1448",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4881ba04-083f-46cf-b116-cd414ef0b4e3"
        },
        "item": {
          "id": "01073f1a-45db-4942-b6c8-6ada5c232171",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "595eade9-1d44-432c-8a35-7fc315a3eea1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "592c8b1e-4832-40ec-a4f5-509408cbf3b7",
        "cursor": {
          "ref": "7308ae60-5e9e-474e-ae33-3bc18cff9909",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "1e4c4cbc-2301-45c6-9312-9c830153934a"
        },
        "item": {
          "id": "592c8b1e-4832-40ec-a4f5-509408cbf3b7",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0b239b81-7733-49df-b286-f5f12aa37539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "dd2cd1b9-d188-4c41-8017-4030b47bc304",
        "cursor": {
          "ref": "cda5dfc6-102a-46b9-98d6-2cf81e9a0b20",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "41af02a0-687b-4c22-b218-6b07e92e8f6d"
        },
        "item": {
          "id": "dd2cd1b9-d188-4c41-8017-4030b47bc304",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "739067a1-e0c6-4610-858f-40ba3c4fe084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "7621bc91-172b-4d20-bbe9-fb7699ec791e",
        "cursor": {
          "ref": "3018bf1b-2384-4c2b-9266-8501e08af659",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "5786a7a8-6910-4305-8af2-a8ff23558e5b"
        },
        "item": {
          "id": "7621bc91-172b-4d20-bbe9-fb7699ec791e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a400b231-9beb-4995-80c2-a36358614adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "0a3f6819-1e21-4f80-9d10-194737aec2fc",
        "cursor": {
          "ref": "db196853-3177-4934-9153-a64eb80b5499",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "90c2612c-6775-45c7-9b9e-a0473e414fd6"
        },
        "item": {
          "id": "0a3f6819-1e21-4f80-9d10-194737aec2fc",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f56de946-9eba-4e31-8879-da8aec175f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "1864d192-1c69-45bc-a4df-915a00d1e251",
        "cursor": {
          "ref": "dc07a00c-148c-4304-a891-19686121f7b7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "2bc4c33e-f31c-48ca-9620-9e89e69f1538"
        },
        "item": {
          "id": "1864d192-1c69-45bc-a4df-915a00d1e251",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "bbf2afa0-e3aa-41a7-af04-088fcce9bb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "2b09e3ea-130a-4ed5-9998-6d9e9ddf3434",
        "cursor": {
          "ref": "d65680d2-17dc-4cfa-8dcd-d648f45743f6",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b2a09dce-1552-48ec-aa69-5cbad34bddba"
        },
        "item": {
          "id": "2b09e3ea-130a-4ed5-9998-6d9e9ddf3434",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "733ad657-7ee8-48bb-9731-dc27ab2cccd6",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9c50f9b6-6e88-49bb-90c8-51470d1f3234",
        "cursor": {
          "ref": "ea76fe03-fb7b-48c5-a98f-ae9c612d51d6",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f9771a81-3f90-41e7-b2d4-278e1d98bae5"
        },
        "item": {
          "id": "9c50f9b6-6e88-49bb-90c8-51470d1f3234",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "7612d7fb-b5f8-4d00-8f48-8310bdef2a94",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "0bdf76bf-192c-4d6b-a629-b39e6f9c01b6",
        "cursor": {
          "ref": "78a80008-65fb-49ee-9d0f-83e3ff336909",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e95388a3-f980-4050-afc2-8465c38e4257"
        },
        "item": {
          "id": "0bdf76bf-192c-4d6b-a629-b39e6f9c01b6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "87cdc877-f3b7-4ab1-bf4d-b299811101c8",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "27db8402-51c5-4066-831c-909f9b338724",
        "cursor": {
          "ref": "ff545686-0cf1-4fec-9f31-0cfd1b855c3e",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d12cac94-cb21-473e-94ce-e575e8254544"
        },
        "item": {
          "id": "27db8402-51c5-4066-831c-909f9b338724",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9afe096e-b994-4dc6-88e3-1f963c499c63",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "84d39dac-de8f-4050-b2cd-74f2c39b05e3",
        "cursor": {
          "ref": "09030b74-d2b5-4b43-8024-584dfe810040",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "27f16985-ec63-440a-b740-6772d5f451d6"
        },
        "item": {
          "id": "84d39dac-de8f-4050-b2cd-74f2c39b05e3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1dc01a84-3aa9-466e-a645-3834737a85e1",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "a2b372f1-0578-4137-94ad-66b10b33144b",
        "cursor": {
          "ref": "c328b886-c1c8-410e-b658-c6bb0dd5c243",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "82a7848c-df9f-463e-a4a1-0de84276ce7d"
        },
        "item": {
          "id": "a2b372f1-0578-4137-94ad-66b10b33144b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "5a19e11e-eb3f-4270-8a6f-ae2ffdb25e35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "4141d014-c641-484d-91b4-91874d7d1755",
        "cursor": {
          "ref": "23496193-f857-4667-9770-449ee401bdeb",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "88eb6235-e16f-4ace-8437-a1dccb9a00ae"
        },
        "item": {
          "id": "4141d014-c641-484d-91b4-91874d7d1755",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "c2fec051-3732-4c37-b875-6857ecd31e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "2a2b10d5-fa10-4c38-b389-c4e9c3620a1b",
        "cursor": {
          "ref": "d2f5e9e4-7c50-4dae-ad50-7432c09b1cc3",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "87526a06-a395-434d-8354-e6f01d0521ad"
        },
        "item": {
          "id": "2a2b10d5-fa10-4c38-b389-c4e9c3620a1b",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d6ecdde9-f4da-4257-86e0-04b11fd2a73a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "b256e027-30bd-4ea8-abf0-2860a345393a",
        "cursor": {
          "ref": "667c0623-f729-4b37-936c-062278dec387",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "71490511-04a8-478a-8735-f085f6fd9df6"
        },
        "item": {
          "id": "b256e027-30bd-4ea8-abf0-2860a345393a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3effebf6-551c-4911-97ba-669718f3b912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "39e0c4f7-3071-43ec-9629-878976bd04cf",
        "cursor": {
          "ref": "d6cb563e-3103-4498-bbde-9566483313e4",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ee6d3c5f-45e0-47ec-bc4a-72f50115905a"
        },
        "item": {
          "id": "39e0c4f7-3071-43ec-9629-878976bd04cf",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "83390df3-59a0-4f7d-8147-9a9dbe58a9fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "eb3043c3-ca13-4d57-ba11-e85c7d726cc0",
        "cursor": {
          "ref": "0253e1c7-f0bd-480d-8ae4-aa9ed6240f97",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "ade2c443-fabe-4756-b5e4-fb051b3255fd"
        },
        "item": {
          "id": "eb3043c3-ca13-4d57-ba11-e85c7d726cc0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5ea68f1f-4e6c-417d-b2c0-41326fc76622",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a1b66bd3-2402-4571-b7c5-a2dc443c5328",
        "cursor": {
          "ref": "51456926-0b4b-4204-bca6-98da9cb12504",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "25f6308c-f42f-4313-84f0-2ef430c97fe2"
        },
        "item": {
          "id": "a1b66bd3-2402-4571-b7c5-a2dc443c5328",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "3208b3ba-f248-4636-8d48-de0913c223bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "89b289cc-dd17-42d7-8a94-ee6e47dc1631",
        "cursor": {
          "ref": "2e75636e-c5ce-4e16-9b9b-b2128aeaed6f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "9429f84a-cb0d-4d30-a5c8-5e9f35b66cb0"
        },
        "item": {
          "id": "89b289cc-dd17-42d7-8a94-ee6e47dc1631",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "dc5dd7c3-541c-45a6-8259-3e490d0eef61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "8530e6b2-a679-4a94-b702-7194b2c4f30d",
        "cursor": {
          "ref": "dc0ac570-d366-4062-a279-0b8c32052a59",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0d673f3d-fa5b-45a6-8531-c3b04d8d949b"
        },
        "item": {
          "id": "8530e6b2-a679-4a94-b702-7194b2c4f30d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "3070e0ca-738d-42c9-a3ec-16a020f7666a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "b5cde9d9-b8ec-4031-966c-a0b860f9731f",
        "cursor": {
          "ref": "f3c0f735-bffb-4d35-9e9e-00b7dca4f253",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "174e81e4-7206-4d26-99ca-5fc4778a048e"
        },
        "item": {
          "id": "b5cde9d9-b8ec-4031-966c-a0b860f9731f",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "bd824c08-7e0b-469d-b2e9-25d5ee45cd28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "e4134158-de6b-4652-889c-1a1f71e02072",
        "cursor": {
          "ref": "4518ced4-7b8b-4972-93b4-76bfed223abd",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6e8d0369-d1f7-4f01-b02c-47e1e01990c4"
        },
        "item": {
          "id": "e4134158-de6b-4652-889c-1a1f71e02072",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "9375d399-34c0-416a-a6ff-0ed098aa4c08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "9beaee30-c297-44fc-8bc7-54594cd76110",
        "cursor": {
          "ref": "6a4e97e2-03b0-4d88-b82b-9edb2ce49453",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "58d98102-f8a2-4c87-8340-0011d49cc726"
        },
        "item": {
          "id": "9beaee30-c297-44fc-8bc7-54594cd76110",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4f5e3cfe-4670-4282-9aeb-5726db62746b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "d5aa946e-ed82-4cc5-aa80-ef358f5ba755",
        "cursor": {
          "ref": "2909e2ac-7ad8-46c9-9d14-57fb2763358d",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "15579720-b006-485d-85cf-c60b82f0dd79"
        },
        "item": {
          "id": "d5aa946e-ed82-4cc5-aa80-ef358f5ba755",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "3b20f7af-2498-476c-b4fd-fb11931a9fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "849f99fd-914e-4764-8027-6fbbeeeb4ac3",
        "cursor": {
          "ref": "7d593e4a-8cc0-41e1-bbfa-ae0e4f797ffc",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d04eaf73-7174-42cb-9dcb-43ccf125949a"
        },
        "item": {
          "id": "849f99fd-914e-4764-8027-6fbbeeeb4ac3",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fd7d4850-97ef-40f7-975b-4f984e73f22b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4e202a4f-7087-400b-b9ae-29a644f45508",
        "cursor": {
          "ref": "5aea3621-de03-4656-a604-e2227ee675a7",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4c11c4b5-50e3-431f-8b42-6d6aca239a64"
        },
        "item": {
          "id": "4e202a4f-7087-400b-b9ae-29a644f45508",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "6570a518-1526-498a-b350-6e3ef795815e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ff9a66f1-4840-4920-9ef7-7aecc914ef69",
        "cursor": {
          "ref": "0ac41866-8558-471c-8e90-5c14bfefc3ce",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "684e4b46-823b-414f-a20d-7b81c2dd7b14"
        },
        "item": {
          "id": "ff9a66f1-4840-4920-9ef7-7aecc914ef69",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7419675b-67b9-462f-8226-de1b1237569d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "f0f94deb-e503-47b4-ba08-20ef9915e0de",
        "cursor": {
          "ref": "30d7a5c4-773e-4685-a933-767ebf5434d0",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "5d3bd9b7-07a8-4dde-9009-fa59f5e17064"
        },
        "item": {
          "id": "f0f94deb-e503-47b4-ba08-20ef9915e0de",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8fd5bd52-4f12-4f2c-a3cf-f117dedbb228",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "94dc6511-565e-4440-b7af-a807d91174f8",
        "cursor": {
          "ref": "f742c1bd-2d2e-4b0a-8e4f-71846ed20f97",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "13a56f4f-b52b-4347-8a37-13f1e432657e"
        },
        "item": {
          "id": "94dc6511-565e-4440-b7af-a807d91174f8",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "eb1c6c81-349f-482a-90e5-ac69774f0497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "3c5b6673-0e39-4dbd-afbb-731e359509b2",
        "cursor": {
          "ref": "1cf5155c-90fe-4e77-887e-67acbe95c972",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "a1ee10e9-b900-4388-9bb0-a57ec26656fe"
        },
        "item": {
          "id": "3c5b6673-0e39-4dbd-afbb-731e359509b2",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c8c87f66-f7a0-49d0-b20b-c6c6c69bce34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "c9988578-da7c-4aa9-8b59-27087a844d8b",
        "cursor": {
          "ref": "a3f4a366-9bb5-4371-aaec-ac3f8e61d651",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ed62ee09-9ae4-4b23-b32d-dd686aef4420"
        },
        "item": {
          "id": "c9988578-da7c-4aa9-8b59-27087a844d8b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "24194dad-6ef4-4951-a878-4ea03ba346d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "2d48c885-143d-4629-8a44-7b42b164dedc",
        "cursor": {
          "ref": "9e9d19d2-7d2f-4199-b816-60f307de77d2",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "de7fad39-a8b2-4e46-a186-9095f9ac4c37"
        },
        "item": {
          "id": "2d48c885-143d-4629-8a44-7b42b164dedc",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "f83b3a84-b0b3-41f5-a260-cd66709e7d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "866ae8a4-ee3f-40e0-a8d2-2cb0c9ee7fc3",
        "cursor": {
          "ref": "d156eb07-8bee-49c0-b47a-071e8d173c9c",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4a56be63-2543-4ee9-a432-509d3b3da672"
        },
        "item": {
          "id": "866ae8a4-ee3f-40e0-a8d2-2cb0c9ee7fc3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b5e35f35-022f-4d18-b688-6a75f9fed65b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "809bf732-ca0f-44bd-8886-90b7e7bf4184",
        "cursor": {
          "ref": "9b26f98f-68b0-44af-bcc2-3885127a0527",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "54bd326b-fe28-44b6-a85b-34b37452e1ed"
        },
        "item": {
          "id": "809bf732-ca0f-44bd-8886-90b7e7bf4184",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "408c54c3-dd9f-4916-b648-fa568516c8fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "de8bdb70-18d5-4f3e-b6fa-5763e4efe979",
        "cursor": {
          "ref": "3fb9dca0-c4fd-4480-9f9e-d5b0f470e0d1",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "728d8ebd-fbbd-4f80-9df7-434f1d493503"
        },
        "item": {
          "id": "de8bdb70-18d5-4f3e-b6fa-5763e4efe979",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "51eab892-43a1-4c32-8f22-8f467ffcb705",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "7903ed5b-2fff-4bc6-8373-cfdf1fd8552d",
        "cursor": {
          "ref": "5b834f3e-d05c-4fc2-9ae3-a31adfbff29a",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c0ce0a6d-4801-49f4-9c0a-0b85d875d24c"
        },
        "item": {
          "id": "7903ed5b-2fff-4bc6-8373-cfdf1fd8552d",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "fae88ab9-c82d-4171-b40f-a996a5cd3738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "ef8fc6bb-fa12-4f56-a779-24aa3a9bc6b2",
        "cursor": {
          "ref": "4d5c50f0-4f96-419f-b2f2-233ac9af33df",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "ef69479e-80f0-4a45-97f1-a1efb69bb4d8"
        },
        "item": {
          "id": "ef8fc6bb-fa12-4f56-a779-24aa3a9bc6b2",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "aae6d2c8-540c-46ed-85f7-4f5b35caa285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "f3d9fcf4-6bfb-463f-a375-2d5249d8a089",
        "cursor": {
          "ref": "be35e39a-2b8b-4415-889c-32c759a1b319",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "472af6f7-330e-48cc-aa3c-b491410d4241"
        },
        "item": {
          "id": "f3d9fcf4-6bfb-463f-a375-2d5249d8a089",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "89444fa6-4a49-4b4e-b583-e6b3bb89d100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "bb59343a-0026-4519-ab3e-9efc1bc89e54",
        "cursor": {
          "ref": "843183c9-a054-451d-bc6f-a19e51be7f59",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "25998e6d-f68b-4997-a590-522fcc93ee8e"
        },
        "item": {
          "id": "bb59343a-0026-4519-ab3e-9efc1bc89e54",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "4b5b54ee-0036-4fb8-bdde-d6eaa805f6aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "b9f1de5e-22de-409f-9ca1-1cb504251557",
        "cursor": {
          "ref": "783ad1ac-12ab-4907-8d40-86fe587de333",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "1750d840-aa41-4d65-993b-7172f40a4ee7"
        },
        "item": {
          "id": "b9f1de5e-22de-409f-9ca1-1cb504251557",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9480228d-b1f0-4dc4-b692-703b9b60b65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 23,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "81bde582-a791-4550-9cab-c327a2a10c6c",
        "cursor": {
          "ref": "38967506-b163-447d-b57a-9afb0e6c4b7c",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "bb266412-e502-4990-a873-c59b250da8ff"
        },
        "item": {
          "id": "81bde582-a791-4550-9cab-c327a2a10c6c",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "8f193162-ee5c-442a-b772-a94901a541a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "c9e377ad-26a6-47b0-8c35-3077ad217c77",
        "cursor": {
          "ref": "a87c27a3-7da6-49b2-948b-bbc5b2037d7f",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "cf94666b-bcaa-4aff-a81b-66c746cf6892"
        },
        "item": {
          "id": "c9e377ad-26a6-47b0-8c35-3077ad217c77",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a04bd4bd-8c5c-44cc-8a8d-cc58fa7fe285",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "f6201626-08e5-4ee5-af6e-d4354fe47bc1",
        "cursor": {
          "ref": "8c485818-222b-440c-86d1-23b764019b53",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0c27bf93-5ed5-47cb-a41e-bff492cd75dd"
        },
        "item": {
          "id": "f6201626-08e5-4ee5-af6e-d4354fe47bc1",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "6211c240-13ee-4d2a-ae59-085f009259e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6461d33e-8dfd-4b3f-bc54-06b569ccc38b",
        "cursor": {
          "ref": "6f7f5a20-7a98-432f-a6cb-bac93fde3df2",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "76fe6c4c-25ed-4af3-84c6-f9dcded4e0b3"
        },
        "item": {
          "id": "6461d33e-8dfd-4b3f-bc54-06b569ccc38b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "40222512-494f-43a4-a6f5-19620d82591b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "3596c8f6-d31f-42f2-817c-98a2fc10d494",
        "cursor": {
          "ref": "74eceb4b-4062-4ce7-884d-6ea81cfb7f61",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "89d0f56e-023b-41bd-9451-f82c16b69e63"
        },
        "item": {
          "id": "3596c8f6-d31f-42f2-817c-98a2fc10d494",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ed2759e0-8875-4f31-bb89-a6fd161021d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "60b4f578-c1aa-4487-95a7-fa607778a026",
        "cursor": {
          "ref": "52d2935e-dfce-4916-b5f7-e601d79c7aeb",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "e9c78c8a-b03f-472f-8ca6-d285d4552643"
        },
        "item": {
          "id": "60b4f578-c1aa-4487-95a7-fa607778a026",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7f33cee9-e4aa-4f32-9e9e-efa9b40afff2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e507674-a980-43b1-981b-7c0f13c9701f",
        "cursor": {
          "ref": "ed3867f8-d2db-48b9-8fb2-dab946b8c390",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "e86677a3-f322-46ac-a0b0-ca9fa71e76d9"
        },
        "item": {
          "id": "3e507674-a980-43b1-981b-7c0f13c9701f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "14d458d9-0287-40a0-80df-d52ac36a2078",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "e1cf5dff-8568-4ee7-903c-54aa27934b77",
        "cursor": {
          "ref": "8ad28cdb-7856-4cf0-ada2-ffb18c338e21",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "062c66a7-8302-4654-9a16-fd2b65491f33"
        },
        "item": {
          "id": "e1cf5dff-8568-4ee7-903c-54aa27934b77",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8db1f8d5-7dad-408e-bc0e-c94bb6051651",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0756309-c2be-4145-afd1-486443ea0f50",
        "cursor": {
          "ref": "cc82be84-a753-4cfd-ad83-268a42f660f5",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b3d5abd1-6c06-4730-a652-ce42f3f9f158"
        },
        "item": {
          "id": "a0756309-c2be-4145-afd1-486443ea0f50",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "869ea627-5d4b-4e7a-becd-1a05ef8ffc75",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac52083-e1c1-4fe6-bc16-6069b6869821",
        "cursor": {
          "ref": "e0835952-d9ed-4d5c-97f7-75ea13a2f7a0",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bb19128e-b707-4dbd-890e-7dcdf5e1a823"
        },
        "item": {
          "id": "5ac52083-e1c1-4fe6-bc16-6069b6869821",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4216d390-a921-468a-9af8-4ccef77c9431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ac52083-e1c1-4fe6-bc16-6069b6869821",
        "cursor": {
          "ref": "e0835952-d9ed-4d5c-97f7-75ea13a2f7a0",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "bb19128e-b707-4dbd-890e-7dcdf5e1a823"
        },
        "item": {
          "id": "5ac52083-e1c1-4fe6-bc16-6069b6869821",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "4216d390-a921-468a-9af8-4ccef77c9431",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 16,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6d44c7-161b-42ab-8771-89abd4fb5d0d",
        "cursor": {
          "ref": "a8dab436-ddfd-40cc-b367-62830179af4b",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "1586bc22-3b61-4f01-8456-8f5476255b5e"
        },
        "item": {
          "id": "ed6d44c7-161b-42ab-8771-89abd4fb5d0d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d6e6f228-1b1b-4c57-ac52-f31e309858fb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02a6a086-bd8a-4db7-9c0d-a630915ce4c6",
        "cursor": {
          "ref": "f7cd30ae-a8cc-4f0c-8ee7-6dcf8a5bdd46",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "cf6e6f62-d041-4b3d-b016-f992c804d96b"
        },
        "item": {
          "id": "02a6a086-bd8a-4db7-9c0d-a630915ce4c6",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "023dcb32-624e-44be-93cb-79574ccdc862",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}