{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "735cea70-2e68-44ff-813f-e141e0e21c09",
        "name": "Clear Cache",
        "item": [
          {
            "id": "6a366f3f-9d56-410f-b085-f6068e3fc98e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0524e799-65ee-4b64-b537-51f873ad1814",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "745c97f3-7205-4500-8baf-075a0ca54bc9"
                }
              }
            ]
          },
          {
            "id": "b12047af-7cc9-4a5e-86a5-c0e2669a48d2",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c0cf4fee-3131-4843-83eb-0c0ff496c393",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b764313f-8543-4ebf-99bd-eebf6888ebfa"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "552f5b7b-8b04-49a2-b144-bb498c5151d7",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7cdce289-0de9-4557-80a0-d45d2e3c39d2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ee5ab121-fa1d-4913-9b90-00e60cbddaff",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "99c9012e-5d03-42a0-bab1-215556693c4c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "36ed3b0f-4b58-45b0-942f-bc9255037d51"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "87df8cb2-d815-45fa-b819-acbe188d9952",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a871fc47-2ac6-45e8-a34c-2c6c64354f05"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7c43a09f-ca14-47c6-96e5-8277c8218550",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0918c236-405c-457c-b016-74d09bfb5909"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6ef7f802-af27-4c11-a669-42a87c3eb3b6",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9a513015-e52e-41d9-bf88-3eda7af3619a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70ea457d-7f76-4621-b67b-96598f71f6cd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ecad732f-5e98-42db-9e00-e9b4b98724ed"
            }
          }
        ]
      },
      {
        "id": "e287ffde-1dc0-49ba-9ce9-f6f431cf60fa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "313c73ae-f3bf-4e1d-a0f4-a89ad82242be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ef86a34-0665-45f7-877d-d7e161cbbcb6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ae5e53e2-ba8e-47c4-96b1-f6f5a91dec9f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c2728e9-bcc9-48d6-b7c8-46c8b6b99c80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62eb196d-289f-4373-93e6-154c98c053d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b94b5423-3a9b-43a5-a2f8-b521da3bcd85",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a439e23b-67fa-4d18-9d09-f9ba6550b310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c6e5292-d3a8-4591-a15e-d8757432f251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd86af8c-930b-401b-906c-8d65d3db6134",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade2c9e9-63f3-4127-b310-8f97176b1f92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bed32b4f-7820-4ac9-93e5-3080a2288e6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "981f73e1-b724-4927-afcc-c626b6d39a51",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5561012b-b032-4efe-8761-2e8e080fb3be",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ee8fba-21da-4191-8370-d5eb82ea7326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7d059ef0-b7b0-45f9-9413-1815960a98a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad28a29-1d83-4fda-b51f-86d252bd7a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8242a91-8587-43f8-9447-2c46eb080b19"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61a2c1ca-c358-45e8-9a21-db55ebac7fc9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "36e4ade4-4521-429b-a760-9e7ec58fd495",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed54cc24-adf3-452a-adfa-06819e238332",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e8262482-3d43-4a14-b9fc-a68c305312f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2268db4c-1fdf-4d96-b76a-d0b8af17306d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "a79705b9-bc8d-42c1-b13a-723aca9b75a2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3d9782f7-dad4-4e3b-b5fa-1dfc724abcdf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bf6db56e-c7f7-4b02-8f7e-969cc024bee8"
            }
          }
        ]
      },
      {
        "id": "ae6c647c-0510-4660-ac9f-89989cf03ddc",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "749dba00-25fc-4bf2-85ea-fe142e3ccf70",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e268ba08-a1d1-4a56-a635-585a0ae4da0a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "310de9ab-b535-43be-987b-9978171eeac0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23696c79-2185-4ff5-ab97-7687fba3265d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04264c85-6f19-48d3-90d8-2e374e814f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9059f5c-a303-48b3-80a2-4c2d5d2f432b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dda04198-a047-4e1c-a4fa-eecf35a64398"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d3b6654-8a33-4a8c-86b7-a443a26ea3e7",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4051546-2698-46fc-b1dd-0d45b6b0292d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77d44b75-3e43-4f6b-a3d4-ec36a298dbb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44d87139-e647-464c-a6b3-79c814f21b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "767fec6e-10fc-4e2a-b4a3-2aaea703cffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1460f6fb-51be-40a8-8123-3c7cd6ac0950",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ae47b28-25cb-4aac-a464-6a76c8261ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d11d6024-2fdd-4ce3-ad05-29c4a60939cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fef94024-8dbe-4a1f-bc7a-ab9cb40a781c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1c3942e4-ecb6-44c2-8ba7-08ae0e2d610f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67091e7b-c026-4eb3-b429-ca764f26a256",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a372be7-2383-4685-bd71-cadb8704f2c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eea2c24-0162-494c-8a4b-6f47d12f4598"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d922bdd7-aed4-4a60-a99b-3c32a71116dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "818828f5-b29d-4a1b-a51f-4376f681b785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0935321-384a-4328-a9f1-aefd45f3c61d",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c2b3db-e9a6-4c45-b9c4-e65e3feb1e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f355c8-ff54-4a5c-85ac-2921f1027003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "901866a4-4783-4444-9b2a-88924f8c84fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0836d837-a301-441c-a7c0-5fc39510ab14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216ce279-1197-461c-8914-11b4c847fac3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835f5964-1145-47b6-bb43-9712d6da3f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9d97f6-42ff-47ae-afaa-079c30b7d9e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852ab5e7-66c0-40ed-9818-e028d0d13288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d600e42d-cd4a-4b03-af4c-84c60f26c3f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34aae2f2-0019-468c-bb05-b81c4f0c9062",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4525a3-227e-4f62-aaed-04653868cb15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4f94de8-7e88-4d62-b63f-4fd6473169ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499f1ec1-30a6-4e86-8fc9-9ddb00770d69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e82a39a-bfee-4474-b701-c98587fc9321"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014739ad-c9ba-48ba-920d-563d92055751",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8920f98-1941-46e6-a5a7-23ec7012964e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8508f2-7377-434b-8d9c-da1431c43602"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "491e7db6-69d0-4131-90c4-a811cf66b3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "34d9761b-097e-4bd8-84d3-87c5780fd1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a407591-8a0e-4496-a1a6-49f8ce384dd2",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8b9430-8f37-4095-8ae7-bdd03771d70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5fbfc67-a1a3-402a-9a69-b78daeac1e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1774f50-1c5b-4b3c-97f1-173b51404423",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "369844e2-69f2-488c-ad01-ac8305e39a0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0266d7de-23ed-4c52-bcfa-4633b5fcb4e5",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "046f79f7-75be-447d-90a9-22083db1de2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f777d29-c289-403c-bd91-4385e25cb80e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea5fa408-d733-4572-991f-9c3501b46ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e585cba4-6809-4ee4-8b58-eca505add407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff106bef-de8e-4c98-a273-38123070c279",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d8adb93-e34e-4a4e-a124-ae314a779e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b72a9e2-902f-4d97-803f-51fb1e1b7033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "294adf92-658e-4600-a15c-5e176ba8695c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "61d8ed75-cd21-4029-ae95-8230cd83bd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcad04cf-3c42-4bfc-92cf-333c03a7b4a0",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e20d03-b8a5-44fb-a970-a9b9211020cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00222be6-399e-420a-a598-68e240582f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3691a95b-f838-4dd4-93ad-da437266331c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94cf2b25-eb79-49a4-acf1-27104a952e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a76103b7-fee6-42d3-bc40-c9584d3c8583",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db58a726-cd84-476f-893d-74edab88ebd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab9e8b35-2c4c-4f6a-95f8-813286a4a2d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac80cb3-1fac-4aba-898e-eeb1f84ca4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "746fd000-e2c0-436c-93df-234f9096029a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25de2a13-f15e-4e32-a77a-984646bd20f3",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a14c53e-6324-40cc-b7cb-49be46c093b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26944aa8-9651-415a-b579-d6138be1da10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7de590d4-ba8e-4904-b1ab-a8e5bbb4e54a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a32a4a63-7933-4052-940f-07846527904c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c340aefc-0067-45ec-8a39-a4842e374757",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbb85aac-50cb-45c8-a22c-9f00e32ca287",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee50e22d-0eca-4c6f-946d-e159e3d4e167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d1cdc8-d881-4300-a9bd-6d43b88ff49a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "198fdb59-5e9d-4b6f-bef4-bde9e38039c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca5a6eb-335b-4b6c-b89a-8cd51ae22188",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "596172fa-a001-4d48-873d-539ed24125ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3564d87f-d1d3-455b-a607-4b791c220e0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dfeee2a-8c14-407e-bf7f-2402fe562bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7615b78-9ce3-48da-a951-f3d66b69bf7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb27fb94-2bd6-487b-a471-a8749b58325d",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e155cc43-c81e-4133-9311-2f26e5f62df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fbd16c5-7477-476a-a4ec-83c363af6545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfa94d1-37ce-4e70-a0fb-b2ad78245348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73c8b2d8-fdb1-4e7d-9e04-94f3bc87efc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16a4ab91-0247-4449-8687-0eceb022f120",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "787ec3ea-6fef-4e96-b906-32504eb4665d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1388ac3e-fa47-4935-ace2-e939578c00ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "322d339f-6efe-49f2-bb6f-e012eb7f72e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1a1aa21-d775-4b0e-a142-20488fb88068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7238979-704e-456d-90ff-552f6617fafc",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17cb785d-fece-471c-98d0-c3852bb5a981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bd0225-cbaa-4cec-b227-14ac90ff8901"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47b7814b-c0b9-46a0-9379-f1d208957246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4401521-a1e7-456a-ba08-9cfebf3ebcfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4a46022-b836-4d72-8f96-04f4fb795c16",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779d0679-6a0e-4d54-9fcd-994de14f1733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f3ba67-8420-4c6b-9df5-48dd79afe2ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b34313-a051-4a23-acf6-aaf015d11fbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f84c834-003a-4ee2-855c-7bf3cc371ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "138ec999-cb09-4000-9a7b-62d865dc7786",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bdf03bd-6c24-481a-a617-9eded9844f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6befdf7e-d537-4d60-8389-2c35c4d7089c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038b8f4a-b6e6-4c56-98c7-4291669c5b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9749fedf-ab6c-4e4b-821d-9de63895e051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7034d0-fe9d-448d-8b24-abfa8f36abed",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a2f9e9-d76a-47b7-8b72-a1b734498ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38d361b-eb56-40f9-be81-ea87edccbcb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5b79d07-130c-4813-99f6-81040ec9c081",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "056fc019-cbaf-4728-a0bd-1c2d593982bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52db849c-996f-4d04-883c-c9b3c017325a",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578da726-9ca6-46f9-ac7f-cb24ed7bc461",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7eb8226-df91-4e0b-835c-d0b84ad0d0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf8dd8a-7a19-4027-9398-2f059d3d280c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e5a2756b-be91-440e-a67b-99b1cc03086c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d75eae1-7800-450d-b496-de01bcc5d715",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6eba910-4c8c-4eb3-9d14-fd0e1eb394ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c7fbc6e-d7ea-455a-b161-9a2b1f941f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b67c5e9-b18a-4512-a04d-c35b745728fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d240cd1f-e576-4218-aadd-302a7f7b4926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b2713ad-ae12-484f-a7e0-cc6749de23ea",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5341c800-6c5a-4bf2-a85a-d23d283d250a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f053cf54-1f29-49c5-b634-ecb8ebc18282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c4e3b79-dfa7-4396-bf7b-977bf872995d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa83690-5abe-4b9e-81f0-08660738cf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56d3b398-1a49-4b69-95de-c98879301d4f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14e7d3de-560f-4f18-aed5-b0305732cbb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7232864-bb0a-447f-8526-d2bba423aede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad72bebb-751f-4b55-ab7c-a653e97dd385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9453d4a6-73ee-49f5-bce1-ca1b5e880b01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91ec65e-2140-401f-a324-d40d5eba2266",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3d1944e-59fc-4cc5-bea9-99a6f8b73968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db03a9d6-2660-4f84-8475-121bde99c848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e9353ba-af99-431d-944d-c76aa8c0cf02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4e7384-1874-4ce3-a7f1-010ed1368de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d9ddbb8-e9cf-4706-a639-7e70e5853784",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cdb3444-1320-4447-b03a-8d894064ec96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21929c3b-8f3c-445c-bdcc-8ba23e0684b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ab0332-0a3f-4d34-9f9e-bbbfd689f766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "884fe317-837a-41d3-857f-b9c35b7dc755"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5aa8e5-0362-4115-921c-9030f7536c78",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f41afae3-4b9e-4745-98a9-a99d7e8ce778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "023abfad-79ba-4fc4-9a45-73f4a0c63ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38bfdad5-e320-43ef-93a2-c40d2da20998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d2d36dd-569a-4110-8f1a-0d150286a8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bda83108-a0c2-42ae-8ee8-dfd70bced1fc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec31949d-8255-4b91-b838-87aad975f45a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5908fe06-47b9-45c3-8d05-9af1c3162b30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0d16ff1-fe94-4f96-a4af-969315c2b1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e80bb277-7b45-4505-97dc-6af8588f00b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044d677c-0347-41af-b7a5-dffe5e50b0a7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6141f87-6bd9-457d-8706-7721340f492b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "745dd4d0-e0e5-465a-ad43-fbbf9c8bdfa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfae52d-212e-4020-be8b-a6f3de6381dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "869a7189-bf28-42e6-8e49-a459bf499e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81bcbbea-1e9c-47fd-a5de-56abba69187d",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e7ee4d0-88d5-4464-8dfa-bbadd54192e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9850ea65-d89d-495e-b05f-7548a5181d64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f60839-a2a9-4fbd-ab1e-dea6fbf7588d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8cf877-7e36-4c30-9589-c2380145c19b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51dc0e54-ef38-406e-84ee-f14d7f89c7ac",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f039dce4-2e9a-4ac0-afc3-2edaf840efa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "132098e0-7673-4de8-978f-646717ee5c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65a6215-f4ae-4a75-bc2b-3f178dccbac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce35c2e4-035c-42ba-9417-4c895ce08990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430113db-f9ba-4306-89ec-f6fce6450974",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bb0c57-97cf-4a93-b2a0-a283fa67f722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bb9a0c4-a6f1-4405-9971-74fca9805681"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf775af-7805-4e3d-a0df-0a560832cb13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7d79aef-9252-4cc4-aad3-87adf2b608dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37090522-159d-4fdd-b92a-dd7e591bfe78",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae00e77-2a3a-453a-a206-7ff4ac2d1e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c6e545-3d30-4bff-a5ea-34a0a8af8d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2f8689a-0644-452c-9a0e-41945b42327c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "fa003271-d757-456e-9552-a21248f0503d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a084aa-5288-4d2c-b8ec-21a2f4580afc",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54aa4e24-ec49-408a-a6c7-31baa1e0f2da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6f4cf978-74f9-4547-adbe-b8baa3913f8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316cc810-cd66-4d65-8167-04a27667cfc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c10722e7-cbae-4d36-bbcd-1b62824cd35f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6710b920-8116-4cf5-b087-57ff113e5a7f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9bb644-774e-4c8d-8f3a-96e32696cc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe115e3-5280-4868-afc9-aca46a63f842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6ba6dd-6862-4cac-a3ad-da8aeea7ad90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0da833a-60b3-4c56-8776-856ba3e3314b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c04bdac3-ff72-47ee-8fc1-6169c39d09a9",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45788e24-b912-4100-88df-7a353b6748d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1019a8d-0932-439a-ace1-e1d5261f72b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b4ba98-24af-469c-89fb-37d92e19ddeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7b5345e-2305-456d-8cb4-fa56c3b71d4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a9d9cab-0db2-405c-9015-223d691caf5a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99aaa25d-495a-43c9-b8e0-a8139d2f731c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdfde75-c9a4-40a3-b290-6fd38f639174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fa0600-494a-4491-8804-346ec0fd7fd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea55d038-cc17-48a9-8e07-29e34a22c2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a011fa25-0ca0-44dc-87c5-28384eaee255",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6dcc23-80ed-4df2-82ba-f2f9c9dfd4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f091057d-ead5-4887-a22d-7e45906397be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c029cb-400e-4e89-bce3-f4deb0522390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d96967da-aefd-4b96-8874-1e33975a224e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e87a33-b9ba-47e8-aed5-9f345e35e44e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c14ec5-0bae-42d3-85a2-8c8e870306ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "100554ec-b5ea-432f-8e07-4b32ec8a8804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa531b90-e3eb-4abe-b488-8dce9d81c458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "246841f1-6f73-4fe2-98c3-59ff215d2ed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaa5e4d-6fe9-4cc3-b903-941262b0fb98",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8b61d2a-bb5c-42f7-9bbe-0bfa1ee9890d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "130a8bbf-06d5-4fde-b549-301d6ec450cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf61fc30-d503-4e07-b9e8-71c11a4690a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "84dab777-4a3a-4092-95b9-610a725218d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5e3c727-4ae2-4818-a5ea-a360edd9b6b4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390ac144-23fe-4f92-b552-cb0f9da4548d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd47b3ee-d347-4fea-bb44-21c8c402f8da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8d5656c-3f62-49a1-adb6-9703dcdc78ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "27d6f396-f801-49a2-b45b-93bbc9255f50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe776d7c-3f83-492a-822c-b7f521cc02d7",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2945001-bdcc-43a8-a537-4bf3041493df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d02872b3-39bf-4bee-b424-b2c872870900"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b5b998-6f8e-4c20-a8fc-e4db1d145c5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "438e9359-fe18-4e94-a79b-eee38d3be6e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85256dc7-6e79-4cec-9d39-3b157479e3c7",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a352318-bd46-42d7-abc8-eb5f3d73aea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67524113-566e-4b09-a63d-4b11ffef47d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00545624-06f5-4139-8a1b-4189f514d862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d841d7-080d-4944-b599-1df8517498c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2161b77d-b938-4753-9ad5-fa8863e3cbb6",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b560ae02-f56c-43df-9583-0ba1c52598bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22d27cb-5715-4398-87ae-ef326cd9cdd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b205d5fa-a562-47b8-8e6f-799fa5ca976d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5158cbb3-55a7-4957-a8d7-a9408f453419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66238f2e-ceb2-4a3e-97f2-51fa67d1816f",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "715339cf-28d1-4aaa-9717-7bbd61b07307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0592f409-945f-4357-8aa3-1240782ebcbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832e4dc0-c4dc-4d81-a680-b823b6126731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e1b1f6c9-b5a0-4bcc-816b-a2a35bd1ea25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeccc058-450b-499e-b39c-dee95cc120a2",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2f474c-22be-4273-be66-484bfa0acd24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b949619-2f42-489d-9908-0513b1b4dc80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1297162e-8a7b-48c0-9d3a-b24f087b8816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f69f582-5fb6-46a5-aa45-17da86c3b80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600f9c41-afa1-418b-a9cc-6c5d86bab959",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba01c4c8-5e47-4b36-a933-2c3cf8e318f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c2ed5a-1649-467c-9319-44e83f76c8e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90a8dbf5-8f5e-4ed7-a6b1-45379642875d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fdce423-3e65-4c76-a419-251e6b8017d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c47fb4-8415-4f39-98e7-16ffaff8a0fc",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34c2c938-c0ba-460b-86ea-c21bbe5f31a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7146d57-7b59-4acf-badf-9a99766c2fa5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481adf20-c0e0-4aa3-b5f0-5386c00e1289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00a7f3eb-72b8-4820-a117-aafcf495826e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2ade14-3cea-49cc-a70b-1d53cbdeeb22",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1886afb-d7e9-42bc-858c-c83ebaddb96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2def9856-14d5-46cb-9d3f-534592e09d07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef79efba-a832-4533-9d3c-f36eae57002a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "18a261b2-56a7-4ccc-be55-edcdf253d4f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baf013ae-90c8-4f7f-870a-c0b4bb97317c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f68ca5b8-7197-4b48-8637-127ae31eb968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad1bd239-c9d6-4210-a26f-f3464b69835b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02a7c020-961b-4ae7-83ca-880e7d591c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e91dc905-bf13-44f3-b859-56e92c7234e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7edaa2e1-fddc-4cbc-bf4c-bdf3171aba09",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b699518-854f-4555-ab46-e3771f6ffd31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26fc24e1-fb99-4b41-9f0b-a3b68d05a589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784fbe29-5e5e-4d23-9384-e87a007860ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62b6b730-b822-4500-a3fa-1e4a1cdf48fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88fff345-ad60-4f7c-be84-fc905b0a6472",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9070e956-d05e-4edb-9b2b-40d4543ab1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7446e0d9-b665-4f5c-93ff-ca36b74e1790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad3c83a-bf44-438f-afcd-8314fb1cc5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "245db66f-9fdc-4796-9845-9336f9433b82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b36b0ff-67f6-4b82-be17-203c535bcd71",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20467dd4-8f93-4011-ab1d-f51cde70d809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28c14819-2ed6-4d22-b8c1-ccd5a3166623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ab6467-ec5e-44d9-a43f-d3682a412146",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f27fbc4-feba-4c43-818a-a3622c2d3990"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d35fcfe-b12c-4293-b5c4-f8bf58f633e6",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7d2eb9c-92b6-4c4a-8073-7fe687afc317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c683ce40-ecee-4456-87ac-5214b94eae85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af33f6dc-9238-4947-ab5b-4640273c1a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "95aa906a-cbb2-4a9c-aba1-cc627c5e0eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0adf94c-4399-4690-865d-dbb5fbbc85ee",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "985f8303-bcac-4f96-affe-0bcf589cd9fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b66ab3a0-d42e-46d7-b015-481530d4be41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbafc2ea-bacf-4798-9bd4-024ca7773efd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf5fa01a-0262-454e-9798-bc710f63c4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffad8ad-8668-46ac-8dbb-41f278c759d8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eea872a0-c2ff-4386-bf50-9e793a700650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e7a05b9-f300-4273-a407-0340709063c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2147bac1-5681-43a6-89e0-04117a44fd5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d64318da-004d-4ed8-800c-75d1c5120f0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "143d4bff-4ab9-4628-a4b8-7016e05040ad",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e7dff74-c84d-46c1-a1f3-dbfa79ec5787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c7f5160-b919-4b9c-8986-5ebeb96e08c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5e0b75d-673a-453f-99d1-d507b1797420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c0d38610-1d97-4e73-aeb5-ab28dde91ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e736c4-df79-4aff-9cea-a5db44dad944",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2169da4-1a6c-463b-9483-1cb74a208c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91b6f206-9a75-4751-9cf8-0e5cbc60ab3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca0561f-8ada-4240-91d2-5639701506b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2f42bcad-f187-4dd0-a095-6ba7a76a0644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6526c38-940a-4620-a7c4-b7cce54aff4b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3ba86f9-aada-47c3-a295-ae4ecee43311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb36db22-33ba-4d44-9f60-e9d2e317e61f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927c188d-f0d0-4bc7-9d48-f8afca999e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "c68b62f2-efb4-4ef1-8881-7f79e04bf79c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48aa513e-d997-4df0-aa99-1ffa39ff9c2f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc115471-6c7e-4943-b726-d979e932c642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "360d7170-d593-437f-b5ec-2c1b1b57b106"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93cdffac-8dea-40b1-8c56-bb4d981991ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "36ec5b38-d085-4a30-8512-bf64bbb54f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5175fc05-a460-44a1-bc57-b97f8a34424a",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269321ca-fe21-4dfc-a9a8-abca67c1adae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7d30159-0a10-42e5-8363-cd4aadad5c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32af7f1c-647e-41a1-ba1c-b19291a4106f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa4c149-45ad-4e89-8c53-6f9c3fafa49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5266eae-68f5-4cc2-b9c0-4ce612b2ca0f",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f48eaeb-e337-4d37-a9e7-a3866b9d5757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801b0c1d-d34e-4c1a-ad45-ecac5ccda56d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a381fc3-83cd-4759-a5d0-825039e86a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7a70b4-2c8d-43b0-9e36-4880110efa78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42efd669-57a1-47b5-9e6b-bd4e7bdc6995",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55e95b6d-3b40-4730-bde1-67feb5bb945b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81c27dfe-bd86-40de-9395-334bb3c0a524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0935993-6b2d-4e34-880c-814e3bfe7681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f419fe4-fdca-436a-bfa0-16fa92304767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9156e76-2fff-4197-bae4-27afa2fcf651",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b447f71-061c-4f7f-b288-03a6d4954e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9052a0ac-4eaa-4480-8b86-b538e1f3194d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a6f2d37-2ec0-46da-b1bd-070ced156001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b639b31b-ba52-41e8-ae06-d26b1f62b1cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df6b4236-6354-4a9e-a0be-4ce669aa12ba",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773b3151-d8e1-4a4f-9929-20ceee41bc1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e82fecb9-b224-4bcc-88c1-bd04049b332b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd820ebe-0b65-4d4a-badc-c8fd00d8cfa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ffef8ddb-d97b-476a-a0ff-465db299a3fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1f91d8-96a1-49bb-93c3-bf813fcd6160",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3119f1af-68f3-4e9f-a5e3-d081225d5547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3acc8694-ee45-4e18-890d-64550f0e1b40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c2dbd6c-1b83-4f8f-9035-1c485564647e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4ac1e0-81a6-47c8-84cc-407213b2b098"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cca3899-8509-4e76-92d5-97054d93da3a",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d840e346-a84c-4f4f-b937-7e57bd587353",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "842b38a6-367c-457d-941e-ca82932b6da4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9c8501-609c-400d-bdba-63c3011263c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "754fb4a4-8ef1-439e-8809-e50480b6f8db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e84a8b9c-88af-4af3-a719-5127a7e20571",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa07183-927f-4db3-8db4-146b5bd656a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7584c4fd-6860-46a4-8f31-d20fcb6174b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eaa3ade-240e-4387-bcc2-c76507ae5e8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40ae4b9a-49d8-477f-877e-a8ceb70af9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04a26f8-acae-4d60-8af8-4f8f080e8777",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2532a1a2-f68e-46af-a61c-0a75f5caf60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f53510b-dec5-4e22-a2f5-f7f2954fa038"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612bcd3d-b76c-4ab2-8ff4-2df01d95abfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7edd6b2-2d9f-4bb9-88a1-f4f2b8306c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d20adfac-5004-498e-885b-939643439e3e",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ea02e79-d686-4726-92b1-83ff1148e8b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b693dd6e-f0dd-4f28-bf64-e51062873226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed787cd1-7372-4147-a3d4-30b604d97358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "86aebe2d-e52c-419c-a4ce-0971439a5ce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8325e8c3-d996-48e1-b5c1-2171dd696b08",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf8e6bda-3f8c-4cd5-903f-a845cd04fa8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c96b7c85-85f0-42b1-b9ed-f070d09b9864"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4300115b-3de0-4c0a-8ee3-cc2cd1a7f126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7012a1ae-fc66-4985-be6c-e7dcd1cd9d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a86865-5eb6-467c-b408-5b75938c07ac",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eccb37d-f096-4af6-84bd-6a87d332580b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7011bc32-9706-46fc-8c92-f5dcc4d1de8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7234e77d-7a34-4281-9178-0776df438d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "313fed22-380e-4bef-98a3-244d4a6dc25e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f119268e-7ba7-413e-84f0-3283184f0ec0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21220e4a-c4f3-4bf1-a87e-e534b44ef8a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97d998a1-21e1-4423-87e2-0d63cf1c403c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c78e6931-dc9b-4f2e-b764-55e153c1ddc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fc2e76b-6a19-4393-bf5c-5ee06bc2141f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079dcac1-e648-48b8-9d20-fb74a78038ef",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f98180-1e3a-4d00-ba22-8da3e48a516d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eaf8b7f-f374-44f4-9792-392bda3624d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d872df9d-0fc9-419c-8ad3-65a844289e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b5fe57-328c-4c07-9820-ea413ac87bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9855ca-98e3-4df0-b9c2-7cb14942cc33",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "739cb790-a43a-45b1-a769-f6cc0d064a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3af7455d-3a49-4a32-b5bf-ced9475b1b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd1570b-1b86-4c3a-b397-e916da0f172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d8bafa4e-7d6f-4fdf-88ad-b1821bf049aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613f6732-66e1-4a33-bfb3-669e50e85d56",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "341ef049-6591-4c14-9cc0-4c65c4ffc32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344321f3-ee67-4ccd-b939-1d65f3d04a45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d19e723e-6bb0-4f51-b258-9c537bdf4aaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7ef841b-40a1-438b-978b-3cf16b32f6ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb1cc7d0-1180-49cc-9e4c-31e50b5b8a20",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb5e337-6184-491f-9b2e-ea3c951f9d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fdb1785-17b9-466a-89c5-2c877fd95b7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c1c190-19c8-4517-9bfe-2725dc395151",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbdb01c4-b8d6-4ef7-9d07-f92f576225d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179aa9a3-b948-4df7-b793-f00d91e07f3a",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8062639e-eef3-415f-bfee-62856b633b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf011bfc-9631-4917-87cb-2025da44f2dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af5cb536-312b-497a-980a-9f2f00a8e709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "010b3fd2-5805-4f10-ab63-2e28c1d4e51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83dbd99f-a14c-48ff-a857-de55ed01bb60",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab395998-5086-45de-9598-e60e6f143770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6886c566-e4f7-4784-8c8f-8ac73d8718c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b2ffacb-9a5e-4f37-b5c4-bfc63a7b8b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee34bb76-f466-475d-a87d-fa344aea238d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae6fb70-3e85-48da-9c00-8bc4293f1cc5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1003d2d7-3ead-47ed-acb5-06c1a6eb29ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60caa5e6-5713-472e-b074-6c32d8983558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51872742-23f0-44bd-851a-cc81f00edff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f915e0-4506-43f1-ab36-255ea0d37509"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db187891-e18d-4693-8953-82c149657196",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "030c08ae-7805-4fa7-8eda-60f1ddd51cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4e07cc2-703a-4c82-ac7b-fc5493d16689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a339f17-d58e-43bf-a5d0-0289143f632a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0bdbdb-2519-487c-ac0d-03de8fd0b253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b56217e8-8a44-4c26-a118-fdb8e69c19b3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d978a0bf-bb2f-4a4f-99af-da9d43686b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bf855d-6a04-4af5-9fbe-eeb9bee9ffdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8450f0c6-3073-4e79-8dbe-23b7d1599d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c844ef37-825d-465b-9865-99ecc5677c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5668004-873f-47c9-8fb9-1e7f606538be",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac2abc2-c173-4b7c-8efc-24952c7de1e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74cd14ae-79f2-47eb-a102-906748961d99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "777f7496-3925-4e44-a24e-65fa3280f0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4bf5b5e4-af76-4670-bde3-bbdfcfdb799a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a51e73-926d-4e7c-9554-64a43f6440a9",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "943094f7-0986-45ba-8687-0f94f3347fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5bab427-fbac-47d1-bc39-4c1c39f60ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33e8b5f2-bb71-4508-aa3c-9ef2dd4ce7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dbb93ea1-bd96-4e76-9b00-9b8756084e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb0954cd-b1b3-49d9-80b3-0fa08209fbc9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2725ddfb-817c-4931-ae12-f0506ff85728",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e2e9988-a80c-4cb7-91d7-050daff123e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160dcd92-779f-4f1c-90e5-f101a41360da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "66997937-23b5-4e6d-899e-b18135f4297a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01f80964-42b0-487f-b233-32d586f37701",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd50d4a-f93a-40ea-9236-5ad5f23e6e43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c54223-c665-4bf6-95dd-648db0c48ab0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86abc03c-63f5-467d-99a9-3a42b5a2c28e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb03dfd6-091c-47e3-9f63-cd184eed1eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54da2408-7a4d-4698-92f1-10435e0c9ccb",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719a0b5c-d884-4ae9-9f38-71ccc80712e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d104f959-3094-4071-8cd6-ab69626dc908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b169aa3a-74ba-4fd2-9064-69df9929e809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "68029877-40ef-47f9-9209-400cd4e1f822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11452e8-27f3-426d-8888-20d010a72880",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3608dab3-b4f3-4dbc-ac59-d331cb144025",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c01d8ad6-132f-4a6c-92fc-7699e5f188df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72a43782-e7a1-49cd-a1b7-1d6601e50d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "640bc2cf-5bf1-4706-b49b-1244313ed9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42d0045d-dcc5-409a-9fff-eca3e7aca5e8",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b6043d-5eb8-4074-b1ef-8386d1ab29c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bd91166-4f32-4366-b4da-53bf0ff5e2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daf9503c-ea42-4ce8-8e1c-45a4617332f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "94c465ed-b5aa-4fb7-973a-652996245354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56af1690-2c01-4825-8e3b-8cfc85572e31",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "082258c1-2157-4663-9d30-b52d885e3809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "cd2796fc-8a8f-4163-a361-7e460fb1bcff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13419711-a13a-4397-8594-ef40a1df1c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d53e9d82-710e-4d85-9db9-19f1c1c43bf3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7f0aa5ac-f298-4f80-95bd-5fc7549c664c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "974ee9f7-5921-44e6-883d-9f4767a68324",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f7444fe-552f-41f3-a172-bee55f0ee460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "794fc4ec-5dee-4813-85e9-3be438668d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcda393d-45bb-4eb2-a69a-a70ce2cf9b6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "867e64d6-3d11-472a-a348-5bb115aa4ceb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6097da1b-937a-4b68-8d74-54b5ef4cbb20",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0573f160-a5f3-4aec-9706-3ab785406a6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a8330da5-132c-4cb8-8aeb-41d154141378",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5fd12187-9d99-49ce-8881-09a483c2d1f9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d97f2e84-f086-4071-868f-da7c4a1036c6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "abc4e00b-525f-421a-b9fb-0f100162d91c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5430df63-1173-468f-9234-ac846f5f2c10",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b837013-dd89-41cd-b399-9b7081160bc7"
                }
              }
            ]
          },
          {
            "id": "859f8994-4e21-4b4b-ba27-71496f0e3490",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fa639c1c-984b-4a47-86dd-b53f46f8a760",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "ff5bbb5b-2b0c-4f8c-b791-5a903d3fa737",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c7d0dc2-151e-41a1-a05b-85e0459a5d81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "40a7b116-19fb-48ca-a80e-6687be0254df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b65801-f3c7-4baf-8b0c-7f7daeb0a4eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94af83b6-666b-4093-a2c3-7f7c49646432"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf5817c2-2e2c-45aa-9934-429c339ea98d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8a94ef55-67cf-4c0b-9aa4-2d52fae94f1b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4f85c7fa-0c69-4307-92e1-8937d2cdc682"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "339f7fc8-a04f-4ee1-a4b3-19ec29230dd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "72c6976b-a9bd-4b91-96f8-a2c996b04765"
                    }
                  }
                ]
              },
              {
                "id": "6640a072-9f6d-4cdf-9f21-0bfaaaa1d281",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "682bafd3-6d91-49c3-9196-6cdf895f97e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aa4ee5b2-91bd-4ac4-873b-b3cc4ca5ad0e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0d810e2b-3e3b-46db-85c1-9406bdf07159",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d8394149-47dd-4c47-a135-72300f9cdc4c"
                    }
                  }
                ]
              },
              {
                "id": "3bb8341b-a72b-4608-983c-dc112d85d9e9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "039b0d44-3be9-4c98-99ac-e76d30949baa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c3d8f57-829c-4a40-9611-6a6f86329ff4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca0fcbe8-5f48-435c-8765-56614a2662f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b7e2280b-f5c1-4109-abed-d894e44ad4fc"
                    }
                  }
                ]
              },
              {
                "id": "ac0609fb-b137-48cd-baf0-ab6a2e70b73b",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3cb31bb6-1bd1-4598-86c0-ae33f5d96355",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "91f9015e-e797-489c-b90c-9c141d9d0d93"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3cd46169-8de1-477f-835e-f0f897687620",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "be3d15e0-2125-43bb-82d4-3cc417f765ba"
                    }
                  }
                ]
              },
              {
                "id": "41c231cf-cae4-40a8-9b5a-8c42d7146c5b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d66df2e-3e55-43f8-ae33-a4401f0ebeee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0fbbe4ac-1c41-482f-b1bf-c4d29677fcd2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3c93e9d-646e-47a8-9dd1-6609bf105c7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ae841d69-ac60-4792-a7c7-e8ba81931b5a"
                    }
                  }
                ]
              },
              {
                "id": "c04fb111-d1d5-478d-bce0-4c5c4bb3caec",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "28838174-a9d8-4dfc-b7b3-245001cb26e6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1979c8e4-9029-4bc7-9540-7797a0a244f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1437dc6f-41ce-495f-baf7-dd6d8fd0c1de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a84b2c62-ed7b-4d72-8712-89778ab4fe03"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "447cb8e0-a0b3-4e9d-9fd7-4e852a237da6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "450465b1-2eca-4ab1-8420-ca2d8c4239f1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0558d227-483a-42ed-a77b-effa2103f875",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8cc6250f-5d29-43c3-b28e-76b8fb0292dd"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f8d12d27-c26c-44e1-afff-3c434114da93",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "eff688a7-9983-470a-ae66-f484ed77265f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6fc3ccc7-3aff-4b70-aa14-5a38c2a83388",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "707c91f3-e8e7-4f72-986b-8980efe1a486"
            }
          }
        ]
      },
      {
        "id": "a665c9f0-f478-4b6d-88c7-cce976bae7f9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d9225b41-53af-4f68-b556-747d8d3ca041",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f195a832-eb04-4adf-963b-26647006f442",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "733f69ba-0159-45c7-988c-e5ba1e07e73d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "010093a6-0a93-4d2c-b9e6-a1242d9370fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "563f8942-8a69-47d8-ab0f-e8ee39da1bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff9dbf16-c6cd-4073-bdfb-f5ecddd6fd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "348b1340-b0af-4e46-8bf3-7d76f545e865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de8c81d-9ff6-49d3-b270-10579222ce24",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f77d87-78bb-4422-8435-f173c8e9e091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07158894-7133-438b-89f9-6d465e0aa8bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9361423-444d-45b3-a768-1210b5c6d614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "17b4c736-b3e7-435b-98d6-8f5e5bdc7abb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da03f09-166b-4a85-ab54-b63b4fed384a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37044209-4257-4db4-bcfb-b3653b0a1c53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9c151a-b3a1-40b5-b563-53d756cf554e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "079c1592-05bd-4cae-a096-378a7dcf6970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "10fc0cd7-a497-4b6d-92d8-e293b3e5304f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bedd4232-66b4-4b74-a846-8b1add7e40ff",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "023d94d3-0706-4394-b02d-fe959359ce6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fa34d3f-a65f-41b6-a1fa-1522cf5e29d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b889d450-74b1-47b9-b9b1-825fdb41dc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6c1349d8-7c3a-41f4-a005-26e4b1756e59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3080473f-f7ec-47ac-bacd-180314bc759d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fdbff2e-7081-4096-ae00-eccfdaaf3d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48fe3cb9-fac4-4dcc-996b-31215da50fab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a32363e-6ce8-44b5-a216-304a28a3a223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bff3aa7e-ed32-42dc-ba1e-2a1592d510f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cfd13cb-f557-4daf-89cd-bb2aaff1e993",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd16b7db-6a3d-465a-8bb8-a6e06fdfc563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f119471-205d-41b5-b28e-f7210f033379"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0179d46c-b07b-4398-b1f2-66b543878f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1c7d65ef-f0ef-42ac-acf4-60e80e28cac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c929c986-17c6-4dc5-b824-8b1712ae8335",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090daf5a-b330-4d2b-acb7-d4ef650a7928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f7fc26c-d86d-4b18-93a4-3f480064225b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd5bfa3-dd51-4349-9a07-7010b9e95077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "12077412-53d9-4c89-86bb-5f787512ce2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b453ec5-ac9d-4499-a832-c3399269d8b3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae955c5-f30c-4cd8-9ff6-6b28aa213264",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdd72076-e743-4ac9-b6fd-ea4b08f0dcb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36807fba-e2f3-4396-8e75-4bc842d787f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa210cd1-fe1b-46c3-82c5-3fdde57451ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bce33cbc-ba16-464a-92b6-d500f931dab8",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab5119d-e290-48c6-8040-d1cd9d9ecfd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766c6c2e-621d-4aed-bd1d-5bfca3135667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd7736b-a628-42ad-9b9f-58e0a1137fbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6416d0f6-b90a-4904-9a46-878c863df919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0d1647-d938-48ac-b159-6fd4144352f2",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "040d4ce4-d0c5-41d6-8cfc-62a9e2df1acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc6fc6d-ee79-49b7-a584-506fe7e11a2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "206e1c76-58d1-4ec2-8679-50d1ea3a4db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a1a000-05ed-4298-a078-d156debb09d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86a6a7b-74fc-4d12-aeae-539715ef70ca",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29edc20b-933b-4cd4-aee9-0e49bb49460d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95228292-217b-4df6-9bf8-f84be7fa8490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df691fd5-fd6f-43b6-911b-84f0e7519012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ee5449ca-9322-49e2-83c2-8b90867e15a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fd0f7a-be97-479c-80c3-6fc7c1800395",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0aa995-ad76-4a1f-b3cb-2c3b931568e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d64c0fec-a06b-457b-9a31-a53dff8d875f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46f0dc30-1834-439d-850a-877a9ab3b22e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "190038dd-28f6-4198-8a77-2790dabfe649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e24f4dd6-e958-48ba-8b0e-4c63aac96da4",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d21c055-e7d5-40d5-a83e-f7fc9663666b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de85dbf6-bc2d-4c60-abba-b2d4a5fd85a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b583e2d-2015-425a-b271-5eb3992bd828",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf48cb77-9081-41d6-9242-6e80b35f1fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8987d642-9829-4d3f-90c0-d3f058b7eb31",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da89884-6eac-45c8-baf6-091dcb5d7bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2253c39-3f24-4f50-965b-f7c2e2df2ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc125fee-484c-4c89-9268-c13bc1c35cce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "528da9c4-a79f-416c-b267-fb31ddd936fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "098638f9-17e3-4ef0-b157-5484587eff56",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bb4451-0e87-430a-b751-8d68a0c91f98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0b53d18-9874-42fc-9482-847ea3bf2325"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52670253-2168-4090-ae20-1eb461937355",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "073d8c30-2e7e-4d37-bbdb-89cf1adbde67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c18af99-6379-4608-8bd9-f45f8877cfb9",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c886fc-a124-4962-9965-cf3670e6fcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93518b31-ef49-4a9b-a566-0e6ecc381454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79d3fb8d-3b52-49b4-a43e-caceee5b93e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "727ea1fa-f66a-42ce-946e-5952245f955b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98ce6155-ae85-44ba-ab54-3a26ce2cc0a9",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc0d653-f7f9-4626-ac1d-b4a82c8eeee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "019a0477-4ac1-4146-85f7-db6ac966696e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b294a80-29cb-4578-bdbf-76304ab78ab5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cc7b26e-b4e1-479a-82e9-0f792141955e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d300bcbd-e8b9-4a1a-bef9-2faab5beeeb5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c43c28d-f245-44b1-b0c1-cf0b3aaebb9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45579fcc-ac01-4112-a406-aa60cee1d1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82cd7aee-bb17-4346-96a2-9615bd7fba20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "456b2672-5740-4ac0-9be6-3572de0e98a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f523de49-8ec5-44dd-b6f8-534df79fda5b",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c05537-d92a-437f-af38-345bd1b9fca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b95d0c82-61ff-4185-9ae2-1dc54f175fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0c81ad2-e689-4d64-bc02-df14eecedc37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f993eab-0cd2-4730-879d-93740097701d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24923989-b5df-4905-ae2c-73b31f1fefa4",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c307440-6546-4e37-89d7-9454b4c37b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04f87f79-6b34-47d2-a9f5-43db1f99d662"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e1dd24-8be9-4661-ac96-910343a41c42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "31355666-b4ff-478c-a26d-890e02ad18f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc4a554-a42f-4006-bd6a-698293acd74a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c8a630f-9f41-4aa7-afc4-70258ce692c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7918baae-58c5-4ce4-bb16-b57aaf820cf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ec6d06e-87e7-4666-9312-f8b3d05a141a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be4a2775-83a6-4e01-ba3a-ceace5bf2d44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03458389-31a9-4ca7-aeca-221f7eedc9de",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b1a28b-6ea7-4061-b284-e2755485d9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add5570a-c2d3-42b6-aeb0-26d37733cc06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b14866f-7834-4000-ad85-7890c84cd585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "23f86ed4-cf0b-4f33-aa5c-00712da5cdc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1510ff44-3a2b-43e7-a213-44341801197a",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89a7b91a-f672-496a-a983-d00655a5b61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7280251-2f82-4a65-987e-121e30e88f35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a371ac-84a3-4fa1-8cdb-cecc68bf217c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4dfaa7bf-e16a-4242-9c75-27a6d111633c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69e8a2c4-5c48-4381-8116-e4d3ad025bfd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d40c8f-ab32-4cfc-92e7-c3ef653a86d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0cc8fda-d012-4b77-81f5-65e9079d7b57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b58ca7a-f6a2-4f61-a3ef-ec44c660cc48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "978d1ab0-5e33-4126-b458-308d0db78ec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c5a267-1887-42df-aea7-a11f6075f683",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab58f1ae-0bd9-44c8-a2ad-737e208cd662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37967dd8-8d86-4154-9fe6-6ae3897b1749"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd6d531-35be-4e27-864f-32f07bbaa07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1770d4e-5370-44d4-bc6d-1d139d830e15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27ae802f-daab-432a-a45c-a3a4df1fc3f6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c0d30d1-b536-413e-a86f-51c19e485063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27add8bf-040e-41d7-8eed-be1fe8828073"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2b60e7-e09c-4a94-b48e-2e17af50f3fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c708198-068c-4104-a8eb-d97e0d21c675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa92f4eb-3aab-4744-a1c5-6efebd6cf7fc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8d538ab-679e-4f64-941a-220dfa18ee91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218c0825-ea18-4a9f-9455-fb99d26f2ddf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f32c7088-2a21-41a5-88fd-3ac4980a4fbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a75ad43-f49d-45e9-828c-1415b1c3b98e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80036359-de7e-4ae6-b304-d98f348354cb",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7dc8c51-b38b-440d-8045-da0f6305abdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923eccab-2bbb-48a2-aa2c-2d953547d53a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7517d34a-0c50-48b7-82ab-412c17e055b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f68002a5-377a-4a2a-9c6d-d85f52cb739a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7bfa5b1-9353-4033-8607-9075d07453d4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d981fec-93ae-4a8e-9813-92bd4940d036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e3a0a21-7ff0-47d8-b30c-be2ff3cb5a3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a472ab3-20f3-474d-8acd-868f8c0e9cc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff2488e4-51b9-4e20-9f0b-a56f449e1ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57684c14-7e0a-4c5d-b4be-3c453885a7b4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3412b6a2-29ef-4b30-aa7f-9b7cffe1e96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30a7de83-c425-4c42-a3f5-6c2de62171d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00677541-14b6-4a73-87e0-1bac76d71375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0478520-bebb-4800-a527-fc836f9d67b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457b6767-82f6-474e-88ca-1487521ffbb0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d7baa35-5764-4bee-83fb-3f54d590c25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0fa828b-22e5-4f69-9bf3-91068270c27e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340b994e-c65f-4b18-8d20-bdb66bceb564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54ec765c-b140-48eb-9110-95a259290442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a999348-1b6b-4872-b319-ab7f7ed2aa5f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6029ad-2713-4139-bea6-0a82acc5f69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bf3274-cfb1-4ed3-b6bf-1af41c3f949d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5301f23-42ae-48ad-87fa-be8dd92647fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "970dbacd-133e-4abb-abdc-99427835073b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d14d0e-9430-466e-a4bd-8b1062a20c38",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "176b9eca-e47b-4129-9872-e043a84d7651",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69005370-15e0-4cb3-b7f1-ec2963ce161c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ee44c8-bf28-4aa7-b94f-22e2fc29024f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "daee62d8-a5d0-4c1a-956a-97d12751cc29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6b5985-0cad-4600-9fe9-3f483370c853",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2fb9048-4387-45de-b6ef-4c077f9e33d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65e88d12-b6e1-492f-9533-bfb5aed242be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab272176-55ef-43c4-98b5-d870379117e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "be233146-a168-42b7-ac10-39145a28cda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75b47534-8de1-4615-a25a-bac8144de659",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9de0e033-aa4f-4ec3-a88b-cb9da24161c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8787fd23-2ff8-41cd-b9b1-eb386cbf4e37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe33acd-9f62-46bd-91db-1b6cc2db140f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c506fae2-f853-4e42-ba19-cf47b2c25c84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e1131c-dfad-4419-9391-0be2f31f6fcb",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7c49dc-a0de-4f38-9663-cc639d9e0af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f53f4ec-b42f-46ae-ae72-7aa9da0bf466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc1d9a92-9b20-495c-8bf7-d7f43fd30ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbe77bc-dd58-4990-b526-647d431e94bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbe97e84-662f-41b0-a4cc-72fe2a7deee9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5074df-d00a-4abe-827b-2b52d4d142d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa9d6420-2088-4618-a812-78ebdc91f7b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de2ef1f5-aa3b-4ee2-90f3-a74595f097c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac024f55-1b98-4d50-8269-ed3d2bb83445"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "65f87afe-196b-4e2b-a595-9683ce0a5bee",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fb00c2ac-b1e6-42d5-8382-d5c529ba4325",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc8974df-07e5-46a1-adc7-a939f4efbcbe",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d25560-308b-45a0-955d-cb241e7517e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28fa6216-941d-4f20-94a4-4684565e0820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e7296aa-f422-4675-a1cc-19386d282743"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a0ba4d4-249a-42e7-8d0e-76c5d14b286b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e9b227f-a9b1-4795-bc18-fd0eb8ad652d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "35a9fce5-f61a-4fa1-a998-5f20c4233f4c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9694da47-c1fd-4615-b376-692ace6f4bcb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a34c8f29-d5f3-433a-a026-c416b2c2c32d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "0312532d-f9e6-4677-b9ff-c7f5ab2b7625"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d088add-252b-41c2-abe4-61ec43dda890",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d8decf08-4134-4614-9570-356f176e02fa"
            }
          }
        ]
      },
      {
        "id": "f3fe1d48-4ed4-4dda-aed4-62b14b6da5cc",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "fdeedcf1-208a-4cb5-bc4f-f60b9fef2500",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7f323a64-ed8e-4043-a555-2b22013ce6b2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "fdb27a02-c429-4f8a-b36c-2d8ec3734f29",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c876337-27c0-4851-88b1-e2ceca2344aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5142d92e-c8a3-470e-82d4-ec1d6b9b0dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1cb4799-da2b-4267-a51e-a656152b50d7",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e0f7294-164c-4d87-89f5-ec7fd28c935a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fba278bd-5477-4d7e-bab7-e65e9cc942a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc82eb0e-f0e0-4ce5-91cb-a75ac8205cc8",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c050779c-29b2-4f57-9e1d-2161233edd84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fe6b97c-ae4f-4851-b892-86f94d24ac56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93d9595-9e84-42ca-add1-d5accf76e356",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd150764-0750-4c55-bf82-7be06487546c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231d835f-1661-47ab-ad23-7cb9e37f7bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d84711e8-ae96-414a-bb56-2f670bdd7811",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b432754-b511-410d-a0b2-69c9bdb8f44a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d656c212-7082-4297-b41d-811f83aec1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c637e3fe-be18-43df-8f60-d881e00e18f0",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9361088a-cfb0-4ae3-a877-bd4ce1508998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a135d44a-3aed-4cc7-ab8c-83a097c38c65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e1843e-11e8-4069-a985-5eabbb1e06ad",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0dc8d9-ee0c-4e69-a5e3-4928d3617ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f23e8c-2eda-4eea-b2be-90f6ca51cc98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02bebc9d-abdd-42eb-846b-672f22c8820e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fde2863-97d5-49a7-b035-9cdb3e61f0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ea94093-044e-490a-93b8-ae63949a2e4a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dba1b8-4025-4771-9ec6-e9b4da9957c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "30f81a0e-fec4-4830-ab41-a7f7f59b9a13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eddd790b-1516-4a81-af25-3bf2e4f62530",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc310ef8-2b60-48c4-9f67-051a4e827f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c69a79dc-6edd-445c-a760-c9ebe0fabd97",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36e92c6b-e14f-4b02-99c4-28bfee1a022d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec969d04-7c70-4eb1-a1d4-db9e947c6bbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae78a61f-50da-46b6-a00f-a7b9bb7ba83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3514049-4788-4b92-8419-2057b5cc7369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e2ed573-4f32-4c7f-8c51-c3224675862d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fde9764-b9fc-4058-9621-4e0f3f38ad44",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "356c5332-cf3f-44fb-acc8-d904970ec4cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49e7e248-a996-4ce4-a0c3-879493587cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de4c7b7b-c3a4-41fc-b6c4-45af05ad3ec3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b009e87a-6b7a-44cb-93c2-c25c266500ef",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79cd1e6a-1ac5-4f32-b6f1-4bbdb30ba698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca962d7b-d727-4343-9030-dfccf163bbaf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96fa15a4-8290-4284-b229-94c4e35442ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0556d7d4-00a3-437d-9640-1e6a4ea8d816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99def31c-008f-4140-94c9-5737446a991c",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2571e8a9-6890-4f57-8408-f2ff35760391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "113788c7-8ce0-4dd1-8468-ac97c098bc1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abcf8dc-835d-4af1-875a-01ca3cff9b0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "290360d6-ce24-4142-819a-d26de329534d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920bcffa-72e4-4c4d-be4d-e6571dc80f95",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ded4bcb-555d-48d6-9f13-ffbe8ce7314e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf824c0d-2e7a-432f-a81b-665f7afe9e15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f6d581f-3f82-44d1-956c-946484b5405d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbbdc051-fb78-4678-8d30-5bda6b9f82d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03062411-7811-4a35-9468-b8bc02e6a4ec",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb1fbf3e-3df3-469d-8fd4-7700ab5ac4c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0a7642d-edda-4eb1-8add-9a4df3368301"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10db79d7-0852-4f02-a287-c3fa04a166be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd4cbd3-4602-4053-b231-80f667172f99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ccaec2c-2b2c-4052-81af-fcc52894f3b8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26a796be-5446-41b2-9f30-f1a26bb616dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79b110a7-7e2c-4df0-9c4d-669f18659106"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34e7ca3-3686-46f8-8263-149692c7c6db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6485fce-327c-4528-b9b3-b77b80d679a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48c24ef1-67b6-4fb3-a50b-48e4245a9494",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff16737c-0998-40ce-ad17-84bb949d4a3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bcaf61b5-63ec-4f22-9856-ac3097a3c5c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a936837-f59d-42cc-9d84-39843bfa47b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff6b4396-6e36-4b9e-96dd-2af3c476e9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a28f09a-ac44-4eb8-b51e-39bb42105210",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87702630-703c-44ba-9475-ce6b1fb12fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad28c8c7-0945-47ea-b882-7a8ef238104e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbf7f7e1-0ee7-4a33-bdc1-8e7c3f228f73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e992bda-e67f-4a53-ac9a-19f43afe3b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518e985f-08b3-4186-a72c-9affb3466efe",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "976ba3c8-acb7-48c2-a53b-fe7eb349f241",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e8bae6-2eb0-4305-b91f-2b1a0cfcf9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22472fae-6c9d-4801-8f21-8e7cd4efb2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca35250-525e-4270-8782-bfbc3bfdcbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1bac3cc-e4cd-4197-af54-c1cc1fa9dde1",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5675003-42a8-48c8-82e7-f40d691a0282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "440bc0c0-def8-468c-9c07-7c4273f15d11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5269f0c9-71b7-4795-8504-f34fe2129c11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d163a583-b10e-4551-93f3-92b9141bc317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2e35043-ee69-41b2-9f48-fa7a102013dd",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "761eeadb-3e44-4e7a-8e7d-5375a3faec4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a441790-1f5a-42f4-8506-d7639dc13d01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e02c533-009e-4c70-af24-bcd7713e979b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c9173b-8549-4013-81d8-88f64ad9c5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3068cc1b-7669-4ab7-9961-5070d444544b",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4f97f9-caac-4ca7-bfc8-f674913fd809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b65a90b-954c-4401-8431-6429421a3974"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bcd1ed-ab14-449d-9bd3-240ae828fc2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5755b8b3-ec9f-470c-8d1c-869a2c09ef8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa0f12c1-fa38-4355-81c9-994f5bccaa04",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0326d3dd-2e72-49f2-bcea-3610b118e17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec89d20-f992-4179-96a6-17069b74c01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca62ee37-b65b-4f44-9e50-ef3d1149bbf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f217619-d9b3-4585-8068-aed6a2ff8694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98b723f9-30d9-4794-a1fe-9256b5254fc4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af58c0e-05f5-4ade-8c89-d9775277152a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "844f2831-2007-4c66-b0a1-25e4869057f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8356eab-a503-46bb-89a7-554e175d58bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63e831cd-2913-4c0e-8731-fa3ce6681bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909ae695-8567-47ed-9ac8-e2d1340d209c",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a07385-4f1b-4b94-9c96-6e3d9a5e436d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f770fae8-cbd6-46e4-b7d7-be63d351b1e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd574930-245f-45a3-a20d-3eb13bdc8254",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dc395e4-d5f2-4de8-9dda-aa4059b7e09d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "234bb146-ef7d-4462-bd5a-319fefc3b451",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e449993-f679-4a89-bcfb-381d96f35b8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fee28ebf-e98b-48c7-a5cd-5fd1588e5ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c4a30d4-8244-471f-8dcc-66682164dd03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be531da8-ddf0-40fe-8008-9866834f684b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3cb6cc-cd19-46da-8d99-54c4c1b42f1b",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0064a230-8052-468b-a149-c39ea4639318",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72569c7f-5d0b-4918-a677-cc68ddc1e5df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74455cd8-207e-414c-a3de-150f8c0a54cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9312b6e1-4b20-4d3a-aff9-bc57b00d27d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8abdc431-aad6-4eda-96ae-b7418582144a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0014b191-7560-46bd-b025-23157867e3aa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13e76473-1d47-4544-9e33-c1b5caf50315"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62165d27-fde4-402c-9f47-29fd09ae9480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a04abdf1-8380-4050-83ff-7a477bef9845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85108dc1-b5bd-4955-a51f-3b31a6601512",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1abaa6f-2d83-4ea0-9a48-7304a64a9912",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33688a98-a665-4f30-9b60-89e093fa7eea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6aa8756-2521-450e-82d8-bac5f8a5f494",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c25bbe7a-2163-40e8-8e93-fc344344771f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1cfc20e-4038-48fe-88f7-1912adcca820",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c0b720-a5a7-48c2-8020-864fc8fea67c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e27142a1-b221-4d6b-b030-44f1a8bd5017"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6c00ee-e147-41b1-83d7-e589f4c89547",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "307ffa0a-2940-4730-8ad1-344b83905093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "398a439f-8dff-47b3-9a59-ed49f5e97aa8",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "badc2c28-8645-4947-8490-1d641913007c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08294ebb-a7ed-4fe0-be6b-ac8d6bf75e3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "384d69c8-59b7-468c-b46c-725a38c46203",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4281ccb7-4fc6-47a4-960c-1440de414075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9d03a0e-90e3-4e86-a845-225a34fcd9a4",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb66acd0-1906-48e1-9675-3207df2e8582",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae989762-848b-490f-9b16-e27cd4db01ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dd024ce-1939-4f6c-a2ee-2e6ff6d460b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b09e4cd-1d34-479d-89a5-91211b56ea7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bca174a-9323-4c35-99de-fe7fed43e382",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cd9a1de-c696-4dee-b2ee-0ef7a8e60ec9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d382ca72-265b-4a1b-b955-7f3ce484295a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc183544-f251-4f18-b2ce-0680f2e18d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079ba9e6-abab-41b6-91bb-b01c38f4b185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13570b19-6182-49a6-9894-49290ef83632",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94354ba-bcc5-4479-b67a-b65c13686020",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e5aa777-348b-4489-bf31-fb163b8ef102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "706ffc65-f2cc-431c-b76a-e1cd56c01034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14b8b952-d78b-46eb-996b-9f0d28400baf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c32ea405-14a5-4ac8-9f28-95b54ffa77b3",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6912678-7383-4494-8167-6294836f818a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a16978-4eb0-4033-b9f2-1657dde58a74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cc6e500-ca32-45c2-bdec-3a25a31eb8bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341ca83e-6588-4a5f-a127-ffc2b3928a4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9e5cc9e-28e8-4a18-9333-e7ad9b262790",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6274cdf0-1518-4ccd-baf2-1933f35f33c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9519106-181d-43ca-893f-170bb4cc4e91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36f98d5-1312-44a0-a54e-b727c74c7680",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e873ce6-930c-4cc1-a5cd-457ace3e7ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1500864b-fe82-4de5-9a76-f62fd98735ae",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd489969-7a78-4c89-aacb-b2a2ece6d8ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0af95dc-32a6-4976-bac2-fab7105ae039"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43ef297-eea9-4494-8f6d-3e63c1ed5b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7add2a90-b343-4fe5-8ea2-37db57bbd62e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b2e69d-d284-4740-9a75-c5669a4db229",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f211d4a-0086-4014-ba13-e5108bc1766f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1165c7ac-45e0-4adb-89a4-48c35d9389dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31f4e40-1d79-4b94-a193-a811ab6de2e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddaedd1-cd21-40e3-97f6-8020f427027e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65243057-860d-42a6-babe-e94e574f2f5a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fd21da9-abd2-4b74-a3ea-35a4d4bf6437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d423f6e3-7d2a-4289-926b-49fa6f90280d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b20893d-5b78-4d49-b626-a138cb082abf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd34ca2c-c370-4042-86ca-c30b3f030fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "842d35e9-8ecb-497b-8210-3b17db6ead9e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed5e862d-abb2-47b1-b77c-4dd34799872f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d50919-7f94-4080-81dd-6d71a0f3b579"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e54a7a-0dbd-4e14-9a62-8fbdfd3ad284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aad7bf0d-c280-41cd-8e22-77207df99083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa1ba1e-fa6f-479c-bbe7-72fbc16e057f",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d39b27b-a9fd-431a-a029-866bc5dd704f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668f8029-cd29-4c2e-8030-2645271fe91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7780675b-5586-467e-9329-2703d85375a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a36beda7-bcd5-4912-9a25-78e9e9f66371"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1222f920-c0ef-4f38-8d65-ab1ee1752616",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff7256a-a83f-4ba9-b4bb-92ddb8214a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dad9cbb9-a22e-4f24-a03d-d3214003ad01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74479d59-4455-40a5-ae95-e2cf3a985fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "325e3636-0b16-43bf-8322-db1bc3962bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08dfee2c-1288-4e24-ab6a-e331ccdf1487",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f12b9f3f-e47d-49b8-b060-2ef1ef81146b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93291b19-e81a-4b6e-b3a3-d83802203aea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da462107-a365-4a6e-8aa0-0de2b75dc364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a86e7e3f-10c5-40c0-9cd6-5e556ee7ed99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ae0b30e-f66e-47e7-be3a-ab7af44bbe4a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b200c456-4551-4522-8be2-ad40da705c8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8c5922c-6822-4b2e-8c8b-0087c0ef976b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9003271-6847-4761-b0e8-d5bdad7ec3a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24f82bf6-8acd-4b9e-9e8a-6283b1e1fd3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d30946-3c38-487b-9221-96e295dcde04",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e428b5f-aafd-4a23-b610-ae182115cce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9966d6a-5bfe-4897-9c27-186eff4f870c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b622237-2395-41fd-a805-fe092fa39f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d208572-da9c-4dc5-9257-42b0b74904b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1626c1ff-ad97-4bea-add0-c4b8b04ee902",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb851507-9958-42af-b4b0-ab6c7685065f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "880b7482-8b1a-48d7-99fd-2b212f9591a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb1a606-96a4-4c52-a928-e498a586ffe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d6440af-6bc0-4794-a438-cac4dce01503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14b633c-4be2-4806-9705-20a7d32acb11",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d0ff48-fa04-4405-b969-7a6950465c0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced808f9-da81-4185-890a-6d27fffaa9c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d156ff0-95a5-4940-a5d4-ed2fec1cd989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db78cfed-359e-4e05-8c8f-813b24a318ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22b58e4-cd71-489c-b66d-5e9bba85653c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d943295-ff7d-4a58-b2dc-ef24a0de45e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc7a09dc-e083-49c8-8038-19f1cee99a97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb3adfe-3f4d-4b43-a2b6-4978aeea1e54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7ace6a-48ab-4772-886b-437afd6018fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3342cd0e-d294-45e6-848b-9581b86e02f6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85a3cff2-f7f9-4137-b8ae-da4c0da9fcad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24a172ee-caba-46e4-973b-e1201c46221a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7666d90-abc0-4008-9331-9510c0d1c05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b646befb-fc74-4b1a-8bf5-4441004bfac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ff692b-54d9-47ca-a251-df9082ad130e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa9980d-f385-423c-9549-5a0344f2b048",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2440850a-1d50-44a1-bb2c-da6c0eba28d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98b42b29-ba83-45bd-9ffd-8fd43def8bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "121aa870-b8af-4ee9-8dfe-a6a6927bae33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "486a65eb-1540-4e64-902d-76ec3267b856",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d211b161-a15e-415b-9d0c-c66be622e89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58fbbd6f-6e81-48f8-9083-4161ef41f6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "238f35f9-a63d-4d05-a684-cced9004bbea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a12a18-b891-499c-9d2f-20d62b3e1896"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0768c152-a170-424b-8f50-b6502c1724b7",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ee59349-2b56-4172-852b-f96f2b829e8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ba2863b-eef2-4e33-ad12-b33bbf8af25a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ff5c14-59fb-400f-8f9d-0231b716b05a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c8c162-092b-4dc7-8b39-d51f7b371fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e9d972-2565-4479-856c-cf54b9b050fc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9993413-e3d4-4522-9e33-c881f1adff0e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ccdbfe-1daf-452c-8c56-18fbb8dcafa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20fd277c-6479-4d78-943d-a02a989998b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1373542-75a4-4ad1-a485-396940c6e9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "029a5b40-3e0f-4f82-8c88-57b71e0de8a9",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0ee2eb-6a4b-4660-8d9d-f692710a3af9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e68bbd8-5400-46ea-9f82-502a752fb38d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d2a3f80-5b67-4c7e-86b9-254d5c1ea53c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffe1b1c-cd9f-4947-a42a-7ea7b4c65741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb9939e0-c517-4068-9c91-546b4ab14c37",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85052fa7-66df-4c19-a219-77580682b8ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf912ff9-add5-43f4-a148-2f31ccd405f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c62959-e122-4fcb-bc53-90fe7deaa724",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6f94c0a-2c54-4648-a9bd-c285d3e5bb46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39ef32d3-8ca1-4100-9c5a-dcce05cef67a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b042b7-4742-42db-815a-478dbe6b6a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54ea5be5-0e2c-4264-8967-ab7d614c51d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fdf7bd-3c75-41c5-a7fc-ff14a972f678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7749e0b-2587-49e1-8351-743f0ff9edc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "260d14be-8daf-4a93-bb77-98238570ff4b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1f42561-8959-4f39-b721-9b5a395ee71d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f86d3bf8-d1b1-407d-96ed-e0ea99f39dc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc86800b-50f8-4d4a-a980-1021a3c1d4b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b5989ad-177e-4ef1-8f28-b51cb814a409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9a852d-eb07-40da-8922-b0fa0ec628da",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4490b09-0b1f-481e-a87d-9d6eb362e8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc026b8-f105-4008-95d0-42ce74ce9584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fd0a833-a109-4c7b-8679-74fbfebbd8ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f8d32f-67a7-46c6-a821-0e8d4b71f237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "124fa116-c552-4e92-902e-169ae62aecf4",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0666422-53d4-43fe-b0cc-217d17021124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f410b23f-bb56-4c80-9b29-6449497f277c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae823461-8d1d-4c17-989a-0ca5fb1b4eda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebcd2c45-708a-4b35-bb56-28a9fa72ea6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7c8664-c93e-4e02-985a-5d6446cc0191",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b8d408-104c-4875-994c-600698affa65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbc58b56-83db-42e7-9381-0c169aa1fc7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "490b5aff-3fcb-4692-b4ec-0f3b3c82560e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82bed4cd-a72c-404d-ae3d-107db36e990e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0170b394-0d19-4d58-af67-74c6be3c3968",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6290fef4-4956-43e2-9979-02b34f096898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "449d7607-0303-4e33-83c3-d18cfa089031"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92cf874-14f3-40c1-8269-c6c046b55710",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc119700-da09-4662-8988-c74f86f03134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185759a2-9a33-443a-9414-6a60fe599866",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c642752e-3560-47e9-950e-b5148fde9817",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30b7dcf1-96eb-4b82-bdca-f0c1a21862ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a43db91-f2ac-4bee-b937-3730cf21a1e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48515133-54bb-4aa7-ac11-4b53b7ff9729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f72be9c7-6088-41e7-acc4-28a911148532",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe7f9ef9-ad3f-48bc-920c-ed3c60d32e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84ae16ad-de4e-4f29-b5d2-4abbd3b2f2af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccddcf0c-a54d-4057-96dc-6446dee476b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aef88724-d517-482c-8579-2f54c121d0ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56695aa7-d992-4d56-b2e1-818e4a339b18",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3bac937-da07-43f8-b7fb-c99ef81758a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f05fbcee-9ecc-4c9d-a3d0-fac445482037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa6e36c-0a53-4d4c-a139-fc82479872ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0afee55-a3cb-489d-a631-75023eea8a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a05134-49cb-4732-8de7-be3d87944555",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb52f2d5-94c9-4301-b3d9-a46eb5575c3d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4febafb-b050-49f0-a880-c4f11ae3bf3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a64ea5a-eb05-4e9d-8706-87cbd16563bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f885c3ac-1940-459c-8f01-a0177a23963e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c627fd8b-2929-4dc1-a37c-5ae56aa6c043",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5cc1af-cf09-45d2-ad69-a448875eadf1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8941a1cc-3323-4753-96ac-7aac64837f9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9268175-56a8-4172-926e-f0d8af481d8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e95d68a5-0f1a-46f9-ae72-aabf4b10d25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bde9b4b-bc14-457c-bb66-6c1c04d268aa",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf5505b-7f26-4e82-b860-788b0a3d12bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dd470de-f527-4d0e-a65b-037b13deeacc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2560e584-3eda-4a18-b026-793985306de0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98918701-eadb-4cda-a305-3c68755f137f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a93887f-91fd-4fbb-a814-24148eca1476",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15b60c9f-04d4-45c7-8982-e6f2cdfe5c8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b4f965f-b48f-401c-a493-75dc28988254"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4096e425-edaf-4215-825c-16fa22ab3b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd64f39-2477-4443-b987-427f38f4c740"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85c4695d-c553-49f8-8a65-21b5c548724c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eb82c46-7912-4cba-90e6-09a525dc3225",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f3e995a-f21d-48bf-998e-877bb65d7950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed26948-fa23-4f97-97a0-58caf0a724c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0356617a-a309-4102-8c76-b7cc1a708df1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95936fde-1cad-4fd2-958c-074d4d5aecfa",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "406c6db2-9f5f-400b-abb9-7f4f279e4b70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfd41831-fdd4-45c1-a666-107cf21eb9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530ecbb5-18ef-457e-a486-6b2e1ac3c226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "203bc4f3-ba51-42c6-a46b-d269442bc3dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a992b3cb-f37a-4f40-a4ef-a4988bdc5e9e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fa1ff41-adc7-4073-b568-d3c9211ee7dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9134c3a6-942b-4515-9161-cc9449cedaed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff97956d-2744-42b7-9c12-7515b70c8147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47435bf2-b226-4d8c-953a-4a6f82d637ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72218513-6597-44a7-87b4-ac2a609344c0",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a70b51f-1c74-4dfc-80c8-ce3f991c7a51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f77a778-0664-46e2-af02-149591825a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a14615-984a-4ef2-afe2-85689986dfa7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa20d92a-63fe-4322-8467-245ddcd6c37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eafdb22-7ad1-42d4-9bf3-c1cd12bd6fd3",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35c02fe6-1590-4a47-be65-d3d4fdd1f57d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7123839b-edfe-47b6-98e2-ee4d7103f15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd0da766-88bd-4e12-95b1-3021f26bb148",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ad74da3-d035-4226-a378-02c2e9ce0cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef9f0018-67ac-44d3-a7fc-ac10a91b8b99",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ec94d2-8b56-4d0d-87e1-adf5b9fd8720",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ae2b2e-48f5-4b5c-9ac6-b24977bf09b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b697c613-0ca7-4ea5-b67f-9b6b12556581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11b2dfc-1b0c-4f62-9fdd-38230ec1f8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c438e1a-15ad-410a-ae5d-919206eb0836",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3bd3d1a-fec9-4539-89e2-e9a1d6094dbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15fe7d7e-3846-4af0-ae62-85ff2d7d4fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c586c3-e609-465d-95c9-48b9d6e5a97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66497e1a-5926-40c5-80a7-2cd10e5a29b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96bfa379-69f5-4fce-b9aa-f7dc0caa2ced",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a68c32d8-81a2-41b9-8f5c-5dde1582f1ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "378b7803-b82e-4b18-8568-5f9a1484b9ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a428b3e2-58ff-4cf5-b175-876b19c5222e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3ca3658-fc06-4e25-ab0d-1aa04ee3a1e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cdb633-024c-4c6b-b5b1-feb1c65431f5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "409c3812-e8df-4e24-bb0b-6c3c19947307",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5f287bc-d0bf-4bfb-86d3-e7fa40152abc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff3f15ff-3c43-40ed-875e-9f2e9780c8d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7418f71-0db1-47ec-a741-81e846ed7a1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b95b4b9-b1da-448e-b88f-b7383fee1765",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c929fe28-d6ae-4632-ac78-51ad63670645",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf192c59-87f0-4451-9ea2-5c8fb4e74454"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9eea87d-e579-4c58-bbdf-dd00192d18aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266e9b59-1f2f-443a-b660-466950c7ee70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1615aaf5-e188-43b0-a205-b32cb400bdea",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d2191d-4941-4ef8-814d-836d4dde1b3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b3d40b7-fe34-4969-9b54-83e7ceeb82a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "224c8cc6-8f6f-456a-ae2e-118280ab9bad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca163e62-b9ef-4173-999e-7c1a957976fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64456703-5e4f-4884-bb44-e35d0183b80b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55b939fe-93d3-44be-b73a-b675d6f9dbf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3eae0d9-ac06-4181-984d-e29c6ca9170f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5f7643-fb85-4428-89f9-a233b6608706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c858743-7154-4413-ba38-b136f9dd2173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4db48d-412e-48f8-a575-d8667bcd9fb8",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "158d75bf-1caa-422f-86b4-fe12ec43d608",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ba3c47-a4ad-4ee3-9955-e7b15c2a6a3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17c770ee-2fdc-4bd4-a522-3e5996ca3620",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7f0e28-6d83-43b0-954c-1d471b06f1ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9aca9a40-3675-4db3-b3aa-e9ed2b94567f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "134035a3-15b7-4d05-a88d-9616c9c24403",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bda514a9-6c60-4970-a979-1059be07fe5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b04f4d9e-dda0-44df-ac17-f8ea7b725847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "034380f9-0e5c-4797-b4fc-b05a6d5ce10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31209efb-060a-4bb0-92e1-90c2f91c99d0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b1b6b26-7466-4af4-b612-15eb8b27dd32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e4eb3e2-3c80-4e0d-b2ed-d19ead92f7bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78c23478-f6f2-4177-8c20-69d0b39769b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93f679f-345d-481f-8c53-4767117b4445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "476a7a81-98c5-41cc-9b43-88ade89f7fb0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de4202d-ac5f-4946-8bae-90d437e30168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58d5d11f-5214-4e2c-84af-9e5c0737c345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ef4bd14-fc74-4e76-9d5a-60ae6da16923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24652ab6-7103-4bdd-a85f-42d546257377"
                        }
                      }
                    ]
                  },
                  {
                    "id": "285f4b3a-3830-4a2f-b9f1-b83b03e004f3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2f4ba3-b4f9-4583-8442-1c904d592b77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53efbab8-dd6c-447c-9d45-c0356f7c5d48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e512e9-78ff-45f5-bd51-f3fec7aa12a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "580a177a-2529-4f8a-8e22-ab956ff92fa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63dfcc06-3316-496b-a420-c985a70b8e1f",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21ed9b2-5ed1-4e27-a97d-c7481b62afd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a67483a5-e406-44d0-815b-454b2290b88d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acccc0dd-2777-4180-8415-2308772982a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a13eda75-b9c7-4663-a121-7b9628c85252"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13b4f3a9-df1b-4a07-9076-adf62723617f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "839177c7-1fb9-4bab-a0f0-976cbd6cde75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9bca5a2d-50ae-4aab-b8d4-72c1ae0b1308"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c7a4588-8c77-4037-8ca9-3419fe57145f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c266686-ff72-4a01-a17a-c56e7674037b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3eb34d1-c9d0-47c0-85e8-82ac2e3ece7e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6994be-421a-4edb-9358-b73ec1fe47c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b63e043-20bc-479b-b178-af5f69646186"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2b4cf03-a0d6-46fb-a78e-881a291a4cc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40d7253-4154-4636-8a99-4fdb864a0b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1714a577-9e44-4275-9522-c8010cb52897",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96020472-1cbb-47dd-9004-53b06f605606",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aedc4873-52a7-4177-abf3-d70b175abf9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8927d98-104e-45da-9e71-631c209d9b47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4564e0f-b331-457a-b9ef-a20dcb6f3afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d88a00-243f-4400-8794-1c4cc4627dd3",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef957cde-9360-438f-9d9d-26c2e1dfc0c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e08ce9f3-2697-40a4-830f-821d9ab1a2fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48458104-08c0-44c2-8c61-340cca9359ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3064416c-4847-48a6-903d-a031625ddf0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "011854df-6dc4-40de-ac41-dcf0b0fd9c3b",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08feb632-283c-4934-a352-cb0ca9cdbd51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c9f0d92-af2b-4e24-9952-45c50d2e68f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a151bf5-c397-404e-a67d-39cbfaa81020",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927be106-b760-4254-8edf-753aaf15b37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2507a53a-f1a1-4094-8c5f-bec4f264e29c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "013e2fb3-5b07-4e19-9e9b-332035c75683",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5450cf9-1173-42e7-9cb4-5de332c2a269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08e11742-0385-4c73-9b8f-5b1ac591c0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6facd916-5674-42ff-a2fb-fd1b9f4dd19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167863f5-0b69-48b6-825f-6c607153304e",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5b56fc-f6f3-4d16-b585-1420f07ddd9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b976ec4f-23f0-4f0a-ad28-028daf21a651"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdb8109e-f432-4b39-8c85-900fc30c2281",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2174defd-4b36-40bb-8dec-198c32a677a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38f4059b-3667-4127-b903-314bebf14467",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903df14e-c4dc-4396-9e0a-caf6a3a6da1f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4444cbb-f21c-4833-b0ce-049832db07af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8307f9c6-49e2-40c4-a832-c18de5f9668e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "872db3e8-0499-4c61-b517-d693c21a91fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e86136-cfd8-4c8c-a597-f5f2aebb271c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d786ed7e-2c33-457b-bff4-14ea41963375",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d332650f-5300-4ad3-8be7-0a0e9b021300"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9604eeb-10fa-4f44-8d6e-3660c9b909b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408afefb-b8d1-4047-bd4e-805ebc043147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0f27965-d8b3-4e08-84ef-7cf038cae6fd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d124b70-9d4c-460e-be0f-c2819b101712",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bee6006f-240a-4944-8a20-11406183cd55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "152c35bc-881f-47ad-9ffb-a55a21d10fa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c83ecf3c-9cd1-456f-a3c5-ffc9f0f19b84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3f84f8a-3055-40ec-ac5c-0695b9265318",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e36d60-6526-4490-914d-f10e720cd2d6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8c87d166-2e63-4464-81ca-1f4e9c26959a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb29fabc-c87a-45ce-901d-0b8838589f94",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae6a169-5430-4018-8e73-4e5eee698c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bf8382-c4f1-4c9a-a9ab-c580b2b731a3",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ffacb4-196c-4748-955a-5a4154734d82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d300864-f4da-4190-86d7-342901dfcf14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f658774-e0fc-4e52-8ba5-24bccb5b496f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54682f9a-e9ed-461b-b741-370df546d4c3"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1573968b-a24a-4f58-8c32-71596908e2b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0ebde76-fad9-48bd-a705-4b4888dc7612"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a06908b3-7ca5-4e07-bbda-774eb7ba0833",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9dd880ff-d07a-426d-8ad8-c7d785b2e209"
                    }
                  }
                ]
              },
              {
                "id": "24ea4819-e5cc-4af4-97df-86cd1f663c9d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8038f368-5107-4206-a4da-57ab7eb0d3c3",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82aa8d5-7059-49dd-aa26-8c2c3e8d0dd6",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3284c840-e805-4523-af09-8ed48603641e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66344ff7-fcd3-44b1-b8bd-d47bba766fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06241e2f-b0e6-4f56-992f-a27cbea28e2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22cfeb41-30b7-4b39-955b-a82ac2cd30c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9fddcd53-02ed-4c97-a2db-63aa1cdb570d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6d870ab-3c5c-4d90-8873-95777d2815c0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52b45d65-39c8-4059-ab18-2024e66e801d"
                    }
                  }
                ]
              },
              {
                "id": "9fe7d2b7-3849-4be8-803a-7d7fb1ecc9d3",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "c7aec063-15e7-4196-86b9-cb19d829624d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c098cd25-bbdb-4d74-8eff-13cdef9df3d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "43be754a-a9af-48ca-a9f5-9440b2820034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bf6ed0-9913-460a-b360-bef1f18dbfc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55331d7a-b533-42e4-a9b7-9ccbe5586d9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "10bad730-eb39-4be9-a208-2f51d048daeb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "8ff01514-2d67-4c9d-8dbb-76d69d91f1c1",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8364dc61-e31e-4d93-b0ef-2be8f112e439",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "821aadf4-278c-4108-9d08-28313049886a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a22a75d-1455-40f2-a489-c9cc84a8276c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7e88542-649a-4ab3-bb55-2a2844b16550"
                    }
                  }
                ]
              },
              {
                "id": "26b503d4-2b67-4438-9d0e-fbf066034db8",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "293ad6f8-630d-45ec-a53c-e35588608f27",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "547ed513-170b-474f-b368-9bb37d0823c9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca8907eb-cf92-44e2-89da-e47184fcdc39",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "49d296db-81a5-49b7-b419-6d9f8cf6a2be"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c06db8e9-c26e-42a9-a673-47f37495c49a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d0879f52-a768-4342-beee-f7d35d4591c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7c42f49-2cac-4a63-82e7-aaa608ca9c13",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e482ec46-e6bf-4aab-9b88-8cbee4d6f131"
            }
          }
        ]
      },
      {
        "id": "f5eaf0c4-34f8-4f0e-b394-5457c7921058",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "102f465d-7ec1-443f-8bec-9bc420a6814f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d518fd2c-832e-4630-81bf-9df8bc76785c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f4ab2d9b-e4b8-4985-b403-f1dff40230e9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427ab789-4811-4412-a8bb-839e342def9d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "13c87091-7820-491f-b8cb-19b95cf4252b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8877673e-55e3-4f3b-9aa8-8fc371344f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "83bbf49e-543f-401c-b0ee-d4dfb39263a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf113658-0189-4dc3-8fe2-a01ef3c9785b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2364aa1d-6015-427b-9383-1a3e42fb0b02"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52da43cf-d2fe-45e7-859a-70270a01a59e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "557d6aef-3952-42c3-b1b2-6de2fb27f557"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d9f9ea74-461c-47dc-bad2-cf4a12fb5680",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "73548d08-52dd-4c34-987d-333c56f66505"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f2e081b2-9a13-4e84-b692-47514470096a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62f5b1d4-739c-440a-9b77-f4edbb02b8ba"
            }
          }
        ]
      },
      {
        "id": "12d8ac88-ff03-4f65-a007-23e8ddd85d56",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "94c37ac1-5cac-4f1f-9e30-7208f8a7e6a0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f9d9029e-1287-481f-b865-9a4546fdde37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29fc9968-35af-448a-a6c5-eaed5fb8c3e1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91851c1a-278a-44cc-b71a-364ed25ca5a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "268009fd-ad1e-483f-95fe-a1cda9d6ae05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "640c2008-7b71-431b-b8e2-44b70c5fa36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ac677df-9fd5-4c52-8952-69a23558b5b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "360f611b-92a3-44f7-9cb9-faf74a604aaf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2aa236dd-c2d5-4f6a-8c67-fe6b3ab84f60"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a964af1-0043-442a-9fdc-0f76c897f509",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d2c55cbe-e88c-4c79-94e8-aa9b56c22da4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "285539aa-f880-40fb-93da-19667efc5c31",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "01bfff81-40d8-4afa-8874-a29f2a50c357"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "509c1f63-51de-422f-b4f1-5c3cd32fbfaf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "60ac1972-f539-43b4-a3e1-21617ba48066"
            }
          }
        ]
      },
      {
        "id": "f3bb152b-dc02-418c-954f-85e3bf2a1a15",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f1fdfd43-b168-475d-a845-0736347037ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a6dced56-2412-43bb-9c7f-f07f73f65fa0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b02f9e91-f50f-40b3-8ad7-f54cabd97f41",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edd74318-824c-4b80-b34d-a29a120ca083",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "947773a6-e003-4233-ac78-39013362d9be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e34f26f4-16a3-4320-a144-5fcbfb4b6d71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7b5868e0-d3a3-448e-9e59-27ee83c7ff7c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "450db0f9-946b-41f9-91d1-0f6677bfdc04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b8367955-a08c-4110-a87d-52abd1ad5337"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8f17cb0-3e7f-4fc7-a080-6cc520cdceb0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6f4d33f8-5f60-4904-81fe-a40c8288110f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "705c9808-35ba-43c1-a605-bec335c59ad8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b90b0960-9fd9-4873-ba01-bff0337390fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17351273-05c5-4d68-bd31-05b83d0a2809",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76e7a623-fd86-4935-a4f7-a63db4ef724c"
            }
          }
        ]
      },
      {
        "id": "09c6b87c-9324-424f-9c02-f2052e3ec7ba",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "94ac2c85-59f6-4045-9057-302af9dd0005",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f68b9a5d-7cba-4ed4-93a3-754df0339f0a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "110f3e3a-e461-4430-9b2f-eee0d55cfc31",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40b0a69d-ed0d-4f30-a37a-b8745b3d7ac2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6a650fd5-e611-4719-82a0-74260de86989",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 117.48412698412696,
      "responseMin": 6,
      "responseMax": 1120,
      "responseSd": 102.29957052206883,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713486914570,
      "completed": 1713486952601
    },
    "executions": [
      {
        "id": "6a366f3f-9d56-410f-b085-f6068e3fc98e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b44f30ca-3847-4082-9d50-46ff06825941",
          "httpRequestId": "814c05f2-6d24-4873-9eb8-6a2be48bc94a"
        },
        "item": {
          "id": "6a366f3f-9d56-410f-b085-f6068e3fc98e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "520b8cb4-7825-4900-b1a5-7949a54569e2",
          "status": "OK",
          "code": 200,
          "responseTime": 49,
          "responseSize": 0
        }
      },
      {
        "id": "b12047af-7cc9-4a5e-86a5-c0e2669a48d2",
        "cursor": {
          "ref": "e94c3f2b-18ae-4235-83f0-130abcd1d3fa",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c27a2dc3-09c3-4ae4-9453-c0f44d05f0cd"
        },
        "item": {
          "id": "b12047af-7cc9-4a5e-86a5-c0e2669a48d2",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0a965728-d022-4f8f-845b-f050ed5a497c",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "ee5ab121-fa1d-4913-9b90-00e60cbddaff",
        "cursor": {
          "ref": "0618acc2-2199-4822-9d16-e6af0128f85a",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "17b47028-36e6-4750-a9eb-680e3a93d675"
        },
        "item": {
          "id": "ee5ab121-fa1d-4913-9b90-00e60cbddaff",
          "name": "did_json"
        },
        "response": {
          "id": "eea8915f-5333-4000-a5a7-dc8d3e7d0297",
          "status": "OK",
          "code": 200,
          "responseTime": 391,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5e53e2-ba8e-47c4-96b1-f6f5a91dec9f",
        "cursor": {
          "ref": "dba74c43-b79e-4af7-9639-2ebaaa1504a6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d70fae83-9cc4-4659-a1d7-5e8f3e9d450d"
        },
        "item": {
          "id": "ae5e53e2-ba8e-47c4-96b1-f6f5a91dec9f",
          "name": "did:invalid"
        },
        "response": {
          "id": "1f4e8e75-772a-4316-bc80-96e0ec0fe3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae5e53e2-ba8e-47c4-96b1-f6f5a91dec9f",
        "cursor": {
          "ref": "dba74c43-b79e-4af7-9639-2ebaaa1504a6",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d70fae83-9cc4-4659-a1d7-5e8f3e9d450d"
        },
        "item": {
          "id": "ae5e53e2-ba8e-47c4-96b1-f6f5a91dec9f",
          "name": "did:invalid"
        },
        "response": {
          "id": "1f4e8e75-772a-4316-bc80-96e0ec0fe3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 199,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b94b5423-3a9b-43a5-a2f8-b521da3bcd85",
        "cursor": {
          "ref": "50543a1d-c4a8-436e-a668-a9c27111fe15",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "435ca1bd-70a3-4a98-aa48-711f607d1697"
        },
        "item": {
          "id": "b94b5423-3a9b-43a5-a2f8-b521da3bcd85",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0aad7dbc-ceda-4fe6-9ddf-ed339feabbb9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 200,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd86af8c-930b-401b-906c-8d65d3db6134",
        "cursor": {
          "ref": "6958b35f-33df-4878-98f7-f3188b5d0441",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d48c7a2c-a848-4d12-9351-c2f23107c1f8"
        },
        "item": {
          "id": "cd86af8c-930b-401b-906c-8d65d3db6134",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ce9ec953-4b53-49cd-8c22-c61c0097728d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 87,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5561012b-b032-4efe-8761-2e8e080fb3be",
        "cursor": {
          "ref": "9d2bf6ca-51f7-4b7b-b0a7-c412c6ca91bc",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1ed759b9-f2c6-4dc1-9a2e-4a58268bc90a"
        },
        "item": {
          "id": "5561012b-b032-4efe-8761-2e8e080fb3be",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f24400d0-0ad6-43a7-90f1-35cca2afda23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e4ade4-4521-429b-a760-9e7ec58fd495",
        "cursor": {
          "ref": "3f4672e0-c89d-42e4-91d5-5051077a7bfc",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "852064a1-223e-46fe-a16f-08310274cf8c"
        },
        "item": {
          "id": "36e4ade4-4521-429b-a760-9e7ec58fd495",
          "name": "identifiers"
        },
        "response": {
          "id": "d214aa63-c8df-4f7a-97a1-282076f6f3c0",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310de9ab-b535-43be-987b-9978171eeac0",
        "cursor": {
          "ref": "da886a02-7a0d-4976-ab7e-142381430325",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9701eded-860b-4b28-8d2c-498c4db2b334"
        },
        "item": {
          "id": "310de9ab-b535-43be-987b-9978171eeac0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "efd1e97d-c913-4e15-a6f6-d5f777d0fb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d3b6654-8a33-4a8c-86b7-a443a26ea3e7",
        "cursor": {
          "ref": "707817b6-5c07-4e90-8bff-9cd9296e85e8",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "be2ff4b2-29ec-48eb-9a49-ea99077bf9aa"
        },
        "item": {
          "id": "7d3b6654-8a33-4a8c-86b7-a443a26ea3e7",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "978d086e-3fd0-486e-b80f-af6ae28c770d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1460f6fb-51be-40a8-8123-3c7cd6ac0950",
        "cursor": {
          "ref": "b248644b-3675-4d70-94c8-cfd6b91b0bbc",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c28b8402-188f-4c43-a3c5-71086f26ed8f"
        },
        "item": {
          "id": "1460f6fb-51be-40a8-8123-3c7cd6ac0950",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "5405b2f8-3c06-4b9a-af59-a50a74a302fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67091e7b-c026-4eb3-b429-ca764f26a256",
        "cursor": {
          "ref": "aa574d9f-39c2-4741-b017-47942449d63c",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "64031ca0-a50c-4b2a-a7da-755a3d07db31"
        },
        "item": {
          "id": "67091e7b-c026-4eb3-b429-ca764f26a256",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "e426b243-7117-4cc2-8f6d-0537e58b4f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0935321-384a-4328-a9f1-aefd45f3c61d",
        "cursor": {
          "ref": "aec5dd88-7e48-445f-a6ec-c771c1a7f7f9",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "c4ac1f1f-0dc7-49af-831f-70223a0c3761"
        },
        "item": {
          "id": "d0935321-384a-4328-a9f1-aefd45f3c61d",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "a25b8aab-d2dd-4c2b-b6be-a458e38a17ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216ce279-1197-461c-8914-11b4c847fac3",
        "cursor": {
          "ref": "01f9d826-57f7-4968-9dd9-35d3b05056a9",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "f9d1a1cd-ef39-4a14-b496-85f0333d3c93"
        },
        "item": {
          "id": "216ce279-1197-461c-8914-11b4c847fac3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7fb0ae13-4931-4e4d-82b6-e2c722978680",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34aae2f2-0019-468c-bb05-b81c4f0c9062",
        "cursor": {
          "ref": "d6b066b2-e12e-4c17-8906-dc97d60be77c",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "22b262ab-f268-401b-afad-fd06ce4fa50a"
        },
        "item": {
          "id": "34aae2f2-0019-468c-bb05-b81c4f0c9062",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "1ce83a4a-371f-4e1b-ab55-5e2088864961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014739ad-c9ba-48ba-920d-563d92055751",
        "cursor": {
          "ref": "9463916e-3614-49c2-8dc0-d71e147cb5e0",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f4d24ce9-5fba-4e46-9408-5295be364b26"
        },
        "item": {
          "id": "014739ad-c9ba-48ba-920d-563d92055751",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "285b0c54-743b-4d46-ad42-37d7503560ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a407591-8a0e-4496-a1a6-49f8ce384dd2",
        "cursor": {
          "ref": "6dcb9a90-3daf-43f3-b669-ac7fcca5f097",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "119107e4-b5f1-4943-bae0-c08348eef85b"
        },
        "item": {
          "id": "0a407591-8a0e-4496-a1a6-49f8ce384dd2",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3379bad0-435d-476d-8565-5347dea58732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0266d7de-23ed-4c52-bcfa-4633b5fcb4e5",
        "cursor": {
          "ref": "95cca0ae-b573-4f33-801d-e48db1dfa232",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b8295afc-920d-4241-b158-69d985c8c815"
        },
        "item": {
          "id": "0266d7de-23ed-4c52-bcfa-4633b5fcb4e5",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "afe4cce5-bb20-43f5-bfe6-001bbf28610a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff106bef-de8e-4c98-a273-38123070c279",
        "cursor": {
          "ref": "979899d3-30c9-4bb7-b19d-14febc4990c4",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "3a5a12e9-2258-44ab-bc66-f1227cc351d9"
        },
        "item": {
          "id": "ff106bef-de8e-4c98-a273-38123070c279",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b0a7c929-9348-4431-846a-a7d5def9d122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcad04cf-3c42-4bfc-92cf-333c03a7b4a0",
        "cursor": {
          "ref": "69cd35dd-19b7-4c0b-bd9c-26ef4ad6c373",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "e70f60b1-c610-4dbc-a295-1f45ca2e7ba8"
        },
        "item": {
          "id": "dcad04cf-3c42-4bfc-92cf-333c03a7b4a0",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "75ef75e1-2f71-4295-b479-4a371b97fcce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a76103b7-fee6-42d3-bc40-c9584d3c8583",
        "cursor": {
          "ref": "a2a4e3ed-30f2-47af-acd2-3c3b70cabc6f",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "e3c32271-a1f5-455e-a068-b56716ee5c48"
        },
        "item": {
          "id": "a76103b7-fee6-42d3-bc40-c9584d3c8583",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "436221f3-7b54-4996-b2d3-e1667abfba8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25de2a13-f15e-4e32-a77a-984646bd20f3",
        "cursor": {
          "ref": "ac8012d5-ba2c-4365-9190-15b80c07c1c6",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "b59a3f57-74ee-4a78-88f1-4f71d952387a"
        },
        "item": {
          "id": "25de2a13-f15e-4e32-a77a-984646bd20f3",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "e1bfb5e9-6db4-4022-992e-27300c74e123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c340aefc-0067-45ec-8a39-a4842e374757",
        "cursor": {
          "ref": "091009ad-1757-4d3b-b29e-b7b5f24215e5",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ff28118c-bfff-43e6-aa87-9e6a09716546"
        },
        "item": {
          "id": "c340aefc-0067-45ec-8a39-a4842e374757",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "1b459b0b-99c9-44af-8d4a-5cf8679506dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca5a6eb-335b-4b6c-b89a-8cd51ae22188",
        "cursor": {
          "ref": "936ecb35-55c8-4228-8520-31696152dd42",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "023f7b8f-698b-46a9-a560-a444c3bf4046"
        },
        "item": {
          "id": "aca5a6eb-335b-4b6c-b89a-8cd51ae22188",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bd882366-fc83-45ff-ba16-6bb31d3ce278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb27fb94-2bd6-487b-a471-a8749b58325d",
        "cursor": {
          "ref": "5b4f70cf-5e47-4bbe-a5ee-53f727e464a6",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0a08bd4e-bafd-4287-b15a-e107dccc70b7"
        },
        "item": {
          "id": "bb27fb94-2bd6-487b-a471-a8749b58325d",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "3ab38f0d-fb83-4a37-aac2-f121392ebb6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16a4ab91-0247-4449-8687-0eceb022f120",
        "cursor": {
          "ref": "2a2f8732-bbcf-4a11-a25d-837f207b0bd7",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "e4826ea8-5ff9-4f98-81e2-69dd602c340b"
        },
        "item": {
          "id": "16a4ab91-0247-4449-8687-0eceb022f120",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fa53ef92-c415-4eec-80db-989908946e40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7238979-704e-456d-90ff-552f6617fafc",
        "cursor": {
          "ref": "0ca7b703-70ea-4585-821b-4f7f7cb8685d",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "0e140ab7-ef42-4587-aff6-f3a75d5b3b9e"
        },
        "item": {
          "id": "a7238979-704e-456d-90ff-552f6617fafc",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "cab7f1cd-5a54-4789-b28b-ac0e12cf7da1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4a46022-b836-4d72-8f96-04f4fb795c16",
        "cursor": {
          "ref": "03e57ed1-174d-47b5-b92e-b5de1cf36a06",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "52ae9fa3-b6a0-4027-b532-00792049ec42"
        },
        "item": {
          "id": "d4a46022-b836-4d72-8f96-04f4fb795c16",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "dcaec486-f864-4a16-8af7-76ef69040f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "138ec999-cb09-4000-9a7b-62d865dc7786",
        "cursor": {
          "ref": "0ed4fd25-89b6-49e5-bc5d-21254b64a878",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "ef354815-5052-424d-a323-95380e538a1b"
        },
        "item": {
          "id": "138ec999-cb09-4000-9a7b-62d865dc7786",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "96a26d3b-38da-4207-8775-ed33f626e33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7034d0-fe9d-448d-8b24-abfa8f36abed",
        "cursor": {
          "ref": "0b4f907d-b5d4-4e9a-8207-061797c0f321",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "855fa27d-36fa-43ec-86c3-1ddb8c30dbf4"
        },
        "item": {
          "id": "0c7034d0-fe9d-448d-8b24-abfa8f36abed",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "32658bac-dda9-4002-9c42-981f94f967ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52db849c-996f-4d04-883c-c9b3c017325a",
        "cursor": {
          "ref": "f72c080a-e72d-440f-a80f-b262d41f7321",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3ce322e0-f1bd-4a04-987e-e072cb7d2c56"
        },
        "item": {
          "id": "52db849c-996f-4d04-883c-c9b3c017325a",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "ab59d5ad-1a1f-4c7e-92cb-2e86284fe838",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d75eae1-7800-450d-b496-de01bcc5d715",
        "cursor": {
          "ref": "3b3f422c-70b4-4024-a2ce-d6c70acd90cd",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "08e236c1-1f2d-49ef-a0ed-97aec28c2b84"
        },
        "item": {
          "id": "7d75eae1-7800-450d-b496-de01bcc5d715",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9133033d-80cc-4666-a863-c3d06766af76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b2713ad-ae12-484f-a7e0-cc6749de23ea",
        "cursor": {
          "ref": "bc2dc327-b5f1-4842-acc5-5cded24e33bd",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a9652448-4944-44ed-aac0-293ddbe9bf09"
        },
        "item": {
          "id": "4b2713ad-ae12-484f-a7e0-cc6749de23ea",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "a7bb2bb3-97f1-4a3e-890f-ba5cc266e0de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56d3b398-1a49-4b69-95de-c98879301d4f",
        "cursor": {
          "ref": "b5914007-2d5c-4cf4-83b5-7731dd124613",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "55ccd57a-ce1f-46e4-b917-a1a77e4371ed"
        },
        "item": {
          "id": "56d3b398-1a49-4b69-95de-c98879301d4f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "acb92a2f-87dd-4f0d-b29f-cd05b511b00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d91ec65e-2140-401f-a324-d40d5eba2266",
        "cursor": {
          "ref": "676cce5f-4fe5-43a4-abe4-33f9280ff283",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4a212c30-de02-4dc9-b072-a049188d829e"
        },
        "item": {
          "id": "d91ec65e-2140-401f-a324-d40d5eba2266",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "63b7f235-0726-409e-8bac-3cf9b50a9795",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d9ddbb8-e9cf-4706-a639-7e70e5853784",
        "cursor": {
          "ref": "dc32b162-550f-4362-bf9b-3f4f8caf1fc5",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "d119369f-607e-4306-9d15-bae66b8ec117"
        },
        "item": {
          "id": "7d9ddbb8-e9cf-4706-a639-7e70e5853784",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "a7da863c-09bd-4dba-82b7-fa6c6fa2afc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5aa8e5-0362-4115-921c-9030f7536c78",
        "cursor": {
          "ref": "f0bf4b3b-94a5-45b1-88eb-c4232486893d",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5fc78b91-c96b-4547-896e-3f5fdf6df6c7"
        },
        "item": {
          "id": "9a5aa8e5-0362-4115-921c-9030f7536c78",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "dff8a8f0-67f4-47cb-a3e7-8da414d2b846",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bda83108-a0c2-42ae-8ee8-dfd70bced1fc",
        "cursor": {
          "ref": "ff6ed223-5d01-4f38-8c81-6864de639b30",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "607fb9f3-eace-41aa-8f15-9fc85cd1359d"
        },
        "item": {
          "id": "bda83108-a0c2-42ae-8ee8-dfd70bced1fc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "81a5b5f2-76da-4410-82e3-ffda8383f3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "044d677c-0347-41af-b7a5-dffe5e50b0a7",
        "cursor": {
          "ref": "bee96066-76e3-4cdd-a268-1ae85bd8d972",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "dae2005a-d562-438e-9625-ef82df4d32a9"
        },
        "item": {
          "id": "044d677c-0347-41af-b7a5-dffe5e50b0a7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "3a24196f-88c8-4bcf-b13d-21cc126d0859",
          "status": "Created",
          "code": 201,
          "responseTime": 1120,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "81bcbbea-1e9c-47fd-a5de-56abba69187d",
        "cursor": {
          "ref": "16a1917f-f09a-47f9-902c-bb36d13a91d9",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "5c4dd896-b7ed-4f75-9d29-e5908e8cc94e"
        },
        "item": {
          "id": "81bcbbea-1e9c-47fd-a5de-56abba69187d",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "80c2b0f8-f3cd-49b1-9d1f-6c4d054c3d5b",
          "status": "Created",
          "code": 201,
          "responseTime": 377,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "51dc0e54-ef38-406e-84ee-f14d7f89c7ac",
        "cursor": {
          "ref": "f053b104-df14-47b5-9e96-7a3c3d433e6e",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "be7adc97-d3bf-4e30-bea6-6a6e5b33f247"
        },
        "item": {
          "id": "51dc0e54-ef38-406e-84ee-f14d7f89c7ac",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ca154b0e-f771-46c3-a6cc-b82b77b5c891",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "430113db-f9ba-4306-89ec-f6fce6450974",
        "cursor": {
          "ref": "5bfd0f56-48a0-4975-b845-d41b3ca1db0f",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "6a4d6198-8d8c-45ef-bc2b-1839b89a964e"
        },
        "item": {
          "id": "430113db-f9ba-4306-89ec-f6fce6450974",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "cd9bd4fa-ab81-45b7-a4dc-0166db407fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37090522-159d-4fdd-b92a-dd7e591bfe78",
        "cursor": {
          "ref": "7f5e537f-84d0-45b7-867e-150c7db4993b",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f8e85717-820b-4562-85e0-05584a909c1f"
        },
        "item": {
          "id": "37090522-159d-4fdd-b92a-dd7e591bfe78",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "388746cd-9724-4f39-b09c-3cf41a78e82a",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "39a084aa-5288-4d2c-b8ec-21a2f4580afc",
        "cursor": {
          "ref": "42005354-14c5-4cda-800a-6d805f539e80",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "bbb71294-ea6e-46b5-a82c-3d105727b250"
        },
        "item": {
          "id": "39a084aa-5288-4d2c-b8ec-21a2f4580afc",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b5b9a9a8-2a10-4da2-a80d-801f9176227a",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6710b920-8116-4cf5-b087-57ff113e5a7f",
        "cursor": {
          "ref": "04bc92e1-8aaa-4cf6-9af0-e3671ee6e67c",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "77e475a7-b351-479d-8500-c914d4aea259"
        },
        "item": {
          "id": "6710b920-8116-4cf5-b087-57ff113e5a7f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "f85c4cf0-9989-43cf-a6d9-ee0e20362a9e",
          "status": "Created",
          "code": 201,
          "responseTime": 323,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "c04bdac3-ff72-47ee-8fc1-6169c39d09a9",
        "cursor": {
          "ref": "2c1427f0-3dfb-4145-86c7-b734d488b43b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fa23a025-33d0-4574-baf7-abb57a7f5cb1"
        },
        "item": {
          "id": "c04bdac3-ff72-47ee-8fc1-6169c39d09a9",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e15f1b74-0246-47c3-8089-a95b5ade4a2f",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "7a9d9cab-0db2-405c-9015-223d691caf5a",
        "cursor": {
          "ref": "1dac460b-ebe2-491b-9fe2-9b158190bc7b",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "bed59f7a-8f93-4375-b174-bde90b45cfb4"
        },
        "item": {
          "id": "7a9d9cab-0db2-405c-9015-223d691caf5a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9fb1b73e-aed8-4e0a-8579-65ef224400c1",
          "status": "Created",
          "code": 201,
          "responseTime": 346,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "a011fa25-0ca0-44dc-87c5-28384eaee255",
        "cursor": {
          "ref": "ca9ead18-438b-41c4-aa0a-63708684af33",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "1e419986-5c5b-4023-9c76-7f1add6959ce"
        },
        "item": {
          "id": "a011fa25-0ca0-44dc-87c5-28384eaee255",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c02c5a3f-d872-4531-bd70-d64d4b72815f",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b9e87a33-b9ba-47e8-aed5-9f345e35e44e",
        "cursor": {
          "ref": "f3d5f39a-245d-4362-b248-f12bd7b7bde9",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7f3c9da9-bb7f-4d4a-9936-b13f4060af42"
        },
        "item": {
          "id": "b9e87a33-b9ba-47e8-aed5-9f345e35e44e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "6d02046e-b781-4751-9ff5-50e463f6b0f1",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "bdaa5e4d-6fe9-4cc3-b903-941262b0fb98",
        "cursor": {
          "ref": "e6be7da3-4632-4086-bfa7-548b3800ff7b",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9582c7b0-940b-4c26-8f80-0425d77d3ec4"
        },
        "item": {
          "id": "bdaa5e4d-6fe9-4cc3-b903-941262b0fb98",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "27cdc73b-038e-4c40-8186-699445f23476",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "e5e3c727-4ae2-4818-a5ea-a360edd9b6b4",
        "cursor": {
          "ref": "ce93494d-99a0-431c-b76f-258d0828986a",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "80fbc9d3-9a70-4d8c-bce2-0c4e491e814d"
        },
        "item": {
          "id": "e5e3c727-4ae2-4818-a5ea-a360edd9b6b4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "829fd6f6-7d5c-4366-ad51-6d4b4e57c9a7",
          "status": "Created",
          "code": 201,
          "responseTime": 421,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fe776d7c-3f83-492a-822c-b7f521cc02d7",
        "cursor": {
          "ref": "b98d9264-93d7-405b-9c1a-9df0da28d7fe",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "9d5c24d1-f073-45dc-9ddf-652cca08d19c"
        },
        "item": {
          "id": "fe776d7c-3f83-492a-822c-b7f521cc02d7",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2eec92b5-5dee-445e-b76b-b75fd77a52f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85256dc7-6e79-4cec-9d39-3b157479e3c7",
        "cursor": {
          "ref": "aa33c547-ed7d-44bd-899a-866960183cb3",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "480ea32a-5a60-4dbe-8176-f64790e27bd3"
        },
        "item": {
          "id": "85256dc7-6e79-4cec-9d39-3b157479e3c7",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "770761f0-93e5-4500-90b8-765813b8487c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2161b77d-b938-4753-9ad5-fa8863e3cbb6",
        "cursor": {
          "ref": "73d21d09-dc91-41ee-bba1-f87a86204019",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "11349031-0a3d-4913-8f7e-cb33cc363545"
        },
        "item": {
          "id": "2161b77d-b938-4753-9ad5-fa8863e3cbb6",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "bb5db560-68f6-4e92-90ed-9d685a77202c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66238f2e-ceb2-4a3e-97f2-51fa67d1816f",
        "cursor": {
          "ref": "707b7a24-18e1-4a18-9869-0083fb45b588",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e1e2d451-ba09-48ba-bf8e-610efed0ded9"
        },
        "item": {
          "id": "66238f2e-ceb2-4a3e-97f2-51fa67d1816f",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0a7eeb56-42b5-41ae-af3b-e74cd70f4ac2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeccc058-450b-499e-b39c-dee95cc120a2",
        "cursor": {
          "ref": "8c8a8d21-017d-40ee-985f-503d29761ca0",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5cdc98dc-913e-4e01-8f6b-50c4497ea30b"
        },
        "item": {
          "id": "aeccc058-450b-499e-b39c-dee95cc120a2",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "adfc2a9a-592b-4a55-b06b-7767a1020c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600f9c41-afa1-418b-a9cc-6c5d86bab959",
        "cursor": {
          "ref": "3e7d8549-77b9-45a0-91b7-24d5162cf3b9",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6910d2ec-4429-4eb2-b25a-2735d0cd80a2"
        },
        "item": {
          "id": "600f9c41-afa1-418b-a9cc-6c5d86bab959",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "4d42075d-7380-4a34-97db-d2bd9728868f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c47fb4-8415-4f39-98e7-16ffaff8a0fc",
        "cursor": {
          "ref": "36525bee-fcd2-45d3-8bf8-d6d43d0af1f9",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "734ed70f-792f-4842-abc6-2da0fcc44ca4"
        },
        "item": {
          "id": "d7c47fb4-8415-4f39-98e7-16ffaff8a0fc",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bf35eeca-778e-4a2c-908e-c53e49cb765f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2ade14-3cea-49cc-a70b-1d53cbdeeb22",
        "cursor": {
          "ref": "c4376d02-c977-45e5-9a12-a7252af51ee9",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "658cc57f-a024-4d0e-bd5e-a1ca770fb5ad"
        },
        "item": {
          "id": "6a2ade14-3cea-49cc-a70b-1d53cbdeeb22",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "2822352f-9cea-4557-9568-26860cd2afd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baf013ae-90c8-4f7f-870a-c0b4bb97317c",
        "cursor": {
          "ref": "e234e10b-7211-477b-ab7a-c282996239c0",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "0e74bd05-285e-4496-a635-731291683df0"
        },
        "item": {
          "id": "baf013ae-90c8-4f7f-870a-c0b4bb97317c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0d97be63-84c2-4259-8da0-fc022dfdaba4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7edaa2e1-fddc-4cbc-bf4c-bdf3171aba09",
        "cursor": {
          "ref": "b06c34be-8a58-4e24-9006-eadf2cc9ed4b",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "2fd76abc-94ad-4b5d-87c4-1e0e643c0bc1"
        },
        "item": {
          "id": "7edaa2e1-fddc-4cbc-bf4c-bdf3171aba09",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "44beec1d-d86e-458c-a374-c3b085298e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88fff345-ad60-4f7c-be84-fc905b0a6472",
        "cursor": {
          "ref": "1b618fe1-493d-424e-9626-a26b2d967b6c",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "92e00e46-948b-4d4c-99da-23d4cbfce8f8"
        },
        "item": {
          "id": "88fff345-ad60-4f7c-be84-fc905b0a6472",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1a44ab3d-59da-443c-be47-fa63afac6f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b36b0ff-67f6-4b82-be17-203c535bcd71",
        "cursor": {
          "ref": "f34254de-3be7-4385-8db0-43b791a3dde2",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a848c7be-6856-488a-a046-f5c7e48e1e2b"
        },
        "item": {
          "id": "2b36b0ff-67f6-4b82-be17-203c535bcd71",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0c2afd3b-e0a2-4aa0-9c9a-e8a5210dc331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d35fcfe-b12c-4293-b5c4-f8bf58f633e6",
        "cursor": {
          "ref": "6b630cb8-366a-4544-9765-faf5f171fff3",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0061c4be-4a3e-4eec-9d4f-be29da1f2dae"
        },
        "item": {
          "id": "3d35fcfe-b12c-4293-b5c4-f8bf58f633e6",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "f8a449cd-0117-47b6-b619-7c19742047d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0adf94c-4399-4690-865d-dbb5fbbc85ee",
        "cursor": {
          "ref": "e0419548-c6fa-4140-8aa5-383c3ac167b6",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "4bc0a5d5-63f9-4c51-ae01-b76ddd892ce9"
        },
        "item": {
          "id": "e0adf94c-4399-4690-865d-dbb5fbbc85ee",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e06b30aa-a1b0-49cf-88c9-dfb5f9f71120",
          "status": "Created",
          "code": 201,
          "responseTime": 379,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "1ffad8ad-8668-46ac-8dbb-41f278c759d8",
        "cursor": {
          "ref": "5e26ba5a-61df-4598-9e1b-3d3b931a284d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "79c65c82-10c4-474a-913b-746b5ea945bb"
        },
        "item": {
          "id": "1ffad8ad-8668-46ac-8dbb-41f278c759d8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "993b21a9-f368-4f0d-9040-7fd6fc404fc9",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "143d4bff-4ab9-4628-a4b8-7016e05040ad",
        "cursor": {
          "ref": "96241137-f080-409a-8919-a9bdc705db07",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "b02a33fa-4e38-4be2-9c48-2b9e9d24978b"
        },
        "item": {
          "id": "143d4bff-4ab9-4628-a4b8-7016e05040ad",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f99228b5-ed77-475c-8e8d-21bfd90ef2b6",
          "status": "Created",
          "code": 201,
          "responseTime": 333,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "13e736c4-df79-4aff-9cea-a5db44dad944",
        "cursor": {
          "ref": "72452f3c-c56c-444d-94cf-a39127a8ad3f",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f77a2411-1164-47aa-9207-50190c02dcea"
        },
        "item": {
          "id": "13e736c4-df79-4aff-9cea-a5db44dad944",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b617afb5-2e28-4edc-9d24-54f22215f9f5",
          "status": "Created",
          "code": 201,
          "responseTime": 376,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "a6526c38-940a-4620-a7c4-b7cce54aff4b",
        "cursor": {
          "ref": "4f7f09a9-6f65-450d-9719-593cc2ff5f9c",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fadc9116-10c1-45ee-87ea-4e7bbc427e3e"
        },
        "item": {
          "id": "a6526c38-940a-4620-a7c4-b7cce54aff4b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f44f4047-79c8-4066-b896-6664ee4b9af5",
          "status": "Created",
          "code": 201,
          "responseTime": 329,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "48aa513e-d997-4df0-aa99-1ffa39ff9c2f",
        "cursor": {
          "ref": "7f532f55-0e89-42fd-b426-b8b24959f012",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "7d1c124c-ccf9-4bf2-9472-bb2ce060b1e2"
        },
        "item": {
          "id": "48aa513e-d997-4df0-aa99-1ffa39ff9c2f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "2a5d3e5e-a5c6-4006-a1f0-f87cd5b881aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5175fc05-a460-44a1-bc57-b97f8a34424a",
        "cursor": {
          "ref": "53d44192-7782-4a0b-baa2-39f0e698c6cb",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f44e2db7-9497-4fba-9c0c-7f2808806cb9"
        },
        "item": {
          "id": "5175fc05-a460-44a1-bc57-b97f8a34424a",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e2f2262f-c226-4b2f-bba8-c0400be2bbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5266eae-68f5-4cc2-b9c0-4ce612b2ca0f",
        "cursor": {
          "ref": "f4d9a878-babc-4157-ac0c-a4936565c309",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "72257822-b060-473d-ac17-ad58024cee9a"
        },
        "item": {
          "id": "b5266eae-68f5-4cc2-b9c0-4ce612b2ca0f",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "d89d5775-6883-4baa-b1c1-b9035961784e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42efd669-57a1-47b5-9e6b-bd4e7bdc6995",
        "cursor": {
          "ref": "92701830-168b-47f6-bae5-69257979777c",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "42bdc4d6-70c5-41e4-b16a-67dfb9fe4694"
        },
        "item": {
          "id": "42efd669-57a1-47b5-9e6b-bd4e7bdc6995",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "238ac273-469f-49d5-b5e1-089a46cf4930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9156e76-2fff-4197-bae4-27afa2fcf651",
        "cursor": {
          "ref": "df08414d-1a18-4824-95de-f9ef0e1b38cd",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "819900fa-5416-488a-b36f-bd0b368def24"
        },
        "item": {
          "id": "f9156e76-2fff-4197-bae4-27afa2fcf651",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cbc67f95-abce-4436-83eb-1ab01ceae82a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df6b4236-6354-4a9e-a0be-4ce669aa12ba",
        "cursor": {
          "ref": "3864964d-545e-4fc3-a74f-5f283396fb33",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "fb487d43-4add-4fb5-98d1-39814fa2c952"
        },
        "item": {
          "id": "df6b4236-6354-4a9e-a0be-4ce669aa12ba",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "d33a8305-ae95-4b78-b453-11a0ed063d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1f91d8-96a1-49bb-93c3-bf813fcd6160",
        "cursor": {
          "ref": "9ce7acbb-561c-41d8-8f76-a0d9d55a20ce",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "e1e27ccb-7e7f-4470-9b2e-a1983d56e227"
        },
        "item": {
          "id": "de1f91d8-96a1-49bb-93c3-bf813fcd6160",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7eab3b3c-00fd-45a3-8afd-555349d551d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cca3899-8509-4e76-92d5-97054d93da3a",
        "cursor": {
          "ref": "f800a86a-a944-493e-84e8-14cdcbd6f5f2",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "534e14b1-ad50-4e2a-a098-d1c7cbe824ec"
        },
        "item": {
          "id": "1cca3899-8509-4e76-92d5-97054d93da3a",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "bb895910-b061-4c87-97b9-c9b055502b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e84a8b9c-88af-4af3-a719-5127a7e20571",
        "cursor": {
          "ref": "ebbff983-0ee9-402d-897a-0e55e13d0334",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d0d78be6-8fdf-473c-ac04-43a78d1e5cc1"
        },
        "item": {
          "id": "e84a8b9c-88af-4af3-a719-5127a7e20571",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bafd0b08-4a9c-4c57-b553-722f5a7fedfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04a26f8-acae-4d60-8af8-4f8f080e8777",
        "cursor": {
          "ref": "997b4957-f352-41c2-b0a3-27b85fefb0f7",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2e9990ce-22da-4767-9680-d65fde12c5b7"
        },
        "item": {
          "id": "a04a26f8-acae-4d60-8af8-4f8f080e8777",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "59dc522f-e77a-4604-a646-b139247e7d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d20adfac-5004-498e-885b-939643439e3e",
        "cursor": {
          "ref": "6e86006c-6004-442c-8f23-c2d9fcbd594c",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "4d96cffc-af75-41ec-9cc9-62f5e57e5da7"
        },
        "item": {
          "id": "d20adfac-5004-498e-885b-939643439e3e",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "4a6537ee-1986-439d-a56d-90c515c867da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8325e8c3-d996-48e1-b5c1-2171dd696b08",
        "cursor": {
          "ref": "daf968b1-cc66-4be4-b471-aaec6aef3e35",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "fee6faf9-f046-42f4-9610-2f01b11305ca"
        },
        "item": {
          "id": "8325e8c3-d996-48e1-b5c1-2171dd696b08",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "74b70f89-30bf-48ed-8faf-734b7de25cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a86865-5eb6-467c-b408-5b75938c07ac",
        "cursor": {
          "ref": "4b5f856c-cf05-49ec-891c-147f7566e240",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "f87db469-db34-4810-a887-e7fcb8837f48"
        },
        "item": {
          "id": "01a86865-5eb6-467c-b408-5b75938c07ac",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "c27e286b-97a4-49e8-8554-0adfe5db2a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f119268e-7ba7-413e-84f0-3283184f0ec0",
        "cursor": {
          "ref": "56ca6877-3a21-412b-86c9-aaf190bf62c5",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "caf1736e-d9e8-464e-9519-d86563ef24e6"
        },
        "item": {
          "id": "f119268e-7ba7-413e-84f0-3283184f0ec0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "0547384a-6106-49d7-b778-64132a4fe0d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079dcac1-e648-48b8-9d20-fb74a78038ef",
        "cursor": {
          "ref": "add2c1e6-2fb1-4a6d-940e-e902ed76d91e",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "78e4ca80-ad7a-45b2-ba53-5ca65e713c7b"
        },
        "item": {
          "id": "079dcac1-e648-48b8-9d20-fb74a78038ef",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "461b05e4-7989-43a0-9edc-4d888236fbf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9855ca-98e3-4df0-b9c2-7cb14942cc33",
        "cursor": {
          "ref": "98e69c05-9ddc-4c12-a4af-03e28e3a2824",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a57ffdb7-f239-4625-84e9-9a8f160c8a90"
        },
        "item": {
          "id": "1e9855ca-98e3-4df0-b9c2-7cb14942cc33",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "3844cee6-2955-4e99-bba4-11f513b398d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613f6732-66e1-4a33-bfb3-669e50e85d56",
        "cursor": {
          "ref": "a9191b1b-a6b1-4c2e-884d-0a20e1438458",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "91a1f14c-5012-48f4-ab6b-6641b36cb3e9"
        },
        "item": {
          "id": "613f6732-66e1-4a33-bfb3-669e50e85d56",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f9bb4157-bea0-455a-908f-aafb839e1578",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb1cc7d0-1180-49cc-9e4c-31e50b5b8a20",
        "cursor": {
          "ref": "103ea8e8-66b0-49f9-bfa9-dc55c0c83e4e",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "277a5098-3f31-4c3b-ab9e-e810130ab5f1"
        },
        "item": {
          "id": "eb1cc7d0-1180-49cc-9e4c-31e50b5b8a20",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6a577fb1-3093-4de9-84a8-0a5a85bd368e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "179aa9a3-b948-4df7-b793-f00d91e07f3a",
        "cursor": {
          "ref": "8d705b9e-e0f6-4934-81b2-b7e52b9f6d8f",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ba2533e0-cd46-434d-b793-14837e2ab525"
        },
        "item": {
          "id": "179aa9a3-b948-4df7-b793-f00d91e07f3a",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ecd9585e-448d-4495-a8e6-9ac704f3696a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83dbd99f-a14c-48ff-a857-de55ed01bb60",
        "cursor": {
          "ref": "421447cf-d6a7-4e89-840d-a07ed5f19bfc",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "06cf9b6b-afc6-4f0a-bd47-96e15b1cc0af"
        },
        "item": {
          "id": "83dbd99f-a14c-48ff-a857-de55ed01bb60",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e48094b8-ccd8-4879-b1e6-fbd7d7699908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae6fb70-3e85-48da-9c00-8bc4293f1cc5",
        "cursor": {
          "ref": "7054070a-8bad-427e-bb79-849201c297a1",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3d45e787-4a95-4bce-ae48-2d8234b38043"
        },
        "item": {
          "id": "dae6fb70-3e85-48da-9c00-8bc4293f1cc5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "da40c170-16f5-417b-8ca0-15677dbd2f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db187891-e18d-4693-8953-82c149657196",
        "cursor": {
          "ref": "3a53d869-f7ec-4f34-8abd-24785de4fc02",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d9041044-ea4c-43b7-a4da-2951cdaa5850"
        },
        "item": {
          "id": "db187891-e18d-4693-8953-82c149657196",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "86e0572f-c772-4435-ac24-fa97fee687ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b56217e8-8a44-4c26-a118-fdb8e69c19b3",
        "cursor": {
          "ref": "3f9370e3-b3b0-46b3-9553-64434309ac08",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "bf1384c8-3fa7-4bfa-b18a-977f58c3b022"
        },
        "item": {
          "id": "b56217e8-8a44-4c26-a118-fdb8e69c19b3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "522b602f-2a7a-4f63-8a03-7f148108a87d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5668004-873f-47c9-8fb9-1e7f606538be",
        "cursor": {
          "ref": "2d17689e-2dc1-4bef-b676-5dc7f83803c4",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b0cda405-3439-404a-a5af-3dfd04ac5617"
        },
        "item": {
          "id": "e5668004-873f-47c9-8fb9-1e7f606538be",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "41999050-06b4-43fd-b759-3b767baa604f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a51e73-926d-4e7c-9554-64a43f6440a9",
        "cursor": {
          "ref": "0591244d-3509-4d11-9d5c-d62d67506138",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "81e6c973-c092-426d-9448-fbbd718128a1"
        },
        "item": {
          "id": "e4a51e73-926d-4e7c-9554-64a43f6440a9",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "e49289ee-3a22-4bb9-939e-445cf5fd9770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb0954cd-b1b3-49d9-80b3-0fa08209fbc9",
        "cursor": {
          "ref": "c6c04f4b-b71a-4532-8f41-db81e7db708b",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4f529718-aa45-4f34-842e-4ffb53cf9b44"
        },
        "item": {
          "id": "bb0954cd-b1b3-49d9-80b3-0fa08209fbc9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "272785f3-e290-4f0c-86ab-981952f4fd16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01f80964-42b0-487f-b233-32d586f37701",
        "cursor": {
          "ref": "7c620f4c-ed6c-4df2-a04d-d846829cd9c1",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3f1e8712-475d-4505-ad45-ee4eb42708dc"
        },
        "item": {
          "id": "01f80964-42b0-487f-b233-32d586f37701",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a23e94a4-d81a-4d84-a5a1-108df18e13e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54da2408-7a4d-4698-92f1-10435e0c9ccb",
        "cursor": {
          "ref": "2322ec8d-89fc-4dc1-b511-9979f90f7aeb",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "9b2fbb3e-be0a-4891-985d-a32823707f15"
        },
        "item": {
          "id": "54da2408-7a4d-4698-92f1-10435e0c9ccb",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "67e9f45f-29c8-4be0-b348-ce9e9017958e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11452e8-27f3-426d-8888-20d010a72880",
        "cursor": {
          "ref": "727f2952-bd90-4ba8-bf66-9c4985f448a3",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a6d98cb7-9386-401e-bdca-3b57b8ed8b5c"
        },
        "item": {
          "id": "e11452e8-27f3-426d-8888-20d010a72880",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "47357e0e-86bc-433d-9758-de74f7fcf086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42d0045d-dcc5-409a-9fff-eca3e7aca5e8",
        "cursor": {
          "ref": "b81ee774-4523-4594-adb5-f2393e03074b",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7f32a69c-fe53-466b-a5a4-92993a3ff0e0"
        },
        "item": {
          "id": "42d0045d-dcc5-409a-9fff-eca3e7aca5e8",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9d556efa-5f94-4199-942c-4b949d02596c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56af1690-2c01-4825-8e3b-8cfc85572e31",
        "cursor": {
          "ref": "bd7e60c0-2e72-4dbf-aff8-f55868380491",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "02fa3be4-15b7-4a16-b7d8-42b6bf29972d"
        },
        "item": {
          "id": "56af1690-2c01-4825-8e3b-8cfc85572e31",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "28f2d4c9-143c-4448-88d5-442fb09c416a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "974ee9f7-5921-44e6-883d-9f4767a68324",
        "cursor": {
          "ref": "892b61a6-32e1-4d43-ad6e-5aeeabde6670",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "e1b835db-fe58-4b2b-acf6-8036cda700d0"
        },
        "item": {
          "id": "974ee9f7-5921-44e6-883d-9f4767a68324",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "13a98c07-51fc-4c99-811c-f4171c011cfb",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff5bbb5b-2b0c-4f8c-b791-5a903d3fa737",
        "cursor": {
          "ref": "b4dd8032-3d8a-43d9-94e7-f76f6ff78b9a",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "c9b0c4e9-7885-4578-88c3-058bb31b0e7e"
        },
        "item": {
          "id": "ff5bbb5b-2b0c-4f8c-b791-5a903d3fa737",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1dd47ff3-715a-4b4a-8d8b-59b627496027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "cf5817c2-2e2c-45aa-9934-429c339ea98d",
        "cursor": {
          "ref": "e81a8fc6-1eb5-4637-bbab-ac3f90ec5401",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1b4bf8a9-354e-4673-b3e9-e3450613d79d"
        },
        "item": {
          "id": "cf5817c2-2e2c-45aa-9934-429c339ea98d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "a635fc9a-8538-4cbb-9792-b158d864fbc3",
          "status": "Created",
          "code": 201,
          "responseTime": 369,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6640a072-9f6d-4cdf-9f21-0bfaaaa1d281",
        "cursor": {
          "ref": "90a30ee7-78b3-4e30-9da1-791d104e6d1f",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "35c5c339-6700-4ecb-8cb5-a2df436a32e8"
        },
        "item": {
          "id": "6640a072-9f6d-4cdf-9f21-0bfaaaa1d281",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e7b4f40c-55f0-417e-ad8a-21b475e2f29e",
          "status": "Created",
          "code": 201,
          "responseTime": 370,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bb8341b-a72b-4608-983c-dc112d85d9e9",
        "cursor": {
          "ref": "467f452b-5987-4e12-a0f9-15860340c092",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "fb22a369-d6e8-4e3c-a1f2-6234c624b17b"
        },
        "item": {
          "id": "3bb8341b-a72b-4608-983c-dc112d85d9e9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "55769b29-d9b0-4a3e-8847-21c458ed6dcb",
          "status": "Created",
          "code": 201,
          "responseTime": 359,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0609fb-b137-48cd-baf0-ab6a2e70b73b",
        "cursor": {
          "ref": "ab95b555-910e-4485-aeb0-1372f5f7607d",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7e5bfafb-b14a-4015-bec8-4bf9a42611ed"
        },
        "item": {
          "id": "ac0609fb-b137-48cd-baf0-ab6a2e70b73b",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "726ee4b8-8933-40cd-bd0d-63b9e3415d1a",
          "status": "Created",
          "code": 201,
          "responseTime": 426,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c231cf-cae4-40a8-9b5a-8c42d7146c5b",
        "cursor": {
          "ref": "74635393-cc04-4ff6-8112-5cdb664e48e2",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1e3ed463-bee0-4431-bd79-943b92fbdc09"
        },
        "item": {
          "id": "41c231cf-cae4-40a8-9b5a-8c42d7146c5b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "2db44305-16f9-4986-bccb-aa1aa2987092",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-19T00:35:34.719Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-19T00:35:34.719Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "c04fb111-d1d5-478d-bce0-4c5c4bb3caec",
        "cursor": {
          "ref": "9da28e70-faec-45ad-b4e5-b48cc3852027",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "092094ff-a105-4596-a3ef-c7abbd62640f"
        },
        "item": {
          "id": "c04fb111-d1d5-478d-bce0-4c5c4bb3caec",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f3d17fd3-841c-4d06-a91d-05b9f13ba832",
          "status": "Created",
          "code": 201,
          "responseTime": 360,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "733f69ba-0159-45c7-988c-e5ba1e07e73d",
        "cursor": {
          "ref": "346e0ec5-33e0-4fb3-996d-b53717042ccf",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "7cb66c95-2745-45c1-a88f-247bcfff5ea7"
        },
        "item": {
          "id": "733f69ba-0159-45c7-988c-e5ba1e07e73d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5388884a-4447-46d3-913e-e079cacfa980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9de8c81d-9ff6-49d3-b270-10579222ce24",
        "cursor": {
          "ref": "2086a6b1-7ace-4503-a060-0b0574550747",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "d2288c9d-d980-4e77-b111-7ab71b662ea2"
        },
        "item": {
          "id": "9de8c81d-9ff6-49d3-b270-10579222ce24",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "063bb8a3-62a1-4cdd-b5c3-ca6d8871ca13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da03f09-166b-4a85-ab54-b63b4fed384a",
        "cursor": {
          "ref": "e2d396ac-ad05-4745-b5e6-2dbe3308600e",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "76a8a227-0d24-413b-891b-4ed3cc385fde"
        },
        "item": {
          "id": "1da03f09-166b-4a85-ab54-b63b4fed384a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c862c775-6afa-4b6f-8c84-57f5f797c3d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bedd4232-66b4-4b74-a846-8b1add7e40ff",
        "cursor": {
          "ref": "bcdb6f37-b7bc-478b-ba61-f95a021a1787",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ed3455aa-1b66-401b-893d-2a65b5d67a9b"
        },
        "item": {
          "id": "bedd4232-66b4-4b74-a846-8b1add7e40ff",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dee4a357-8db2-461a-9ed0-979eddad9777",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3080473f-f7ec-47ac-bacd-180314bc759d",
        "cursor": {
          "ref": "a8b8709e-5f08-43b5-92a4-c1f324945d86",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9a66e9ff-b40a-4840-bffb-cba395b85be9"
        },
        "item": {
          "id": "3080473f-f7ec-47ac-bacd-180314bc759d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a8101e05-d367-42fc-9b86-19f989530a89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cfd13cb-f557-4daf-89cd-bb2aaff1e993",
        "cursor": {
          "ref": "88d68bea-f9a6-4459-9230-242e59a55cab",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "13db4a23-9a7c-424a-9ccf-6e4aaf476b95"
        },
        "item": {
          "id": "8cfd13cb-f557-4daf-89cd-bb2aaff1e993",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "08d5365c-11a4-4a6b-b86b-f3fa8d2c4ded",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c929c986-17c6-4dc5-b824-8b1712ae8335",
        "cursor": {
          "ref": "29705629-6870-46d0-b960-c24e6be517f5",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "6bbca216-2bf1-430f-a1be-8aa213475443"
        },
        "item": {
          "id": "c929c986-17c6-4dc5-b824-8b1712ae8335",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1e6ecd7e-0722-42c1-91c7-6af8cc46d8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b453ec5-ac9d-4499-a832-c3399269d8b3",
        "cursor": {
          "ref": "2f88abf2-23f3-4483-bc9a-4f1beaabc4a8",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "784f5c22-afde-413b-bee1-ee75f409b1e5"
        },
        "item": {
          "id": "8b453ec5-ac9d-4499-a832-c3399269d8b3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b6a6772b-6bf4-446f-abf7-d1fc53ff3454",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bce33cbc-ba16-464a-92b6-d500f931dab8",
        "cursor": {
          "ref": "56997460-df84-4a98-a484-b1a76297ef80",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "b9d4ed0b-d1b0-4b77-8e60-a7677586a330"
        },
        "item": {
          "id": "bce33cbc-ba16-464a-92b6-d500f931dab8",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f47b3d0b-514d-4cd7-a9b7-68088a6ef3e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0d1647-d938-48ac-b159-6fd4144352f2",
        "cursor": {
          "ref": "d9e94b01-173d-462a-9716-078bcbe9591f",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ee4c054f-bb23-446a-814d-a8fd422465ee"
        },
        "item": {
          "id": "3b0d1647-d938-48ac-b159-6fd4144352f2",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "efd81c09-907a-4a5d-9d75-30fc0089258b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86a6a7b-74fc-4d12-aeae-539715ef70ca",
        "cursor": {
          "ref": "889d3e67-202b-4711-84a9-62526d9922c4",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "982fd497-fc24-4ff1-804f-f4026b0f0cde"
        },
        "item": {
          "id": "d86a6a7b-74fc-4d12-aeae-539715ef70ca",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "368ef3bd-d260-4f42-bb88-bb954e428188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1fd0f7a-be97-479c-80c3-6fc7c1800395",
        "cursor": {
          "ref": "2663924a-7898-4b6c-80e1-aeee5c943d1b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fd9c8077-4cf0-4a6e-9a67-3afc76dfb707"
        },
        "item": {
          "id": "e1fd0f7a-be97-479c-80c3-6fc7c1800395",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "0385fa58-8327-4c3b-b5ca-e24a56d4447d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e24f4dd6-e958-48ba-8b0e-4c63aac96da4",
        "cursor": {
          "ref": "cd00810d-350c-4db1-9dfc-4ec3cebb639f",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "f2cc5103-961a-4aca-aa24-e2592abbbe5b"
        },
        "item": {
          "id": "e24f4dd6-e958-48ba-8b0e-4c63aac96da4",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "538479b2-3843-4a19-8fe3-aba9938378ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8987d642-9829-4d3f-90c0-d3f058b7eb31",
        "cursor": {
          "ref": "1bb9d167-87ed-41d2-b17e-c4b6a764570a",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "35774c2c-6dfc-4953-b033-08633d2e4b5c"
        },
        "item": {
          "id": "8987d642-9829-4d3f-90c0-d3f058b7eb31",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "69672287-43ed-4463-ac8f-f298f80b5912",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 127,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "098638f9-17e3-4ef0-b157-5484587eff56",
        "cursor": {
          "ref": "37815c9a-db07-4f2a-83b4-3cd850a317cd",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "d051f4b9-addb-4abf-a1bc-b4ec36865fe7"
        },
        "item": {
          "id": "098638f9-17e3-4ef0-b157-5484587eff56",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7fdbd063-1858-4919-8a4b-ee5cd64a9f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c18af99-6379-4608-8bd9-f45f8877cfb9",
        "cursor": {
          "ref": "021ed870-51f4-4e82-9690-a06ba92ec101",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "90cde689-f04b-44ad-bf84-2cc8aa659af4"
        },
        "item": {
          "id": "4c18af99-6379-4608-8bd9-f45f8877cfb9",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c8982a0d-3075-4944-b6a8-fc436b14b24d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98ce6155-ae85-44ba-ab54-3a26ce2cc0a9",
        "cursor": {
          "ref": "dc83d7d6-2607-40d3-8f5e-4cecc38bf347",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "759aec47-6c8e-4211-a3d1-f55d72a410df"
        },
        "item": {
          "id": "98ce6155-ae85-44ba-ab54-3a26ce2cc0a9",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c973cec0-0a8d-4900-93ca-f1abf4e6a868",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d300bcbd-e8b9-4a1a-bef9-2faab5beeeb5",
        "cursor": {
          "ref": "42547f56-0ba7-4faa-89b9-65cf6b72f43b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1bf6aeb6-4d9f-4abb-b9da-929e1460c091"
        },
        "item": {
          "id": "d300bcbd-e8b9-4a1a-bef9-2faab5beeeb5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d8869c8d-f4a3-400f-aabd-e87490a7a0c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f523de49-8ec5-44dd-b6f8-534df79fda5b",
        "cursor": {
          "ref": "ac157a36-ed76-438f-8dbc-318d8ab3e5b9",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "75919827-425d-45e8-8c8d-0ec28afcc3ad"
        },
        "item": {
          "id": "f523de49-8ec5-44dd-b6f8-534df79fda5b",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "e867bf14-9826-406d-9bcd-68ca55e1a40a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24923989-b5df-4905-ae2c-73b31f1fefa4",
        "cursor": {
          "ref": "756c29f5-682e-48ca-b57b-1a821a600ad4",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7f9e15d0-a476-4341-a634-ccdcd5ad1a63"
        },
        "item": {
          "id": "24923989-b5df-4905-ae2c-73b31f1fefa4",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "5f34687c-dd5d-4bcf-b436-69afb3997eb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc4a554-a42f-4006-bd6a-698293acd74a",
        "cursor": {
          "ref": "b45ed057-a8bb-4cbb-bef7-426fda75ac78",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "91a81a15-314b-4f58-af34-9c25d9ca7a54"
        },
        "item": {
          "id": "acc4a554-a42f-4006-bd6a-698293acd74a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ddc99aef-e7cb-4c21-bfff-395561bae9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03458389-31a9-4ca7-aeca-221f7eedc9de",
        "cursor": {
          "ref": "40fc7f44-9255-4be5-9bf1-b11f4a204536",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f66f7eaf-6495-4e67-801e-687d83c3cd73"
        },
        "item": {
          "id": "03458389-31a9-4ca7-aeca-221f7eedc9de",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "3ae92bd0-5882-46f3-9da1-3f1bd09315a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1510ff44-3a2b-43e7-a213-44341801197a",
        "cursor": {
          "ref": "97a07087-4489-41b9-ba13-a56039dfae98",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "189b13c3-8897-4db9-bd61-0006ed3945a8"
        },
        "item": {
          "id": "1510ff44-3a2b-43e7-a213-44341801197a",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e54ea6a5-f911-49e4-9e9d-7320c0109c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69e8a2c4-5c48-4381-8116-e4d3ad025bfd",
        "cursor": {
          "ref": "7e54b8cd-e29b-4aa9-8189-d26d1cacc3fc",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "7274ba27-636f-46ff-8b99-8db11a4cc538"
        },
        "item": {
          "id": "69e8a2c4-5c48-4381-8116-e4d3ad025bfd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "7bd038eb-444c-42bc-8ac6-d8f8ff0480a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10c5a267-1887-42df-aea7-a11f6075f683",
        "cursor": {
          "ref": "7a608615-afc6-4388-b8b0-64ffb1c89bab",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "0b8caca7-c9d6-4d5b-9241-d058193397d4"
        },
        "item": {
          "id": "10c5a267-1887-42df-aea7-a11f6075f683",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "94daa4b7-9ca0-478d-98e4-6b6dc9babf31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27ae802f-daab-432a-a45c-a3a4df1fc3f6",
        "cursor": {
          "ref": "29c6bf6a-8c5a-46fe-b453-3639c50f33eb",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "5f338eaf-182a-4671-9782-c33a1de25278"
        },
        "item": {
          "id": "27ae802f-daab-432a-a45c-a3a4df1fc3f6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "3a66503e-ce76-430a-b547-99370b5cb4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa92f4eb-3aab-4744-a1c5-6efebd6cf7fc",
        "cursor": {
          "ref": "e99e4c73-e81d-4218-9d8b-85f45fd439c0",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "c00644db-a44a-4e98-bcad-328645ad3bd0"
        },
        "item": {
          "id": "fa92f4eb-3aab-4744-a1c5-6efebd6cf7fc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "59a0eb0c-2ba1-4c2b-91ca-bebc191ce3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80036359-de7e-4ae6-b304-d98f348354cb",
        "cursor": {
          "ref": "e981a82b-88c6-4a1a-9999-db980ef7ac76",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "63725e83-e1ed-46b0-aa1c-79e371c1b86b"
        },
        "item": {
          "id": "80036359-de7e-4ae6-b304-d98f348354cb",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "c26a359b-ddb4-47da-9452-8eb64eb0e07b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7bfa5b1-9353-4033-8607-9075d07453d4",
        "cursor": {
          "ref": "96f7f337-8572-4bbc-b2d3-c13370726631",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ba643d7c-54d5-40f5-a570-0d2a87cbc7ef"
        },
        "item": {
          "id": "e7bfa5b1-9353-4033-8607-9075d07453d4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "34a44ea9-699a-46bb-bc69-825ed5b42c40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57684c14-7e0a-4c5d-b4be-3c453885a7b4",
        "cursor": {
          "ref": "56c66e39-e050-417d-a6f9-0b2bd7df3553",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "5b5f8585-a056-4a37-a525-a3464f59d7b3"
        },
        "item": {
          "id": "57684c14-7e0a-4c5d-b4be-3c453885a7b4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4230b41c-2f1f-45c9-8fd6-377fe865bf78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457b6767-82f6-474e-88ca-1487521ffbb0",
        "cursor": {
          "ref": "8bb995f3-1a47-4134-b137-edd7a1e1abfc",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "a04be539-4618-4eed-8a12-b8f561dc8dd1"
        },
        "item": {
          "id": "457b6767-82f6-474e-88ca-1487521ffbb0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "58d3eeeb-fdc7-4114-ac8f-bc60c64225e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a999348-1b6b-4872-b319-ab7f7ed2aa5f",
        "cursor": {
          "ref": "36808154-94e7-45c3-a814-877c7265b066",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "47dc938b-da70-4e09-a250-07af1b252eff"
        },
        "item": {
          "id": "0a999348-1b6b-4872-b319-ab7f7ed2aa5f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "75d410f3-c196-4016-979b-ed8f06fa440b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1d14d0e-9430-466e-a4bd-8b1062a20c38",
        "cursor": {
          "ref": "2aa7b916-202b-40d6-8d9c-234233dd3938",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4156890d-aa9f-4009-9c8f-3684bf8a2b23"
        },
        "item": {
          "id": "e1d14d0e-9430-466e-a4bd-8b1062a20c38",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "4a61fba2-e04e-44cb-8318-a4a8937411c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6b5985-0cad-4600-9fe9-3f483370c853",
        "cursor": {
          "ref": "9f1b80cc-ec9a-4924-9e0e-8b3eda619ae5",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4af8f626-ad3b-4101-b7df-dd1200f2d7c5"
        },
        "item": {
          "id": "2c6b5985-0cad-4600-9fe9-3f483370c853",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7c0604ed-6c46-42e1-b538-c48337afe021",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75b47534-8de1-4615-a25a-bac8144de659",
        "cursor": {
          "ref": "fb0f8135-b112-4a8d-bfb6-a46d6801fa03",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "37bf6914-6e32-400f-a206-6b95ff693155"
        },
        "item": {
          "id": "75b47534-8de1-4615-a25a-bac8144de659",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "75508aa2-74e1-41c6-a0b6-8c3d0e2ed4bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e1131c-dfad-4419-9391-0be2f31f6fcb",
        "cursor": {
          "ref": "21d3cc0b-81bd-4df2-b67d-2cf371c78ed9",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "c8452072-c4ee-401c-9bf7-987484d9042f"
        },
        "item": {
          "id": "17e1131c-dfad-4419-9391-0be2f31f6fcb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "8ed4c275-5c63-49eb-b70d-14934363332b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbe97e84-662f-41b0-a4cc-72fe2a7deee9",
        "cursor": {
          "ref": "4900611e-10ab-4de1-9b9a-5563d3480b9e",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "5fbd7974-d0fd-4bc7-a274-eca88de007eb"
        },
        "item": {
          "id": "dbe97e84-662f-41b0-a4cc-72fe2a7deee9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f12ff95d-e718-4a66-b1db-75d6c5296b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb00c2ac-b1e6-42d5-8382-d5c529ba4325",
        "cursor": {
          "ref": "a3e799ae-f27a-4892-8f2b-3608eb363b96",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "6b9ddb7b-c4da-4938-81c6-6ee90c0d7a10"
        },
        "item": {
          "id": "fb00c2ac-b1e6-42d5-8382-d5c529ba4325",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f07b81a5-2182-43d2-b06d-f30352a6509a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdb27a02-c429-4f8a-b36c-2d8ec3734f29",
        "cursor": {
          "ref": "a2a44c37-8b28-4d91-bd7f-4a64645ce206",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e31d3af6-2b79-4a7f-896b-e239400f3920"
        },
        "item": {
          "id": "fdb27a02-c429-4f8a-b36c-2d8ec3734f29",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "51178531-bc3b-404d-8b76-4a2aa132af73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1cb4799-da2b-4267-a51e-a656152b50d7",
        "cursor": {
          "ref": "9bf7c1e7-8098-4f11-ad4b-ee54779fbaab",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "365ca7c2-810c-48a6-bb4a-494455755249"
        },
        "item": {
          "id": "b1cb4799-da2b-4267-a51e-a656152b50d7",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "57bcb7bd-fda1-4e14-b5b5-1582fe4fb352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc82eb0e-f0e0-4ce5-91cb-a75ac8205cc8",
        "cursor": {
          "ref": "99d7bd12-fe44-40a7-868e-de4375463963",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "46de460e-e916-4053-a47f-9de7af7aae95"
        },
        "item": {
          "id": "dc82eb0e-f0e0-4ce5-91cb-a75ac8205cc8",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c9e8d479-7a25-4302-aaba-cc65ec923be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93d9595-9e84-42ca-add1-d5accf76e356",
        "cursor": {
          "ref": "e8192ca5-c73d-4cbf-b095-a1443aa438cd",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "34b62e4c-fa58-49b2-aab7-7592db5a1182"
        },
        "item": {
          "id": "b93d9595-9e84-42ca-add1-d5accf76e356",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "ac3d0be2-9725-4fbf-a7b0-ad7aaff4d3a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d84711e8-ae96-414a-bb56-2f670bdd7811",
        "cursor": {
          "ref": "935e83ea-49e8-4b06-9f6b-27e71b2317ca",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "83b32329-9265-42b2-be29-4c9c162323b6"
        },
        "item": {
          "id": "d84711e8-ae96-414a-bb56-2f670bdd7811",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2b4b3d50-7d57-4d82-8dae-f7c8306e387c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c637e3fe-be18-43df-8f60-d881e00e18f0",
        "cursor": {
          "ref": "673900a5-86de-4377-8193-f51388b51420",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "e6ee54d9-4f81-4536-9162-cd6007b7c8fb"
        },
        "item": {
          "id": "c637e3fe-be18-43df-8f60-d881e00e18f0",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "da4b3d9c-0215-4ede-aa06-b212de9c3637",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "f0e1843e-11e8-4069-a985-5eabbb1e06ad",
        "cursor": {
          "ref": "a9e63a39-08d3-4e4f-9d57-10293dc79586",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f2bcd697-b958-4086-8489-8b9cbad4646f"
        },
        "item": {
          "id": "f0e1843e-11e8-4069-a985-5eabbb1e06ad",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e7f68fcf-0457-43cc-b453-d45be4f1ad87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ea94093-044e-490a-93b8-ae63949a2e4a",
        "cursor": {
          "ref": "f454e759-3529-42e8-a846-755bb015cf68",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "96c7936c-d356-46f1-b1c1-f4e6ff41660d"
        },
        "item": {
          "id": "4ea94093-044e-490a-93b8-ae63949a2e4a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "2d9c2a75-7e4b-484e-b543-3ceb0cd47920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c69a79dc-6edd-445c-a760-c9ebe0fabd97",
        "cursor": {
          "ref": "6f52ae2f-b757-4804-a94b-f7088fa699a0",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "35c6a873-2fe6-4061-89b1-379769bbd593"
        },
        "item": {
          "id": "c69a79dc-6edd-445c-a760-c9ebe0fabd97",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "1d268e00-4a09-430d-82e6-9635054e4af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e2ed573-4f32-4c7f-8c51-c3224675862d",
        "cursor": {
          "ref": "b1e732ae-53c1-45b7-a413-ad24c436740d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d9f94da9-572e-44ad-849e-47a197df28fd"
        },
        "item": {
          "id": "3e2ed573-4f32-4c7f-8c51-c3224675862d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f3d47d9a-760c-4b3c-876f-8b2b38756ad7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b009e87a-6b7a-44cb-93c2-c25c266500ef",
        "cursor": {
          "ref": "d405f883-ab5a-49c4-ad3c-3b61ff84b31a",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0d7778fe-fc23-436d-a58c-3da4f212be0a"
        },
        "item": {
          "id": "b009e87a-6b7a-44cb-93c2-c25c266500ef",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8c34fafb-a1df-4fc8-ae51-aefa54d78fcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99def31c-008f-4140-94c9-5737446a991c",
        "cursor": {
          "ref": "ae03c954-f32d-4b5b-a0cd-3b49931c9796",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "3ad6e417-5988-49d6-b1f8-76420ba4167c"
        },
        "item": {
          "id": "99def31c-008f-4140-94c9-5737446a991c",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "d7fe2251-4a98-4394-9be8-769b1fb1c1fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920bcffa-72e4-4c4d-be4d-e6571dc80f95",
        "cursor": {
          "ref": "d88b5b6b-f7c9-4407-99da-f0c35868ec5e",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "fa281b78-bff5-465c-b90b-c61b54ffafd6"
        },
        "item": {
          "id": "920bcffa-72e4-4c4d-be4d-e6571dc80f95",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ae5c24af-d4f8-4dff-9426-943fdd293d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03062411-7811-4a35-9468-b8bc02e6a4ec",
        "cursor": {
          "ref": "2b0b7855-87e6-419c-8104-edd9aa86715e",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1a81b4f8-df76-45a5-afc4-b333f705cce2"
        },
        "item": {
          "id": "03062411-7811-4a35-9468-b8bc02e6a4ec",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "747d9847-c60e-4bf0-b8cc-df3ae2a094d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ccaec2c-2b2c-4052-81af-fcc52894f3b8",
        "cursor": {
          "ref": "42c4b761-74ed-4457-979e-93ff00e96c20",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7233ebf3-461b-4bba-8d5e-188575e8f6ab"
        },
        "item": {
          "id": "7ccaec2c-2b2c-4052-81af-fcc52894f3b8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "1d700b37-648d-4255-b2e8-13c7a78a6141",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48c24ef1-67b6-4fb3-a50b-48e4245a9494",
        "cursor": {
          "ref": "82fa2427-e458-4f2f-8b62-88850ea687fc",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "26fae14e-a569-4dc1-a1ac-c13abfd517d0"
        },
        "item": {
          "id": "48c24ef1-67b6-4fb3-a50b-48e4245a9494",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "f14ad561-0c87-492c-8621-d1a4aa037f14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a28f09a-ac44-4eb8-b51e-39bb42105210",
        "cursor": {
          "ref": "0950b41e-41f9-4a26-b3f7-cca378c52b62",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8bed708b-763a-4a2c-b6b0-d17124e4fc02"
        },
        "item": {
          "id": "1a28f09a-ac44-4eb8-b51e-39bb42105210",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "daff39dc-28b4-4c7f-9577-2f77b2c79f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "518e985f-08b3-4186-a72c-9affb3466efe",
        "cursor": {
          "ref": "66229de9-8a3b-4c0e-ae53-59de121be25d",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5cc99dba-e310-4298-8b98-a2317581221c"
        },
        "item": {
          "id": "518e985f-08b3-4186-a72c-9affb3466efe",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5404eda0-850f-4413-beac-c01a93ba4666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bac3cc-e4cd-4197-af54-c1cc1fa9dde1",
        "cursor": {
          "ref": "2ffa6013-4c4d-4137-9cb6-91ab5f3cfc37",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9e1451d8-5e53-44fe-84fb-7319711192ac"
        },
        "item": {
          "id": "b1bac3cc-e4cd-4197-af54-c1cc1fa9dde1",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "62f400a2-a28c-4d42-9b9f-aa8ca6266e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2e35043-ee69-41b2-9f48-fa7a102013dd",
        "cursor": {
          "ref": "9df207bf-cc6c-4711-8e55-cb2630f44ede",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "5737935a-560a-463d-bfa7-e06667a7288f"
        },
        "item": {
          "id": "e2e35043-ee69-41b2-9f48-fa7a102013dd",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "233868a8-d726-4a4a-ae58-67af768fd016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3068cc1b-7669-4ab7-9961-5070d444544b",
        "cursor": {
          "ref": "c427e7cb-c04c-4977-9fd0-9329047a9faa",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "739ccbb1-7f75-4fb1-8786-28d33c2640d3"
        },
        "item": {
          "id": "3068cc1b-7669-4ab7-9961-5070d444544b",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "68bea315-4fb3-4564-968a-a942d6a7a1bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa0f12c1-fa38-4355-81c9-994f5bccaa04",
        "cursor": {
          "ref": "e1aef1b0-9656-4241-880c-4c9ab187fa6c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "e37b3ec3-64a5-4e8c-906a-bfb81ba75ad9"
        },
        "item": {
          "id": "fa0f12c1-fa38-4355-81c9-994f5bccaa04",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "29088107-1140-494f-a19f-1d723daeafe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b723f9-30d9-4794-a1fe-9256b5254fc4",
        "cursor": {
          "ref": "722aebf4-b55d-45e9-9f08-f52578995e07",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "991e4951-911f-4997-a30c-34d745051724"
        },
        "item": {
          "id": "98b723f9-30d9-4794-a1fe-9256b5254fc4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "8022575d-e7ac-40e5-8634-5d2aee2a0aea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909ae695-8567-47ed-9ac8-e2d1340d209c",
        "cursor": {
          "ref": "d5736157-d59c-48f8-a2f8-cbc12a6c20e2",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "321a121b-fef4-4045-9bd4-e4a2b4dc798a"
        },
        "item": {
          "id": "909ae695-8567-47ed-9ac8-e2d1340d209c",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "ca71f4e3-807c-4e61-9955-57b64906f40f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "234bb146-ef7d-4462-bd5a-319fefc3b451",
        "cursor": {
          "ref": "5fbbff3a-4578-41d2-acd7-3d672e068c00",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2365ae8c-bbaa-4b85-83a6-b9ad400816c2"
        },
        "item": {
          "id": "234bb146-ef7d-4462-bd5a-319fefc3b451",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9edbab7c-6d84-4e50-bdaa-2298448acb86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3cb6cc-cd19-46da-8d99-54c4c1b42f1b",
        "cursor": {
          "ref": "c2fb426d-89d3-44fc-afcf-ee89d43e269d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "2f5328a7-ccb4-4788-aba7-f8dcca96d455"
        },
        "item": {
          "id": "df3cb6cc-cd19-46da-8d99-54c4c1b42f1b",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9b5390c5-5641-4577-b40b-82800bf47dd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8abdc431-aad6-4eda-96ae-b7418582144a",
        "cursor": {
          "ref": "d5cd56d2-7a75-402e-ab8b-a8abcd8cfef8",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7d19f023-a1e4-4975-bd95-0a320a73e8d4"
        },
        "item": {
          "id": "8abdc431-aad6-4eda-96ae-b7418582144a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "908d1e84-7204-40b4-b9ec-a74c2eff827c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85108dc1-b5bd-4955-a51f-3b31a6601512",
        "cursor": {
          "ref": "3ec86157-0372-426d-a6a2-590f4197f076",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3b0537fa-8587-4fd1-ad51-01be7b35c594"
        },
        "item": {
          "id": "85108dc1-b5bd-4955-a51f-3b31a6601512",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "cd87f590-b349-4920-979f-4923d81dece4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1cfc20e-4038-48fe-88f7-1912adcca820",
        "cursor": {
          "ref": "2aa13839-5a99-43d4-b1ae-5e47c96ece28",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "8d73f820-6259-49a4-b0df-9537fc8143dd"
        },
        "item": {
          "id": "c1cfc20e-4038-48fe-88f7-1912adcca820",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "71212a39-bde4-46ee-86c0-3d267ac0aaf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "398a439f-8dff-47b3-9a59-ed49f5e97aa8",
        "cursor": {
          "ref": "7419fc42-a0a8-4d7a-9dee-b8f348cedc5a",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5c4bed1d-f705-4087-b4ac-b0782be56fef"
        },
        "item": {
          "id": "398a439f-8dff-47b3-9a59-ed49f5e97aa8",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "708e2246-6a69-4bef-9685-e6425076a7a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9d03a0e-90e3-4e86-a845-225a34fcd9a4",
        "cursor": {
          "ref": "503a0f23-b694-4b9b-b80d-3f988d08cbcd",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "ae17034d-88b8-42b6-8c96-ea882cfb2ed2"
        },
        "item": {
          "id": "e9d03a0e-90e3-4e86-a845-225a34fcd9a4",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b783842f-f05f-4886-ae1f-a5dcdfdb60db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bca174a-9323-4c35-99de-fe7fed43e382",
        "cursor": {
          "ref": "8f0c6725-44e7-40e1-a932-1903e40536de",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "381dd0ad-9081-4167-bf63-d87f6b53d849"
        },
        "item": {
          "id": "5bca174a-9323-4c35-99de-fe7fed43e382",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "55515253-5d86-470a-ab15-8978575e39c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13570b19-6182-49a6-9894-49290ef83632",
        "cursor": {
          "ref": "689d667a-3d51-4afb-b0df-095cd95b9541",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "0325b3a0-ec6f-45dd-bfe5-7be3a60a184e"
        },
        "item": {
          "id": "13570b19-6182-49a6-9894-49290ef83632",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1f372381-245e-47db-970d-526ee3b554e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c32ea405-14a5-4ac8-9f28-95b54ffa77b3",
        "cursor": {
          "ref": "10754a0a-ff44-43e4-bdfc-9fddf9454769",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "723f77bb-96a2-4e51-bdbd-5799690e6330"
        },
        "item": {
          "id": "c32ea405-14a5-4ac8-9f28-95b54ffa77b3",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "40791158-d9b9-43cc-9793-2e19bbc9d20c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e5cc9e-28e8-4a18-9333-e7ad9b262790",
        "cursor": {
          "ref": "daa1df9b-3250-4f2d-ba0a-652cc0d5d195",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "3fa519bf-0fa2-48d3-82a3-99b85ebdc2b0"
        },
        "item": {
          "id": "d9e5cc9e-28e8-4a18-9333-e7ad9b262790",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "228f976e-8c55-436e-b1bb-9e0031aa61be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1500864b-fe82-4de5-9a76-f62fd98735ae",
        "cursor": {
          "ref": "8ba4eed2-4d63-4301-b83a-f5abf8f92c5f",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0e64b845-1efc-4723-ba1a-c136bba58a81"
        },
        "item": {
          "id": "1500864b-fe82-4de5-9a76-f62fd98735ae",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "c6fbcad9-fdf5-4f8a-bd5d-e23a8a1748ec",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "27b2e69d-d284-4740-9a75-c5669a4db229",
        "cursor": {
          "ref": "b1ce5dd4-b781-4d0b-bde1-f71cc6bffd3c",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "d53e2d54-6181-4436-9b3b-2c32a3b469f3"
        },
        "item": {
          "id": "27b2e69d-d284-4740-9a75-c5669a4db229",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "25b004bc-4d6c-45da-8946-79575e9a5388",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "65243057-860d-42a6-babe-e94e574f2f5a",
        "cursor": {
          "ref": "976f4d27-a427-4d5d-b1ce-43ce273ba293",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6d17c96b-c021-4829-be9f-d9bfcb71f421"
        },
        "item": {
          "id": "65243057-860d-42a6-babe-e94e574f2f5a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "9388c33d-3dde-46f8-a6dd-896751144425",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "842d35e9-8ecb-497b-8210-3b17db6ead9e",
        "cursor": {
          "ref": "77ad8448-126e-4a2e-a692-4d3520a550eb",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "fad0ebcd-e983-402d-be29-23bde28aff16"
        },
        "item": {
          "id": "842d35e9-8ecb-497b-8210-3b17db6ead9e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ee76e25a-4d5f-429c-bf38-9439371fcf49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa1ba1e-fa6f-479c-bbe7-72fbc16e057f",
        "cursor": {
          "ref": "e6fe7059-0986-4f26-ba75-c4e08fbbbc50",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8e43cd71-e8ef-4906-bb7b-3f1c148c9795"
        },
        "item": {
          "id": "ffa1ba1e-fa6f-479c-bbe7-72fbc16e057f",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "0eb16b50-3413-4af8-835b-16fc440ddac2",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "1222f920-c0ef-4f38-8d65-ab1ee1752616",
        "cursor": {
          "ref": "f9258f57-55a2-4411-be35-34ab815ef7b7",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "924a95fe-6417-4a0c-9eb7-cb5849adde01"
        },
        "item": {
          "id": "1222f920-c0ef-4f38-8d65-ab1ee1752616",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ae6d2e75-8f05-4b4a-ba69-f90238d2541d",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "08dfee2c-1288-4e24-ab6a-e331ccdf1487",
        "cursor": {
          "ref": "1fb646ae-13c4-4629-a4ca-11c93f148636",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "07517efc-ec4a-4471-ba63-bfbc702a1345"
        },
        "item": {
          "id": "08dfee2c-1288-4e24-ab6a-e331ccdf1487",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "85a91456-d143-4a25-a2c1-818b9569df95",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "9ae0b30e-f66e-47e7-be3a-ab7af44bbe4a",
        "cursor": {
          "ref": "740cff5b-7a1f-4056-bdbf-08d4441db417",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c66b92bb-52e5-4407-b52c-292e6ae9d863"
        },
        "item": {
          "id": "9ae0b30e-f66e-47e7-be3a-ab7af44bbe4a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "70d95a18-69bb-4ffa-941e-19b5b49b0a52",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "76d30946-3c38-487b-9221-96e295dcde04",
        "cursor": {
          "ref": "f0c6c22e-97bc-477b-9a54-05f4ed8c3805",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "3f402997-1ad4-4814-be2a-1f46f1a9f5b6"
        },
        "item": {
          "id": "76d30946-3c38-487b-9221-96e295dcde04",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1ed2201c-d34e-40ac-bedc-3245665428d1",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "1626c1ff-ad97-4bea-add0-c4b8b04ee902",
        "cursor": {
          "ref": "bee86b14-eb1e-436e-a904-f99409a297ee",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "a3cd9d93-8e22-4208-aae1-627423e154eb"
        },
        "item": {
          "id": "1626c1ff-ad97-4bea-add0-c4b8b04ee902",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9071ef3c-0125-495e-bd21-b8c5a813e25a",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "f14b633c-4be2-4806-9705-20a7d32acb11",
        "cursor": {
          "ref": "8d09d0c4-3269-4533-b15b-02085bdb2d5c",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6c3f318a-9da1-41ee-9eb6-de1ef008f3dd"
        },
        "item": {
          "id": "f14b633c-4be2-4806-9705-20a7d32acb11",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "782b1506-3ff9-4d26-93c9-0f85b3942925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22b58e4-cd71-489c-b66d-5e9bba85653c",
        "cursor": {
          "ref": "640efce9-df52-4641-a89c-d05903ffbd68",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "aa9bf352-8837-43bc-973a-79043d2bebfe"
        },
        "item": {
          "id": "d22b58e4-cd71-489c-b66d-5e9bba85653c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "4172b489-274a-4a9b-bb00-86fdfb51f782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3342cd0e-d294-45e6-848b-9581b86e02f6",
        "cursor": {
          "ref": "6be5f068-d0d2-45f3-b759-864e6afef307",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "5cb75ea9-88a9-4251-bf40-aa615fdcd7be"
        },
        "item": {
          "id": "3342cd0e-d294-45e6-848b-9581b86e02f6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "c86f0055-e431-4524-9150-55033d5fd664",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ff692b-54d9-47ca-a251-df9082ad130e",
        "cursor": {
          "ref": "ed933eb5-641b-48ac-945b-718e2d5ae124",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3e2c8c34-e6bf-4383-87be-f7c5b7239704"
        },
        "item": {
          "id": "35ff692b-54d9-47ca-a251-df9082ad130e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "7d1dc400-79b6-41d9-a8ab-0c8b460ad379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "486a65eb-1540-4e64-902d-76ec3267b856",
        "cursor": {
          "ref": "94f16176-4458-4f72-afa7-f208df49ce64",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "719cc785-c70c-4bda-9f08-3ed4a64dfe3f"
        },
        "item": {
          "id": "486a65eb-1540-4e64-902d-76ec3267b856",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "315afbe9-228a-408f-a973-3907dcd7d447",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0768c152-a170-424b-8f50-b6502c1724b7",
        "cursor": {
          "ref": "9c59f9cf-1a04-4904-8b96-5c723bc28ad9",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "4264c424-8c19-42a1-b352-ddc241c6c026"
        },
        "item": {
          "id": "0768c152-a170-424b-8f50-b6502c1724b7",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "a83ab03c-be0c-48a1-a70d-355777c144c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4e9d972-2565-4479-856c-cf54b9b050fc",
        "cursor": {
          "ref": "8f4d0922-f985-457c-82b2-eece8039eaa9",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fc48fe67-bc9d-4b31-b670-2b185f33acca"
        },
        "item": {
          "id": "a4e9d972-2565-4479-856c-cf54b9b050fc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "76740970-0633-4777-819d-9b97b68530f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "029a5b40-3e0f-4f82-8c88-57b71e0de8a9",
        "cursor": {
          "ref": "18b65150-a17e-45e7-ab63-64ce0ae9ed07",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d99f041a-2b65-48a1-8584-5b327e65bb71"
        },
        "item": {
          "id": "029a5b40-3e0f-4f82-8c88-57b71e0de8a9",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6f49f105-80fa-4951-a005-679d5e1f3643",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb9939e0-c517-4068-9c91-546b4ab14c37",
        "cursor": {
          "ref": "39e3a37e-85d3-491c-b904-b9886d5b8512",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b01b5fe7-4506-4bd4-b27c-673a49bdfbbc"
        },
        "item": {
          "id": "eb9939e0-c517-4068-9c91-546b4ab14c37",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "83a87408-4559-4525-b919-5217273b9fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39ef32d3-8ca1-4100-9c5a-dcce05cef67a",
        "cursor": {
          "ref": "5672f430-b53c-4fdf-b416-61cee18ac743",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "38c0ad9b-f0f9-4f18-81bf-637d33f0cbf0"
        },
        "item": {
          "id": "39ef32d3-8ca1-4100-9c5a-dcce05cef67a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "213b310d-2a8f-4238-83b9-6a6fe0a6027a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "260d14be-8daf-4a93-bb77-98238570ff4b",
        "cursor": {
          "ref": "787a829b-f2d0-4fe5-94a6-58bac116f73d",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "e644842c-0e71-4177-a458-49b4a44fcd1f"
        },
        "item": {
          "id": "260d14be-8daf-4a93-bb77-98238570ff4b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "c80f1939-e329-4f14-85e2-81417c8fafad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f9a852d-eb07-40da-8922-b0fa0ec628da",
        "cursor": {
          "ref": "bdfda2f8-19a7-4baf-a0dc-a9bc7d75f91d",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "67be5e25-d52a-442c-b6e8-6cf6c417c541"
        },
        "item": {
          "id": "1f9a852d-eb07-40da-8922-b0fa0ec628da",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "6056aca6-8477-4e31-b86e-60de4d739abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "124fa116-c552-4e92-902e-169ae62aecf4",
        "cursor": {
          "ref": "fcd2ba65-a02e-453e-9ef2-35edc485299b",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d4b8324a-8e73-4423-8dbb-0885fc8f8c6e"
        },
        "item": {
          "id": "124fa116-c552-4e92-902e-169ae62aecf4",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "11f02407-be3a-4ae2-901a-b694b1e7a46b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7c8664-c93e-4e02-985a-5d6446cc0191",
        "cursor": {
          "ref": "e4ca597c-f8a0-4eeb-9756-57ff9fdcb584",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "757f954c-066a-4179-a054-c009c93cb9d8"
        },
        "item": {
          "id": "4d7c8664-c93e-4e02-985a-5d6446cc0191",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b4f723cb-ef99-4f12-b316-3d44d942830a",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0170b394-0d19-4d58-af67-74c6be3c3968",
        "cursor": {
          "ref": "210babb6-161b-4063-9636-fbce474b6722",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "f867f78c-8371-497b-aa8b-d57c7ca22a2a"
        },
        "item": {
          "id": "0170b394-0d19-4d58-af67-74c6be3c3968",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "71c02312-f2e8-437d-b6ad-e0dcb5850b19",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "185759a2-9a33-443a-9414-6a60fe599866",
        "cursor": {
          "ref": "25c5c58b-cb29-40c6-8e04-a80b2c901b99",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "51937f90-0396-4399-82a5-7d0c9bcaf057"
        },
        "item": {
          "id": "185759a2-9a33-443a-9414-6a60fe599866",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "64106719-b899-4f33-b83c-97e93daff959",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "f72be9c7-6088-41e7-acc4-28a911148532",
        "cursor": {
          "ref": "9544c130-5d81-44ff-8a77-07d8ea6a2542",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b044aef7-79f0-4cb6-ac28-02f2aac08980"
        },
        "item": {
          "id": "f72be9c7-6088-41e7-acc4-28a911148532",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "25c0fa46-8fec-4f79-a1be-346ba3c55a8e",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "56695aa7-d992-4d56-b2e1-818e4a339b18",
        "cursor": {
          "ref": "bd0c2385-3d1d-40de-a0dc-576b7d16a0c2",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d2510059-e95c-46cb-a938-c05049945ef8"
        },
        "item": {
          "id": "56695aa7-d992-4d56-b2e1-818e4a339b18",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "877be87a-0c19-4adc-ab04-fc4a3d18b4e1",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "69a05134-49cb-4732-8de7-be3d87944555",
        "cursor": {
          "ref": "e3258b6f-56bb-4bc7-9c73-014f683f8c81",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3c9a573e-983f-4e49-8e43-af40b66ce2cd"
        },
        "item": {
          "id": "69a05134-49cb-4732-8de7-be3d87944555",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9e68ad3d-018c-4199-ba63-933bb0cccba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c627fd8b-2929-4dc1-a37c-5ae56aa6c043",
        "cursor": {
          "ref": "b8d0bb0c-3781-4361-9815-3af410a5ec09",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "b34e63be-5d5c-4c12-9fba-a29d601e0a25"
        },
        "item": {
          "id": "c627fd8b-2929-4dc1-a37c-5ae56aa6c043",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "85cbc953-d57f-49f3-a6b8-1099ec55fe49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bde9b4b-bc14-457c-bb66-6c1c04d268aa",
        "cursor": {
          "ref": "481cd820-8351-43c9-b711-c441269cc881",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "999ef9b0-a8dc-4b70-adb1-42598ff9ca78"
        },
        "item": {
          "id": "2bde9b4b-bc14-457c-bb66-6c1c04d268aa",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "9adf905a-f774-4523-9063-ffde62255e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a93887f-91fd-4fbb-a814-24148eca1476",
        "cursor": {
          "ref": "29f58ac0-60b0-4bdb-8b8d-f14dd0621727",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "0cebde6f-68a8-42d1-b022-832ba9bb1362"
        },
        "item": {
          "id": "2a93887f-91fd-4fbb-a814-24148eca1476",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "348af7fe-56a9-467b-aaa5-4777f4156c31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85c4695d-c553-49f8-8a65-21b5c548724c",
        "cursor": {
          "ref": "1a9b198c-e250-4f17-8039-6424cb160824",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "dd8756a1-2fd1-4050-939d-189f3d879033"
        },
        "item": {
          "id": "85c4695d-c553-49f8-8a65-21b5c548724c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c6b3bf01-6887-4095-9823-526e4b333764",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95936fde-1cad-4fd2-958c-074d4d5aecfa",
        "cursor": {
          "ref": "50a9ab70-442b-412e-ab0b-822b13eccb58",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a095704d-bacd-49bd-8949-c3dd0bff64e6"
        },
        "item": {
          "id": "95936fde-1cad-4fd2-958c-074d4d5aecfa",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "8319b600-a8eb-477a-ac8e-e3c9ac862bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a992b3cb-f37a-4f40-a4ef-a4988bdc5e9e",
        "cursor": {
          "ref": "620bbbfe-20aa-447e-a1da-f3c500dcc9bb",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "0818babf-8453-4322-bf85-524c6550708b"
        },
        "item": {
          "id": "a992b3cb-f37a-4f40-a4ef-a4988bdc5e9e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "0697a0dc-142d-4f3e-abec-59fae1931e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72218513-6597-44a7-87b4-ac2a609344c0",
        "cursor": {
          "ref": "17d323c4-d68b-4ae5-ab97-38f9f1d91086",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "7975ffdb-687e-44dc-a4a5-e9931cabe12b"
        },
        "item": {
          "id": "72218513-6597-44a7-87b4-ac2a609344c0",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "2f6bb718-3dc7-481a-a5c4-fa7a3fc8eccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eafdb22-7ad1-42d4-9bf3-c1cd12bd6fd3",
        "cursor": {
          "ref": "8a5c3ccc-c025-47be-b5ab-5ae639b8a2d1",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "3a9078fd-e436-4bc7-a981-2197469b2662"
        },
        "item": {
          "id": "6eafdb22-7ad1-42d4-9bf3-c1cd12bd6fd3",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8b1f2313-eea5-48ce-9857-ab767f8e9e84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef9f0018-67ac-44d3-a7fc-ac10a91b8b99",
        "cursor": {
          "ref": "4d1be81a-c1d0-47c0-b4e7-833c21a63325",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "48c246d0-04e8-4678-a082-671ac7827061"
        },
        "item": {
          "id": "ef9f0018-67ac-44d3-a7fc-ac10a91b8b99",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e9f9de3e-dbc5-4961-b93c-a74b4b8e10e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c438e1a-15ad-410a-ae5d-919206eb0836",
        "cursor": {
          "ref": "d21bc2ea-5c4d-4e0e-a6ca-5f064bc92ba6",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "12ca2a87-a6a5-47f2-b75d-be3d6375a9d9"
        },
        "item": {
          "id": "4c438e1a-15ad-410a-ae5d-919206eb0836",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "64cee310-6048-4462-b6e4-19b05465df69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96bfa379-69f5-4fce-b9aa-f7dc0caa2ced",
        "cursor": {
          "ref": "9c0673b4-c0a1-44b8-bc0d-d953743d429f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c3e6e29e-5519-49df-883a-9fd4f753deb8"
        },
        "item": {
          "id": "96bfa379-69f5-4fce-b9aa-f7dc0caa2ced",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a17e8622-c4d8-4394-8e87-b08fd5c8b4b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cdb633-024c-4c6b-b5b1-feb1c65431f5",
        "cursor": {
          "ref": "31e8a832-1f14-4db9-afa6-fc7d758899ca",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "1ea1c0dc-c3ad-4fdb-a965-7ca62428c6ff"
        },
        "item": {
          "id": "94cdb633-024c-4c6b-b5b1-feb1c65431f5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "83f95e92-0a8d-4d78-bbb1-2b96281441a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b95b4b9-b1da-448e-b88f-b7383fee1765",
        "cursor": {
          "ref": "435f7c12-ab86-4c6a-ae84-74f35b60d577",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4d34344b-17a7-4afd-bf65-19c706d6bc72"
        },
        "item": {
          "id": "1b95b4b9-b1da-448e-b88f-b7383fee1765",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b729c99b-dc5b-4ee4-84e9-4271b9da90a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1615aaf5-e188-43b0-a205-b32cb400bdea",
        "cursor": {
          "ref": "8cb416b7-0b34-4c1f-a40f-1fdb1ff26d54",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ce3db593-61e4-4281-b713-6c2c15761ad7"
        },
        "item": {
          "id": "1615aaf5-e188-43b0-a205-b32cb400bdea",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "97b89faa-44ca-4d8c-9553-6e862d1a2145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64456703-5e4f-4884-bb44-e35d0183b80b",
        "cursor": {
          "ref": "91140e9e-48cc-4d65-bfb3-7964f6298378",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "49721ac1-6be8-462e-86e3-8495cf48d6b1"
        },
        "item": {
          "id": "64456703-5e4f-4884-bb44-e35d0183b80b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "5da55d6f-680e-4136-b335-7448aa4600c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4db48d-412e-48f8-a575-d8667bcd9fb8",
        "cursor": {
          "ref": "f6cd3169-1955-4908-bb48-b37140723e98",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "4484069a-6d34-405c-8a56-c0d0b45f98d4"
        },
        "item": {
          "id": "9f4db48d-412e-48f8-a575-d8667bcd9fb8",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "3c294d8a-7a8b-42cb-a7e1-f743de642b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9aca9a40-3675-4db3-b3aa-e9ed2b94567f",
        "cursor": {
          "ref": "6b33a0f2-1bd4-4547-9180-e41e8201a588",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "d2a75c73-a194-4509-bd90-73672183d76a"
        },
        "item": {
          "id": "9aca9a40-3675-4db3-b3aa-e9ed2b94567f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "144f5d6b-9a57-4ada-a95a-410136ea7ab3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31209efb-060a-4bb0-92e1-90c2f91c99d0",
        "cursor": {
          "ref": "f6aa2d5d-ad9c-4a79-b435-4b2f055137de",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4f05fd40-2e39-4771-aacd-4c0dbb7afc45"
        },
        "item": {
          "id": "31209efb-060a-4bb0-92e1-90c2f91c99d0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e1bf7fd9-7eb1-4606-a563-51c1100b66b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "476a7a81-98c5-41cc-9b43-88ade89f7fb0",
        "cursor": {
          "ref": "98c96951-fb78-406b-9b57-114f6664f1ad",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a71da882-a4cc-4188-bd1b-58c682f6aa28"
        },
        "item": {
          "id": "476a7a81-98c5-41cc-9b43-88ade89f7fb0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "cecfa9f6-4e26-435b-8bb1-9abbcff49ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "285f4b3a-3830-4a2f-b9f1-b83b03e004f3",
        "cursor": {
          "ref": "bc914fb0-af6f-46cc-a4cb-62f2168e02de",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cf953444-eef1-48d0-9758-f58726398284"
        },
        "item": {
          "id": "285f4b3a-3830-4a2f-b9f1-b83b03e004f3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "97d3f7b0-6843-4fee-89f9-a14574da11e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63dfcc06-3316-496b-a420-c985a70b8e1f",
        "cursor": {
          "ref": "e7a3b216-3036-4d94-8433-60762e43da79",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d6d84a07-34ab-4958-8bc1-c538b54504c0"
        },
        "item": {
          "id": "63dfcc06-3316-496b-a420-c985a70b8e1f",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "450931e2-b926-4db8-9e2b-4594bcda869d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13b4f3a9-df1b-4a07-9076-adf62723617f",
        "cursor": {
          "ref": "d5521282-7e40-4e0d-8eb5-bfc9d72ee236",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "3f1914a3-f6a3-4bc5-ac79-7be883399533"
        },
        "item": {
          "id": "13b4f3a9-df1b-4a07-9076-adf62723617f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "dfbdcfb3-4d7f-43d4-8e9e-0a3ed1c34078",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3eb34d1-c9d0-47c0-85e8-82ac2e3ece7e",
        "cursor": {
          "ref": "d98a8b04-6f58-401b-9a90-50868c99fc78",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "40003cc8-892d-44b7-aad8-3389068c73e0"
        },
        "item": {
          "id": "d3eb34d1-c9d0-47c0-85e8-82ac2e3ece7e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "3252d864-8845-4138-92eb-0c075a157dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1714a577-9e44-4275-9522-c8010cb52897",
        "cursor": {
          "ref": "ca007fb0-ea3a-4338-959b-fdaaff2edb94",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1112b7ad-509c-4755-91c8-ab38758b21e4"
        },
        "item": {
          "id": "1714a577-9e44-4275-9522-c8010cb52897",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9d9ee935-1392-4a26-93d2-a31eecb2bf30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d88a00-243f-4400-8794-1c4cc4627dd3",
        "cursor": {
          "ref": "d65e6d8b-8914-45ca-abad-baa5d5700930",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "d0c6bc59-1115-4565-bdd0-7769c752eaf8"
        },
        "item": {
          "id": "72d88a00-243f-4400-8794-1c4cc4627dd3",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "9ad7d343-2a71-4e4c-ad78-70ab4c89284d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "011854df-6dc4-40de-ac41-dcf0b0fd9c3b",
        "cursor": {
          "ref": "cc5e0b7c-034d-438b-b1e2-21016c81b658",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "939099e0-1253-428e-9ee2-58cd70613961"
        },
        "item": {
          "id": "011854df-6dc4-40de-ac41-dcf0b0fd9c3b",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e058b6fa-0534-4251-bbe5-a18224e99842",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2507a53a-f1a1-4094-8c5f-bec4f264e29c",
        "cursor": {
          "ref": "4708f0b0-a5e6-458c-a7c9-99d07a7ea5cc",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "d680d966-7632-4bf8-a7f8-2e38077f62ee"
        },
        "item": {
          "id": "2507a53a-f1a1-4094-8c5f-bec4f264e29c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b87d4bc1-cf67-46a1-a85f-91ec5bba0779",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167863f5-0b69-48b6-825f-6c607153304e",
        "cursor": {
          "ref": "e3fc3ff8-74b5-42cc-a95d-50fa38f4d036",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c15d2623-9729-4a91-8719-a13becf919b4"
        },
        "item": {
          "id": "167863f5-0b69-48b6-825f-6c607153304e",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7dea95b6-543b-4ed2-bf8d-e3f5e94b726d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38f4059b-3667-4127-b903-314bebf14467",
        "cursor": {
          "ref": "82c5bdbe-f953-4723-8eef-c3c4630237d0",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "2b120897-8862-4c9a-aa13-3c9ba23a49cc"
        },
        "item": {
          "id": "38f4059b-3667-4127-b903-314bebf14467",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ddeddf5b-09c7-4349-b9b7-8dafe7dd1225",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e86136-cfd8-4c8c-a597-f5f2aebb271c",
        "cursor": {
          "ref": "e51fd312-4fd7-43fe-af86-12268caf7d39",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1685e79e-953f-45ad-babe-817b2cd3bd0d"
        },
        "item": {
          "id": "25e86136-cfd8-4c8c-a597-f5f2aebb271c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "cd0bcc4e-bb85-4f0e-bc0e-85df707dd729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0f27965-d8b3-4e08-84ef-7cf038cae6fd",
        "cursor": {
          "ref": "04bcd582-bf05-4bf8-9aeb-3a51f537c36b",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "f4404036-cc27-4d9e-9d6d-cc85b4149097"
        },
        "item": {
          "id": "a0f27965-d8b3-4e08-84ef-7cf038cae6fd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "10226ba2-236b-4bde-a4c5-be2050dcb9fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3f84f8a-3055-40ec-ac5c-0695b9265318",
        "cursor": {
          "ref": "3ec43f8d-00ac-464e-88f0-37d32669148b",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "b64467e1-2270-4de2-bd8f-6cf11a53a41e"
        },
        "item": {
          "id": "e3f84f8a-3055-40ec-ac5c-0695b9265318",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "30ed118e-3acd-4842-85c7-f78de7558c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42bf8382-c4f1-4c9a-a9ab-c580b2b731a3",
        "cursor": {
          "ref": "d52fdcd4-1f61-4977-b7ec-713d2820752f",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7afea83d-f908-4ed0-8838-b018f21effa3"
        },
        "item": {
          "id": "42bf8382-c4f1-4c9a-a9ab-c580b2b731a3",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "ef35b399-f918-427f-b9aa-9306d25c4e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8038f368-5107-4206-a4da-57ab7eb0d3c3",
        "cursor": {
          "ref": "a0cc3440-dbfe-401e-99fc-e8db8fb0390b",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "216a6f02-4370-43be-8aa9-35387deba00f"
        },
        "item": {
          "id": "8038f368-5107-4206-a4da-57ab7eb0d3c3",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "cd2ec5a4-6a70-48c3-860c-a39e86d6a857",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7aec063-15e7-4196-86b9-cb19d829624d",
        "cursor": {
          "ref": "aed51e25-4be5-49eb-929d-36ba69c6e1b8",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "227afc02-0a80-4fbb-acff-59a58a1261f8"
        },
        "item": {
          "id": "c7aec063-15e7-4196-86b9-cb19d829624d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "4a4e4a9a-f98c-4190-b56f-9d7c0c5cece5",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "8ff01514-2d67-4c9d-8dbb-76d69d91f1c1",
        "cursor": {
          "ref": "8f72b2c3-03f9-435c-9ad0-c4f0d311964a",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "7c024b35-0c7e-4bf7-b7bb-d128e943984b"
        },
        "item": {
          "id": "8ff01514-2d67-4c9d-8dbb-76d69d91f1c1",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2a7c8070-6ce0-414c-9c37-11655e935467",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b503d4-2b67-4438-9d0e-fbf066034db8",
        "cursor": {
          "ref": "1c912c07-0a2e-46fe-ba30-d66f0985d9ee",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "dbe61ba3-256a-4c28-b57e-0518cf98904b"
        },
        "item": {
          "id": "26b503d4-2b67-4438-9d0e-fbf066034db8",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "692145c4-c6f2-4e0c-8784-36db3c243645",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ab2d9b-e4b8-4985-b403-f1dff40230e9",
        "cursor": {
          "ref": "2c88c8ea-c850-440d-b0a7-24efcb58ec84",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "463b4633-411f-4bd2-9a52-f62e8373ebc6"
        },
        "item": {
          "id": "f4ab2d9b-e4b8-4985-b403-f1dff40230e9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6393992-c4ee-4deb-aacc-70d9382edc1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4ab2d9b-e4b8-4985-b403-f1dff40230e9",
        "cursor": {
          "ref": "2c88c8ea-c850-440d-b0a7-24efcb58ec84",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "463b4633-411f-4bd2-9a52-f62e8373ebc6"
        },
        "item": {
          "id": "f4ab2d9b-e4b8-4985-b403-f1dff40230e9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6393992-c4ee-4deb-aacc-70d9382edc1f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 74,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29fc9968-35af-448a-a6c5-eaed5fb8c3e1",
        "cursor": {
          "ref": "9c131270-b5bf-4a04-a659-05623b082be8",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "807962ac-65d3-46b6-99a0-e1ee7dd27e08"
        },
        "item": {
          "id": "29fc9968-35af-448a-a6c5-eaed5fb8c3e1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "b3ca3de1-4838-4939-b60e-1d07875a074d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02f9e91-f50f-40b3-8ad7-f54cabd97f41",
        "cursor": {
          "ref": "1a2539c1-f631-48c7-ba93-a88a21c087ef",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "524cb0d1-7722-4636-a9b6-4cf4e436da5e"
        },
        "item": {
          "id": "b02f9e91-f50f-40b3-8ad7-f54cabd97f41",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "9ce969f4-8112-46e2-ac26-7acae3606ea0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}