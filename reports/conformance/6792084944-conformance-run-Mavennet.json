{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "e90351d8-4d69-485b-a7f8-c1e4f21dc961",
        "name": "Clear Cache",
        "item": [
          {
            "id": "37950906-fda9-453f-8e17-f56920f82d9a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "55a910bf-9124-4a3a-8da9-87fd2f65f416",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9f2e619c-6183-45d5-89c3-25bbca3edfa2"
                }
              }
            ]
          },
          {
            "id": "9cd170df-4b96-485f-a1f0-b51f6a779289",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebce45c9-e78f-456d-a8a1-81f08d244f7e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "233f3feb-0ac0-4352-a3bb-22e4a212ceab"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "68239c73-ecb5-42e6-8eb8-8106839779ea",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b9b6c694-6ca5-41d7-9178-448951ec91cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b26d35cf-a87b-4f09-a25b-a562f27cca7c",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "57c8d94c-048b-4b11-8d07-c9346411553d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e68e3f54-5f6e-481c-b542-71b57f3a7515"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "814b420b-c926-4aba-b3d9-e976b57243c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "82370de7-143e-40e9-89fc-6357736a5bd5"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "092801d1-6926-41ec-b15d-c4738f571a28",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "89756eb0-6e74-493d-83e2-fa1e916918a6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "32341d08-095d-4280-ac14-136d45a8b0f4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "830356ee-c926-4d4b-b80a-5594278f5f34"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2172d4ad-0fd5-44a6-a8ea-759420c53171",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e369c2ec-7d60-401e-8c5d-01e19f46a33f"
            }
          }
        ]
      },
      {
        "id": "8c2e5d0c-1a43-4c35-b861-3e9c73bf8f97",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bab46b8a-f9df-428c-9bba-9ff8da42c59b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1ad56acc-fd1b-4924-91d4-da6c9ce23b78",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "837cda11-d9c3-4cd6-b070-2d70c8296819",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "582b567c-049e-4e38-9114-b3943f93d635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e4d26953-b1d5-40a3-9d12-4da6c6e82388"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef51e68b-85d3-4302-aeaa-c54537a3970f",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee8f7df8-f9fa-4dc9-ae4e-54974604385f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "400e48b9-b2fa-412f-af90-df5912d470c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc98db0-8c63-40da-a755-72eef79eb37d",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc0ab9d-bb14-4cbb-b488-95e14f9870ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c959ff5d-e670-408f-88a6-bf7cd013742d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f64d3fbd-3d4c-4380-8606-3d18e5901495",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ddc8d8b-22a5-402a-bc46-5e7dabbc7ed0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517e09a1-8b18-424f-af66-62cda8250c05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a40633b9-8a8a-4483-b740-a67403b7da52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "159a3755-018a-4aa3-b01b-76c15bd12c1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058e23b9-bf82-4739-b169-7764a5c88aff"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "f6f8e5f7-d5ca-4bab-93d9-cb0c38ea3b20",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0098048e-cc3c-4f51-bde1-04a1d91bfd72",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ff25141-7e73-4adb-a1b0-b13524023f56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "8ad730f7-02be-46a6-b45d-6f3808c015c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90b533d8-4409-4019-a379-c27c3f6a12b0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "13054fdd-40bb-44e1-9e88-14cef94727ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9bd138b2-b716-4daf-bc81-0ab6b477092b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f53fad0-e2ba-47ca-ad35-b23405aaecd8"
            }
          }
        ]
      },
      {
        "id": "df59286f-33c1-4ce5-b5b8-90e93b1672cf",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "8e9e3946-c84e-4dff-98e0-64863608486c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "04363d6f-990a-4c04-aee4-c5a5589f4b9c",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2740ac8d-bc0b-426f-8a9f-28c25b58f7a7",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ccc2fa2-b7c4-40bd-8371-e02d0c2ccd03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eae22b0b-117f-4ce3-9b4b-37d290c3378d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ee54eca-3055-4898-880e-b8e4606bcd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f9c3f9c-e3c0-4200-93c0-46b73c781758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc6dd502-40de-4286-8de2-7c2ebd105f43",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd37bca-0e86-4e8a-ac7a-fdcacce5fd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7b69874-0b32-419b-bd00-a73ccaa4518a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0248a605-5aa0-4832-861a-db6821d4182d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6da4d7ad-ac69-4d58-977c-906a669b9de9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e70c96d8-34cf-42d0-975a-e1354a305464",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae272b30-5b24-4461-b98e-6b0e02fb1608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "542a08f6-7402-413e-9d9e-53763dbd3ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a017f08-6a15-4675-b6ff-ff325bc2f0b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8c39ad32-5a8f-4c56-89a0-6565d4764f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e07de235-48a2-4ee9-a3bc-6011e3629476",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e080b78-0f99-46f3-bd8c-e0573f49676a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e420464-d840-4241-843b-2329e51986cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c03e1368-6dcd-400c-aeb9-a3c7d462d7c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "034e2304-9d6f-49dd-9e92-a7ebed8b8061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fd75193-0b60-488d-a551-f391eddc977c",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7111a90-092b-4ce5-b986-3219929d2bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a4a3fca-8c94-42a3-8d94-75dba6e607d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74335575-592c-45f3-8de9-5b86355a6f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb8397b8-c583-4b62-8fe4-9f7ff8133a25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fde8fa00-ea5e-4b85-9c36-696272007a87",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862b4071-55b2-4a76-a604-4b9ac60c87ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a314bb1-0dc3-43dc-994d-9bd3197469a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f94ad65-dde5-4bc5-be89-ac07c186898b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "767ca715-feeb-4c1b-b0f3-3ac6e6c73ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbffd723-c4a3-4b94-8caf-d708f04ad569",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4633b8-b785-473f-8d9d-246c78452d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fab51d9-ab43-47e8-b468-b95960cc423a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f231bfb5-6212-4cfc-89bc-410aa4bd3740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa7420ff-2ae6-4ead-8ea2-4a4a7ca0f096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8d5f53a-787c-4e75-84f1-284a1493ffc4",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab15416-0339-4f1d-a8b2-c565c8d9ca12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85ee8c8a-5d9f-4f2d-842d-53d5b93c87f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d1d81e-d5e5-45bb-b3a9-409ea418f9d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e708497c-6c4d-4442-ad55-04344cd50e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "843ab9df-e37f-4c9e-8a63-fd987cbabfa9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46acedf6-ea4d-4a82-8d03-54dbbd1a2f5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94237c41-222d-4c10-ade9-09396e4d40d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "967c5393-71e0-498c-be48-5ecfa48a24b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37fa551c-9ea4-4ee8-98d2-7703ca4b4afd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a58a45-b288-4a21-a5a0-37c237d6890d",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99c449e8-02ab-4274-8838-326ef944b2a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22ac7b97-586e-4669-b89e-f1cdb335ad21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16d8dd06-198f-4fb4-9ad7-febed2eaf152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1ea0915-a56a-43e9-a9e5-bdc7cd49c1b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aacc96c-847f-42d9-a472-b485b17b31f1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e253aba-3356-4b31-831c-7ae2f0c3594d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "848596bf-d9ee-4902-9b8d-25175d80fba5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e44db61-cd94-4e7f-867e-5a2d2a6694aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f4003b4-3f6d-40b0-9329-59f27ac6baa6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82a4166b-9a32-472c-ad67-5ce6c562bc9a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d14f63e-19d6-4d6d-b212-87bae0ea2fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ac372d8-6bee-43f6-b046-e3fa5626279e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acbc3937-c0fc-4867-a3cd-0ee321c0ff6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "cc0c9ce6-e4b1-462e-af89-ed755df95e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e54c816-cbff-4eff-937c-105e1d99d438",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa834a09-516d-4001-b200-6edb94777381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2042c2cd-bcc9-47a0-b432-5c48f72f71a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ab8d73-233b-4ea8-84bc-c94035c455df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50109a15-5252-456a-91d9-2560b27399b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54769eeb-d001-4d66-ad6b-4ecd5d841820",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7769cbd7-c686-4208-877b-50fe8c9aa492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2f3c4a-1248-46a5-bce4-8aa6ccb9a992"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c0bb5fe-4780-487f-b43e-84af290bfd69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6695e88a-07ef-48f9-81d1-c1e542a75444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479f1ce0-c553-495c-9fe4-8411d5a53735",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "159e1d16-1058-4a9f-ab39-7d37a67618da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09caf38a-f48d-4518-963a-ed2415e71fbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcf97e00-9f5b-4c51-8c9c-c3a2b030400d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c4e66abc-93e2-4b37-9851-ab910407416a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be10925c-5e17-47b1-894d-2e5a46c05afc",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f14bbd-2326-4740-bc80-178f205cac66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9597b421-b5a3-419b-987b-cc8952af4c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e77f6803-db72-40a4-85b4-4b5731dfc9cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4dae5a07-0cad-4f97-9cb4-2117e647d45e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d85a2a-5a65-4deb-b884-f20d21559336",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f2e9b5-5d23-4fa6-acf1-79405d5c24fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02628d12-74ed-4602-a9c8-3949ea74d91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54f876b9-c6b7-4675-bb90-d7377843ce35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea9e865a-bebb-40cd-bfff-0247a68d33df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20be86b8-f1df-4514-8a40-c705d163c15e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c86185-6a3c-47c3-aa61-82f71dd67570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61ab2fe8-c8f1-4851-b11c-a1bdb8fdd163"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070f459c-9dff-4a09-961b-d17e7ed8ac89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f515fe9-6301-4792-a2eb-dfbe1cf38b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "981384c7-cc86-4dc8-9385-a773bbf3d56b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d602da-565e-4fe2-b367-2808469bbb93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aed989d7-b55f-4144-9c80-e9f9fcf0ad2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aafc147d-e1df-4d76-8a6e-3a22bacdbcaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9377efeb-8bf4-4b8b-801b-6b4e00585957"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a3d642-41d6-4684-a14a-a8d9b034f528",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "327dc348-2f0f-4cb3-b2f5-84c7010d19e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "834222f3-8be3-4f2b-a61c-7f56f6b02f07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671e6a5c-a919-4df5-be7b-ae7c0ced2804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "758c0c88-1a5a-4342-bad8-98abf514340a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "947d28d0-83fc-4d69-aadc-36f5dfd6458a",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51a84a7d-076e-4706-bfa0-d75e08440e64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b11ab99-1040-4c34-aefd-94b117e9f89a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a00778d6-fcde-4024-b10e-efa19ccef70f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "06b3ca3a-bc92-4139-a91f-561900977c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6906169c-c097-495f-92e5-31b9a1d48b11",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e9978f-3294-4b74-b998-5a86b50642a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4befe39a-9486-4265-a849-0e1290713508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351d4ca3-200b-4e09-aed7-dd40ca86d317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ada2d92d-db01-4beb-8ad2-32163c56fede"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ea856c9-395b-4189-9825-b19918f8760d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efb94d72-3a64-45d8-8c7b-e9d163e77237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9212c0d1-0265-4790-87c8-4fdfe321d5a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0252372-9aed-4414-b146-ba044743cb1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "032c0495-8daa-47e4-bd11-eab1c58d7aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1f8167-298c-4866-90c0-e29f776d244d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99cab28e-353f-4dbb-85c2-f03bdf60655b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "038ecbe4-7a70-46f2-a678-7a692e4f7a78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c671ce30-2ec4-4f8f-8e28-2be7d515177e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e2d84ac-de54-46e9-be1e-526844ac7c62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1869694e-a4b9-4dd3-a7c6-233c3c147e0e",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5354b9-6b04-4ffd-901e-b3520e328931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21e06fb2-d496-4170-ba3b-95705c59365c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6618da3a-7c07-4232-8f10-d5a47f8f7ba5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aacf6bb2-247b-4e9f-b61b-8967f5ad306e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8698b20e-0cea-460c-b6f2-eb7bab6385b5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab71901c-950a-4a5d-8885-5f0044aef3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3170c840-3636-4a60-8ba6-76e0580755b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "613976e1-e55a-40b8-861a-31c742fabbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "37081098-7ce7-4566-a666-2cbd24e70312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f3c6ae-159c-4331-9694-fa060bf9f6c5",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3620603f-b429-4661-a5c3-b4d50c1016d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3092807a-828f-415c-accd-74437396cf09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea929c00-d8fe-4516-9f94-1c050179850b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a65b8b5-5b55-4d3d-b257-eccf7ca688c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "815a3f27-1113-45e3-b6e2-32bd22f68526",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e97116-666d-4da9-94ad-a6a14f03cd09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9eedba58-0753-44f9-b78f-32972f46bdd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea678db-e495-49af-8458-51231a708411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5be4577-199f-4f98-8c9b-84755a10dec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1cee763-eca8-499a-a517-f587e1895a3b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44361efa-8005-4c5a-8feb-5ac289d0c075",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30ab8bee-ee5f-4d14-b1b9-2b6c7dbf7a64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc1835e-cfd5-4bc2-8aaf-b61758dba519",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e3784ea-93bf-4eae-890d-2028730eeaaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dca4be8-fac7-4688-b9a4-26a30acd7b64",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a4432ca-4f80-43a4-b262-322504c0649b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0443c32-ffce-47df-b4c7-55856b5b6cc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9b69ec-ed48-47d6-a62e-c9f42f8696dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "12c7cc49-3574-4a92-a47f-1abd794d5ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "220130bc-7df2-4417-ab94-4e761ec73aeb",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900412bb-ba2c-4067-a062-6dedfc6eebfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9a3d062-d8f2-4df6-ac4e-096858fae005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ef9897-6fc0-42d6-ac9f-98ebaa9fd7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec12c682-fe23-4b70-ae65-13e49d1c09e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa96016-65e8-4b4e-95c0-8c8ad5127953",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77720155-b393-498e-9ede-d2168cb685e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88b2fa2-d3aa-466d-bf51-3fa5bbe9e13e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e782d2-24dd-4fc2-8338-15abd5080585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72dcaa17-e059-453a-a5b1-deaf50eea6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d306b33b-31cd-4550-9f05-128e7f79807c",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "455ccc7c-ceb0-4e62-b625-7b6cce8c3cc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5115779-a177-4635-8d17-3cd5e84a8194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66b48f91-13ec-46ff-8075-b74cc4e6586d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "40a627a6-9b3e-459d-9f8c-88119afbdd1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5377644b-d0c9-4297-81b6-307344782587",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eed6394-684b-43ad-991c-ec4adb0a0541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "719e77f8-45e6-4477-bb8e-0e0f5e2196bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc692ab-35d6-4176-b879-a3dad5b55f46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e620f21-4832-4481-bfac-0a71aeca3e5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ec1861-b7f9-48ad-bd9e-482c6b1e67a6",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28712964-5d8b-4f88-93d2-80be857518d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cd1469c-6c3d-40b8-8448-7b5316f11386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d87f88f-deda-4058-81b6-38e7f9ece9a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "24892ad6-17fd-4a85-a44f-c5e5e940e4ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9bd393b-dfbb-4332-85e0-22654f6ff795",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4070a34-5c52-4d57-874a-e96c4e43bf7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e66f5bb6-e7e3-4a83-b856-fd3094d836a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9288e24-0cbf-4255-b90b-f338f9159b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2c04c562-8955-43e8-95c0-05718283c036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ebe692c-c7db-416a-ad90-dc2ab6c6d5c1",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b22211-0014-44ef-88c3-26f8e2b756e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a66535-8b23-412b-acc7-e50d99f77245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bbf05f-ac49-4c8e-a355-9a0fbab6907c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d616169-d87e-45f8-a772-839de82cf7ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41f0eec6-fedd-4036-af4f-28efe9d86c50",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e804eb-806d-4746-a0f5-9294daa05979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3670d3-12b5-449e-b331-08e6ba1f5cbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74a4b70-54d9-4577-a169-104384ff87e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53f48dab-9e0f-40f2-9fc7-de1a808a888d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e969fb4-79df-4224-bec2-d97a9e2e9c73",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d250fa93-a5f0-422c-ade6-ce1178efe1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d061ed-9c68-4ba0-ba11-df72c4eafca0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee4e946-eb82-4dc8-82e4-01e5d16f9aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca9d7b88-7593-40dd-85cf-6f879825e772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b2d609e-deab-4bbc-8591-8bf7768cda10",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84c2711-ee8d-48bb-a6ba-b10acb804052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a670e57f-c1bf-4278-9776-5f0bf4e22e94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d7b4eb-5df4-4e26-9e8e-e2a9c69dc297",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "58e31cce-fce2-4a91-a5db-6b719414f8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b208ae-2e08-421b-883a-e2f3e0a35c08",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b002415b-c062-4932-9028-add43a052354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c0bfbb4-b433-43db-9a46-cd4a4e102f10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d89d746d-9154-4f49-8617-0c1110000b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "295d7530-016f-40e8-9d2a-031d7996a42c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "057bfd65-4cbc-481c-9b3a-27939d33b1c9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bda16bc-675a-40fd-9735-3b39e8d51e47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d513b643-03a0-4c79-8221-ea8034885dbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f7cd79-cd26-4c6c-979e-5ca65b73204f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "dfdda5f5-8415-4902-bf96-a4cd4f1ed0e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "102c1423-c72c-4021-90cd-2472aeb6944e",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89289701-85b6-4a3a-9312-a2f8b27ac807",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bf16b2b-dc12-4638-941c-bc01e1fa881a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "771f6be0-905f-4647-ada5-d846138d78d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "66a49ae4-7f0c-44b6-ae64-58d96f30a12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbbaa41d-820b-4afd-8dfc-c39e17f1f9a8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a357926-2f37-45b3-abda-d15f803c962c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b708f4e2-4d75-412f-aa13-6f982bdc7b31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ef306e-5160-48a0-a935-96c61068f413",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "acd82604-4f9b-4468-b0cc-866132a3f8e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1b0c4e7-33be-475a-9362-7c9a9a9fd0d9",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa78f9b0-ff0b-463c-94c8-4ff298a2e414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f989b351-86db-48b6-83e9-9cdc0a27c242"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780dabaf-2a93-4cfd-b0f0-ffe37b374f43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "89890e7b-f803-4655-8949-65366e27208e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31028b1b-b2d9-4d26-8d7f-ba7168878c36",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef3d134-75c6-4ffa-9b6d-eb3497e7c290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2ab382-2fe8-40a7-9545-bd7da16fcd28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3488b2b2-73b8-4881-9525-1a5bcb8aa691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0b44f7-e6b8-4da2-b1de-b4375037ae0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87586dd1-c385-4ae2-8e05-a709185a9a80",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80e5bf2-8cb8-48ea-afff-4c9d7eb762a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41de5dbf-e20b-4f65-8947-4ee4d311cd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff05a534-5373-4849-8063-85aba1f09a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "904559da-2809-46f6-9bc7-37385a0a4d8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e3c95a-4c98-495b-8684-c981df70b12f",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eaa5f62-b1dd-459f-8159-310e25e66479",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95d1410-fc71-4430-909f-9faabe288696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db7686d-aed9-4270-a084-e9cce8a1415b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c030962-780a-4980-8fc9-c22dd0061f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1810f601-643e-4e0a-86e7-60ded9eea05e",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "880855d4-353e-4f3b-8b13-e1aea60fcbb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750acfbb-aac5-4fc2-a528-b3bbd2fc7c60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c3bf95d-3197-4596-80c7-a551d684d9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5647cbdf-411a-4317-8819-401c36ee8f82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4e88f4-a544-443a-9321-3a4cae06430e",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cd0b77-638e-487f-8a63-e5b4d936bf85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a252de99-9117-4035-9438-87bf8ec988c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f7c4052-3d09-46f1-a23b-b348c2ffe8f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb4cbc5d-f89c-4c97-adfe-0aa3d5ee7076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f03c9d8-a629-4354-ade8-e9b4c4bcd4dd",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e6926f-d9aa-4ab6-85a6-353a2b570d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69710974-a088-451e-a7e7-6cba02a5ef68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6cf820b-1d2f-460d-bdff-d8968610490c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "f50853eb-a0af-4dac-80d9-bec02625d616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90aa639c-3c3e-47c3-96f7-53b04972322a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f20d83ea-a9b6-46cd-90ab-a5e0155b26f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef1dac3-80cb-49ae-810e-ac0290e68ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb22cdc2-5e93-44e6-9bb1-6603ccbbbc8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a6230e-3dcb-4440-b3c6-e3d0d84404cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "883ef0cc-c3c6-4a95-935c-e5125f964f2e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac6c4a5-417a-449f-96e1-aa6d6dc1dcb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81fcf7cf-8de6-4a00-92c8-fbf96b408405"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6de335-3494-434c-8675-3820a759d260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d08343f0-2b3f-4932-b2e4-6c0716193443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f6e01e-a93f-45d8-902b-12974b05abcd",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f628a53d-ea72-45fe-9cff-d2f018757602",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26bcbff1-f5c7-4297-80ba-adb673bc8fb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2f4d533-64ff-45f3-8e39-3ab313145932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1eaab7ba-7d1a-4f29-80d9-812dae3c09c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b75a717-11f0-405c-a5d0-9a374f8b27e5",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "badd5793-a9e0-433e-aec7-c3f6d6b245bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3d489d-bdb8-4937-8fc3-379654a62810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e139cb11-ef45-49c2-a8af-77c41a9abe8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b7e8e25-df4f-445b-b739-6d508dbba3e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b3af735-4dc8-4be5-bd06-e137c1665b75",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccb94aac-037d-4788-b6dd-6580ce42a76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f9b174-3bbd-48a6-85c0-2724b490dbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0fb608-0c98-4a6f-a57f-46dc4056d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "f2877c34-751a-4995-9c29-0f55cc34d297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e69de60-5009-496a-99c9-afbf2de8c76c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f375c1b0-ac1a-48d4-b53a-eb8b3f3f0be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f599ff-d9e2-4d2b-ab38-df9b28d52df5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d18dba67-afb1-4096-a038-a65ed32f0398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a4f12692-2960-4097-a08d-eeeb68337191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8b890d-ae8d-4d29-ba98-1daa181690b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6398ebb-aaa2-4b4c-b79b-382bb782a61d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e94013e-0b88-4d9a-97cc-f6cdf2144a34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a33e128-1c58-4054-a490-4ca6ad0c3615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b52bd48-e5b9-4e88-8f96-a1aab719f7c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fa8088-73ba-4714-88ff-5024ff0dbe9b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd45dec2-2670-461f-97b2-03c9517bdc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e5c2973-15d1-4b7e-89e9-bab27f765ae8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836862a3-ee33-4d34-bfa7-a21a4ec0ea87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "81d21052-a003-430c-be34-3180ddc29dbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a5a87f1-229f-481c-a3ab-7559139e3bc8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917bd5c1-6c5f-477a-a97f-5a291f6d58a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae2bbd81-60b9-4a12-a44d-93f5221dfdc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d26705-2cf4-481b-984c-8988ac4f1031",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "211479fb-7b4d-4a93-b6cc-dda4501019da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2988883-c0ee-4f9f-8dd4-f46d727207a8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55692c3-e5b5-499b-a35a-d01dc2140b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcab68b0-2d35-4edb-b346-31adc8165508"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bb8406-5d00-49e1-8d6a-8962f2c6ad80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "4c3b979e-8735-45c0-8b20-a830ca07ed4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560b9c15-c9ea-4a53-92f8-239c7127c272",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92fb1c15-aaec-4167-86ac-3026c7225d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb6a87bf-3af9-4d2d-a4df-32dae2425087"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88839640-8dc7-4251-bb25-478317a5c0ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "de87ce0f-7bfc-4777-bf64-b5ea4e2b0fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7706e0c7-1b9c-4c41-b0df-0077392d9a0f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b79129-e3a2-4d9e-96ed-642a911e3eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70e1d457-8f92-4bb0-a0f0-a5fe13a5c397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e90ed86-942e-480f-a740-96bd1d972b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2fe1a5f4-35d9-4c43-9ea0-16680d3c3682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf81591c-dfb9-40f4-9ec3-bc7e5d98c697",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44c05b2e-514d-4f85-98ff-bb227a046672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "598921ea-dfbb-4f05-b9f3-63d5c46e7071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a8de93-34a7-4ef9-9366-f3db103e92c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "86b5058e-fe33-41fb-abbb-aaefc536c59c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0adc7faa-799e-42f9-8d84-6a824a6f204f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17f37679-835a-431b-8618-816498487e93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "783debcb-1476-4650-8cf2-0e2c919198e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f5e7fb-e14b-4848-917a-66b9268ea16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f40dbd-9ab2-4e9a-9272-ff8db316a28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c2f437-567a-420a-a86a-7ad1a3b10528",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f58e235c-5f3e-48b7-87ff-6882648403ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8fe106f-12a9-40c8-8cc3-01f1c144ab12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f8bbd11-935b-4992-ba12-deb4c2bc04e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "94f25e3d-345a-437f-9601-2cd7a893b830"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86daf09a-9639-46a8-9d02-81805c0bd6f7",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dcd3368-9fc7-4ff2-8864-a9b616d48ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57c6cb2-ab6d-4fef-a75a-3617667e8b19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7982aa-544c-4766-b2f7-b48014e6c49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e58ff0-fea5-490e-9e14-45514da0cd22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8df53e-d62a-46cf-90bb-b6ac795e9490",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edbd21d7-9463-46f3-aff0-c608f2d0da12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f319bf6-20c6-4b1c-a7c6-764a0c6a2b98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db02ee71-ba1d-42d9-a4a0-6461ead18143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfa70c9e-c6f4-4e49-872b-ae5c29cf2141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd320183-e655-41ee-ab39-d932e86f45a0",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6737c07f-04d6-4276-a334-bac6df06b654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5ae1355-d85d-4804-8f86-8921d104008c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a31304-e99d-4ee7-9bc9-93caadf020cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf8a724-c9c5-4ea5-a134-e3f602f88045"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d808424-bada-4748-b706-92584608e1c3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b76067-9add-4cf4-b7a2-8600cd194e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c844b9-ef86-45cc-b218-1c400680d360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "601e7bfc-c42b-43ab-b09c-fc85617146dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55bb2a2b-8d8d-401d-98c4-cb2228f05a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c691c33-5600-4297-a6ce-a88f1be0c630",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9df784c-f974-4bcb-b182-341889002fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03bd5cae-1dd4-42c7-a045-364e694e365a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "708cff56-7dbd-4387-978d-0df79b757083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea16dbf7-e32a-4a95-a718-1ce384e7b977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c343a50-eff3-48a8-a8e8-8fac0e85ebb3",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d01846ff-ba89-4ca5-8877-7c2357e458ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1be9373d-822d-4a49-bb49-fb8b13fec9ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772e31ec-639c-4089-83d4-d3488ec99272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "774d60d0-8c51-473f-b424-e593f08b9370"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d91363-980c-4a52-803a-586a7f238653",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95a75bda-4978-4e78-8363-e281a917fc4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71f4bc34-039f-485d-b821-ddea6f33aafa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89887235-4bb5-433d-acf5-ba9439c6e3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95380476-479b-4999-8fcc-02a0d20ba41f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e4e13bb-135a-40a7-bda6-562ae921017c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320d12fc-6897-44c1-817a-8d14fa248093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f6c24e6-bbd8-48ea-829d-4320f3d81543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3367f9ea-5787-4667-92ef-cb82a221bf25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8f48ec7e-054b-4e44-a85b-506df85ce146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a90f9982-ae07-4b97-b9b1-174534d49f17",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506bfb9a-6efe-4e17-8de1-06dc9d437142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e1d5679-bfc4-4e70-b405-92c82def9d57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45860a7e-71b5-43a1-a8ff-dff3f6354176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2c36d5c-b6d2-47f8-8e7b-f92e3c3dfb49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e955659-370a-493c-bd8b-e80fd3023130",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7621a52a-c048-461b-a336-f929e1cfe390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab330cd8-ca20-4785-9226-ddb06caa47cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10ea820b-5167-40be-804d-d342b354cdcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4869734-aadb-4955-9a65-559a9bc8536e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66af6c8-4eb1-401b-be94-39c12c0bbe77",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5059dd5-4298-48d1-a805-f7770e237ea3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9678ab6e-f8ec-4307-b39e-13d7fc837709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b096ec7-9888-427d-99b5-4d766c8fa816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6ee99f-a7fd-4326-aa64-a42c707018b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5dbe64-18c3-4112-b4eb-6b5f2f57026f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43f2af8-7355-4d7b-be1c-69f1cbab67fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f28c0592-27e3-40af-adf7-5510b0b067d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a54dd0-8b32-41fa-b90c-d6620205fae2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a20dc3f5-fc53-4c2a-a952-e6b3b4b29c64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82de41c7-af4a-4ec2-9d8b-56208e7edaf6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14b335ca-833c-4174-9c6f-d05307db8d4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f9fd9d6-6e89-43a1-bdf7-a6be0c741173"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c6710f-1a2d-4f4c-a8a4-07a90a7dc414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "34baf422-d759-4c53-ad6e-8fd5111abde4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f3c286-a9b0-43b6-9426-ff1a9a448391",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a791cf13-f364-44d5-ada4-85e949b9ea6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7a747a1-26a8-4fcc-93f1-fc679a2bb376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c20a20f-bba1-484f-91fb-052f03a23e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ab5e392c-c649-45bb-b4ab-046c0079c1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6971c257-8f4c-4bea-868e-edd9f58e0df7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0369768b-3c7d-4857-adff-231135cfe121",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9d11a5-338c-43f2-999d-6a9fdd400277"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bac31348-f973-48c4-9b94-321b06828e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "11bfcc49-c8c3-4785-a422-db6b1e2ac827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8980435b-c9cf-447c-9d81-df3ab221cb25",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d0bf15-b1ff-4751-8d73-f267b891af45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb622dac-9b80-45a0-9d8b-d6aaafd41401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d04bacc-73e3-411f-8266-cab276f9be43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4a57d9-e6a0-4b00-9a89-64fd61d7ee07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c43a08d9-93d9-4bde-a4ec-2ce4a1270271",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffafb88e-bbac-40ee-befe-3d5995854988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71662ba8-f26a-4530-a23a-5a87860669b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e50aa53-c383-422c-86c2-30988565f337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4671587a-faec-4d4c-9a3b-6d2d4d8f2ea0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a839040-2a0d-4b05-ab32-c82ceae5a54f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c1bab7d-c23f-45c0-b9b2-1143ece31d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89bd5e2e-d34f-4cea-bb25-8d8879d4dbf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded257e9-eeae-49cf-b09a-39ad18ff586e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef73eb00-c35d-46d0-ab99-89a2e986d4d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5086d717-2450-4942-a8e3-22a63620dc99",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9cc051-f953-4bec-adc8-e4b8f364c4d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ab15569-d4d6-4e4d-bf98-911606e0c94e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb36723-f188-4014-afd7-fddf02a7ed4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f4a2686-2e31-474c-adce-04308327fe58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "146c9689-1a3b-4907-83a5-0ff567d2d940",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7e4a3d-8142-4b43-b8f5-0c2c7bfaf0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc1ab0b-a6dc-44ab-baae-11c039ab6bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44ff23e3-0119-4fa6-bcc8-0f5b3198fd99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb2b9a0-2e1e-4a48-b3dd-9578b98410f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0573a61c-24e9-47a6-a94d-829692ad8839",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdad4dd8-6dbb-4a5e-ae4b-508009aa9261",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220b396b-7b79-4c1c-9a5f-ca3af5ae5c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ab2e148-49f8-4721-a1e9-393a1f437099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4153d13d-d866-430e-9765-c898f20ef3db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "072f468d-c6d6-41dd-a240-c3d4a8a92049",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b66b4a80-5a0c-42f5-bfa8-a9ac1c2a8e26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01966558-1cf9-4313-b12b-2b5f93f66c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c466861-4a0b-417a-927c-4d56f6af8fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "75df9755-904c-4539-bd06-f73e87f08831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c6603e7-6567-470e-8f2c-7317b9f9e59c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a9a73e-da39-4a2a-9b7e-919e09f274d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9bb6ef1-bd33-46f1-8d9c-2862f93836b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6618d1-6a8a-4fa5-8132-d37de09202f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a716699-a2c1-4b88-a7b6-695d06006409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "513096e4-2262-45ee-b8d5-44e76e142c43",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb8cf9c6-c74a-420c-a650-492f5391cffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb25158b-038b-4b1a-b870-3af40bc51b00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d33383-64c5-4630-8de9-7a9fe166e5aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b6cae695-6b88-4a23-80cb-504df2d2b64a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ebf264-978e-478e-aaab-3ac98cf5c90b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec931cc0-644e-46cb-b946-f6cc55c04af7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1834348f-1a39-4a6b-9ab0-50f1348238ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2e63d0e-3d16-45af-abfa-45b44ac84efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "6f0efd6d-1305-4acd-aa5a-e46e2de0e35a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db89488-54f9-40bc-bc25-aa767b2a312d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "999b7f3e-4ccb-4f23-a4b7-4829151ee9ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "5cb216b5-a4e1-4c66-9179-b319ba0c2a58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689c92ee-10a9-4da6-97a2-6128d7b1ca05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ca5a3a-ada3-4d57-a342-9ae94bfbfda1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fbf4a09-0400-4da7-815c-da53e818bcf4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a579224e-5edf-4674-a966-5710bdc9a133",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f2e6758-7487-4edc-ac37-45393f09fb8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c34019e-4937-492a-a27b-bf62041b52f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2060420-e74d-418e-983e-0ccf4f86a9fb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffc7f93d-7f17-4a74-b67e-24afc4ea1a2a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0d90b4a-c9dd-41f6-8fe7-0a5b97ab0385",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b926bd4-b190-463d-95b4-81f91198baac"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "941bc2b2-30a5-47cd-822f-628045c7d51a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "668435a1-a28b-49bd-89da-e42fb36c43dd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1943b154-3759-4c1a-af87-b0c6c41b8b21",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6ec8647-4a1e-45ca-a2e6-34df024cd9a2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "75118601-0644-476b-a508-9d6b88de1285",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "24736e9c-60cf-4a3d-8d9e-855b93319f56"
                }
              }
            ]
          },
          {
            "id": "3021cef5-5159-4f41-a6d4-d0d0df36c322",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c8c376f3-e72f-4184-8738-f564f0ffd6ab",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "69db8933-0822-405a-80d2-bc035ccfce66",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f525198-ea7e-4843-a705-dded23ca581e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "35c680ac-60b8-4ace-b570-d9c98b90e2c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66af8b8d-b004-4282-bb81-d9a8a5593758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "718c43f4-e81a-4cef-88cd-6a6927c158dc"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c1e05540-7df7-47b8-aee1-d32ec7d6061d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4d050ba3-e8c5-42fb-afcd-334d07cd1a43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fd8c0a6-ce6d-41fe-b11c-4c1d2fe7d41a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4f6e073-024b-4ea4-a9e2-19545ad4d25a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7f4d1681-1559-46d7-8b0d-5276bab4c8d0"
                    }
                  }
                ]
              },
              {
                "id": "9d7b9e06-b386-4866-80c5-f36ee67e2a04",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02e37836-8f91-4128-936f-c7a2a3658199",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "deaefd1f-cd70-4695-ae10-7f71a2c9aca3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "63293701-0d8c-42b7-8855-5c253f57f52c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ec4ad10e-1522-49d4-a148-e36f9d1c262e"
                    }
                  }
                ]
              },
              {
                "id": "b1bc0c74-b9e8-43e1-ad5f-878d7b62e9eb",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "764ed5ee-7c89-44e0-b27a-3d4abeb16c22",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70dc881a-bfc5-4e6e-947b-cf401a99898b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac20bd10-c2d2-4da8-be02-ee99fc576d3f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "509c5747-a05c-48ea-8a89-d8c159bb1e88"
                    }
                  }
                ]
              },
              {
                "id": "40a5741a-996c-4e2d-b8bd-ebd2c9cb76d5",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e807aaa8-3d7d-47fe-9941-92f45723c5bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f98fe12a-b13a-45f0-847a-b59354dff091"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "25d56f22-59f0-4dd6-820a-7829c2c973e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fa64fda0-6ff2-4f2c-9bee-90234cbd602a"
                    }
                  }
                ]
              },
              {
                "id": "bb7ded79-5fd0-4b4e-8be3-2acb46bf88df",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ae94813-5d34-4e33-b701-a117f049a467",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4098bfe3-2d00-44cf-abd2-be4705b219d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79977e6b-de62-49d2-b95f-16cac714b261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ff59b455-5591-4ae6-a861-9dac4d3bc972"
                    }
                  }
                ]
              },
              {
                "id": "37134b24-3ceb-4859-b85a-26531dc5453e",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b277777-4475-45a5-931f-e45dff859e18",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ffe4d8d3-8f71-4603-9aa9-c412dd285a1b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "85da7487-e319-442c-a87d-819269b75970",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1061664c-4093-409b-bb7f-17287eae4037"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8f19fa72-bb2e-450a-90e4-2aaf7f939a15",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41cd67cc-c257-4bd1-8ed2-5a096de770d6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7c0952d2-93cc-4242-bd67-21ca931c0e6d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7849bee-fdf0-4d02-85bc-b93cb45047b8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e005ee8c-688f-4a20-b828-161970ee14e2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "2091b429-2e7c-4f9d-b44c-f1481f199dcd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7cb4d1ad-b7a9-4018-bdd3-eaf1208be1b0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "18ddbe39-737e-4a62-8a16-c107f37c684f"
            }
          }
        ]
      },
      {
        "id": "1876191b-e6e3-4d3a-b4d0-ed6d0f833d18",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "7e0d1d58-80f1-400e-bbb0-31c9eec3ce40",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d64df523-2f74-4457-92bf-d888d297e0ec",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "990503d4-e8f5-4433-943c-6b3351ba545d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18db460c-bd8f-4eaf-81ad-043521d2b3db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb69ab6-b7a9-4b29-9ece-aa028f3fb4b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a92427-7d99-4fe4-b998-3ec92bb5e41f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "15c92646-5413-4e44-ba86-021f03edda68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec5ad8ae-f8c8-41f2-8a6f-351685cca060",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5c7082-7352-467b-9c37-d7b2c0c4ae62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2535e4-9b68-4ba5-9def-702bf92a3b15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a383c4d-3167-4abe-b974-4d8559dc8648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9cec609-ac00-44b3-917b-08893953a731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fc9892-efce-4033-af70-b09c5b2c3455",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "769a37a1-42ee-4ea3-a6f5-008be572afe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1083f33-ece7-43d8-b661-3be1f0cf5157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "798c0d7b-76c8-4180-b7e3-831149cfadda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "85328024-797d-40c1-877d-6339e29fa07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5aeed9-cb97-448d-8be7-46d2b9540e3c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd05895f-48bc-4a37-9058-5944e8e65709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e76e941-398b-43da-b184-cf2ddecf66a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ba835d-231b-45d3-bbfb-32bd706770e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "88feef82-08a6-4f73-9b08-37637cb52935"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbdd4a8-53d8-4f25-ba26-55ba1de3a64d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93cc9087-c990-4489-b143-1a4654b923e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "209fb11f-f1a8-4bc4-8a27-9aec9124abf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21474ce2-f53b-4dd3-897f-167092700e78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab4418e3-883b-4ed9-a760-b510c26b1e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36151adc-2d1b-4560-8041-abb2b4ba1222",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6d41278-c030-470d-8ab3-a51a931990d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df68a5a-bb2b-4b2e-9658-7df73dabb18e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5d1f2d-af18-4a22-8c62-5f0101eab96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "917a17d3-76c9-427e-a3e3-287210426ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346516ad-d9e5-4a1a-ba07-de89c10ea888",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb080a2-6d42-4593-95d1-1e4156248a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2473767-9d5f-4f4f-9071-8378b8e5fb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445f0292-369a-43e4-99cf-426158291fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccafe436-4bf4-469d-a3e4-ee303b8e9508"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40a88d7-1109-4393-8821-d66b5f8158d3",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c73c88-dfdf-419c-be90-4bdf84cd7884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec5c5a5b-1694-4f25-b07f-954f34f6d905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56d216aa-0e6e-4b8a-9bf0-5ab801565e4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ea64a75-0695-4529-b278-57939d8165a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8abb008-7e08-47d9-a086-ff3f1d046ea5",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98455225-5c74-4dcf-85e1-a1338c8980b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf1277fd-1665-40bc-98f5-68dd40fc7768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3611a50-22a8-4bde-88db-b7b2f6d784f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a475b3a-e12e-480c-8363-82f2ae3550a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf4f05af-d39c-47dc-86fa-e32631e9e12f",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6553b7b3-7300-4a05-9731-c7c78a8bee2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c082e604-4218-4f32-b794-6223597bc8e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1c5ef37-6162-46cb-8462-1ca4c2240f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6b33748-e182-4824-9c86-a9434925130e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e0121c-b781-4263-a631-8e46adb384a7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "602d0089-fc40-44d5-b087-3e91026c5f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facf50f9-74fe-42aa-aa46-e28e47bc614b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f56f34f-a5be-4711-b0c7-17b200300c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5954e793-a7ea-462c-8031-aa78f00c09c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9df16a-4aab-4f39-b730-5fd95cf358d1",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73deb3d1-fc27-4110-b03a-40b1be1f976e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03a6e154-7637-4bb0-9e4e-04d783f0349a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce10c33f-b0eb-49d9-a567-53e97b105cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36b7da78-eee3-4c92-a19b-0dcedace5e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a2d4b5-a4e2-4679-8bfd-bf4d8b1483e9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce8394e0-7937-4d24-a75e-354b3c939afd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55ab5ed-9307-4d5f-9bd9-b47d70ce1de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b0e6a9a-a53b-4fa6-92f5-d2ea2be0a956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a61045b9-0b83-41c7-83d6-f237da5a190c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8848c8b5-b436-4243-a4c5-9a5ccc0e0263",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddea7597-12b5-4f5d-bfdb-c83e183945c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e17a4e4-3e1d-4ae9-bebe-015e440045ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a0adbc-1b83-4cb7-a430-01098ea74a1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "67333215-45a6-4899-a6fc-414347fe43bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e048a8ef-12ff-45e0-beab-5c198033895e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9377a6cc-9cae-4946-9ecf-9a68d019655c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7147b2ba-8e9a-4ea9-8089-a8c7a774f4a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6a0dbd-2c3f-44d9-a8db-6598ed7d2968",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a133c89-4143-4253-a114-8a8d8ae8d360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b472f12d-e987-49fe-9027-897e537012df",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6938d0ca-ed5c-4153-a3e2-62da761d634c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc8c81b-5dc7-4dd1-b968-fc1e760295e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40cded59-cd44-40e6-b64a-65407dc66e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd28c673-fff2-42f7-beae-e48ed208d99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af7d4ad-30d9-4d09-adbc-d28342d15c54",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "feb60788-cf75-43eb-8365-80d80ce0c815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab43f94-81a0-4a36-8a89-748f38125c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4876bf71-8cea-4bc8-8ac0-e8992053f217",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f83bd7c8-81a2-435f-b802-290198646a97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d19b38bf-931d-4681-9635-898e34efb9c3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5f47588-9e62-4eae-a1ca-b7e5f85c75a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8783312-a2ba-4a3c-bdb0-5c4e9eeab2da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26658a0a-16b5-4bb2-b1e8-8b56ee2896b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb13c84-101d-4d9f-a10b-0483db9dabd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e4684e-552a-42cf-a18a-9aa2f7562523",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d511b62a-054b-44af-810c-0b8909ca684e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b06e3d8f-7af9-4177-901b-146f06b055da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9551ec53-6bf2-44c5-88a2-7cbec960f2a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd26d950-ef71-4cb6-9f70-433c7de4af05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756615a7-50dd-4863-b3f9-0f717a248df3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f66586b-1c1d-4c58-9f94-dad43772949b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb756411-f8ee-444e-bf4d-6075dbf84484"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bcffc4-2f68-4599-a535-26cfee88b26a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86d9f28e-eb71-40f7-86c4-9a17ccc1f674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "549f618f-4ade-4c47-ad89-cbfee3095e3e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0761f5a2-0fa4-4d04-9fc1-1380abc894da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f324411-9eb4-461c-bb5d-ab2e942d5c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e2e4002-8b03-4c99-bd29-bc2b0a730b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0130316a-793f-4a76-95fb-2fcee6254709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d936a1-9155-47de-be7c-90b67d0a5ba9",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "171683dd-1dc5-4d08-ba01-70e41cd9aa90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1710245e-3163-42a0-9d5e-52c77f9a541f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c6f615-f852-4018-aae6-9ada21454516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "101a8946-82cc-454e-bddd-ead001386a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159d5bb2-03da-4757-aa44-57be6762275c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f6bd40-2998-483e-b442-be7ef4a2f37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8f585fa-5e52-4704-ad4c-92e4c1023b73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12a8a04c-b5d3-4a95-a345-ded0dd62b94c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d41059eb-2a56-44be-bdc2-22d125f9e13d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91b53abd-b451-4a31-8c1d-219c9dfbdd0c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494b91da-a934-4c86-8269-8ead6e977405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e016b33-93bf-464e-b352-cd15cd74e743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd213bd1-a617-4e2a-b8a5-11d1237423b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1680610-19d5-4b1f-98d5-40c477769756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f815bd3c-adbc-44b1-915c-3fe71f5746e1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1eb984d5-cf7d-41e2-9d49-055e40260568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261c8627-18bc-4bb6-8aae-67f88cf13be6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3723585-7986-45e5-bc78-f3c718733255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c740249-5464-4894-af08-fea8d942aa34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b38f7093-1417-443d-a797-927f382e7a2e",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71f2f9e4-a7c3-4674-b1a3-ad8ef2ea1125",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07443957-eb4d-4e18-bc48-618ca03ef2e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7679bdb7-0205-43ae-913e-c8fe694f6e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c2ad2da-82fe-46ce-9e56-9e7f7b96805f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad4c1200-87e3-4a56-9fe8-ebaebdeec9be",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085f25f4-ed61-4a05-a366-03ecebcb50ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78683de-62d0-4101-bc0c-9a75329504fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4b83089-aa27-43ae-bbd6-f595b49a7fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3c60952-3833-4f50-8a40-81862a0d9cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec65626-196e-4574-8874-a87aeba444c8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673dd36e-5356-496b-be6c-68336803c214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df24c01f-0a61-4cb6-b4f8-074807c37e86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deeba9a1-a86d-469a-ac0a-b5ef96f30ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "470298d7-4bfb-4d3b-aa9d-299c42367cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c11a08-18cb-4dfc-a763-b129697133ac",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c9cb997-8143-4a2b-8e50-79b8da3a703b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d0d207-3da3-4a9f-892e-a5d268715c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83629aca-2fb8-40d3-a7b1-38bc50a9091b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "300b3502-d4fa-4346-b978-07ae12b3f2ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "915523d4-4d94-4428-a439-97f30f9a76fe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e1a2f7-3f61-487a-bbce-b8dd00066b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42f51765-f3ba-4a81-b211-51139f59f4dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c727a218-3e78-46f6-8e13-0cc241932341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "506f55b3-7a7d-4f54-9c6d-b53843ee5599"
                        }
                      }
                    ]
                  },
                  {
                    "id": "611a99e8-8110-4ce3-8832-910d0a3759bd",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3088afec-9487-43aa-8541-4f2c5c77d4e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efe901da-2144-4af9-bcb6-510031043a35"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7debff70-e949-4eb7-9d37-914d3fb91395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72788eae-6311-445b-a0b7-989bc7f1a2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c465a36-3854-45a3-9924-09cbb823f85b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cecd3657-b50f-40a0-a704-55dc7fe89788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27fc7ef-069f-4861-8084-5b59437ae0a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323250ec-1790-4be4-9a4a-d6c6dad93a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3983ab52-2381-4ad3-bd3e-6d80d31acbb7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "02d07f33-afda-44c4-92cb-aeecc54646fa",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "15c7a7e7-0426-48b8-8b6b-8796f829dabd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc5d9e84-f33d-4a98-a24e-261ec40cc566",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "460df053-9ae0-47e9-8f04-2ebf9cc2116e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7baf994-8ebf-4acf-b5aa-40d3d08a96fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe96e7fe-1f49-4e45-8cf8-7d3d91d771aa"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd7f6375-db55-4f13-90d0-bf9828ffa892",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba6f5a07-098c-4595-8c24-5370b23b0322"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "00af2e48-07c2-4ff3-a73d-998cbc89aaee",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75fdd6b5-d4bf-4f87-ac3c-dc6dddbc7d7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fd1ac27-32dc-4bc7-bd94-69c48a07556f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "257cf15b-64dc-4af3-8283-ff2f2cf9f3b6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "204a4058-1aff-4ef4-8cac-74d84e403c4b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5b7dd00-1148-4fc5-8010-a81b64b6e5ba"
            }
          }
        ]
      },
      {
        "id": "94d77ff5-14c9-4d49-b047-fa68c20d635a",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "38e3abfb-4427-47f7-88bb-1225137e0952",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5533ec58-3fc0-4727-8127-39906e23e2c3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3284de96-aac1-4d12-b976-68f07c6e9395",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adced39-82e1-47e5-8d04-1e96298ea4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a1da7e0-9024-4350-9475-ce433d89100d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd38643-e217-4973-9ccd-b023a9175438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "85d8217b-c55a-4862-a80c-aaa7101206d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7eb529d-885e-40f6-b827-e5add8d6f26d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3a63764-cfe6-4151-a5ec-37c4f741408e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b293d5-4d4b-438d-a90e-56a401ded97b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7bcd83-17e4-45dd-9225-32841ecbef9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "725ae0fa-92e0-4c6d-add3-df4bf5b5aad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ecbd17-9185-49f2-83a9-7c70fde6d717",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343c019e-67fc-4498-8364-24b2cd3c7a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06b9972d-0822-422f-91c9-2ce694da96be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e12cc8e-f4b7-491a-857b-5a656b514850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ad172c1-2349-4e33-8c30-2344399ac73d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f3048c-a1be-46f2-a44c-91c068774f08",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e269b39c-14a0-49ba-bf3d-9c4af2426de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbc9144b-fd40-476c-9027-c8df98705597"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65eb6286-6e16-48d4-a199-18c7924299d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "898ed01b-ed24-4511-8350-df79cfbf65b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "524b85fe-50cc-46d5-9a43-a896cec61f4f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337be444-8e08-483b-b544-8ebd597f2bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b59b42f-12d2-4760-acf0-6d848addfcf9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c61c9b4d-cd77-4215-ae6b-004f9e99c58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "78c50a68-b416-4d5b-aa7b-da9bf5463772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a2c1631-b585-4bf7-9aa5-9085dd4d98a3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2b99693-d86e-4f40-a349-7febfacf0504",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b5a16c4-33b2-493c-babd-081df394d8b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8bedf8-2e1c-4822-b936-3d02ddaa86dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "098e61ee-2db0-487e-aef8-70e7871ed37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7a96f2f-8d10-4dbf-89a4-39ab50c6562a",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "248ad0d3-f4a2-4c33-b109-8731fb408e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecc43403-2343-4f1e-a72c-b2a0708628f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b687a9cc-147c-4647-9661-fef3e0140a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "510dd279-d51c-4fe0-8747-cafe5f237a0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06fc689-f9c5-43ff-9895-d52401937d04",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d463ce1c-67b5-4952-97cf-d122fb0ffef5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3929989-9aac-42f2-82bd-e7852eff3fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "979df22d-a9c3-4b5d-900d-1fd6e59f6dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc12a30b-53ba-43cd-ae06-fe5ba0417b15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054e6462-1fb3-4b2f-90bc-e582336cbbfe",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87a8fdef-fdb9-4d45-b738-c05a2a9f6a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2eca6f09-fe76-46d9-8be5-62267d848328"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291ebb92-ae3c-4fed-84da-c5c79c66ad28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2f133f-b9cd-41d4-bbb8-13c98fc2ab5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33aef0ce-666c-4fe3-b28b-c34f26fe90e4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e5fa3c-96bc-4259-85d9-e9ab14bfa8d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10d70083-c86c-40f9-905a-d371f59ffa65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2df2b99-d3ff-43a7-b3da-bd4befa15007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "245f5f9e-03c6-4d45-bd88-a8a9f7212199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8780cb3b-b7a1-46ca-a4a3-5cc9896fe219",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e55f8b-ea88-4c28-851e-5dfc9b826998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4143326-bb18-4217-9998-e84bee668353"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31337bd-8825-459a-a74b-d57d4b7b5078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8aed9191-a20e-4aef-8158-a71a53682d82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb30bd97-f4a4-4dfc-ae6d-c9ec9f30ef5f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "220e539e-ba2c-4ed6-ae86-e1d45be24fab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf54fcc-0b95-49a9-8a39-0de9afb79b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c83325a8-30c8-4be9-ac1b-79d6ce653f13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1ad19e18-9358-4760-a520-3152fe8c1af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8b8c1b4-3ec9-49c5-aac8-766fb236fb78",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505b3dd2-c10b-4530-aa9d-b91923b0fad7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d39bfccd-9ef2-42af-bbb1-e1795755dc06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d229a2fe-0215-45b3-87bf-f95d02961e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "731b8389-7671-4b67-a019-3300fc813d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c365bee2-0980-419f-ac8c-26b2980472f6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c244c6f-c0b5-462a-810d-c5654ada18aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da653a6a-462a-40f7-b544-3923c05eb908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b84c653-f84b-4f76-a285-c65a1be042d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "08e44e16-f317-40dd-b6a4-a2767949a48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12c4bfee-01a8-4529-887e-0b834259ed2b",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5449e57-293e-4afa-a83a-bb590b713795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "958b6578-21f0-4e3f-b2e2-1e638c4fad1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51454144-8201-4c36-837a-83d3cf5d78df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "db763059-43f2-4119-9300-922e6a876447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c015f7b-60ca-4cbf-a97b-959ecd7e9590",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59c4d40e-9062-4a1e-9683-b8d8c3b0fe00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d251427-c21d-4b59-8198-e4d3d4292ca5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874034dc-8250-453b-8192-3e5acd6aaea2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7601d223-36ab-4447-8929-24319403021e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db071fd-1c2a-4e60-ab70-8b6bc88fa765",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1f65fa-8a20-47a3-bb77-1dae408d8e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2f317e4-3e31-4268-b88b-442240cd679c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346d1e69-0435-4cf5-9cac-7fb7979deaae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a397ae2-190d-48cb-badc-fd9edcde8218"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65210bc6-8ced-42d0-8c70-c51c38538878",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98609004-eb95-4457-99f5-648031049fc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a2ada5e-b96c-4006-ba8f-894b2e67b4c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba1a29bc-48a6-478e-98cf-52afa520364c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1efaa5e1-73bf-43df-a71f-bc3201bf5065"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eede6228-2d06-443a-ab79-04f572995547",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bbb02fe-d601-450e-ad54-2bd41e67c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d8ea642-73c1-4429-9e54-6a91d78c99ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb76f71-4384-4a72-a5e1-a2709bc9e8b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a42a05cd-3a57-4faf-8256-784536dd4ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657da8fa-2f91-4702-9888-6575df30f13e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d91b571-413a-4e58-aab5-646e643282b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f4b663-b012-4fb7-bec7-1f8bc50b0fe8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4179e899-c94e-48a8-b843-a5d3df632177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90ba89d1-834b-4b65-b7f2-e0ec62725d9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ac966a-9a74-46c1-aa6e-375f5bc118f8",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "858916d6-2a14-4512-8351-0e582cd3def5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3917534-41b1-4236-b6ce-f6970081302f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4e41dd0-d515-4414-9913-a115ec137936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43e703f0-8d77-42ef-a917-ef9d17b820ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86219a94-feed-4cc9-9528-2384009fb7e0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1a2c405-12aa-460d-b44d-4d684d293d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4530c747-fe67-4f33-b959-928d4cf5354d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bda66a5c-8f2a-434e-a443-d91f03b24ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "885c0e85-0458-4351-b84e-c859a1d65907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59b2cfb5-cb3e-47d4-9146-4b3991a26521",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3d7a655-be8b-477d-8d43-5ab8d3bfa400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7446a080-710c-45d0-ac77-967d54064179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7298df4b-56f4-4975-94d5-ae1970b44515",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bc71b9b-01db-4956-aa21-249846ab03bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9b5349-4f6c-4c8e-9398-04b461d59baf",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a603a30c-8427-4a4a-89e9-9e270f37a9f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95e53b45-7569-421f-bf67-89ad8451a623"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f922f3-0749-4013-965b-f690e005c4e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c2a9db24-7725-4b0d-80c0-e1ddee9f7a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98d98d1b-3fbf-46ad-95a1-e89b8edc6189",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c65c1eb-4386-4322-896d-46395dba7921",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc116e6-267b-46d0-b1cb-a76dd4300c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e76cca5c-2441-42a6-b6b3-c60048858565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f6fee84-e611-4d41-892e-3dc42c56ed8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96f21d60-6b2b-4a8a-a876-6c514dd8472b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d37c741a-463f-4ba6-8a0e-c6c984fe16a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05455493-f2b5-4941-ab1e-9253f51d5ba2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "051c9c94-3fbc-4c47-a077-587df2c3f3ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c0feed8-fa88-4ddc-a42a-03a8ff662991"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d257159-4ad8-4e1f-9fda-1bc756bdefcc",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b902b045-609d-49db-8cad-49dd97e440a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56a503f-5c3b-41a8-922a-53bc1cc1c9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1404d63d-af63-46ed-b042-aa7b0df1cdff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e254a48d-938d-4b1e-9a9b-ff97927916cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48cedba0-3ea7-44b9-8c3a-ad7716593dd9",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c034782e-7512-47b6-9d62-edce70c1b25f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f72853e-70cc-4895-8570-2c2006367326"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e1683a-ab87-4c80-acd3-81815c218ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80f19d7c-3a55-43b9-98ba-9d07f8c801c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb9dd8b-4c9c-4cc7-87b7-cb35b586911b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "819ce660-6fc5-4ceb-8323-333c72506123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd5926bb-f853-40ce-a5ee-9e8948ce4152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba7e71f0-503f-4008-82f3-702cc7d810ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6c2647-a81b-43a3-bb66-a3cf5395cbc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e43f3f7-7c9c-4a18-9bda-ba76dffa0321",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a238d275-822c-4ffe-a0b1-47a5092c422a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd6d6d06-ac77-4d49-9e53-bf6a5c4ab580"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0192d44-2edc-4b00-bc33-1f285af8e8bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "292c33ea-80dc-4b69-ae4d-0742a4e0fb95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba8dba74-5baa-474d-85ed-cbba1977644b",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0be641d5-ab0d-4dd5-98b8-f5521892ec5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704860c2-5fba-4712-97d5-508333168eb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f282418f-12f6-4fdc-b5c7-65a62aa35bb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d57f72da-ce1f-4bed-ab20-7a6577e73049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a4a3663-4a62-46c2-b517-8426bbf847b7",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5339eef2-b253-4314-9f5b-9dd9f5f03d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd4064da-34ae-425d-826f-04abf8eb0eaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53d8172c-b1c8-446b-b53e-1734a1d3956d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a641c3ae-b8d2-45c8-acf6-260e1c49e4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eea70a4-e620-453d-a64d-1e7c229e247f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c89c8d-315b-4b71-8625-2d46ad8db034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3909e236-3d21-4f7d-b082-072853d8c47c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb089f6-1a03-4863-bacc-7ecf469f4930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4293180-128d-45aa-8e54-c805a974aad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48f9a265-9d06-48c1-a58f-d4827f487276",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5333a882-c9a9-48f6-a762-1e7694cfe8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e2978e9-09f3-4b65-9d64-d19c5dacebf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a93dc07-abc5-45a2-a5cd-5fd018c39f6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fb30bc-bc14-46d6-953b-eb759f8ea811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc1bdb1f-2274-4651-8a45-8b790f153265",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "682f7448-0e5c-4360-b110-41289eac6a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af7bf01b-2b48-4084-8b7f-f65bad57d73d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f21ab6-d04a-4ae8-aa08-e5f625f55367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ae8a33c-4ead-4fae-9c19-2b0d063e574f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "703f7cb7-71ba-44a7-ae36-5f40425ec8ab",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21abcd7-a8df-43ae-b505-f3be65c9a649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37812fa-0590-4923-9388-cc2955b5cab3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb8adf3b-c7a0-45f5-b071-23460c20cb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b768d8fc-c064-4405-b6a3-8dbabfc5f10f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d342fcf5-bd7a-426f-ac57-85edd2415a95",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d42244b8-f873-4261-b59b-92a8460b0d62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4188803e-bea4-467f-8e00-6b84ab7d8056"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2613351-7ce3-4131-a380-d96849509a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "256524fb-4591-48c8-8d37-101bbab1ab86"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "957c3600-d414-4b81-8f55-a5e0f5b7792a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bee5733b-79ba-4205-a245-daa99929d5bd",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7237535b-e622-49c7-b482-eeb36414794b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "88432de0-dd95-48fe-926d-5e4decde2401"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2d7dcb7-81c2-4730-9ff6-1d6165057ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9e7f68bd-2509-4b73-9427-a4a70823cb84"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68e134db-d2f0-4060-bf7c-3ca0d0e45e0c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2f54f5bc-668d-4ffb-b32e-a9b4e1c3f874"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "364c4f3e-a68d-4ad7-a6b8-22f28f9f0baf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d932515d-bc22-42d4-9378-4511eb8e4f10"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0cd6ddd8-589b-4dfa-a3b9-e10dabfe96c0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "73cc5095-d95b-4b7e-bdb9-7f9ac2bf361b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a85f0ed6-5fae-4839-8300-1a7e94f0d1d4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0be4633-5715-4952-8d03-9102ef2d0e97"
            }
          }
        ]
      },
      {
        "id": "cbd40888-6326-4cf4-b846-d915d8f602cf",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "be84625e-ee28-4f82-bbee-327cba1315e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dfb12af9-fa7d-4c37-b970-ff508e27efbc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99016dac-3c5a-49a5-804e-d6aae156b677",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a18c9c6-3b75-48cd-a302-aa40ed969077",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d5201fa-4abb-4e77-8990-ad13013d3101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "638e9816-d7c6-4175-b5fc-ba2e83f53d9b",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd6e2baa-ef39-45e4-b248-8a2b8f14804c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3220c2e6-d5e8-4606-891f-7727c3b6b052"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29a206f-77bf-4632-8b4a-fdc262677368",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1476c908-9e1a-4ebe-a789-f451c8607cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8213818-085b-41a3-b250-54c54cdeda95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feef798e-b5bc-4c7b-a6e5-8b161728b924",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "995625ab-ffe6-4b00-be7e-0e4c6230e5fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21621c5a-ddb2-46f0-97ab-0c1153399670"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b72d54-cf61-43c4-b124-64b1ad27148a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8575a21a-aa43-4460-93d2-af1f98b34bcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b544fe02-ebcd-40a6-aaef-07b4351867fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0227ed8-5ce9-455e-a2fd-c173ecc87166",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5d4b49-e3be-4ca2-b0f2-1885d6946423",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6479d452-041f-46a8-9e46-24c6aa557419"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e0d0287-f618-479c-b2db-b070749cf87d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a89728b2-faa0-49d0-9ff9-92748201e779",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7973c5d-8cf7-4a88-ac9d-787a4fba3d35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3bd644f-5165-4bc0-874a-b44d455cdfa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93a1b97e-4663-4ee0-b65b-a6a3d51fd96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021ef431-9331-4c19-bb6d-1819442d3299",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "694ad864-d55f-4038-9258-b8bd7a953167",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfc18418-60cb-4bf1-ab75-78e601c69edd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50a5cad8-26c2-409d-9800-9db28e80abae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75ff6703-2f92-40df-9919-e8def316346c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f602622-f35e-42dd-9177-7b048604910e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b6c645-a050-4cec-8f68-aa608ddf0f2c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abd4b78a-b747-40fa-bd5a-396fa550b62d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fabccbc0-aec1-46c7-b1c7-96f0690fe601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53c2096c-d0bb-464b-8f24-0b5b2fda13ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39f68942-6627-4178-bf16-bc33d93dd951",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cbb7e5-9813-49b5-b177-defdff130ef2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f26612-2171-428d-8aa6-43811096054a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "324c8d4f-3644-41f7-b259-37b5b32f8185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f7b7e0-91dd-4ccd-81fc-5b81230d5cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f7100d-593f-474b-b378-ff5b892a3e42",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "023edca1-5837-4333-b155-ec8e27773335",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbeead54-0de2-4e65-8f02-ba3c0b7d10e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394bb141-89a8-4fc9-b5ed-c9c975f29b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0f3f68-b467-4997-a364-33b0761eef37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3a51db-f92a-48d3-beb6-362b69c319ff",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaa4192a-08eb-455a-a418-aa75f8c70de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b6509ec-117e-4f5d-9783-ec8cce98ee32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4a6bf10-9ffd-46f5-aea2-5881dcb8868f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9bceb4-00c8-4b36-bc01-d9d0108abd89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37ba7f0-ffa7-462a-9901-1e821adb5589",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95bab52-1afb-42ce-8dbe-1cb78feea395",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0afe3ad3-3094-4f61-b9bc-301eccd3cb01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be363709-ea29-4ce3-b0fc-8331592b1aa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90043bcd-a440-493e-af56-abfe98e91c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf1e679-8598-4789-9091-4d58ca617ac6",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "731b8d76-735b-4d73-bc65-c9dc231f9743",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ff1139e-73a0-440e-960b-ffad1f82febb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b9f3317-d346-4cf1-ac31-5ce8bd1b313c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28310365-bf51-48ca-a0b8-afc3b8cf3683"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b12ec57f-cc43-46bb-91dd-a4a10a0bef61",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "561613a3-524d-42d9-9c5e-f441b996f532",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3493f9-52d8-4872-852f-98ec064dfab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc7066d3-2fcc-4e46-927c-2f85e1ad954e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b82ae178-1e54-4ce5-93a6-1c3b42381d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46f403b9-1ddb-4ca2-a54d-df2ba2fb9709",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc5e0be-82a0-4109-a1ff-153aa14f37e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ba8fb93-df0f-4276-8375-7d000f7e80a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b309942e-65b4-4e3f-a64b-0e66f27b0330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41562a8-1396-4fb0-95b5-d942702cd311"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b13d854-3ba5-4364-8718-6f5b3485d65c",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "994f2933-1198-4688-9423-2a5056ed7965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11c76065-ea70-4330-8427-cd9a7d4302c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4193374-7830-4c16-a366-1638644b2b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a3e584-196f-486b-8475-86750e3885ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3f3f11-ecac-4970-8f1c-1e3b6d46f179",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "270dae02-e542-4c6d-bcab-38b67a0596b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27989392-299c-4096-8443-f07a65251b63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c7aa4d4-7dfc-48b3-adac-adad6d748024",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5775e4d-f465-4c75-86c0-c0477cab2d49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c8a674-a20f-492e-ae9d-11a097b665d3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de240e6-92ef-4424-8008-c535c4dce844",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ee8e65b-3f93-4e49-8a0f-b9094ae5f7e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28d4c27-d43b-41c6-be53-d804a70c2d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0534f428-4ea2-4a83-97e3-4a2d9522a661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee724c2-a909-4a00-b0fa-e3382b34c778",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91955e23-b5e6-45de-b7e6-5f7e61935b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5b3e0bc-8fb4-4d81-a3ac-7b8314e3f913"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e49d34-06df-4567-a480-755ac714273c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77175786-09b5-455d-9dc8-6d609d6f50c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "273da12f-fdf0-43ae-b332-ce716aa8eb63",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2b7d041-d74e-40af-9f55-bb0fe1e96a52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30671a3f-4f52-430a-8df0-ad084c2b5f91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29875c6d-8665-46ce-b806-d32a7141a1fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80c6777c-1ddf-4cc1-bd53-ba1da50d2b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6273340-3c1e-4a86-93cb-ff559c30805a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c37697-a458-4397-bbcc-0a04052c8721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0bd4832-3e68-4cdc-8a03-76de630a9753"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5adbf828-d455-4160-a845-e1f5c81a62c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92afed12-9ed4-4427-bf5c-98be49d2c671"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4c46ed1-6e39-4ded-b3af-f95c1137884f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9520b8ef-7d78-4d4e-a8d7-628936076230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7c13d0-21f5-4cbf-bd11-7878be611082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd1f26a-441d-4064-bb17-edfbcd72912c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5b7f76e-7b32-4999-926a-d55320e3dd45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34e9d6db-1256-4e59-a7a9-b49197ee2821",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f1350c9-8fe9-47b5-9a2c-c1df943884e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5356b91d-2729-4a24-a374-f8b1de22a9bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cda9f2d-9b99-464e-90fd-21b5c7512e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4934943d-e920-451b-a274-c97b5bc4cf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "737b38a0-ea14-4026-b339-32a4257d8013",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e48746-b061-46ff-ab1c-3d1216b33505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13ddebca-1c9b-45f1-ade5-f7988903c9b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2516ba8e-6f29-48ca-9bb4-5d4116033dfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98b4a14-372e-4216-9cfc-db608c380ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48ca26d-a1c0-4bde-9b4f-67ba2b3757ca",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe5a1314-49d7-42fb-8455-f5b57017b4ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb57f3b8-6595-42ee-9a51-87e96c1a501d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9758bdd-371e-4b02-a1ec-0a1163234c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b481f5c1-6a6e-4978-9de7-788fea6bf38a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3570dad-d1da-4129-80e1-76da5ab08782",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1341cece-d7b6-45bb-8c23-d4cbbe5e7077",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29a79d28-a0a3-43d4-bbed-1fef08967225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90759a4-9655-4126-b0da-622356ee9899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ff9ee2-2e14-4628-aac7-b2a817178ab9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26b5fae3-d7f5-4beb-adf4-8f607e18a0a5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43d3ef0-5b0a-4ae0-b40c-fd1334d4074d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6dafc118-351f-4f05-a915-a69a1e57c58c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29cbfe8-2992-4043-91e8-b34b8d105122",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e448f5-70a1-4f61-bb55-af28f3b29a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0381c242-87fa-48bb-a285-30d076fd2b9e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f87b62cd-7be5-47a0-a8b5-f9320607c110",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70020e2a-edff-4648-8ca9-0bf905fae47f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b02c7059-f6c4-45ad-b07e-ad3c106fd2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "266da0bb-826a-4d4c-be22-adccf2b3d54c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a2fb20-ddae-417d-b88e-d2781dfd2455",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b437faca-d81b-4fe0-9855-27c49949655b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2971eca8-cc95-4ad1-9399-75aa370b659b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60a3394d-ad68-436d-b641-226a80d23078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6a7f51-5595-4b3d-b9fa-a2ee2ff255a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fac7fee8-098a-4768-8667-057091535370",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc65e15-0278-48d2-8f77-e6e22f654c9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "056e3c6b-1f4c-474a-a18c-91d484c67f75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35c4106f-b6dc-457a-9767-2ae3c18e3ae1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ed18b8-d5e8-4961-b68c-652ee87f13b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aff82274-5abd-4f53-a9fa-891d5f52b4b3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b758fdf4-bb8f-4318-95a6-6d9c6d1709af",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66347aa5-76af-4123-a8da-7ad6ad4c1b61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a00ff05-58b3-4a61-b67e-e181e6ece3c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d392eb1-5e51-4118-a40a-8569706b922a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8756c961-7e1f-48ff-880b-7386240575c0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5362c9e4-3008-40fa-843a-4c137ec31ebb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32aa0be0-f218-4d2d-aa18-a24c2044d3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48299747-bc42-474f-a40f-055bae7f9b32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0940eb28-a787-49fc-b061-fe54741d8675"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5464c07-5e97-4493-b720-42f764c607e5",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cb675f-3a12-4ee3-8f89-362789a3762e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d728a6da-3522-448c-8f9e-b0162eede28b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934abc9a-5bfe-4f68-a00e-99207626cbd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42bcccc4-5010-4fff-83d1-503646da8655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0087bd9d-6d74-49b2-a107-c6fe75b6de5f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc30cca-d264-488f-b7b4-3272d1987017",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb70258f-0200-4f38-bd84-95786309e625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "163e0ccf-b829-4c17-b195-8bbe61cb15a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8a60b35-a14e-4766-96f5-fbf02f9d27fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f18b406-3350-4377-b672-235784b87f19",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84861996-c78e-4233-9cfb-cc9c0b6589b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87428157-e8cc-43b6-9dc6-d4609181124f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49397600-a1d1-44c6-9542-d3073a0d2c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10970d2-c42c-4d8b-b6d9-53dbe69146d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b01d256-b8ac-4153-b418-f5d43030844c",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17ab15e9-e4f4-4ea4-a259-badf872c4381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c66ce2ef-e234-4ef8-a185-9a2158cb8050"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6890d59f-de81-495a-a6c6-979c3adf5ec8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98cc85f3-35fe-4769-88e3-4e631f9e5bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3b48e3-c662-485e-9250-e768cc624527",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec9832e3-66aa-4856-9898-3c8c7170fc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8dc20ad9-b821-4070-8329-2b70265aab69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53f4efc-38d4-4e1b-ad55-7c7d5f51785b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f98954-1dd9-4f3d-afd4-8567d8bb3eff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cc2dfa0-b313-4b6a-b1d6-396594655fba",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae8571c-1c99-42fa-9958-36a51ec0711e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46817d3d-6e6e-46fb-a35c-51badcf10479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f57a6df-2b93-421b-9e0e-020fd807bf76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3027bb53-a257-4535-a988-9d5ab4f2dec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ab28cf-a08b-48a1-a021-a10e949eeb0a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729d2b97-0124-4500-8643-1d659b6c0b7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f2e224e-d4fb-4c7a-912a-370069e83ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8032f629-38d3-489e-96d4-3bc3553bbb81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca827bfa-c0fc-460b-b43b-bdb12cb4f198"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2469f2f-c0c7-4da0-81b9-a09f4fb3d64e",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5dc1cd-7aa2-4f22-94c2-b72471574a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0914c06c-e730-4620-9151-42f416d38781"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed04b0d2-0d7a-477b-a29a-84ba204b4f90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d797e1c-962b-4f5e-83a0-2d0c6e773b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94bdd94-d120-45b9-97b7-29c0bd7c223f",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b11cc7e0-cecd-40a3-8c46-6d9558d8e4ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f8038e-5002-45f6-b56e-0eecb255f929"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efa6273-ed8e-4498-873b-48aecc3b571b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "182bc1e7-ba39-4328-8d64-6920f30fae7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e481ad18-1118-4949-b4be-352b887a9564",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0dacf83-8686-4f0d-9720-5173e37e6907",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1182021c-99b8-40ee-9652-1518e9b00023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8eeedfd-dd54-4de5-91ad-33cc282be46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470ad6cc-f862-41ff-b1c4-c30bac79139e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f96bdbba-5a1e-4402-81e1-dd14f41df259",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c4d4e1-726d-4160-bae2-4ed8c2d1a404",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d15be8a6-01b9-4221-b240-6693e08d3f86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "204d1e76-4e07-4981-8d3c-6b138a8aa9f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4618fb-77a8-495b-a783-9ad98490a62b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "211aef8f-b4ff-49c9-9523-71553a18baa6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a500045-58ad-4da5-86b7-1c4393ecdd3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a04a7e5-1597-40e4-b2f0-c5e2fbd0003f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0573f998-8227-48c7-b717-11a0259baf8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa0cd322-f170-4e6a-92cc-417184b5a141"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46146ae1-70f7-473e-a484-3fca13e4e113",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1738f7b-66a4-4e55-84d1-24a083590123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aee17beb-fca9-470e-86e6-4188c69ec680"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4416d7a6-dd82-4e58-b5f6-5f8d01d05db7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b56d78e8-3642-4f2c-8828-dd9f1cc67997"
                        }
                      }
                    ]
                  },
                  {
                    "id": "053e4f18-9a93-4e6f-8933-643e98637954",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6c9b18-1934-49be-8479-c99ae73b5f34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd0a3ed-6a4b-49c8-85e4-e5e03b9a9551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e80cac-1de1-4a8c-99de-c55e6d9a902a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80011703-4ed4-4067-8451-91925ada4656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d27b666-f992-41b9-8661-8cf4a784c7af",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5cb0bf-1cab-455f-9749-5220bd154f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f955cc6a-e110-4ffa-b59a-e260bb4bcd87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a77ef69b-9322-45f4-807e-b77f8ad7ef16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1e8116a-145b-4c65-b5d8-cedf218ba5c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b31fa35-5e66-44da-9601-5a1cf559fada",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e653e5eb-b73c-49cb-9a44-ff95d642eac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898190cf-95fb-43d4-8720-715a81863e5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2453666-6813-4c76-bba6-1e31ecfbf86e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e0be6c7-b6b7-426c-aef8-82c496d4758e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93388477-caab-4145-b9fa-5ba42c1923be",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dbf0a4-7e7a-4460-b9dd-882b7a9d9696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d418f3c2-46f9-4327-a774-687e25900b7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe86df90-47f1-48c4-94ea-bf088ad30f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a97717-9da3-4bbb-b97c-ba3b3504a348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d96305b-e45f-4c59-87ae-58fb012d6519",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a743e43-638d-42da-a560-a15b50ac1373",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fcf0436-a844-4979-9706-f18a67213d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ca70e26-3632-42cf-9cbe-315c738c359b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b5b2fc-ef93-413d-9dfc-a6f0c3dcadc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41b677ee-316a-4d7a-af9a-8759f93e8c0b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e32716b-02dc-4400-8436-9437bc76d6fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45e4353-3733-419c-b33b-000262e0b0a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b1b5aa-b491-4238-b822-6b604f7e78dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd7e55af-2ba7-4383-977a-cfa2f3c11bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37617d4-5473-4802-88f0-908b22904fc4",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1eb00d2-ffbd-4665-864c-0e2b565d1f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abc33039-aff4-42be-bfef-ebf123f86afa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f198cca6-fadd-46ea-8155-8fca59c512c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da619fa7-e38c-4ffd-a748-555058eca611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d29690c6-2d39-4118-b96d-826576b5c847",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91791122-b155-42a7-bed5-2300ed572cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d671e3b7-7756-4715-b90a-ba2bf6b69b9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb380c0-b099-4546-ba81-78e06b4a4039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed19bb43-41f0-4d1c-80bf-10e96acdc035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a1ddf34-52a3-4c0d-9904-6cfbc7545b7d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a5dd17-43c1-4a85-9c23-57243ddc4ec7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f8f2dd7-487d-4159-bcec-5f52e567c6c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33741d5-c1d5-4dce-b7af-0d7ba0cd6614",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dba0b21-3064-4e84-a886-707a7b7d8b3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289fb288-e84e-4b10-a2b7-4710a98b3373",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e20bd45-9931-4739-afff-7ea08e67b450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05fc880b-4247-4169-9ed5-60f3ddc4ce8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c899e5-23a1-43f4-92a8-9c04bde01238",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d27be8e0-8de9-45dc-b99f-a287892d7587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1d945a4-c5f0-4114-bca8-54dc83f3baaf",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b84884c0-a9ad-4af5-b5f7-33614bf36096",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb27c006-443a-45ee-8e32-eeeb17b6396a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21f14e97-3d12-4dc2-aedc-88bc94a07c9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f7e356c-b8b2-4958-8ce3-ecac41784cdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3af498-25e1-4b33-b53a-aea8ded80e30",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a47b3c08-6bfa-4939-a483-dc63d466746a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fc6a096-519d-4994-a18e-2b268589a526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4819c7e9-5e7b-418a-9061-c30f02e8c93d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e05a216-1362-4c90-837e-387b1f29f402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3291dfc2-ce41-4f55-a937-b32cd341d205",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89588dcb-4330-4178-885d-f74c8c88a2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bcc82ed-9574-436c-b539-b403784cd23f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb4ab851-fc10-4eaa-aef2-2489878f0e40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0659f601-79f4-4f44-a4b9-22f646607bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a24117-40ec-4fc5-84b6-0e4509718498",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eae4f9a-5212-47c1-99ea-28175fe0f68d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a154882a-35e7-4fa8-80bf-455ae155bc76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28acd0a7-6258-4f8b-9bfa-bb5a04949898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f92aa79-dd88-407c-a65c-ecce1f934e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3952430e-9244-4d6c-ac57-b8522ff602cb",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c409b19-cddd-4157-9023-4d248d0ad149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba63462d-e4fb-4981-a5d9-3b7b751e8a3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eed66e7-d286-492e-9bba-6fe0d42f5646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f161f6e-947b-4af4-a108-1f9bc95419aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58c01d00-95d7-4f51-8ebf-9214ff7cb5a0",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5495425d-2c26-4125-a424-29645564ac83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89d4e90f-94fe-4c12-b815-81d1c29f0ec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9024cf-ba07-49b5-b565-cadbb7c69e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cd68b4-7827-471c-bc35-f2f82a2224d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95d51395-b954-4372-88ae-36e5b23e9425",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "888b5798-80a9-48de-bea4-7154c305212f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfdb051d-e3fb-4991-90a5-8090961cde35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d86f0c39-54d1-4e55-99af-ea3d05c4eda8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48810772-ce1a-4530-99f1-ea06d4c9d147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b886b57d-4117-4b63-ba23-1403e8db1671",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e12df36-24c8-4ced-9b49-e2446b3de0f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce274bbf-fbdb-44fb-9f9a-51bb645023e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa552db-c2e0-4593-9c97-14bef1b3cc28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d6f72b-beff-43e5-88bc-ec5f734ae9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f87b76f0-9b6d-41b4-b13e-fb528d3ce5bf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6852286c-8bea-4a9d-bcff-7472776eb1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67d4cc29-0cea-465e-8d9c-1ad9a5238db9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48f5dbac-6e81-491d-9c31-7450b5de26e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e865a06-b797-4468-86e2-732654f4da17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2848fab-35c2-463c-839d-df38cddd8c34",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a075c56c-6ce7-4cf5-bade-e1261e5a2c56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52e8bb74-6e8d-41bd-b845-aec523ba017b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5471711f-bbad-4c0e-bd8f-927c2141f17f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a261c7b0-bc17-4bdf-be14-4859c234d585"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6ea28a-94bc-4e74-bfa3-fdb8b0fdeb6a",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d315b48-548a-41da-b17d-3c75c32b9536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e877e0f-84b0-424c-a34c-2ed6e49ea3a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "733d2bb5-dca2-48c7-9521-cf55340146bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84482f99-078a-46b1-aa84-b157109e0085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3644bba6-f955-4a4d-b731-0acb97ff327b",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2970ba3-3240-4dd5-9c73-52ffa492be99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "525b6a32-c61e-402c-8233-1cf957bd4c71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "657bca04-fe03-44af-aa2d-fdfa8587c75c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1254c59b-317e-45fb-8c0c-fb8afc26bd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d0de976-a4f4-421a-8ba7-9dd6c2fe9a9e",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4771bd88-970e-4e25-8bb4-47f374d5f327",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1916d1d6-6c68-4f07-a93a-935b67e709ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d68cf78-34ab-4ef9-aa30-90bf75ddf3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27411033-81ac-4137-b34e-95aa04cb36c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b55a2d5e-dff0-4549-958c-e57f15432cda",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c614754-1bc4-4350-93b7-eecd94389887",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a19b91f9-8237-48bc-8441-39c2dcbf67c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdc2f67-4d6a-432b-a5ce-b2070f71c27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43215e80-3d5f-4c98-89a1-6809a454c88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80ef24aa-d73e-4bca-8b76-375a0e81bc8f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "296867de-9bfd-4505-9750-e57af37489d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0147bb9-4a41-45c1-80fd-7e81ff7b639d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e24863-09f2-4d7a-a051-24c20f0dc3d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09764111-eb31-41de-ac70-9324c48772b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae4fb6e-ff60-414c-97ed-6318d6bf2895",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2514258c-79bd-4b81-9b41-c1e1fbd95058",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe2c8a60-1ba0-4fcd-a15c-538fa27cdc44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e51018d-febc-4bd7-8c4b-36957b1e27be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f18a30be-a252-4f8f-8d9e-62b3e61eaa3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef90e0e5-89b3-4e6c-b8c1-2395fd83274b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173a9c94-bec5-40ee-9a33-55d60cdb9f3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cff3991-cbe8-4aac-afbc-147acdf0ec25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5a1f32-f4e5-4279-a2bf-e5b3bb70459d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a013156b-76d7-49f3-884c-008998e6387e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4225487d-31fb-4cff-9b51-b47197c86be2",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09dc0217-3ebc-4e36-9217-02b4cd5a4d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a32d275-e132-4ad3-86f5-f324b5b0686f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b189433e-8e8b-43bd-b19d-f1b25e37c302",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bdcdc41-7596-4be6-ad1a-e70e9d672993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e422708f-e01c-43be-bbe0-b297fd07a91e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a5c77ee-1030-41ae-a855-d1e16442b841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "204fce81-2db7-4052-99de-e5ac06c41218"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5c18ee-42d1-4a18-8fe8-e11b27cb63d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b957f37a-968a-44d7-95ad-5de3d92e582d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8adf5f46-cddc-404a-9ef3-848f604f1462",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a13dad-06db-4f66-b73f-8d55eb8fb6cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64a1c33f-3eee-4026-9fab-d9daa6bdb9cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14398c90-c143-4f05-b8e0-9bdf9c2535d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff57795-b710-4122-b207-0c51da142c32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59fc023e-910d-470a-8733-7e081283c9e4",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0a12bc1-d208-45ad-a573-b395e6fb044c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf78fa92-55e0-4c39-881d-5c66d49f1c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55489a9-e715-4cda-922e-9eb8e9db24bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ce0041-aa3e-47b1-a029-5fae0f8412c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe270623-e24b-4e5f-aba1-b582b7a430d5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d724aed-9805-444e-877e-a6a5ce515185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "caef5375-a355-4f9c-af68-44a16738c831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2bb1a23-51a3-47a7-a03f-7237409803c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e820f68-f6de-4337-90b7-bd2dd56e1c3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6e3ed0-df95-4bc4-b3aa-af73801bdc8f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f147c8c0-744f-4a5d-91de-094e79bee3c2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a7f05cd-af3d-4256-b6f2-e054cad982b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "050ca9c4-6948-4df0-a66d-29db074e310a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ba565b-0d97-4712-bf35-d5c16c1912f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4af9e8-8251-4be7-b887-45da1cf8ec4b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6296eef-8753-4282-b45f-1cacdbebd319",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e1ab1a-c7ee-4e89-8ea4-c46de0e02e2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb1469d-7109-418d-91fb-f66706e2e4bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7af690-03ed-4909-ad0b-2d161d58526a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01bf19bf-dec8-4469-afb7-2cef2a8fc2c6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de84f1be-4614-4609-8e1e-35a3d576766b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9798421d-584d-4d10-8124-9f1d72448b28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e94b968-8693-45ca-92af-c043c9c16402",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c744bd6a-2499-4144-9b14-d33dec846612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "560771ad-630a-4285-9bc1-7f469f3233e8",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911adf96-80f1-4b6b-8558-bc3c5b1e5eec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b5d4cf8-581f-4974-9719-30d8f1e2d554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd9bec1d-200e-4c86-94fd-72ab26699bf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2b335b-65cf-46f7-b9e7-290871fdcc3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96fdadf6-d421-4e68-8cbe-90564b41e177",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b474dd03-bd94-46d7-8a24-f50e17957990",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfeb61eb-2a73-4879-a9da-1518504692de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e7f748-5da5-4f6a-897d-822d13303a6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4190d5-22b5-4c5d-a0a1-972b9bb37e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49ff4eb1-5af9-43ae-80b7-f601ddbb2271",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "258d8bf4-2e5e-4b28-87ce-281c39360281",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e56a89f-c0d4-42d8-b87a-472141bb0790"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4bd483-9144-4fb9-8138-9c26852227fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f527c5c1-d3e2-4d20-8a77-4b1c0823501b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8c48128-a7ac-4f2e-bb6e-5701d2d9aaca",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "865986a7-e5bb-41ff-b818-267993b68505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7a575391-fd29-44dd-a961-bec3f45c927e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb779d8f-17af-499d-ae43-0ec810cbc2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06cf3603-ea4f-4c4b-86b1-4a9ad9d6a93f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b260a937-800b-4b13-bf9e-63dd5240ecc9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944558b3-de0c-4b2e-a9d8-5847fc49e9a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fce25f6a-e260-4581-a586-5124e7c3a481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f92a379-6450-4574-b0b3-96d27a1feec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da994f2-a789-4576-b063-a34102b1b7ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68344965-25fb-4e7c-86ab-f92332bd39b3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b43a27b1-adde-42a9-ab2f-e55773ba56ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a78b0c7-9f7f-4137-8c9e-37f8f55240b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac9bd15-8c65-4214-982e-6f658ff36ced",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aebb56db-00c8-4dd1-860a-65afcf64b780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1455abad-8924-4057-a04d-11c0cea169d6",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7349aedf-2464-454c-9c9d-f61426835efe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d86e9cd-0f32-4790-a8c3-baae6799bdcf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6328bcb8-8d88-4126-8fb7-aa72d6ea207d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71e1b80d-7707-48d4-8bc8-b4bbebf0f5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d310003-c0c1-418b-a4ce-1a375f050a52",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49393af1-b78b-47de-aea5-dd747a88e414",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac8b9493-1f8d-4a5a-b644-04dc700099fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ac9e74b-b2a1-42ed-9b0b-13a090138e1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "636f6d78-5cda-47e3-977a-1a58a667e3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c40d79b3-7e35-4687-bfb5-48d50a64e08c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d8e41f-e8e9-4b76-8309-18395584d9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76c231f5-47b5-4981-9ad2-87741c22c1ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceaca6e8-df60-4b9a-8f03-1c637774bcc3",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5154b9a1-abf7-48d8-bbb9-5ed0169d3242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908377bf-da16-4e0e-bc90-b77b093cb679",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08de23f1-f21c-40b9-9753-e57c0ba2b96c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8864ac07-0432-455b-a0c8-c37653a24b49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba3a9c63-21e4-4ea3-b945-d53f7053e619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bb0aab-2061-4ba2-b952-eda271330ba1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "803ebff1-5be9-4e54-9eef-d9e1d4f2f1f7",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94cbe4b7-4520-45ad-9303-9b17fcc924ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2330f9e4-b18d-4dc4-89ae-c620f262f2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c855c98f-c598-4176-8552-7a569c5c8577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9631474b-a9b2-4789-adeb-8923156e9df0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edf8948e-9108-4a73-a057-70e958346651",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465248c9-f3d0-43be-b4b9-0bb7766da4ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42ae512f-9f69-402d-a284-1b96e1db2277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd346577-3b94-43e5-8a90-99aff0fb02be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d342cbb-424c-44d6-b068-1238fdbac5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbe02237-0af5-46a1-9779-5ce283f094c9",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f976fd4-e787-40fa-b9c7-af5ee516b3a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b26eb29-0aa4-496f-99fa-39509313016b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df9d0be5-03a8-4c81-93ef-87922c21e093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4793f74a-8202-4338-9fe9-11a44b3d9e39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dde90923-3661-4487-9585-3059c0277d36",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840f6b51-fe47-4ac7-83e0-3a7ec1a755b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f22fae36-a8b1-4f25-b154-d8aa4e5bf9e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9e4c4ed-2868-43d8-9a7b-1151799686d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aaa7956-fadf-490c-8bc0-c5a0743ab313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3750000-b811-416b-9c55-99a82a6aff99",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efc20ca-ca3d-4c28-918c-0d145066c86e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "408137ff-7f43-4ee9-be1f-07ae5c9663ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b9a859-9afd-432a-8220-71304d08c885",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0262da-bd3b-46dc-b8a8-a8306cb697d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dc49ed-0bfe-43eb-9065-f235d09cdbfd",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a081800-0b45-4af8-a58d-bddbaf6db15d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47803530-f53f-4a0b-9f16-a8ebc9f7ed07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79a1d653-ff30-42e9-a0bc-f346de879664",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81283751-28fb-4b46-9b75-75025c283967"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ef254995-ef7c-4073-9823-6fef1f5265c8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b7963328-4c2a-4401-925e-31dd37d282cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "375a8a5e-7631-435f-988c-ad89871cdf47",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bbf8d5ae-031b-4ba4-bea9-ed88336da793"
                    }
                  }
                ]
              },
              {
                "id": "1cde6dec-8001-4118-89bf-0b640c22a74d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fe5127bb-3b8e-4c1d-88af-af3822f6c6fa",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00dc8fe5-0b07-496e-b853-37b412d57d85",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a9c8ce87-0266-4f8d-bd09-457d97deeba1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "528e75ce-b219-42ec-993a-4c57eeaf9eb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "442fa5e4-71e5-446a-8281-1bb302433540"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "507200af-21c5-4063-9373-023989230de0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d28a251b-f825-46fb-a145-303ec582c32a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9f7d8ae-2cb1-416a-b087-8929c5e7b1f4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e585df0-e4b4-4e4f-bb4b-78a7623cebf0"
                    }
                  }
                ]
              },
              {
                "id": "1f763d27-87c0-439b-ae2c-39a048377bac",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a17a8a85-f408-438e-aa69-89a4f2e8fd2c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "513153b4-1675-478f-b2d3-754310e969eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "dc9fb494-6759-45bd-a03e-0a595e9aba56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7adef262-2b6f-4016-b144-bd8ffbe69c87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22de95ec-d0cf-4614-8655-b0652cbdc048"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4e30041b-6dec-43db-8358-f81c5bee4289",
            "name": "Positive Testing",
            "item": [
              {
                "id": "b063a2ba-031f-4aad-9071-04b2d5b2661a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a7d515d-08b8-4dca-8c0b-a7d6f206ce48",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e011e9df-e766-4ccd-85af-558e5120ef38"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec3bb1ac-bffe-4800-9ec0-01ae1f7a6b04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f371660f-cc14-4205-9b4f-8976d0c753ed"
                    }
                  }
                ]
              },
              {
                "id": "3bef531a-fa10-4b61-b2fe-bb451a40081c",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f548880-089c-4049-a062-ea400b94a3d8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "af44c0f3-fca5-478b-a0b7-e5cc097bcfbe"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e872fc9f-6d36-4f08-a356-df756685e2e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3e027bc2-a1e2-48a9-be6c-0d2cf1bc63a8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15d10b8b-691d-423c-844c-3cef21848762",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "d359b8d9-8c9c-4bac-b485-7950a21e151e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c4a769d5-19a1-4d5b-8fb3-80b7b2d1e53c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96a36ce6-40aa-4543-ac57-5df69623aa68"
            }
          }
        ]
      },
      {
        "id": "f9c2a909-aad8-471c-afc8-447f8a6d9309",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e8d02183-2fd4-4941-8d3a-41cf46ecd4a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e97b1b3e-28f7-4bd6-b4ab-8ee4c0e16d48",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a842bb0d-eb34-461d-9347-212cc776547b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e80d060f-f38a-4320-91a4-3a269b404bca",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ebe6a265-b7d2-4116-ade7-df1e2f50d6b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f3cbf3-3946-46d3-bc1a-298430c34c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f6a5ea02-4d4a-4983-b2a8-b97dbe6b32cc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c1a31f2-dd47-4098-a9d7-25b1a61380c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "50a989f1-326a-4d46-a621-0f3fe125f787"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9acfed45-49b8-4559-ad84-7ef6a8cb6db5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4a4987b-7e39-420f-950b-b0c46a3ac361"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72e2c578-c233-40eb-bb91-c6382614e5c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "c0193cb8-8017-49aa-8779-12845d75d5ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "93448d52-2dde-4318-9d65-638b75a51636",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9948f830-b5dc-476c-b4ae-96d97a70dcb8"
            }
          }
        ]
      },
      {
        "id": "27278c39-50e4-401d-86d3-b6fb0e43c4e5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7dce9ad9-d5d9-4206-acb0-1ced5ea9a386",
            "name": "Negative Testing",
            "item": [
              {
                "id": "73b5501c-1eee-476b-9487-6a0844044b2c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb93d4a7-17f7-4093-bd64-2ed2e4b3ce20",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a78eec-8ba4-4807-aeb7-30f7a10e4ed7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb32b2ad-64f9-4784-b89b-1547593a0d4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67963685-9566-4db9-b5a5-2561139d6722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8a8bc41a-65b5-46b3-b312-cd36b61c193c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48a001ea-584d-4595-9bd6-0842881ecefe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "463456b5-60e4-4361-9f88-5b34cc40e10a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d539e2a7-db15-411e-abb5-285573737345",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03a00fa7-27a6-4b65-93d9-6a116b3bb528"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c84743a6-920d-4ff8-a0d3-7ba6555f25f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "d3596337-04ae-4df8-8521-deebe6663f2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c7176cf3-cbc6-4452-9a30-9c78c2dd5612",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6bf2dd70-4941-478c-9f77-13b08bf589c0"
            }
          }
        ]
      },
      {
        "id": "a8205e31-91fd-40b8-9f49-1f4f981cd990",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "300b6e4a-4c44-4b3f-a2dc-66efb3a05070",
            "name": "Negative Testing",
            "item": [
              {
                "id": "408bc5da-d0f6-4c70-b065-785a681a0922",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5f578df4-380e-4a04-b02b-5a1f5eb018dc",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2048807-4d2d-483d-9067-6615799173c6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c7fd41d-4e41-4f94-b58f-2b814dfbdc1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a203e191-0139-4bac-ba86-c1cef7183c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f3826bb0-e813-478d-a038-aa2b42094dfc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e45d296-c028-4683-87a8-0652f1813778",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "13238f28-82fb-4565-b9ed-e750a533fa52"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "349447f6-eb45-4cfa-9aa4-27ddc605b5f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "554d151d-8530-463a-82d0-902cf02b4784"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5d5a262-23fc-4005-b154-4a545414e5a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7ca07e20-7258-41ff-87e0-fef9b75f77fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5032ad6c-86a0-4ee8-91c7-9127a3d1305b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c390c4ad-aeab-420e-bc84-68d01c93aa76"
            }
          }
        ]
      },
      {
        "id": "1836693e-d0a1-453b-acb6-5116d8072cf9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4f6944cc-359d-432a-b12d-f0b3f3ecff26",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0408074a-8a11-43d7-aaf0-ca5b0c2b065e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "85fcf816-0ad3-427a-8065-1390ed44d58e",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b90b4026-3970-420f-adab-de6f35bea444",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b42d03ef-6305-414e-aee3-cdbbca5fc2d6",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 133.55087719298248,
      "responseMin": 5,
      "responseMax": 715,
      "responseSd": 79.460340152338,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1699403651964,
      "completed": 1699403699356
    },
    "executions": [
      {
        "id": "37950906-fda9-453f-8e17-f56920f82d9a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f9357e7c-cd32-48f5-8e77-12c94ee9dd09",
          "httpRequestId": "f62faa1e-d376-451e-96ee-511cf5c1207b"
        },
        "item": {
          "id": "37950906-fda9-453f-8e17-f56920f82d9a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f87320fa-4a04-4832-8db0-49a647e15551",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 0
        }
      },
      {
        "id": "9cd170df-4b96-485f-a1f0-b51f6a779289",
        "cursor": {
          "ref": "917e0cf8-14e4-4a01-8285-83d426a4c030",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9d822336-6011-48a8-9176-39397cb951e6"
        },
        "item": {
          "id": "9cd170df-4b96-485f-a1f0-b51f6a779289",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "499cec69-2013-44fa-8e0a-47ee8bbc4bdc",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "b26d35cf-a87b-4f09-a25b-a562f27cca7c",
        "cursor": {
          "ref": "16c64dec-177e-40cc-8b90-136a1ad64392",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8fef1bcb-02da-4423-ae39-10ddc66c78a6"
        },
        "item": {
          "id": "b26d35cf-a87b-4f09-a25b-a562f27cca7c",
          "name": "did_json"
        },
        "response": {
          "id": "9a540485-2cd8-48b2-99cc-3f0e24f11f22",
          "status": "OK",
          "code": 200,
          "responseTime": 310,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837cda11-d9c3-4cd6-b070-2d70c8296819",
        "cursor": {
          "ref": "6454223a-e22e-428e-ada0-7b163ef7a50d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "001c8727-fdb3-4f0b-ad2b-e74e7177daa5"
        },
        "item": {
          "id": "837cda11-d9c3-4cd6-b070-2d70c8296819",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6585103-5e53-40e5-8762-b828ba236d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837cda11-d9c3-4cd6-b070-2d70c8296819",
        "cursor": {
          "ref": "6454223a-e22e-428e-ada0-7b163ef7a50d",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "001c8727-fdb3-4f0b-ad2b-e74e7177daa5"
        },
        "item": {
          "id": "837cda11-d9c3-4cd6-b070-2d70c8296819",
          "name": "did:invalid"
        },
        "response": {
          "id": "a6585103-5e53-40e5-8762-b828ba236d56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 160,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef51e68b-85d3-4302-aeaa-c54537a3970f",
        "cursor": {
          "ref": "cd860878-579d-41fb-ab17-52269397b32e",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bd961898-0b10-46bd-b392-37beaabbb786"
        },
        "item": {
          "id": "ef51e68b-85d3-4302-aeaa-c54537a3970f",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "30a32a8d-ca7d-45b5-b7de-8daab2c02c0f",
          "status": "Not Found",
          "code": 404,
          "responseTime": 164,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc98db0-8c63-40da-a755-72eef79eb37d",
        "cursor": {
          "ref": "0cf193f6-bfb8-4d5a-a51b-444f0e13180c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "62a7ed90-b9d4-415e-af09-8a7a7c7e79aa"
        },
        "item": {
          "id": "9dc98db0-8c63-40da-a755-72eef79eb37d",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "953434c3-7b14-46a4-87aa-d9133523cfae",
          "status": "Not Found",
          "code": 404,
          "responseTime": 110,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ddc8d8b-22a5-402a-bc46-5e7dabbc7ed0",
        "cursor": {
          "ref": "aa2089b8-f18f-4285-810f-802cc0f080ee",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9d46b988-3750-41dc-9122-a5ca67799dac"
        },
        "item": {
          "id": "1ddc8d8b-22a5-402a-bc46-5e7dabbc7ed0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "98ad8ff3-cb8b-4173-a7d2-e764fce645a0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0098048e-cc3c-4f51-bde1-04a1d91bfd72",
        "cursor": {
          "ref": "1d5f5ee4-39a8-4ec9-a3f5-eb2c64d676b9",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8b22a905-819d-4942-88ad-5f82aa6b28fb"
        },
        "item": {
          "id": "0098048e-cc3c-4f51-bde1-04a1d91bfd72",
          "name": "identifiers"
        },
        "response": {
          "id": "07379ad4-ba6e-4d18-8de5-5bacf51d508f",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2740ac8d-bc0b-426f-8a9f-28c25b58f7a7",
        "cursor": {
          "ref": "8ffda633-b336-44ef-98ca-00e29a1e5134",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "d7f083b0-000d-4a3e-b7da-de85bec4d9ef"
        },
        "item": {
          "id": "2740ac8d-bc0b-426f-8a9f-28c25b58f7a7",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "78a8e8b5-9644-4df4-9142-487ccfc68c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6dd502-40de-4286-8de2-7c2ebd105f43",
        "cursor": {
          "ref": "1e812487-5b4e-4ff5-bb89-e71c205b08a6",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8780efc9-5101-43ec-9add-5c9c00d4b2ba"
        },
        "item": {
          "id": "bc6dd502-40de-4286-8de2-7c2ebd105f43",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c27eefe9-be30-4b1a-9946-e5fbacf7bf62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e70c96d8-34cf-42d0-975a-e1354a305464",
        "cursor": {
          "ref": "c9309a3c-5497-43b4-945e-957e8a6654f9",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "4349fcad-622e-467d-814c-10b975997e86"
        },
        "item": {
          "id": "e70c96d8-34cf-42d0-975a-e1354a305464",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "4c8b23ff-0d4d-4b86-90bb-702251411956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e07de235-48a2-4ee9-a3bc-6011e3629476",
        "cursor": {
          "ref": "56c8c1b0-2ba8-4074-8df9-089192952992",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8b72cebf-5932-4c15-8ed1-f5620a920092"
        },
        "item": {
          "id": "e07de235-48a2-4ee9-a3bc-6011e3629476",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "ea21840a-f252-43fb-939c-be1edb6b8669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fd75193-0b60-488d-a551-f391eddc977c",
        "cursor": {
          "ref": "8bfab383-5ecc-4342-b900-bc8481dd81b4",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "f78e7cac-3981-4c9c-a140-21af6811fd7d"
        },
        "item": {
          "id": "6fd75193-0b60-488d-a551-f391eddc977c",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "b65ae817-639b-4f25-8938-1b8edd1ce5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fde8fa00-ea5e-4b85-9c36-696272007a87",
        "cursor": {
          "ref": "009d6797-2759-4045-9a5f-841cb846effb",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0172cc52-5e89-4f2e-baa4-04b29a6f0ab1"
        },
        "item": {
          "id": "fde8fa00-ea5e-4b85-9c36-696272007a87",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2d00f0f0-42e0-43aa-bdec-a7cd501b5195",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbffd723-c4a3-4b94-8caf-d708f04ad569",
        "cursor": {
          "ref": "322ef792-b2f1-4fa8-bb38-3d7c637e40d5",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "4f8bd41a-d526-4fe7-a39b-a2cdbae8d757"
        },
        "item": {
          "id": "fbffd723-c4a3-4b94-8caf-d708f04ad569",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "faeff203-fba4-4102-9b5a-082a5b5ec0fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8d5f53a-787c-4e75-84f1-284a1493ffc4",
        "cursor": {
          "ref": "4214958d-3936-406d-9bdf-4e8171b6813a",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6e5ee0fb-15f2-4837-aa57-271244954cf7"
        },
        "item": {
          "id": "f8d5f53a-787c-4e75-84f1-284a1493ffc4",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "57a7790f-587e-4d99-821a-b65466447eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "843ab9df-e37f-4c9e-8a63-fd987cbabfa9",
        "cursor": {
          "ref": "40d71d59-8c57-4ba0-b54b-f92d26c82f73",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e3bc21b4-50fe-430f-8040-30d0a8783bc9"
        },
        "item": {
          "id": "843ab9df-e37f-4c9e-8a63-fd987cbabfa9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "664f6d0c-335e-4bda-a096-4471640fbfae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a58a45-b288-4a21-a5a0-37c237d6890d",
        "cursor": {
          "ref": "012ee5f6-f79d-419d-ac0d-508d0dd4ceaa",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "188e4795-0abf-4647-91ba-dd3415b38818"
        },
        "item": {
          "id": "e9a58a45-b288-4a21-a5a0-37c237d6890d",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1377c211-019c-407b-8899-05736cf4ef5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aacc96c-847f-42d9-a472-b485b17b31f1",
        "cursor": {
          "ref": "356a90bd-5430-4130-8eb1-6023fd01a0b2",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "08bf64be-ac55-4db8-aaca-2288b3c0df99"
        },
        "item": {
          "id": "3aacc96c-847f-42d9-a472-b485b17b31f1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "1ee7d27d-ceb9-441f-a993-69748a41596e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82a4166b-9a32-472c-ad67-5ce6c562bc9a",
        "cursor": {
          "ref": "ff0d38b1-48a6-46bf-8c45-971ecd822460",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "67c29508-06f1-4a45-bfb6-432dc288f020"
        },
        "item": {
          "id": "82a4166b-9a32-472c-ad67-5ce6c562bc9a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f43ce58a-6b8b-4bbb-aa09-c2cee1011b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e54c816-cbff-4eff-937c-105e1d99d438",
        "cursor": {
          "ref": "581a014a-39fe-434e-a9ab-8e3423801539",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b8b5c324-811e-46a8-bd99-ab4e4cfeb579"
        },
        "item": {
          "id": "4e54c816-cbff-4eff-937c-105e1d99d438",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "715f23a7-ea20-45fe-b7e8-e6d506f7f253",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54769eeb-d001-4d66-ad6b-4ecd5d841820",
        "cursor": {
          "ref": "e0a05753-761f-4906-8ac5-9c6a666a1563",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "e69df065-7526-4311-8a70-a558b4ceae7e"
        },
        "item": {
          "id": "54769eeb-d001-4d66-ad6b-4ecd5d841820",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "560e575e-9033-4e46-942a-45dc2bc88f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "479f1ce0-c553-495c-9fe4-8411d5a53735",
        "cursor": {
          "ref": "83618534-0eef-44fd-9ba4-826a5b415db9",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "78174361-3c3a-4a70-a259-7d6f1e4e4430"
        },
        "item": {
          "id": "479f1ce0-c553-495c-9fe4-8411d5a53735",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "d44a3275-10b7-45a5-b7aa-e894a01eeb60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be10925c-5e17-47b1-894d-2e5a46c05afc",
        "cursor": {
          "ref": "22b85bb7-4a3a-45df-a164-46ce72dd6ac6",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "6246074e-5cd9-4d9a-94d8-bfe923024451"
        },
        "item": {
          "id": "be10925c-5e17-47b1-894d-2e5a46c05afc",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9f53a94b-eab1-44d9-8404-8e7611a9770f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d85a2a-5a65-4deb-b884-f20d21559336",
        "cursor": {
          "ref": "4ef936ae-dc12-48bb-8331-2fb0631c3591",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f926ede0-ea67-4ec5-93dd-f4cea0a14307"
        },
        "item": {
          "id": "54d85a2a-5a65-4deb-b884-f20d21559336",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "20a0d418-2c41-431a-b888-903583872732",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20be86b8-f1df-4514-8a40-c705d163c15e",
        "cursor": {
          "ref": "053227e3-5a81-441f-85e2-f6a34184a957",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7c98e982-184f-491f-be7b-aad3fd5ea76f"
        },
        "item": {
          "id": "20be86b8-f1df-4514-8a40-c705d163c15e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b8b3d452-5308-4d8f-8af9-bc8deec2dd01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "981384c7-cc86-4dc8-9385-a773bbf3d56b",
        "cursor": {
          "ref": "869e4794-45dc-4f8a-8f8e-2c8be5dc5b46",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "9102f73a-8db3-454d-81b0-45285284e8dd"
        },
        "item": {
          "id": "981384c7-cc86-4dc8-9385-a773bbf3d56b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "388291ae-8417-45ab-baaf-a0d56863f97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a3d642-41d6-4684-a14a-a8d9b034f528",
        "cursor": {
          "ref": "4695abe5-f828-4b84-ae76-9837ef8fb7b5",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "747cb367-f700-430a-b9e7-0e9ad08262ef"
        },
        "item": {
          "id": "07a3d642-41d6-4684-a14a-a8d9b034f528",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e1edc00c-5c0c-4e9a-aa15-116ceac99b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "947d28d0-83fc-4d69-aadc-36f5dfd6458a",
        "cursor": {
          "ref": "db3eb597-8bc1-47a0-b834-4b90c248ecf8",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "18a91918-7661-4398-be71-2190baac9edb"
        },
        "item": {
          "id": "947d28d0-83fc-4d69-aadc-36f5dfd6458a",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "285d3518-a38b-409b-aeb8-5ba8327d18bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6906169c-c097-495f-92e5-31b9a1d48b11",
        "cursor": {
          "ref": "be124843-c579-4e4e-b63b-3018f1c0c07b",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "e86e1096-dc39-431f-ab38-7271807e729a"
        },
        "item": {
          "id": "6906169c-c097-495f-92e5-31b9a1d48b11",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "570f8e5f-cd53-440b-b30b-222605604c89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ea856c9-395b-4189-9825-b19918f8760d",
        "cursor": {
          "ref": "36af5c8e-75da-4951-b3e1-137f27eba4ac",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2dae54d0-892a-4bf6-a929-c399b8ae71d3"
        },
        "item": {
          "id": "9ea856c9-395b-4189-9825-b19918f8760d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4cdfb8ed-bffe-4a7a-b3bd-72c93a8ed3a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1f8167-298c-4866-90c0-e29f776d244d",
        "cursor": {
          "ref": "99985793-11f7-43e3-86cc-34d8980306a7",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d933183f-0728-4767-b1ca-1b418ba2160e"
        },
        "item": {
          "id": "cd1f8167-298c-4866-90c0-e29f776d244d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "69634fb5-e63c-473b-b60f-4454d58edf83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1869694e-a4b9-4dd3-a7c6-233c3c147e0e",
        "cursor": {
          "ref": "52469d37-f652-4192-a0d8-2129bbf2ce6c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "d674985c-08c3-4bed-956e-c1a2584e2cf0"
        },
        "item": {
          "id": "1869694e-a4b9-4dd3-a7c6-233c3c147e0e",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "34def32a-387b-4657-8b7b-1829625debb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8698b20e-0cea-460c-b6f2-eb7bab6385b5",
        "cursor": {
          "ref": "df2428de-064f-4d08-93a3-35d3f10783e2",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "cb459ab5-db10-46ab-a73a-cdd41d016eeb"
        },
        "item": {
          "id": "8698b20e-0cea-460c-b6f2-eb7bab6385b5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c4e74792-11ac-469a-94fd-67e500d34be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f3c6ae-159c-4331-9694-fa060bf9f6c5",
        "cursor": {
          "ref": "7a91d9f8-3c92-44f9-b07f-0fadd224e6b8",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "65381f8e-4f5f-4114-8b27-e35d19b7166a"
        },
        "item": {
          "id": "62f3c6ae-159c-4331-9694-fa060bf9f6c5",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "64089a68-d976-4db1-8df1-71f84d3587e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "815a3f27-1113-45e3-b6e2-32bd22f68526",
        "cursor": {
          "ref": "7eef118d-cde3-4223-bece-7facb34c9ef9",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "e14d11fc-29fa-49bf-b3c5-b29503e738a3"
        },
        "item": {
          "id": "815a3f27-1113-45e3-b6e2-32bd22f68526",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "2c5b86e9-ae00-4ade-816f-64c03f13b259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1cee763-eca8-499a-a517-f587e1895a3b",
        "cursor": {
          "ref": "071257d0-fc63-410d-bcbe-de81ab249d43",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "91e13500-25a1-4ae8-8d6d-cf2e9ad9476b"
        },
        "item": {
          "id": "f1cee763-eca8-499a-a517-f587e1895a3b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "cf0e7a59-90a3-446f-ab73-246a47ecba89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dca4be8-fac7-4688-b9a4-26a30acd7b64",
        "cursor": {
          "ref": "bbf06ba8-e654-47e2-97ed-b333189b5d2d",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "04e48637-49bc-45c2-9a54-609d58791889"
        },
        "item": {
          "id": "1dca4be8-fac7-4688-b9a4-26a30acd7b64",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5db2622c-ab39-4c7c-80c7-0160ffb765b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "220130bc-7df2-4417-ab94-4e761ec73aeb",
        "cursor": {
          "ref": "eafa661a-ea05-4086-8711-d7c55783c352",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ce0878f3-e8f4-4691-96ce-dc626422c9c7"
        },
        "item": {
          "id": "220130bc-7df2-4417-ab94-4e761ec73aeb",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "c9212d83-0480-448f-b3d3-cd56ca099413",
          "status": "Created",
          "code": 201,
          "responseTime": 715,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "3aa96016-65e8-4b4e-95c0-8c8ad5127953",
        "cursor": {
          "ref": "ef34cfae-3762-408e-8e2b-779d6eaee24c",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e4ad1271-0077-4d7a-8876-a1936dd1709c"
        },
        "item": {
          "id": "3aa96016-65e8-4b4e-95c0-8c8ad5127953",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "db49bc7f-35e2-4b9d-a0b9-9711743a0c33",
          "status": "Created",
          "code": 201,
          "responseTime": 442,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d306b33b-31cd-4550-9f05-128e7f79807c",
        "cursor": {
          "ref": "eacab89e-8dba-48a2-b71b-abb20ae0de72",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "00342525-1ae6-4a1a-be14-b3d62555f7be"
        },
        "item": {
          "id": "d306b33b-31cd-4550-9f05-128e7f79807c",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "0edbb037-c7e7-4c24-ae4b-74391e06a834",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5377644b-d0c9-4297-81b6-307344782587",
        "cursor": {
          "ref": "7b7a1adb-eda9-403f-8731-9252a8fca7ce",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "929ec5a4-b84b-4344-b858-64fce4c281f1"
        },
        "item": {
          "id": "5377644b-d0c9-4297-81b6-307344782587",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "a8b9c6a4-be97-4f57-89a7-34ade08ad090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ec1861-b7f9-48ad-bd9e-482c6b1e67a6",
        "cursor": {
          "ref": "73975bdb-22fd-4ace-b089-548dce8e81ae",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5c2ce1da-a7ff-4a01-b418-0ef814900081"
        },
        "item": {
          "id": "85ec1861-b7f9-48ad-bd9e-482c6b1e67a6",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "19ec0644-6acd-4082-8491-c19365faadda",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "d9bd393b-dfbb-4332-85e0-22654f6ff795",
        "cursor": {
          "ref": "657bd450-e868-4bf6-9bbc-c6ae1f66d4fb",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "4d260a6f-9d94-4416-88f9-584ab2a69ef4"
        },
        "item": {
          "id": "d9bd393b-dfbb-4332-85e0-22654f6ff795",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "4759780a-e970-4112-a89b-1d29a89527cf",
          "status": "Created",
          "code": 201,
          "responseTime": 406,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "1ebe692c-c7db-416a-ad90-dc2ab6c6d5c1",
        "cursor": {
          "ref": "1c75349c-6da9-4792-8cdc-bdfd5279278d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e2ccad39-8692-435f-9a4e-be1635070139"
        },
        "item": {
          "id": "1ebe692c-c7db-416a-ad90-dc2ab6c6d5c1",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "264af531-d8d6-421c-8a8c-253b9755684e",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "41f0eec6-fedd-4036-af4f-28efe9d86c50",
        "cursor": {
          "ref": "5014be2c-358a-4d81-ac34-c9dd49d72fd1",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "20ff20cf-97a6-4331-b3cc-db8133123a17"
        },
        "item": {
          "id": "41f0eec6-fedd-4036-af4f-28efe9d86c50",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "43f2c897-37ba-45c8-a686-a3e5688326e4",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "1e969fb4-79df-4224-bec2-d97a9e2e9c73",
        "cursor": {
          "ref": "a91ae08b-8b69-40ef-a141-ef086326ab6a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4e324712-d594-483b-923a-39716efb96b9"
        },
        "item": {
          "id": "1e969fb4-79df-4224-bec2-d97a9e2e9c73",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "57a71a24-4ad4-45eb-b441-743a268a5f30",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "2b2d609e-deab-4bbc-8591-8bf7768cda10",
        "cursor": {
          "ref": "dd698803-b90b-47a5-833f-ec85f3127733",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c39c4490-9ad0-4187-8597-d68262e65847"
        },
        "item": {
          "id": "2b2d609e-deab-4bbc-8591-8bf7768cda10",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b1e4474c-d127-4fc0-adc1-964e25bf9400",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "59b208ae-2e08-421b-883a-e2f3e0a35c08",
        "cursor": {
          "ref": "e07c1833-ca5c-4534-a463-7cb9b5d280c8",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0dead01f-095d-48b8-9169-b31db8dde1d6"
        },
        "item": {
          "id": "59b208ae-2e08-421b-883a-e2f3e0a35c08",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d1722bb7-93e4-4330-a32d-ceab3e87f401",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "057bfd65-4cbc-481c-9b3a-27939d33b1c9",
        "cursor": {
          "ref": "e66128ec-5c33-448e-a743-6f0768f6c4b9",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "a1219948-a3f3-434c-8a49-d2a2f0abff25"
        },
        "item": {
          "id": "057bfd65-4cbc-481c-9b3a-27939d33b1c9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "267c085f-7d04-4bed-a805-a697c36b8f2c",
          "status": "Created",
          "code": 201,
          "responseTime": 330,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "102c1423-c72c-4021-90cd-2472aeb6944e",
        "cursor": {
          "ref": "f8a7a285-f78b-4f6d-9747-f45c01a4b981",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "ee3274f4-0d38-4345-8c97-9baf59cb9056"
        },
        "item": {
          "id": "102c1423-c72c-4021-90cd-2472aeb6944e",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e4f70394-4ba4-4591-9a3f-8d9077f65539",
          "status": "Created",
          "code": 201,
          "responseTime": 340,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "fbbaa41d-820b-4afd-8dfc-c39e17f1f9a8",
        "cursor": {
          "ref": "caf3b6e8-b625-47ef-ac43-eeba0e8f06c7",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "485a487a-6455-40d0-8de9-3e6d2a7d7052"
        },
        "item": {
          "id": "fbbaa41d-820b-4afd-8dfc-c39e17f1f9a8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4f870000-ed97-45ec-9781-6bc6dd843a04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b0c4e7-33be-475a-9362-7c9a9a9fd0d9",
        "cursor": {
          "ref": "f696c943-564b-4f4b-a217-7d81557ad636",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d1b340a4-2dfc-419a-af89-a5fb4034b697"
        },
        "item": {
          "id": "f1b0c4e7-33be-475a-9362-7c9a9a9fd0d9",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e17ccb67-edf4-4f52-9e6e-d24914a23727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31028b1b-b2d9-4d26-8d7f-ba7168878c36",
        "cursor": {
          "ref": "7e8c3e54-5eb4-40d0-b622-b7bded54aaab",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "60cb3b23-dff8-42c8-b5b7-f23554bad4ca"
        },
        "item": {
          "id": "31028b1b-b2d9-4d26-8d7f-ba7168878c36",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a7c4946a-875b-4266-af83-bee114f32bab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87586dd1-c385-4ae2-8e05-a709185a9a80",
        "cursor": {
          "ref": "380f53eb-9e41-4a7b-872f-a8aab21b8f2f",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "3a3b82dd-807e-41a4-8f90-69c548f7a0dd"
        },
        "item": {
          "id": "87586dd1-c385-4ae2-8e05-a709185a9a80",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "4889a538-717f-4dfb-a531-d2e790e110a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e3c95a-4c98-495b-8684-c981df70b12f",
        "cursor": {
          "ref": "b98c8f6d-cc34-4cb1-ad01-1e9ae7b5eab2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "e8c51983-553a-4477-9c22-6d0ef113c5fe"
        },
        "item": {
          "id": "60e3c95a-4c98-495b-8684-c981df70b12f",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5a4be8ec-741d-40bd-bc9e-487491ecbb33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1810f601-643e-4e0a-86e7-60ded9eea05e",
        "cursor": {
          "ref": "514928ab-7517-40bd-8182-8c4b822798e1",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "23af383c-7440-404b-9afa-5b5f5a722c44"
        },
        "item": {
          "id": "1810f601-643e-4e0a-86e7-60ded9eea05e",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a342563a-5b33-4688-89ff-63ce4ffe4bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4e88f4-a544-443a-9321-3a4cae06430e",
        "cursor": {
          "ref": "5968362b-f52c-4269-8624-cbfe18d5ba35",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "35d9aa2a-b684-43ff-be47-00f45bb14614"
        },
        "item": {
          "id": "2d4e88f4-a544-443a-9321-3a4cae06430e",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e2b14dda-e77f-429d-bf2a-3732722610c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f03c9d8-a629-4354-ade8-e9b4c4bcd4dd",
        "cursor": {
          "ref": "cfd03c6c-44aa-4f28-ae4d-55c8407738fa",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "adf18a72-8ccc-4223-8185-2d3bd8d44a7a"
        },
        "item": {
          "id": "7f03c9d8-a629-4354-ade8-e9b4c4bcd4dd",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "ee092f49-366b-45b8-bfc4-8cd51b762adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90aa639c-3c3e-47c3-96f7-53b04972322a",
        "cursor": {
          "ref": "81ba9160-946b-4477-a899-84b523848bd8",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9ce6c0f2-ef43-464f-8d92-7cd510950c58"
        },
        "item": {
          "id": "90aa639c-3c3e-47c3-96f7-53b04972322a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5f5a473c-f79d-47d4-98cf-27b36bdc5571",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "883ef0cc-c3c6-4a95-935c-e5125f964f2e",
        "cursor": {
          "ref": "f8b06dba-408c-4eb6-bc22-819885bd0bcf",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "80d86907-e8b7-4774-a2b5-fafea2bc9bbe"
        },
        "item": {
          "id": "883ef0cc-c3c6-4a95-935c-e5125f964f2e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "1c116d97-786a-4e01-8d0b-04f22e5f8afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f6e01e-a93f-45d8-902b-12974b05abcd",
        "cursor": {
          "ref": "9cc70b17-e4b4-43a4-83ff-c998c01e28ab",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "946302f4-a7f3-411c-8b6d-e67d016ea66e"
        },
        "item": {
          "id": "98f6e01e-a93f-45d8-902b-12974b05abcd",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "2ef5eebb-296b-4b29-b5b4-19a91d565b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b75a717-11f0-405c-a5d0-9a374f8b27e5",
        "cursor": {
          "ref": "3b680598-d072-4d0d-98ce-8e25b3c8ab5d",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5f88c3f9-2d17-4ebd-8a0d-81169fd8f375"
        },
        "item": {
          "id": "7b75a717-11f0-405c-a5d0-9a374f8b27e5",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b16da22f-6bb8-4ae0-895a-db52273b84a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b3af735-4dc8-4be5-bd06-e137c1665b75",
        "cursor": {
          "ref": "4a043d18-8bec-4b64-9b9f-74832622ec67",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a8d9464a-713e-4dac-a482-91957e0159aa"
        },
        "item": {
          "id": "0b3af735-4dc8-4be5-bd06-e137c1665b75",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "31723068-fa9a-4cec-9af4-95f0740398b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e69de60-5009-496a-99c9-afbf2de8c76c",
        "cursor": {
          "ref": "f0a1ae55-e9da-42e2-b496-63acd9dd62c1",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "dc5fc85a-4ad5-4ba1-8d15-8995869283fc"
        },
        "item": {
          "id": "5e69de60-5009-496a-99c9-afbf2de8c76c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "77c08bb0-1f70-4ac4-bb4a-50a42e567167",
          "status": "Created",
          "code": 201,
          "responseTime": 417,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "6d8b890d-ae8d-4d29-ba98-1daa181690b9",
        "cursor": {
          "ref": "9720f68b-12ec-40b4-9faf-630e4fac219d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "12d66ae5-552d-497e-9414-32898d849ee4"
        },
        "item": {
          "id": "6d8b890d-ae8d-4d29-ba98-1daa181690b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b809c67d-0014-4a28-b345-0854ae61ec72",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "42fa8088-73ba-4714-88ff-5024ff0dbe9b",
        "cursor": {
          "ref": "1a8496cd-5d75-46a0-9fda-0026ebe12140",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "268ba38c-ebcb-4d01-8dbd-e4ed1ad179a1"
        },
        "item": {
          "id": "42fa8088-73ba-4714-88ff-5024ff0dbe9b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "b35a6ca7-1a7e-41b2-94d4-146e8bcfb2f7",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "3a5a87f1-229f-481c-a3ab-7559139e3bc8",
        "cursor": {
          "ref": "1b6aeeaf-aa47-455e-bb68-574d0c7df332",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2cb73226-c4aa-4daf-80c0-348bd619a0bb"
        },
        "item": {
          "id": "3a5a87f1-229f-481c-a3ab-7559139e3bc8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "9040c4f4-ed87-4c2a-ad29-07d40336031c",
          "status": "Created",
          "code": 201,
          "responseTime": 324,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "b2988883-c0ee-4f9f-8dd4-f46d727207a8",
        "cursor": {
          "ref": "8e998396-32cf-4bd4-970c-1234a2124c95",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f3749680-14cc-45a1-8b7f-8c484c002742"
        },
        "item": {
          "id": "b2988883-c0ee-4f9f-8dd4-f46d727207a8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "35e0e802-97b9-470e-ba27-aa2b7601de55",
          "status": "Created",
          "code": 201,
          "responseTime": 384,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "560b9c15-c9ea-4a53-92f8-239c7127c272",
        "cursor": {
          "ref": "2dd32ac7-2313-4e50-af15-a30e805b0b02",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "0d199af5-4a90-4173-ac60-0567030604c6"
        },
        "item": {
          "id": "560b9c15-c9ea-4a53-92f8-239c7127c272",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "66077d4d-4b34-4c91-9e4f-4b462b2f6993",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7706e0c7-1b9c-4c41-b0df-0077392d9a0f",
        "cursor": {
          "ref": "71c3ba5c-b9ec-4c83-b9a6-d6cea6f1efc3",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "de6d8f4e-ef69-4ad3-83a2-f2f48f4c013f"
        },
        "item": {
          "id": "7706e0c7-1b9c-4c41-b0df-0077392d9a0f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e31e9669-29b0-4d7b-aa32-f5362c56e938",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf81591c-dfb9-40f4-9ec3-bc7e5d98c697",
        "cursor": {
          "ref": "3f15079c-c8c7-4505-823f-4908edddea5a",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "88dd77c0-af0c-4bf8-8029-4b3b0eb772fe"
        },
        "item": {
          "id": "cf81591c-dfb9-40f4-9ec3-bc7e5d98c697",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2b4c2a28-5817-492b-bab5-cc25214d356d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0adc7faa-799e-42f9-8d84-6a824a6f204f",
        "cursor": {
          "ref": "1fc7ef48-0385-46f2-92de-c8ab599373e9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "5f51afbd-358c-4801-b61b-bbea5a0487f3"
        },
        "item": {
          "id": "0adc7faa-799e-42f9-8d84-6a824a6f204f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "220adea7-bd0c-435d-8f0a-5193618b647c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c2f437-567a-420a-a86a-7ad1a3b10528",
        "cursor": {
          "ref": "60696e42-246c-493f-8e1d-0e250ee47726",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "42f17c9a-4f10-42b9-bc04-2ae2ef4324f2"
        },
        "item": {
          "id": "32c2f437-567a-420a-a86a-7ad1a3b10528",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "e98e34b6-0fcc-4de8-ad7d-df31f8e305d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86daf09a-9639-46a8-9d02-81805c0bd6f7",
        "cursor": {
          "ref": "776cadd6-6ed0-4995-90a9-f86cdf524c06",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "0053f48f-4609-42d3-a86f-e70f6d716bfc"
        },
        "item": {
          "id": "86daf09a-9639-46a8-9d02-81805c0bd6f7",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "9ac1cd61-0b25-480c-a766-ac2d2b4c9ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8df53e-d62a-46cf-90bb-b6ac795e9490",
        "cursor": {
          "ref": "72564bcc-9026-4f30-8e12-ced0e666f341",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c6fb1d86-c658-4a30-aae2-946385058968"
        },
        "item": {
          "id": "4c8df53e-d62a-46cf-90bb-b6ac795e9490",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "feba92c8-02ce-4d41-8950-f2d5c598d600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd320183-e655-41ee-ab39-d932e86f45a0",
        "cursor": {
          "ref": "033eb0ac-24d2-473e-ac52-25bbc29c7ae8",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c4a87eac-c84b-48bd-8009-d3af12cc4acd"
        },
        "item": {
          "id": "cd320183-e655-41ee-ab39-d932e86f45a0",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "aab0df76-73aa-45e0-a0b1-966f7f47f701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d808424-bada-4748-b706-92584608e1c3",
        "cursor": {
          "ref": "c01866f0-d383-4591-bddd-7c8a5fc4b6f9",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7110a014-5fcb-4c10-9f5a-2cd198aafc43"
        },
        "item": {
          "id": "6d808424-bada-4748-b706-92584608e1c3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "3e8b9173-23e5-42a0-b798-485ddb487be8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c691c33-5600-4297-a6ce-a88f1be0c630",
        "cursor": {
          "ref": "c331ea00-d663-4bcc-b636-7f5782bab77e",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4fe191f9-ddfb-48c3-b3aa-312227e2529c"
        },
        "item": {
          "id": "8c691c33-5600-4297-a6ce-a88f1be0c630",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "467e40df-f240-40a3-86d1-4eeb6de99a6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c343a50-eff3-48a8-a8e8-8fac0e85ebb3",
        "cursor": {
          "ref": "342daea0-8735-4766-b704-a6665f2483ca",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e631a776-6504-4c23-b380-a8f18df018f0"
        },
        "item": {
          "id": "4c343a50-eff3-48a8-a8e8-8fac0e85ebb3",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2e3ac8ae-29ed-45ab-aa31-fb88a66ebf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d91363-980c-4a52-803a-586a7f238653",
        "cursor": {
          "ref": "07e96dc9-9357-488f-8541-f4731d55ce9c",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6ba81381-eafe-45cb-9d86-26b03d608c45"
        },
        "item": {
          "id": "74d91363-980c-4a52-803a-586a7f238653",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "53fb9646-1aeb-4da6-aa30-0b1c4c653af1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e4e13bb-135a-40a7-bda6-562ae921017c",
        "cursor": {
          "ref": "aee6ce35-42fc-4bdf-b649-b1872da96aa8",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "70186a87-2beb-438a-8c70-52f7dfb9d0fd"
        },
        "item": {
          "id": "1e4e13bb-135a-40a7-bda6-562ae921017c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "df7c1e18-aa28-41cb-8ab2-5480bfcac489",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a90f9982-ae07-4b97-b9b1-174534d49f17",
        "cursor": {
          "ref": "5b02e295-0e83-424c-b35f-789afc853241",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "483046a7-5700-42d2-a13f-46c7af2c3574"
        },
        "item": {
          "id": "a90f9982-ae07-4b97-b9b1-174534d49f17",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "bd8edd39-9b64-4ecd-b504-16d5044788e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e955659-370a-493c-bd8b-e80fd3023130",
        "cursor": {
          "ref": "e28daf85-a733-48e3-a126-4e10617ff612",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f0f1755b-f6ae-49ee-96d7-96917301bf3f"
        },
        "item": {
          "id": "8e955659-370a-493c-bd8b-e80fd3023130",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5aa16737-8ee8-42bd-8014-808b20de1c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66af6c8-4eb1-401b-be94-39c12c0bbe77",
        "cursor": {
          "ref": "8aad0984-fbd1-446a-b823-866bacc46e5c",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "698ee92d-c7ab-40b5-a5bf-74729a75af7f"
        },
        "item": {
          "id": "a66af6c8-4eb1-401b-be94-39c12c0bbe77",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f17ce276-2c7f-4642-99cb-e625ef573878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5dbe64-18c3-4112-b4eb-6b5f2f57026f",
        "cursor": {
          "ref": "5f30221f-2d91-4019-b59a-d76577121a0b",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a05f53e5-22a3-40a6-b222-51eb60bbaf04"
        },
        "item": {
          "id": "dc5dbe64-18c3-4112-b4eb-6b5f2f57026f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e07492ed-cf4b-461e-b86e-1a5f2b7ffa86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82de41c7-af4a-4ec2-9d8b-56208e7edaf6",
        "cursor": {
          "ref": "d498a3e6-1a4d-41f4-a1ef-cfc3e40b1a92",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "88008d3f-4269-4de7-830f-4b098fe325bc"
        },
        "item": {
          "id": "82de41c7-af4a-4ec2-9d8b-56208e7edaf6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f39ef71a-a65d-4dbc-b60e-e19d8f5be167",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f3c286-a9b0-43b6-9426-ff1a9a448391",
        "cursor": {
          "ref": "3b33cc27-8d46-4141-ad4c-8be7a8bc542c",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1efb2ef8-bbd9-47f3-8a87-e19c5903848a"
        },
        "item": {
          "id": "28f3c286-a9b0-43b6-9426-ff1a9a448391",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "721a5e9e-7362-428a-9eda-238c7666bccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6971c257-8f4c-4bea-868e-edd9f58e0df7",
        "cursor": {
          "ref": "ea389cd5-9912-4abc-83b4-8c7bea2f3b59",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5de8de55-dbc6-4be5-8cf8-472386f82068"
        },
        "item": {
          "id": "6971c257-8f4c-4bea-868e-edd9f58e0df7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "5155c3eb-874c-40a0-bab6-a0c1d43a50cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8980435b-c9cf-447c-9d81-df3ab221cb25",
        "cursor": {
          "ref": "49aa2284-6a85-42d4-85d0-1c683aef09de",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "8f379501-4179-4ee8-bc54-947dd76987cb"
        },
        "item": {
          "id": "8980435b-c9cf-447c-9d81-df3ab221cb25",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "a3e79791-a39d-415d-a6e7-6c3fcee9c6f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c43a08d9-93d9-4bde-a4ec-2ce4a1270271",
        "cursor": {
          "ref": "d88068e0-9285-4c2a-89dc-b466428fa7ab",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "ded50680-e631-4523-bbf3-6fa231505cae"
        },
        "item": {
          "id": "c43a08d9-93d9-4bde-a4ec-2ce4a1270271",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2db50d0e-c9ad-4e22-b68c-e4580512b5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a839040-2a0d-4b05-ab32-c82ceae5a54f",
        "cursor": {
          "ref": "ba5622e4-1a6f-4498-aa7a-2ef15a770be9",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "0b78bb4d-e4fe-42f7-b724-f635efea2dfe"
        },
        "item": {
          "id": "5a839040-2a0d-4b05-ab32-c82ceae5a54f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a757bba8-ad20-4f21-b410-8224688c0534",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5086d717-2450-4942-a8e3-22a63620dc99",
        "cursor": {
          "ref": "1590b400-902b-4e42-b572-8082c687beaf",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "d8329b26-444a-44f4-b9a3-a14fa733911c"
        },
        "item": {
          "id": "5086d717-2450-4942-a8e3-22a63620dc99",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "07efaff9-e2c0-45c3-90d8-9d3a427ec3b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "146c9689-1a3b-4907-83a5-0ff567d2d940",
        "cursor": {
          "ref": "d8d2bedb-cb03-4b52-ad1f-b6237132daea",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "0d4a4a6b-4120-41f4-a169-76d29deb0bf0"
        },
        "item": {
          "id": "146c9689-1a3b-4907-83a5-0ff567d2d940",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5c90fb7c-a2b3-4d2e-8b9f-5eb3b8cd2d36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0573a61c-24e9-47a6-a94d-829692ad8839",
        "cursor": {
          "ref": "5e0097fb-0556-47d4-886e-1f6fe78230c0",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "4f59b71f-c60e-42ac-b41e-37d52669a2fe"
        },
        "item": {
          "id": "0573a61c-24e9-47a6-a94d-829692ad8839",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "9a84238a-95e5-43d3-884b-10f95cf10ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "072f468d-c6d6-41dd-a240-c3d4a8a92049",
        "cursor": {
          "ref": "05d656fb-4c41-489e-9763-790e423ad98d",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "3273a5f8-aa15-4b5f-9619-d8dc7c5e2304"
        },
        "item": {
          "id": "072f468d-c6d6-41dd-a240-c3d4a8a92049",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4ade83bf-26f8-4ed0-948e-f4931ccc292a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c6603e7-6567-470e-8f2c-7317b9f9e59c",
        "cursor": {
          "ref": "8adbfe30-a616-4665-8066-3533c2382529",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "56aa29b1-1ffc-43e5-8fd6-be55fc3aa9cc"
        },
        "item": {
          "id": "9c6603e7-6567-470e-8f2c-7317b9f9e59c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8df32f10-0d78-469a-9ea9-14cda7d2672d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "513096e4-2262-45ee-b8d5-44e76e142c43",
        "cursor": {
          "ref": "b0b45ad9-ba7f-4317-b11e-23f5fbcd22b4",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "44274e6e-cba7-4a4f-b672-2db6e737d6a7"
        },
        "item": {
          "id": "513096e4-2262-45ee-b8d5-44e76e142c43",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "00344de9-d341-42c0-9377-b2244c60c457",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ebf264-978e-478e-aaab-3ac98cf5c90b",
        "cursor": {
          "ref": "1a5dca3c-0c1b-4028-bb24-022eb29a465d",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "9370e5d1-3992-466b-81f8-3d07d633bfdb"
        },
        "item": {
          "id": "54ebf264-978e-478e-aaab-3ac98cf5c90b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0d42e275-13d6-4ea0-bcb5-f22a3fc2d5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db89488-54f9-40bc-bc25-aa767b2a312d",
        "cursor": {
          "ref": "a13c738d-a4c2-4d0b-acfb-077a868e4fa4",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "33ea74c9-1ee4-4b0a-9291-976df70f0340"
        },
        "item": {
          "id": "7db89488-54f9-40bc-bc25-aa767b2a312d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "e6ba6b32-6574-43d3-8987-2eb0908521a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a579224e-5edf-4674-a966-5710bdc9a133",
        "cursor": {
          "ref": "bc157f86-6a52-48fd-ab3c-b63bc54523cf",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "dedcfb40-aef2-4039-a261-0ed8ef2725af"
        },
        "item": {
          "id": "a579224e-5edf-4674-a966-5710bdc9a133",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "31ce2103-d91f-4ecd-8ce8-3cf592b8d868",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69db8933-0822-405a-80d2-bc035ccfce66",
        "cursor": {
          "ref": "bcfd5f9d-2e2d-41d4-94ad-b5a5e45d0183",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "18824403-5790-439b-8eef-8f7b685fd81f"
        },
        "item": {
          "id": "69db8933-0822-405a-80d2-bc035ccfce66",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "5ffee8b1-2fe4-4e3d-adaf-30e745f557ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "c1e05540-7df7-47b8-aee1-d32ec7d6061d",
        "cursor": {
          "ref": "8999f6ac-e951-4e06-aefd-159573d6fe4c",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "dd93650f-f8b8-4e10-8d4a-a547316e2402"
        },
        "item": {
          "id": "c1e05540-7df7-47b8-aee1-d32ec7d6061d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0c4b7c2a-3aa8-4253-aac3-f65f9a272f26",
          "status": "Created",
          "code": 201,
          "responseTime": 411,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d7b9e06-b386-4866-80c5-f36ee67e2a04",
        "cursor": {
          "ref": "a9e19ba2-f384-4c7a-a179-5e49336de3cf",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "4083ecca-3249-4936-9218-23c2e5efd3a9"
        },
        "item": {
          "id": "9d7b9e06-b386-4866-80c5-f36ee67e2a04",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "04aedb78-66a4-4a75-9738-c514a6d3b145",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1bc0c74-b9e8-43e1-ad5f-878d7b62e9eb",
        "cursor": {
          "ref": "d311ff58-2ca7-4ebd-af35-1170e70e1714",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "245dcece-a503-48b2-8a5f-9907470f0184"
        },
        "item": {
          "id": "b1bc0c74-b9e8-43e1-ad5f-878d7b62e9eb",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "1b690fa9-7ee1-418c-9dc5-2829b50efe34",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a5741a-996c-4e2d-b8bd-ebd2c9cb76d5",
        "cursor": {
          "ref": "820206a8-ffcb-4304-815d-6d279690fdef",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e41d28d5-4c8c-4fa4-af9e-d7d3b9591971"
        },
        "item": {
          "id": "40a5741a-996c-4e2d-b8bd-ebd2c9cb76d5",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fecc59fa-39b2-4249-8328-eef414630794",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7ded79-5fd0-4b4e-8be3-2acb46bf88df",
        "cursor": {
          "ref": "444c33b7-b39d-4888-b356-ae3c0794018f",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7e526ba7-f6d1-44db-a9d0-94b031b5bfad"
        },
        "item": {
          "id": "bb7ded79-5fd0-4b4e-8be3-2acb46bf88df",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "400d71c3-5b06-4111-97ce-ae4b6e0a120c",
          "status": "Created",
          "code": 201,
          "responseTime": 342,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-11-08T00:34:33.207Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-11-08T00:34:33.207Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "37134b24-3ceb-4859-b85a-26531dc5453e",
        "cursor": {
          "ref": "1e080a8f-562d-469d-b5ee-1f70b90d32fa",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "047461bd-9f07-4fc0-b722-232c56d10b9a"
        },
        "item": {
          "id": "37134b24-3ceb-4859-b85a-26531dc5453e",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "b13300bf-66e1-4985-87f6-539e51c67d1e",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "990503d4-e8f5-4433-943c-6b3351ba545d",
        "cursor": {
          "ref": "4511f386-1f1a-496f-8f5e-308a7b1bfd8f",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "49491a3b-d880-4dbb-8652-12b50842b328"
        },
        "item": {
          "id": "990503d4-e8f5-4433-943c-6b3351ba545d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "f2ef099b-3e3d-417c-bdb5-ac313ccbd2b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec5ad8ae-f8c8-41f2-8a6f-351685cca060",
        "cursor": {
          "ref": "94fb977d-7a63-44cb-954c-664a97e17e86",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "0c5b7e50-e694-4c0a-b47b-3b373f74f1d4"
        },
        "item": {
          "id": "ec5ad8ae-f8c8-41f2-8a6f-351685cca060",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "c37558c3-5cd4-49e5-bd0a-59992327396b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fc9892-efce-4033-af70-b09c5b2c3455",
        "cursor": {
          "ref": "cf40e91a-dd77-4c2e-b70a-c6bf02973eb1",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5cce0ece-bc44-45e0-a038-d403a06a03ca"
        },
        "item": {
          "id": "b4fc9892-efce-4033-af70-b09c5b2c3455",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "6afe7696-bba1-41b3-b7f4-d26d001f13fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5aeed9-cb97-448d-8be7-46d2b9540e3c",
        "cursor": {
          "ref": "0c86b705-238f-44bd-9271-34eb099f31af",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a6d57b01-5a07-432a-bea1-13c8f46764a0"
        },
        "item": {
          "id": "1e5aeed9-cb97-448d-8be7-46d2b9540e3c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "8f806755-a822-486d-84f1-c99cb7fe233d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbdd4a8-53d8-4f25-ba26-55ba1de3a64d",
        "cursor": {
          "ref": "b77481f9-5525-4bef-9ea9-de1269d3b84d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3671effa-5bd3-407a-87ad-2721c202dc36"
        },
        "item": {
          "id": "8cbdd4a8-53d8-4f25-ba26-55ba1de3a64d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "19266bf7-abe3-499c-aea6-adc27932e15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36151adc-2d1b-4560-8041-abb2b4ba1222",
        "cursor": {
          "ref": "d34cca00-1e18-4c2a-b5b0-2cb5dc25c6ff",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a43e27b3-f680-46ee-8b7a-77eefb1b2ad0"
        },
        "item": {
          "id": "36151adc-2d1b-4560-8041-abb2b4ba1222",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "67cffb90-1a08-4ede-a709-a0883ec36cf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346516ad-d9e5-4a1a-ba07-de89c10ea888",
        "cursor": {
          "ref": "bc48aaf2-58e5-471f-951d-2f2d9f07289e",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "0e86f002-b295-4499-90de-94635de534b1"
        },
        "item": {
          "id": "346516ad-d9e5-4a1a-ba07-de89c10ea888",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f619dc3e-bda1-4c8f-91d7-c4c97ac0d8b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40a88d7-1109-4393-8821-d66b5f8158d3",
        "cursor": {
          "ref": "ee5b2be2-98bc-44ee-86e6-d8252509905b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "429f793e-1269-416e-8e28-f077a1520c0a"
        },
        "item": {
          "id": "a40a88d7-1109-4393-8821-d66b5f8158d3",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c877814b-e140-41b0-b2fa-ae658ab9e53c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8abb008-7e08-47d9-a086-ff3f1d046ea5",
        "cursor": {
          "ref": "b36f1f26-7f43-484a-bfc1-cbfc5e41c3bb",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "1cc392f1-148b-4bb1-9f9a-cf8e758430c7"
        },
        "item": {
          "id": "e8abb008-7e08-47d9-a086-ff3f1d046ea5",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "b7f513ed-8191-42e8-ab3a-e81c6535a2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf4f05af-d39c-47dc-86fa-e32631e9e12f",
        "cursor": {
          "ref": "1941d39c-0410-40e1-a526-77d0de408060",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "57f7ef83-5496-4819-8742-d4ef8c0c5557"
        },
        "item": {
          "id": "bf4f05af-d39c-47dc-86fa-e32631e9e12f",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "75ac9da3-ffda-4526-b445-bb8847f9ff87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e0121c-b781-4263-a631-8e46adb384a7",
        "cursor": {
          "ref": "89aad33e-adb3-4931-96e4-66d318a6792c",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "c127305e-5746-42ef-a27a-3dbf2ba36b8c"
        },
        "item": {
          "id": "d2e0121c-b781-4263-a631-8e46adb384a7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6a024272-0aea-4913-968e-1d5232399f38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c9df16a-4aab-4f39-b730-5fd95cf358d1",
        "cursor": {
          "ref": "09bf9a79-e3da-40e0-8336-9843f94a7a6f",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "452f4c44-da3b-4ad3-ae7e-255a93c4ddb8"
        },
        "item": {
          "id": "3c9df16a-4aab-4f39-b730-5fd95cf358d1",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "faa2fba6-d6ca-4500-8989-d420291c0825",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1a2d4b5-a4e2-4679-8bfd-bf4d8b1483e9",
        "cursor": {
          "ref": "df9bd24c-3836-4646-9313-1d13bfab7194",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a7f82fa6-04ff-4629-9e3e-227100a69895"
        },
        "item": {
          "id": "d1a2d4b5-a4e2-4679-8bfd-bf4d8b1483e9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "552667a3-3745-41d7-a709-ed23283c8853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8848c8b5-b436-4243-a4c5-9a5ccc0e0263",
        "cursor": {
          "ref": "22134671-e34e-4c13-9ec9-eb57de5ebaf5",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "91569b35-2392-44e1-829d-33c65e573a87"
        },
        "item": {
          "id": "8848c8b5-b436-4243-a4c5-9a5ccc0e0263",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "569b4f40-682b-4785-915a-94af33acc47e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e048a8ef-12ff-45e0-beab-5c198033895e",
        "cursor": {
          "ref": "27faf1f9-03a7-4433-8edd-9fb0bd63ae59",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "a233912e-ef33-417b-8114-e7000d63be97"
        },
        "item": {
          "id": "e048a8ef-12ff-45e0-beab-5c198033895e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4c392af3-ac72-4238-b3e4-b607d8f443ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b472f12d-e987-49fe-9027-897e537012df",
        "cursor": {
          "ref": "30601233-fa20-4952-adbb-4210ec9581ab",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "45740bcd-e82c-4bff-82d6-946b92c067d3"
        },
        "item": {
          "id": "b472f12d-e987-49fe-9027-897e537012df",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e0f9d37b-d9d4-4ca1-8dda-f5cddf6075ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af7d4ad-30d9-4d09-adbc-d28342d15c54",
        "cursor": {
          "ref": "607f2be3-15b6-445c-b8c5-8a1f87e8bd7f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2238aba4-ab73-4d1c-befd-974c47881d73"
        },
        "item": {
          "id": "0af7d4ad-30d9-4d09-adbc-d28342d15c54",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "123cb3b4-0e64-4c09-8dd1-c256cc6a8def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d19b38bf-931d-4681-9635-898e34efb9c3",
        "cursor": {
          "ref": "e9f50784-481c-4723-b2c6-444954eff36d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "37675e5a-b4e7-4904-9ea9-eeac95b937d7"
        },
        "item": {
          "id": "d19b38bf-931d-4681-9635-898e34efb9c3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ea578d31-0c39-48e8-837e-c4f2df629206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e4684e-552a-42cf-a18a-9aa2f7562523",
        "cursor": {
          "ref": "4b3e5729-ded3-4f61-a46b-9b8597e94b14",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "587de8eb-7ffd-41e1-bfef-38b7552237ce"
        },
        "item": {
          "id": "c6e4684e-552a-42cf-a18a-9aa2f7562523",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "0e2cdf20-2e07-43c7-a2d1-e377451cbfa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756615a7-50dd-4863-b3f9-0f717a248df3",
        "cursor": {
          "ref": "0c953ac9-5250-472f-91ce-db61e1908a48",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "40a8dd01-acaf-4328-9851-f013259f53c9"
        },
        "item": {
          "id": "756615a7-50dd-4863-b3f9-0f717a248df3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fafffbbe-d7c1-4ebf-95a3-639f2436a0ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "549f618f-4ade-4c47-ad89-cbfee3095e3e",
        "cursor": {
          "ref": "cafd1fb7-de42-4c96-b3d5-9267cdee074b",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a30c00bf-7080-4f8b-a694-ea8f0932b0a5"
        },
        "item": {
          "id": "549f618f-4ade-4c47-ad89-cbfee3095e3e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "47523a0f-5159-4355-ac65-afd2289868cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d936a1-9155-47de-be7c-90b67d0a5ba9",
        "cursor": {
          "ref": "b3cc1342-a6a2-469e-b62d-593d5a22e3d0",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "5ea7bdcf-c00d-42a6-802d-6d883e652167"
        },
        "item": {
          "id": "98d936a1-9155-47de-be7c-90b67d0a5ba9",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d79c382c-0818-4e1a-8656-347b2875c357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159d5bb2-03da-4757-aa44-57be6762275c",
        "cursor": {
          "ref": "8b4e9877-bd82-442c-9d29-cd122f20d1b3",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a78ef7ae-77c8-4dde-9695-1b1a25b32efe"
        },
        "item": {
          "id": "159d5bb2-03da-4757-aa44-57be6762275c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5988dfb2-56f4-493b-9aaf-99f0849aea4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91b53abd-b451-4a31-8c1d-219c9dfbdd0c",
        "cursor": {
          "ref": "098f339f-e19a-4d6e-8353-8f240cdf5f19",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d3ab66a8-db0b-429a-aa28-6e0a9c823dc7"
        },
        "item": {
          "id": "91b53abd-b451-4a31-8c1d-219c9dfbdd0c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9dcede4e-7ade-4feb-af31-3ea3fe929d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f815bd3c-adbc-44b1-915c-3fe71f5746e1",
        "cursor": {
          "ref": "7d1ec2fc-8d1e-4839-ac77-61288a385605",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "cbaa9dcd-9be9-49a0-b67f-b6ad98b9624a"
        },
        "item": {
          "id": "f815bd3c-adbc-44b1-915c-3fe71f5746e1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "44c9ca58-bee3-4f2e-8948-3a2a28689166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b38f7093-1417-443d-a797-927f382e7a2e",
        "cursor": {
          "ref": "8d0492df-94e7-403a-9609-d3ab1dd471c6",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "7ee61212-b829-4ba4-ad14-12edf6dffd71"
        },
        "item": {
          "id": "b38f7093-1417-443d-a797-927f382e7a2e",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f640de4c-b9fb-489b-9728-ff4804e8b65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad4c1200-87e3-4a56-9fe8-ebaebdeec9be",
        "cursor": {
          "ref": "5392303e-767f-40dc-9c03-ee6e3c798f39",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "73d68c69-534a-4a52-b082-fcfaf5053c6b"
        },
        "item": {
          "id": "ad4c1200-87e3-4a56-9fe8-ebaebdeec9be",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "38ea9f0a-bdd4-4748-b29b-8d6f7415eefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec65626-196e-4574-8874-a87aeba444c8",
        "cursor": {
          "ref": "ada1d0bf-0d2e-4081-99a4-8c14a2f7b4b4",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "24012975-a2e0-4b53-8c05-c5d122628c89"
        },
        "item": {
          "id": "bec65626-196e-4574-8874-a87aeba444c8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "222594de-af4a-4c35-b4c7-1c8f1615bed7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c11a08-18cb-4dfc-a763-b129697133ac",
        "cursor": {
          "ref": "c3525424-7ac0-4b7b-a1a1-d5915000f224",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3701d9f3-1ed9-4ade-a382-8f77641d44ac"
        },
        "item": {
          "id": "60c11a08-18cb-4dfc-a763-b129697133ac",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "bc5b92f9-27b3-4c79-b007-b90dc510ee1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "915523d4-4d94-4428-a439-97f30f9a76fe",
        "cursor": {
          "ref": "7dc76b65-8034-42c6-832b-326c0bee0739",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "28e00f8e-9f50-44e6-967e-f380fb9377d0"
        },
        "item": {
          "id": "915523d4-4d94-4428-a439-97f30f9a76fe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a6635cf0-9a78-4b1b-977c-9987158aa804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "611a99e8-8110-4ce3-8832-910d0a3759bd",
        "cursor": {
          "ref": "a47093b3-9464-452f-9b31-900e27e4e9d0",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "ec14fe82-4281-4e98-8804-13b482a4e360"
        },
        "item": {
          "id": "611a99e8-8110-4ce3-8832-910d0a3759bd",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "109e5f67-0b63-45bf-b2a6-ee576e62209e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c465a36-3854-45a3-9924-09cbb823f85b",
        "cursor": {
          "ref": "37750661-f1d5-47aa-bcfa-0670dd7bd4cd",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "3ebe9fa8-fb48-42f9-a18a-7d33d7f892a8"
        },
        "item": {
          "id": "5c465a36-3854-45a3-9924-09cbb823f85b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6c48d737-d5e0-467a-97ca-c8c9ef9d3517",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15c7a7e7-0426-48b8-8b6b-8796f829dabd",
        "cursor": {
          "ref": "ec83f9f8-7841-4777-9bd2-2e08d508477f",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "fb244470-594a-4e24-aed6-982c8c19a2dc"
        },
        "item": {
          "id": "15c7a7e7-0426-48b8-8b6b-8796f829dabd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "625dcc12-873c-4d30-a0ba-6f361600dc42",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 88,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3284de96-aac1-4d12-b976-68f07c6e9395",
        "cursor": {
          "ref": "1b59eb67-5199-4dc4-9837-9dc1bb3375a5",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "0f689948-d017-4cb5-8947-805f572bee5f"
        },
        "item": {
          "id": "3284de96-aac1-4d12-b976-68f07c6e9395",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d3ae0822-db29-4bd6-bf48-f8259334ed9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7eb529d-885e-40f6-b827-e5add8d6f26d",
        "cursor": {
          "ref": "eca8a3c3-1018-4b58-974e-3efcc63a41fd",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2b0b87ba-260d-4311-a8c5-5f2db6195851"
        },
        "item": {
          "id": "d7eb529d-885e-40f6-b827-e5add8d6f26d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "3077f109-fac7-42bf-81c4-212e2bee5d91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ecbd17-9185-49f2-83a9-7c70fde6d717",
        "cursor": {
          "ref": "2a6381ad-a937-4fd7-a3ea-3f9ce50bd514",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "dc1aa341-d0f9-4e68-bb24-e4f216d29e66"
        },
        "item": {
          "id": "68ecbd17-9185-49f2-83a9-7c70fde6d717",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b359a5d4-7e01-4362-99e8-885850d63f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f3048c-a1be-46f2-a44c-91c068774f08",
        "cursor": {
          "ref": "8da8be83-eda7-4ff3-a1e3-29ec29d3e68a",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "23651443-66c5-442f-a754-4ba031fd6462"
        },
        "item": {
          "id": "75f3048c-a1be-46f2-a44c-91c068774f08",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "f7af4ebe-bc2f-4879-a1b4-007372ccc944",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "524b85fe-50cc-46d5-9a43-a896cec61f4f",
        "cursor": {
          "ref": "4026c802-cd5c-4d33-bb05-6d7e18ea83aa",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "7cf755da-3ead-4677-bc01-6d2132d50894"
        },
        "item": {
          "id": "524b85fe-50cc-46d5-9a43-a896cec61f4f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "1bf27219-30b2-47f4-bdf2-033d9e3bc824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a2c1631-b585-4bf7-9aa5-9085dd4d98a3",
        "cursor": {
          "ref": "b776d813-7883-4e8b-8dbc-87705d8f5e73",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "228fe91e-b129-4947-988b-3e73cb4d6580"
        },
        "item": {
          "id": "9a2c1631-b585-4bf7-9aa5-9085dd4d98a3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "7ba7bb09-7672-4bda-9a7f-646201eebfb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7a96f2f-8d10-4dbf-89a4-39ab50c6562a",
        "cursor": {
          "ref": "66469813-967d-476c-a813-4b52498cbdc7",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f90d805b-5e4a-4b2a-8ca2-9785f64b5198"
        },
        "item": {
          "id": "a7a96f2f-8d10-4dbf-89a4-39ab50c6562a",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "3d85fee4-978d-4a7f-b217-af04803c10b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b06fc689-f9c5-43ff-9895-d52401937d04",
        "cursor": {
          "ref": "49086c18-06ba-4741-b6ce-f36293b01407",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "a3677830-db34-4e07-8751-b0f018bd3946"
        },
        "item": {
          "id": "b06fc689-f9c5-43ff-9895-d52401937d04",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "58d9fef8-dcca-4e65-b7ed-c757f6d64483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "054e6462-1fb3-4b2f-90bc-e582336cbbfe",
        "cursor": {
          "ref": "50bbf40c-ed60-4816-8a1a-856600ea22ad",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "f2641316-7408-40ed-bd60-3fed0df7f762"
        },
        "item": {
          "id": "054e6462-1fb3-4b2f-90bc-e582336cbbfe",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "233d6ad8-b30e-44c5-b50e-936c5ded43d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33aef0ce-666c-4fe3-b28b-c34f26fe90e4",
        "cursor": {
          "ref": "940dce17-df13-4dae-8974-271b449fc414",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "e4a34373-176d-478f-bf7a-1155b71d993a"
        },
        "item": {
          "id": "33aef0ce-666c-4fe3-b28b-c34f26fe90e4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "598aea88-a9d7-4701-b94a-0505c1dbfe45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8780cb3b-b7a1-46ca-a4a3-5cc9896fe219",
        "cursor": {
          "ref": "1e77e33b-2792-4a89-88be-2465b3c3d54d",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d4215ca0-a542-4233-a444-114037d84458"
        },
        "item": {
          "id": "8780cb3b-b7a1-46ca-a4a3-5cc9896fe219",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a6b668f1-2b0a-4796-991a-75f080be7d92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb30bd97-f4a4-4dfc-ae6d-c9ec9f30ef5f",
        "cursor": {
          "ref": "516bd77d-0c8c-442a-8a9d-82eafb689f4f",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "2ec520d1-cb89-4beb-bdc4-f28cd6d7d81f"
        },
        "item": {
          "id": "cb30bd97-f4a4-4dfc-ae6d-c9ec9f30ef5f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b2d5a8e9-9ae0-4818-a763-23522e92df18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8b8c1b4-3ec9-49c5-aac8-766fb236fb78",
        "cursor": {
          "ref": "fdb98340-f9ae-482b-8ee5-f7dac9aafe10",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "947724e0-3ba0-4922-9db3-803eff9a5e1c"
        },
        "item": {
          "id": "f8b8c1b4-3ec9-49c5-aac8-766fb236fb78",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "9ffd464f-a475-4064-bb83-58b7d6ed82a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c365bee2-0980-419f-ac8c-26b2980472f6",
        "cursor": {
          "ref": "86bcfb59-bcac-4777-ba4f-7e122ee4dda9",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "dde97c52-57be-45e0-9d24-3c461ea4d54d"
        },
        "item": {
          "id": "c365bee2-0980-419f-ac8c-26b2980472f6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9ad85ebf-2784-4494-ad6b-73de3ce31f94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12c4bfee-01a8-4529-887e-0b834259ed2b",
        "cursor": {
          "ref": "1821d1a3-c485-42a7-80b3-3838cd0ae2a1",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d9cafff4-ad95-4d67-87b7-b809a938f24f"
        },
        "item": {
          "id": "12c4bfee-01a8-4529-887e-0b834259ed2b",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "b5ad2d89-51d3-4c44-a373-9a1623cd18a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c015f7b-60ca-4cbf-a97b-959ecd7e9590",
        "cursor": {
          "ref": "fb90814f-6f3f-4946-9d96-a6e0eb9237b1",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "187803e0-21c8-47e2-aa68-d7d36fbb58ee"
        },
        "item": {
          "id": "1c015f7b-60ca-4cbf-a97b-959ecd7e9590",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "520ec517-3f4c-4ccc-b26b-f6760bfdfc0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db071fd-1c2a-4e60-ab70-8b6bc88fa765",
        "cursor": {
          "ref": "f26705e1-9937-41f6-a505-e0d79fe08d1c",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ddeee284-84c8-4442-bf39-c917462662b2"
        },
        "item": {
          "id": "6db071fd-1c2a-4e60-ab70-8b6bc88fa765",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "46e107e0-7c73-4998-8839-a36824623f0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65210bc6-8ced-42d0-8c70-c51c38538878",
        "cursor": {
          "ref": "d9dc93c8-ed07-429e-965f-cd87f0ff1828",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "86ed2877-3710-45b8-9160-9a42b1b77bf2"
        },
        "item": {
          "id": "65210bc6-8ced-42d0-8c70-c51c38538878",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8671b56d-fb3b-4f0d-acc5-b4f00742962a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eede6228-2d06-443a-ab79-04f572995547",
        "cursor": {
          "ref": "2593b1b2-c970-46aa-b04d-5e6a04c259d3",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "7dfa8154-4794-4ca7-8db6-a3c274fdc4fc"
        },
        "item": {
          "id": "eede6228-2d06-443a-ab79-04f572995547",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f6dc45cc-2d4e-4ee3-952c-8b3106c0780d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "657da8fa-2f91-4702-9888-6575df30f13e",
        "cursor": {
          "ref": "1c9375dd-508e-4d0a-a6f5-b978d088f312",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "d0ca49ff-ee47-4c19-b0f3-2428b7410ee0"
        },
        "item": {
          "id": "657da8fa-2f91-4702-9888-6575df30f13e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a0950bc8-f4fc-4671-886c-378efb0c3ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94ac966a-9a74-46c1-aa6e-375f5bc118f8",
        "cursor": {
          "ref": "ebb86a80-ac2c-465b-9ddc-f8bad293bc6a",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "9e99b6cc-6efd-4ead-b8c2-00c07e90cfe8"
        },
        "item": {
          "id": "94ac966a-9a74-46c1-aa6e-375f5bc118f8",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f91203ed-fe3c-4365-8f35-067482f94cf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86219a94-feed-4cc9-9528-2384009fb7e0",
        "cursor": {
          "ref": "d05e3a5c-b01f-4cb1-95c7-340396d5d81a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "06e069f3-9bda-4eac-aa8d-7c7335d6d26e"
        },
        "item": {
          "id": "86219a94-feed-4cc9-9528-2384009fb7e0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "aef1bfe7-6341-4bf6-b9c9-5599066d2b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59b2cfb5-cb3e-47d4-9146-4b3991a26521",
        "cursor": {
          "ref": "441fa520-ac0d-40e2-b907-38c10d2f2195",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "5a3feb10-a1c6-480f-92d7-30666ee6e5e3"
        },
        "item": {
          "id": "59b2cfb5-cb3e-47d4-9146-4b3991a26521",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "556cc093-171e-4dba-ae5a-8e6d3facd1c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f9b5349-4f6c-4c8e-9398-04b461d59baf",
        "cursor": {
          "ref": "b8ab452f-9b39-412f-8b35-a82134bca503",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e17f2828-783c-4450-9602-aeb3765ef411"
        },
        "item": {
          "id": "2f9b5349-4f6c-4c8e-9398-04b461d59baf",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "cfef6d9d-7af6-4a16-8a8e-3573d1731dc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98d98d1b-3fbf-46ad-95a1-e89b8edc6189",
        "cursor": {
          "ref": "918c578b-67a8-4e24-8aef-f5a1a5054bc2",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "78c8ac31-e792-4c31-93d3-c914c03adf5d"
        },
        "item": {
          "id": "98d98d1b-3fbf-46ad-95a1-e89b8edc6189",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "f293a2d0-0192-4570-826e-ee291e638d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96f21d60-6b2b-4a8a-a876-6c514dd8472b",
        "cursor": {
          "ref": "f73dbfc5-d063-40b9-bfc8-974601aa4b8a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "4fd8ca94-33ff-447f-8b77-5b2aaef9a36f"
        },
        "item": {
          "id": "96f21d60-6b2b-4a8a-a876-6c514dd8472b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d4ce3130-470d-4d18-940a-51dc719309cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d257159-4ad8-4e1f-9fda-1bc756bdefcc",
        "cursor": {
          "ref": "437135a9-9e1b-482e-bcfb-1009aab3ff4b",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "eb2ac0cf-907c-4cdd-853f-1647d9bf6746"
        },
        "item": {
          "id": "7d257159-4ad8-4e1f-9fda-1bc756bdefcc",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f022546e-36b3-4fed-b315-7ddb3f05a8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48cedba0-3ea7-44b9-8c3a-ad7716593dd9",
        "cursor": {
          "ref": "b7cfa358-7536-4415-b8e1-8c515f721ed0",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "670e50b4-358b-42c8-9a7c-a8947a0cddc4"
        },
        "item": {
          "id": "48cedba0-3ea7-44b9-8c3a-ad7716593dd9",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9216cda3-8c25-46b9-a55d-3e98ff32892e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb9dd8b-4c9c-4cc7-87b7-cb35b586911b",
        "cursor": {
          "ref": "575d2a76-6f4a-471b-bb1e-e2d79e675af3",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "79b89ff9-1415-4fb9-9332-a4216011001f"
        },
        "item": {
          "id": "adb9dd8b-4c9c-4cc7-87b7-cb35b586911b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9b7d12ff-0cff-4143-bac1-35bd6db55ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e43f3f7-7c9c-4a18-9bda-ba76dffa0321",
        "cursor": {
          "ref": "be561aee-af99-42f6-bd78-f14914ec8845",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e251e404-8a54-4758-a192-25f518295e46"
        },
        "item": {
          "id": "2e43f3f7-7c9c-4a18-9bda-ba76dffa0321",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "89a86b46-9101-4054-b9f1-aefdc1c48766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba8dba74-5baa-474d-85ed-cbba1977644b",
        "cursor": {
          "ref": "33276644-fe44-426c-af9b-b8bd0f5f66d1",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6ecddd3f-de0c-42de-b0c0-732c027b7577"
        },
        "item": {
          "id": "ba8dba74-5baa-474d-85ed-cbba1977644b",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e8544ad9-55c8-4622-96ac-77b350786b51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a4a3663-4a62-46c2-b517-8426bbf847b7",
        "cursor": {
          "ref": "47d584a4-9499-45ac-936a-303dc4340034",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0d3df9c5-bf1d-40ec-8dce-fc9d8fbdb277"
        },
        "item": {
          "id": "7a4a3663-4a62-46c2-b517-8426bbf847b7",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "3aa7ac5c-3c19-411b-86c7-54ee4b6ebfb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eea70a4-e620-453d-a64d-1e7c229e247f",
        "cursor": {
          "ref": "f446f9e4-9cd5-4b5b-aa17-ebe5ebc7d313",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "3a08b7f5-639a-452c-aeda-10a0409e9902"
        },
        "item": {
          "id": "5eea70a4-e620-453d-a64d-1e7c229e247f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5dde52ff-0d23-4a04-b617-c725a26af8cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48f9a265-9d06-48c1-a58f-d4827f487276",
        "cursor": {
          "ref": "57f92b0d-3ff9-4690-af1f-b274bc90ec0e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "43e865af-3d4f-4abe-b0dd-709202197595"
        },
        "item": {
          "id": "48f9a265-9d06-48c1-a58f-d4827f487276",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "2969b776-f384-41c2-b57e-d9eae08e245f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc1bdb1f-2274-4651-8a45-8b790f153265",
        "cursor": {
          "ref": "8e0a6cc9-efa5-44e9-abe3-1af30a76f5b3",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "d941df84-013a-4539-8f91-036223d5cc14"
        },
        "item": {
          "id": "cc1bdb1f-2274-4651-8a45-8b790f153265",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "63a3ea19-8a99-4838-817c-3cb34573fba9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "703f7cb7-71ba-44a7-ae36-5f40425ec8ab",
        "cursor": {
          "ref": "a7cf87a7-7279-4dcc-8259-fc12dd754317",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "47e7826a-f9bd-4880-bad2-6a85d54775a2"
        },
        "item": {
          "id": "703f7cb7-71ba-44a7-ae36-5f40425ec8ab",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "7487400d-3fe6-47df-ae48-27200fcc5e3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d342fcf5-bd7a-426f-ac57-85edd2415a95",
        "cursor": {
          "ref": "1f32a464-1ecf-4d4e-a101-c8d79919ba0c",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "49626083-07d6-4ece-b791-37400ee964e6"
        },
        "item": {
          "id": "d342fcf5-bd7a-426f-ac57-85edd2415a95",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "133847b0-0639-469a-8883-e958749d8a2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bee5733b-79ba-4205-a245-daa99929d5bd",
        "cursor": {
          "ref": "6b40491d-39b7-40b7-b8aa-8083bc8541a5",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "9db163c4-831d-4d0b-87d8-032921e4cbb4"
        },
        "item": {
          "id": "bee5733b-79ba-4205-a245-daa99929d5bd",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e1073449-647a-4e32-b825-8a27ce40fd80",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99016dac-3c5a-49a5-804e-d6aae156b677",
        "cursor": {
          "ref": "40adb68c-edbf-4dda-affd-53f502dd9d9b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d99ac1c6-c443-4514-8543-15f7dd07e837"
        },
        "item": {
          "id": "99016dac-3c5a-49a5-804e-d6aae156b677",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "74b03ced-8371-4281-af82-28bde4611f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "638e9816-d7c6-4175-b5fc-ba2e83f53d9b",
        "cursor": {
          "ref": "76b6b4d0-e3e8-43e2-83bd-d177cf5837a3",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "fac02e75-4d67-43d5-8935-12b30da21a7a"
        },
        "item": {
          "id": "638e9816-d7c6-4175-b5fc-ba2e83f53d9b",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6f7bda5a-096f-4952-aac4-f835bbea736d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29a206f-77bf-4632-8b4a-fdc262677368",
        "cursor": {
          "ref": "0cefd2f1-dbf3-4893-93f2-065eae314bda",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "1d6bcb68-63d7-4f27-b8db-547704dc3a4c"
        },
        "item": {
          "id": "e29a206f-77bf-4632-8b4a-fdc262677368",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8874b6cb-d367-4794-810f-42c9faab29f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feef798e-b5bc-4c7b-a6e5-8b161728b924",
        "cursor": {
          "ref": "6595a550-d917-4cd0-bc41-14157cfc675f",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "24ef6803-e994-49c7-8cf1-cdf5fc3cd694"
        },
        "item": {
          "id": "feef798e-b5bc-4c7b-a6e5-8b161728b924",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "5a73282f-be36-4619-a86b-028b4c27fff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b72d54-cf61-43c4-b124-64b1ad27148a",
        "cursor": {
          "ref": "90daf8f5-220e-4a6e-85ad-da16bbbc14cd",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "51506a6b-af4f-4216-9389-a051da84ec02"
        },
        "item": {
          "id": "f6b72d54-cf61-43c4-b124-64b1ad27148a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2d7ba5f0-0edd-48c5-b0a8-bad0ddf0a3ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0227ed8-5ce9-455e-a2fd-c173ecc87166",
        "cursor": {
          "ref": "a5bbd0fc-a850-41a8-9485-232bbd8bcfe4",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f5be9716-f9a7-44d9-a730-d658b83d6629"
        },
        "item": {
          "id": "a0227ed8-5ce9-455e-a2fd-c173ecc87166",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "52a88dbd-d718-46a5-9226-e7aabb1ce1ab",
          "status": "OK",
          "code": 200,
          "responseTime": 192,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0e0d0287-f618-479c-b2db-b070749cf87d",
        "cursor": {
          "ref": "0b100fb8-1b84-4755-8193-355a19f60170",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "893f3e9e-2bd7-4f6c-8613-bfdafaab019e"
        },
        "item": {
          "id": "0e0d0287-f618-479c-b2db-b070749cf87d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bb1cd713-29e1-4a6f-8868-410cf6be04bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021ef431-9331-4c19-bb6d-1819442d3299",
        "cursor": {
          "ref": "5237ce41-4dc7-49bf-b87a-f644353c7c84",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "e880ee9a-9174-4427-9b72-d9cc8ba9780c"
        },
        "item": {
          "id": "021ef431-9331-4c19-bb6d-1819442d3299",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ea63bf5e-0b0d-43d4-bb6e-d2f8ed587667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f602622-f35e-42dd-9177-7b048604910e",
        "cursor": {
          "ref": "2b9ddcf1-3f53-4790-93a3-ce059520364e",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "6ffaaa84-a4a0-4ecf-a811-840b122d0f24"
        },
        "item": {
          "id": "8f602622-f35e-42dd-9177-7b048604910e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "8b8a4677-cc91-4ac3-8352-93efd60b89a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39f68942-6627-4178-bf16-bc33d93dd951",
        "cursor": {
          "ref": "a24b805d-55fd-49dd-b94d-aba9da838245",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "8ac80b03-01e0-4dad-981f-cd9d495e703b"
        },
        "item": {
          "id": "39f68942-6627-4178-bf16-bc33d93dd951",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "e580bded-2690-45d8-9b19-84b692e9f90d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f7100d-593f-474b-b378-ff5b892a3e42",
        "cursor": {
          "ref": "85c431e9-e6f6-42c8-9445-2d35dfa4a27e",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "e1840926-96c6-4382-a60d-8bd3b6a5fbf0"
        },
        "item": {
          "id": "b9f7100d-593f-474b-b378-ff5b892a3e42",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "a1cd6581-27e4-47bf-9237-1a21ab8f5da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3a51db-f92a-48d3-beb6-362b69c319ff",
        "cursor": {
          "ref": "f7c94eac-e032-4ed0-9784-432557c1f671",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "16f09018-ce54-4976-b59c-a0dab1b101a7"
        },
        "item": {
          "id": "df3a51db-f92a-48d3-beb6-362b69c319ff",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bfdacdbe-88db-4049-b8cd-925ad38d1444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37ba7f0-ffa7-462a-9901-1e821adb5589",
        "cursor": {
          "ref": "cddae963-53f6-4bfe-b5ea-32b019410825",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "3bf6bd01-c868-45d4-8ec8-4ecb40c7a909"
        },
        "item": {
          "id": "f37ba7f0-ffa7-462a-9901-1e821adb5589",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "006850c0-35dc-46a7-8e98-c2065f79ea14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 182,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf1e679-8598-4789-9091-4d58ca617ac6",
        "cursor": {
          "ref": "536e6984-1b3a-46ee-af6a-4344294e1d2c",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "17a4c2da-d0b8-4197-9a18-c31676881932"
        },
        "item": {
          "id": "0bf1e679-8598-4789-9091-4d58ca617ac6",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "3ac90339-9df3-4941-aebb-115971cf9478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b12ec57f-cc43-46bb-91dd-a4a10a0bef61",
        "cursor": {
          "ref": "1818798c-eeb6-4a96-9b00-3d7d86d8ab02",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "65e1665f-7c9d-4a61-bf7e-a809e6ec546c"
        },
        "item": {
          "id": "b12ec57f-cc43-46bb-91dd-a4a10a0bef61",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "59758894-4887-47b0-8fe9-5a09a8202647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46f403b9-1ddb-4ca2-a54d-df2ba2fb9709",
        "cursor": {
          "ref": "d74e3593-4f19-4667-adb2-2e3471225cd5",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1aa632ac-c688-49cc-90e7-6093c7fb70bb"
        },
        "item": {
          "id": "46f403b9-1ddb-4ca2-a54d-df2ba2fb9709",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6d3fcb31-ff8f-460d-88c6-37612e60c01a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b13d854-3ba5-4364-8718-6f5b3485d65c",
        "cursor": {
          "ref": "ed206f0f-450e-4740-8b8c-b689a55a6af0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "69c41e9a-621b-4345-80bc-88dafc37902b"
        },
        "item": {
          "id": "8b13d854-3ba5-4364-8718-6f5b3485d65c",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "eddd4ac5-2826-48af-b19e-56e17c473f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3f3f11-ecac-4970-8f1c-1e3b6d46f179",
        "cursor": {
          "ref": "916d0562-cb4d-4cc4-b80f-9fa9bb53b76f",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a0d04d19-3fc8-4c9c-b870-8c295d1d783a"
        },
        "item": {
          "id": "2d3f3f11-ecac-4970-8f1c-1e3b6d46f179",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "e4f8c464-68d9-4493-9eef-766bf078fea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c8a674-a20f-492e-ae9d-11a097b665d3",
        "cursor": {
          "ref": "c7c0dbc5-0229-4197-8e81-688a65a8b0fd",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "70c00a37-5048-4566-92df-b2e5a8f93840"
        },
        "item": {
          "id": "d5c8a674-a20f-492e-ae9d-11a097b665d3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cc11b737-33b3-45f1-8898-d7fc8740c8f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee724c2-a909-4a00-b0fa-e3382b34c778",
        "cursor": {
          "ref": "e65b0176-bb46-4463-9096-b91ee7c64e4f",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b9929c13-0aac-469f-a913-4fd89d2746c3"
        },
        "item": {
          "id": "eee724c2-a909-4a00-b0fa-e3382b34c778",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "20962a55-8b4d-4897-9ced-abde214bd480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "273da12f-fdf0-43ae-b332-ce716aa8eb63",
        "cursor": {
          "ref": "f2a4a7a3-dda5-4392-b3a4-666d8b74f8e4",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "45fe1cfd-50bf-4321-94a9-7e7ac895f5e0"
        },
        "item": {
          "id": "273da12f-fdf0-43ae-b332-ce716aa8eb63",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "6a7829ba-309f-4f14-aa0b-b53c98990e22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6273340-3c1e-4a86-93cb-ff559c30805a",
        "cursor": {
          "ref": "e47b3391-de5d-4934-9af6-abd4e584b589",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "88d901b9-d58d-4fbf-af6d-ad7f90b62d6c"
        },
        "item": {
          "id": "c6273340-3c1e-4a86-93cb-ff559c30805a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "1e4950d4-3c08-4baf-9293-33fed412e37c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4c46ed1-6e39-4ded-b3af-f95c1137884f",
        "cursor": {
          "ref": "760a62af-6c52-4001-a7cb-35e9a81214f8",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "62a82220-2058-49c9-801c-a4d49ae0a578"
        },
        "item": {
          "id": "a4c46ed1-6e39-4ded-b3af-f95c1137884f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "7af1f58f-0ae8-4a57-a0fe-14cbe8d18ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34e9d6db-1256-4e59-a7a9-b49197ee2821",
        "cursor": {
          "ref": "668fd1e3-7201-46c9-8c63-f1c85c3d4f35",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "af207140-486b-46b5-b4c0-217bfe960095"
        },
        "item": {
          "id": "34e9d6db-1256-4e59-a7a9-b49197ee2821",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "2b5a8207-ef80-4c01-8080-e0ea6dfd63a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "737b38a0-ea14-4026-b339-32a4257d8013",
        "cursor": {
          "ref": "f31e8eaf-9086-4b0c-9113-a5747b649a95",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "535c832e-bed7-47fa-b613-ae89329d5b6f"
        },
        "item": {
          "id": "737b38a0-ea14-4026-b339-32a4257d8013",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "d4c58c21-8214-489c-8207-28419bbd930f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48ca26d-a1c0-4bde-9b4f-67ba2b3757ca",
        "cursor": {
          "ref": "e1d63f70-8ccd-4e34-85a4-0868b726f4f9",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d6907ba0-de99-4025-af79-81167f5b7770"
        },
        "item": {
          "id": "c48ca26d-a1c0-4bde-9b4f-67ba2b3757ca",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "9733ef57-e177-4e8d-8ef3-ada3dfaefd83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3570dad-d1da-4129-80e1-76da5ab08782",
        "cursor": {
          "ref": "a9b2195f-7dda-42a1-aabe-4ba311e16e30",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0e35353e-cfe5-42fa-ac01-2107471b58ba"
        },
        "item": {
          "id": "c3570dad-d1da-4129-80e1-76da5ab08782",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "b8f85886-936b-4b49-9ef6-36de9692554e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26b5fae3-d7f5-4beb-adf4-8f607e18a0a5",
        "cursor": {
          "ref": "35a73de5-f8fe-4355-bfcb-372c40ccab76",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6281e7ae-dd30-41d3-acd3-94244a87bd3e"
        },
        "item": {
          "id": "26b5fae3-d7f5-4beb-adf4-8f607e18a0a5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "abb3a60c-fb81-446b-8483-97cd24e77d8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0381c242-87fa-48bb-a285-30d076fd2b9e",
        "cursor": {
          "ref": "75a311f7-270c-414f-86bb-829538b729b4",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "43581c97-b853-4738-80b9-f82fabd305dd"
        },
        "item": {
          "id": "0381c242-87fa-48bb-a285-30d076fd2b9e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "e8be1983-f2aa-4580-acc2-34779fc02bd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a2fb20-ddae-417d-b88e-d2781dfd2455",
        "cursor": {
          "ref": "7bac0605-e06e-463a-939a-787a331ed724",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "3d88299c-8212-40a1-91aa-43b62777b860"
        },
        "item": {
          "id": "61a2fb20-ddae-417d-b88e-d2781dfd2455",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "4b907871-f45f-43ef-b71a-263645c42be5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fac7fee8-098a-4768-8667-057091535370",
        "cursor": {
          "ref": "134d5b7a-a198-4ff7-a563-41e237e9fc40",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "29fc0b89-bb1e-46ff-9ea0-12beb2834b39"
        },
        "item": {
          "id": "fac7fee8-098a-4768-8667-057091535370",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "3ef7ea3d-0c0f-4552-8fc7-b413a88a14c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aff82274-5abd-4f53-a9fa-891d5f52b4b3",
        "cursor": {
          "ref": "321a17ba-5da7-4d61-bf16-b4b6ca5d359f",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "13a43ade-a88a-4c2e-a589-2ec73f29502c"
        },
        "item": {
          "id": "aff82274-5abd-4f53-a9fa-891d5f52b4b3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "027bd2d5-cd1f-4557-95db-27044191abd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8756c961-7e1f-48ff-880b-7386240575c0",
        "cursor": {
          "ref": "d4cc7e73-5cdf-4d4a-a0ac-69daa974efe3",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "1312fa14-aa0c-42db-9fbe-1e74d5cc0d26"
        },
        "item": {
          "id": "8756c961-7e1f-48ff-880b-7386240575c0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a7304297-dd29-46c2-b0fd-2ef4cd3e7c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5464c07-5e97-4493-b720-42f764c607e5",
        "cursor": {
          "ref": "09876f98-a4a6-4662-8130-806c387d1a68",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "e8261f02-1cf1-4b03-83c5-3c44c1c745bc"
        },
        "item": {
          "id": "c5464c07-5e97-4493-b720-42f764c607e5",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a05fa705-35c6-477f-9bbf-0b4ab47bcf9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0087bd9d-6d74-49b2-a107-c6fe75b6de5f",
        "cursor": {
          "ref": "2fb46d77-0f43-429b-81d5-e27931f57822",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "54cb92fd-2014-4ace-a6c2-ee1d882d15a9"
        },
        "item": {
          "id": "0087bd9d-6d74-49b2-a107-c6fe75b6de5f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "a3801b8d-2b12-4316-888d-93a94b4ddeb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f18b406-3350-4377-b672-235784b87f19",
        "cursor": {
          "ref": "d1e248b6-069f-41ca-afcd-3362456b857e",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3e40cfa9-ecfe-44ad-baf9-b53ed0fc66bf"
        },
        "item": {
          "id": "4f18b406-3350-4377-b672-235784b87f19",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b598bbd0-d392-446d-8b59-10c06c40c92b",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9b01d256-b8ac-4153-b418-f5d43030844c",
        "cursor": {
          "ref": "8830874e-6862-4ddc-950a-6d0167de8c8c",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "31ac85e3-572a-4c4d-83af-35a13d3d3d1c"
        },
        "item": {
          "id": "9b01d256-b8ac-4153-b418-f5d43030844c",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "827fb981-0cfd-4354-8473-747357a0241c",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5d3b48e3-c662-485e-9250-e768cc624527",
        "cursor": {
          "ref": "5e939c38-4b72-4115-913d-903ee40c4d00",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "259b727f-5d0e-4ad3-a62e-2f7f7affc1a2"
        },
        "item": {
          "id": "5d3b48e3-c662-485e-9250-e768cc624527",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "f0dfddf9-a37e-46a8-a315-3f6086797b9e",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "1cc2dfa0-b313-4b6a-b1d6-396594655fba",
        "cursor": {
          "ref": "62fab1cf-bfde-4fd5-8ad1-0d22d66a61f1",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "cc57e380-d168-4463-bec0-1fa1647def30"
        },
        "item": {
          "id": "1cc2dfa0-b313-4b6a-b1d6-396594655fba",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "469cd6c1-9d39-4734-9b52-5e1ac52f5c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ab28cf-a08b-48a1-a021-a10e949eeb0a",
        "cursor": {
          "ref": "4c4b9971-1078-4c52-ae72-c99ecbbfa060",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6ebd0494-3a85-40dd-a546-3b8198498c96"
        },
        "item": {
          "id": "92ab28cf-a08b-48a1-a021-a10e949eeb0a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "cdf27028-5cf9-48c5-b23c-220f4f8162a6",
          "status": "OK",
          "code": 200,
          "responseTime": 175,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "b2469f2f-c0c7-4da0-81b9-a09f4fb3d64e",
        "cursor": {
          "ref": "2ec22ef7-96ea-463f-a13a-890fa15b2f7b",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "eb315ad7-9a8e-4e6b-9d62-795d6cba7f24"
        },
        "item": {
          "id": "b2469f2f-c0c7-4da0-81b9-a09f4fb3d64e",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ab69b195-ece6-407f-9117-25910fcebd57",
          "status": "OK",
          "code": 200,
          "responseTime": 181,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "a94bdd94-d120-45b9-97b7-29c0bd7c223f",
        "cursor": {
          "ref": "580ef8c6-b678-419b-a43a-ef892bd073a8",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "5be63fc9-03d9-4ede-9f64-4ae95c1814fe"
        },
        "item": {
          "id": "a94bdd94-d120-45b9-97b7-29c0bd7c223f",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "d60ab987-afa0-4c6f-b2b6-007983190ca8",
          "status": "OK",
          "code": 200,
          "responseTime": 420,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "e481ad18-1118-4949-b4be-352b887a9564",
        "cursor": {
          "ref": "60dc473d-6b28-426f-9021-ea5ccee16c38",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a12f290b-d55b-4659-ada8-02a586da2312"
        },
        "item": {
          "id": "e481ad18-1118-4949-b4be-352b887a9564",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "85597ef2-37d9-48f0-a7cc-3ae3a5b1441e",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "f96bdbba-5a1e-4402-81e1-dd14f41df259",
        "cursor": {
          "ref": "f5d91532-531b-4709-9eb6-970397bb9857",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f4aa7418-6293-4094-94cb-13df998a3f6f"
        },
        "item": {
          "id": "f96bdbba-5a1e-4402-81e1-dd14f41df259",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3762b30d-44ce-40e1-af3d-dfd63f6efe4f",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "211aef8f-b4ff-49c9-9523-71553a18baa6",
        "cursor": {
          "ref": "d3a47b58-8466-4b1f-8c6f-0113c18848d7",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "93162595-359a-4aef-bf58-3bf95737ec88"
        },
        "item": {
          "id": "211aef8f-b4ff-49c9-9523-71553a18baa6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "4c6894d6-cf61-474a-9243-c1a752449a01",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "46146ae1-70f7-473e-a484-3fca13e4e113",
        "cursor": {
          "ref": "17581384-a2dd-4404-a8ba-1d6f109d3fe3",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "5720e137-2ebe-4940-b43a-279ac89ccc69"
        },
        "item": {
          "id": "46146ae1-70f7-473e-a484-3fca13e4e113",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d55cd8c6-7c50-468f-bc83-edcaede5bf0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "053e4f18-9a93-4e6f-8933-643e98637954",
        "cursor": {
          "ref": "437e9a9b-37b5-446e-aba7-1186865d3828",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e7bc4d26-a1c8-4c3b-ab33-4d03476368b8"
        },
        "item": {
          "id": "053e4f18-9a93-4e6f-8933-643e98637954",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "561486d1-5ed4-467b-8f36-04b165b4ff32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d27b666-f992-41b9-8661-8cf4a784c7af",
        "cursor": {
          "ref": "63791e8e-cc53-4ef0-b22b-962f2a4c1527",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f9c26175-3dd1-4f1d-a52e-171811d35e44"
        },
        "item": {
          "id": "5d27b666-f992-41b9-8661-8cf4a784c7af",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b03a5a16-b591-4306-8f43-8a371fedd917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b31fa35-5e66-44da-9601-5a1cf559fada",
        "cursor": {
          "ref": "666b85b8-7f8a-45db-b13e-d1fdaf160562",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "fbbb64f1-2ff9-4afe-a479-6ad08911597f"
        },
        "item": {
          "id": "6b31fa35-5e66-44da-9601-5a1cf559fada",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ca38a15d-3892-41dd-9010-14f87f8e8636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93388477-caab-4145-b9fa-5ba42c1923be",
        "cursor": {
          "ref": "971931de-32bc-426a-a642-9bc3b7c63430",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "ab95be7a-97e9-4cf9-836b-bf1340f7e327"
        },
        "item": {
          "id": "93388477-caab-4145-b9fa-5ba42c1923be",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "060371a9-c2b4-4907-bc2f-ddd75885eecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d96305b-e45f-4c59-87ae-58fb012d6519",
        "cursor": {
          "ref": "353af5d3-baa3-40c6-b3ad-e31ca07b1aeb",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "83ecd015-2988-4842-9110-3aa678cf0527"
        },
        "item": {
          "id": "0d96305b-e45f-4c59-87ae-58fb012d6519",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "65a7f39a-e59a-415c-829f-4b4f8088a7dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41b677ee-316a-4d7a-af9a-8759f93e8c0b",
        "cursor": {
          "ref": "be46ea5c-ebc9-4be1-b108-591678e6a475",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "cb293742-9c01-42e9-a99b-5fc523c3ba71"
        },
        "item": {
          "id": "41b677ee-316a-4d7a-af9a-8759f93e8c0b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "59fb9676-33c2-4053-9d3a-b4110caa8e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37617d4-5473-4802-88f0-908b22904fc4",
        "cursor": {
          "ref": "8df84409-3c37-4346-b0cb-591fd3fab20a",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f17a4500-5a54-4482-ae2b-ec97e4c34dea"
        },
        "item": {
          "id": "c37617d4-5473-4802-88f0-908b22904fc4",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "b99d877f-e76b-4ddb-b100-83a8d7482e08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d29690c6-2d39-4118-b96d-826576b5c847",
        "cursor": {
          "ref": "ab93ec07-bf42-4263-8d6d-3b3e1a45ead7",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "6752c928-ff4c-4692-82a3-9b6ae42784a6"
        },
        "item": {
          "id": "d29690c6-2d39-4118-b96d-826576b5c847",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d7c259f4-e174-485e-ac27-163e75279681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a1ddf34-52a3-4c0d-9904-6cfbc7545b7d",
        "cursor": {
          "ref": "b2085733-4c51-466d-a688-885dd87b52e0",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "280b3d19-a1be-442e-80af-d4f7affbb7cf"
        },
        "item": {
          "id": "4a1ddf34-52a3-4c0d-9904-6cfbc7545b7d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4ffd42c7-b1ad-4f4d-bd6d-bcc5240af96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289fb288-e84e-4b10-a2b7-4710a98b3373",
        "cursor": {
          "ref": "297a5d91-7793-45a8-a781-d514bb98ea49",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "7f56345a-a9d7-439e-a219-68585647db6c"
        },
        "item": {
          "id": "289fb288-e84e-4b10-a2b7-4710a98b3373",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "95e80791-329a-4e43-8fd6-5a8dae1816bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1d945a4-c5f0-4114-bca8-54dc83f3baaf",
        "cursor": {
          "ref": "8679b869-5f1c-4d99-8a43-6f6c2e235f43",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "9ddff0b0-e5a1-4483-a057-0fae6172eab8"
        },
        "item": {
          "id": "c1d945a4-c5f0-4114-bca8-54dc83f3baaf",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c355d7ce-cbfe-4249-8aa7-c809e4d5add5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3af498-25e1-4b33-b53a-aea8ded80e30",
        "cursor": {
          "ref": "9b0fea8e-7593-448b-87d4-072060217eaf",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "ca20fd22-bad1-4466-acc6-1077798d995e"
        },
        "item": {
          "id": "fa3af498-25e1-4b33-b53a-aea8ded80e30",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "5e3b47da-c131-4638-9f47-13407f7c8cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3291dfc2-ce41-4f55-a937-b32cd341d205",
        "cursor": {
          "ref": "bdbe249f-6ea2-457f-a0df-4c86421ed664",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "bd6a4020-93b1-4ca3-bd33-6ab095d8bcb1"
        },
        "item": {
          "id": "3291dfc2-ce41-4f55-a937-b32cd341d205",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "1ef58dc2-e318-4083-b272-60915142af46",
          "status": "OK",
          "code": 200,
          "responseTime": 171,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "68a24117-40ec-4fc5-84b6-0e4509718498",
        "cursor": {
          "ref": "7d3eaf03-c3c6-4b6c-9e16-3c212057fcac",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "de487fd5-5c92-400c-b5ea-5c96d02cdf1e"
        },
        "item": {
          "id": "68a24117-40ec-4fc5-84b6-0e4509718498",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f6ff6b0b-8a69-4313-b370-c2155b68f3f5",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3952430e-9244-4d6c-ac57-b8522ff602cb",
        "cursor": {
          "ref": "0a73ef77-118c-420a-bc45-6519607abbbd",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "aebb0ccf-05d6-4e36-b055-421797d0c6db"
        },
        "item": {
          "id": "3952430e-9244-4d6c-ac57-b8522ff602cb",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9f226707-76bf-4bc5-a414-a4b0995d6ef3",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "58c01d00-95d7-4f51-8ebf-9214ff7cb5a0",
        "cursor": {
          "ref": "30e05dac-b7ec-43ce-a9e2-6b4180bbb3ef",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6ab83c27-f339-4206-bf66-9fa5278305f4"
        },
        "item": {
          "id": "58c01d00-95d7-4f51-8ebf-9214ff7cb5a0",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "eaee9a6f-a956-46d7-9f5c-547850d93360",
          "status": "OK",
          "code": 200,
          "responseTime": 179,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "95d51395-b954-4372-88ae-36e5b23e9425",
        "cursor": {
          "ref": "eae0dcd8-5fbe-4948-bf6a-05d7f4d04d58",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1c814f91-74c7-4cd5-ad2c-1652bf74711e"
        },
        "item": {
          "id": "95d51395-b954-4372-88ae-36e5b23e9425",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "29d49f24-69ce-42e7-a5bf-6f6e86325896",
          "status": "OK",
          "code": 200,
          "responseTime": 200,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b886b57d-4117-4b63-ba23-1403e8db1671",
        "cursor": {
          "ref": "7e7340ac-05e7-46cb-8144-4733c63d0a16",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2715c973-a454-400f-992c-8e718df14041"
        },
        "item": {
          "id": "b886b57d-4117-4b63-ba23-1403e8db1671",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "ad1dad4b-16f9-4d1a-af8b-4099ee1ca050",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f87b76f0-9b6d-41b4-b13e-fb528d3ce5bf",
        "cursor": {
          "ref": "4e4cf59a-c6d7-49c8-94a1-49f159776feb",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "2a2ef507-25b9-4a6a-9a52-87644d610cdc"
        },
        "item": {
          "id": "f87b76f0-9b6d-41b4-b13e-fb528d3ce5bf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "bb9600e4-c119-48fb-afb7-5fe7e4fdd1b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2848fab-35c2-463c-839d-df38cddd8c34",
        "cursor": {
          "ref": "2f6f8910-aa02-4b34-86be-776e9d155f2a",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1f418759-4823-4bae-a270-fa0c354c6129"
        },
        "item": {
          "id": "f2848fab-35c2-463c-839d-df38cddd8c34",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "5f76b38e-ba8a-4b6c-bbe8-1c100e4338b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de6ea28a-94bc-4e74-bfa3-fdb8b0fdeb6a",
        "cursor": {
          "ref": "30a6c454-b70a-4e9a-a110-594de9f76300",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "f56b382b-d113-4650-89b1-24d780f9ca5c"
        },
        "item": {
          "id": "de6ea28a-94bc-4e74-bfa3-fdb8b0fdeb6a",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "15e02d41-9185-4273-8079-5c25a3dac328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3644bba6-f955-4a4d-b731-0acb97ff327b",
        "cursor": {
          "ref": "59f3f528-41d6-4286-9e0b-c3f1ccf43d2f",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e50a53b5-cee1-4c5b-bc81-0387d476add5"
        },
        "item": {
          "id": "3644bba6-f955-4a4d-b731-0acb97ff327b",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "2d3f0713-f27f-4518-b543-581a9f5e6806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d0de976-a4f4-421a-8ba7-9dd6c2fe9a9e",
        "cursor": {
          "ref": "9b5ebf6a-c411-4e73-84e4-1444baa8fc91",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "18ad6274-955d-4811-bdba-09d12f16d31b"
        },
        "item": {
          "id": "0d0de976-a4f4-421a-8ba7-9dd6c2fe9a9e",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "cab9f92f-176a-4170-ad6f-f40eebe2a881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b55a2d5e-dff0-4549-958c-e57f15432cda",
        "cursor": {
          "ref": "c9bf7837-c555-4cb5-910f-78f4f2b3e85f",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "7fb68318-78ed-441b-bd98-1a3b8e60bdbb"
        },
        "item": {
          "id": "b55a2d5e-dff0-4549-958c-e57f15432cda",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "ad46c108-059f-4662-9857-5f5f1ecbdd45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ef24aa-d73e-4bca-8b76-375a0e81bc8f",
        "cursor": {
          "ref": "f8e5ff50-c790-45fd-8558-7d745d4e3209",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2720fc47-a25c-4225-81cd-c2ba6714e5ca"
        },
        "item": {
          "id": "80ef24aa-d73e-4bca-8b76-375a0e81bc8f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "1b4649ae-840a-4212-b59f-83c0f289d36b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae4fb6e-ff60-414c-97ed-6318d6bf2895",
        "cursor": {
          "ref": "5acf1549-1820-4d74-91b2-bb3ea41897ab",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "7fe87f40-109c-4b19-9e36-5cd37daae05c"
        },
        "item": {
          "id": "eae4fb6e-ff60-414c-97ed-6318d6bf2895",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "8b78856f-f110-42a3-8f54-1f48d876e3a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef90e0e5-89b3-4e6c-b8c1-2395fd83274b",
        "cursor": {
          "ref": "46952372-e9c4-44a9-b7f8-b984d893a99f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "310b9329-4d5e-427a-bfcb-440fcbdefa21"
        },
        "item": {
          "id": "ef90e0e5-89b3-4e6c-b8c1-2395fd83274b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "f3acd5ba-b293-46fa-a7a5-f2de3a9e2790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4225487d-31fb-4cff-9b51-b47197c86be2",
        "cursor": {
          "ref": "73acfb26-abb2-464b-a04f-e528b8df7c8a",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e7a8c933-3ff8-48cb-9ac4-dfef34108d9e"
        },
        "item": {
          "id": "4225487d-31fb-4cff-9b51-b47197c86be2",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "45a1ab61-595e-4c66-8403-99548e36e0bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e422708f-e01c-43be-bbe0-b297fd07a91e",
        "cursor": {
          "ref": "e11de47f-59c3-4e75-ad37-c6a672311278",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b5a6a715-9f8a-4ad1-948f-976268dbc778"
        },
        "item": {
          "id": "e422708f-e01c-43be-bbe0-b297fd07a91e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "e4732a39-6bcd-42a1-9ab4-1453d08ccdf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8adf5f46-cddc-404a-9ef3-848f604f1462",
        "cursor": {
          "ref": "16f5b69c-2587-48fa-9517-80032f03d173",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "a64b1e8e-854d-4f6d-abcd-18262748229f"
        },
        "item": {
          "id": "8adf5f46-cddc-404a-9ef3-848f604f1462",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "401da5b8-2a95-491a-ab16-7913072e392b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59fc023e-910d-470a-8733-7e081283c9e4",
        "cursor": {
          "ref": "09334678-6737-417c-88ef-0859dafb9425",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d6d7ee34-7ed5-4177-96ac-377e30ef0ea6"
        },
        "item": {
          "id": "59fc023e-910d-470a-8733-7e081283c9e4",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "71f74cb5-02fc-4d96-95ac-9869fe2747ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe270623-e24b-4e5f-aba1-b582b7a430d5",
        "cursor": {
          "ref": "1bae391c-7065-4932-a21c-64a6d3f3971a",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "c01946f0-5997-48f7-9a1b-ac9d520d9a6d"
        },
        "item": {
          "id": "fe270623-e24b-4e5f-aba1-b582b7a430d5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "99fd63bd-edca-4c7b-87dc-e2fdc70832d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6e3ed0-df95-4bc4-b3aa-af73801bdc8f",
        "cursor": {
          "ref": "53c42a39-a455-40f1-bcfe-0ba214eb0be8",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8d4b1038-923f-45e7-9a23-a767441b9eca"
        },
        "item": {
          "id": "5e6e3ed0-df95-4bc4-b3aa-af73801bdc8f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "d9446c0e-8eb4-45bf-8b43-eea759fa97c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4af9e8-8251-4be7-b887-45da1cf8ec4b",
        "cursor": {
          "ref": "af8581c8-0f68-4f1d-aeba-dcf6054ca684",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "fcb717ff-e99a-4889-8f55-9b0388c77b65"
        },
        "item": {
          "id": "5f4af9e8-8251-4be7-b887-45da1cf8ec4b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "37574af3-b32b-4d5b-b22c-905b120ceeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01bf19bf-dec8-4469-afb7-2cef2a8fc2c6",
        "cursor": {
          "ref": "d7e92267-c722-4799-a171-859e4be0d346",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "a3359280-58e5-48df-8e94-fd4a9929e6b9"
        },
        "item": {
          "id": "01bf19bf-dec8-4469-afb7-2cef2a8fc2c6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "684def2f-8c22-410d-8ce7-92a94878b09f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "560771ad-630a-4285-9bc1-7f469f3233e8",
        "cursor": {
          "ref": "e135ea46-75c3-48b1-9aba-ee34712c4736",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "708fe671-9cf9-469c-a6e4-80b4b2a63c32"
        },
        "item": {
          "id": "560771ad-630a-4285-9bc1-7f469f3233e8",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "edb5199f-cc78-45f1-8faa-fcfdb3276c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96fdadf6-d421-4e68-8cbe-90564b41e177",
        "cursor": {
          "ref": "af794cae-2d11-44ec-9c25-ea418fc4d5cb",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "b30e2005-dbf5-4bdb-90e6-8e75969c2d15"
        },
        "item": {
          "id": "96fdadf6-d421-4e68-8cbe-90564b41e177",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "d3ba2c4e-d350-4c2b-ab37-ef2def656049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49ff4eb1-5af9-43ae-80b7-f601ddbb2271",
        "cursor": {
          "ref": "fef97d6c-4e6c-434b-a0e4-4393299d7cc4",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "edf47009-4b8c-4fd3-9962-d53867ad2bc6"
        },
        "item": {
          "id": "49ff4eb1-5af9-43ae-80b7-f601ddbb2271",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "cbe719fd-8567-4cc8-ac78-b01d0ddc47d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8c48128-a7ac-4f2e-bb6e-5701d2d9aaca",
        "cursor": {
          "ref": "c9814d88-e423-479d-9312-820047abdc8c",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "db610b1f-1099-485b-83e4-fca319c8d0f3"
        },
        "item": {
          "id": "d8c48128-a7ac-4f2e-bb6e-5701d2d9aaca",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "bdd54dab-fe18-46a9-b77b-974b4c90595c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b260a937-800b-4b13-bf9e-63dd5240ecc9",
        "cursor": {
          "ref": "d9b73870-df75-4198-b91d-41e2234b29d4",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "22273b57-28a5-4acc-931d-1f768cd7e25f"
        },
        "item": {
          "id": "b260a937-800b-4b13-bf9e-63dd5240ecc9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "063675b0-aedc-4b43-8669-dabdfbf86f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68344965-25fb-4e7c-86ab-f92332bd39b3",
        "cursor": {
          "ref": "05518bfa-3888-436d-ab24-b2f581cee82e",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "53f73efa-54b3-4829-84bd-595ac7bc46b9"
        },
        "item": {
          "id": "68344965-25fb-4e7c-86ab-f92332bd39b3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "9d2d1a03-8702-4afa-b485-97b683d9e1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1455abad-8924-4057-a04d-11c0cea169d6",
        "cursor": {
          "ref": "77d57912-fcd6-46e6-a47c-21dfc3fd4e30",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3869e478-b62d-4f2e-b60f-fff62cf9ed4a"
        },
        "item": {
          "id": "1455abad-8924-4057-a04d-11c0cea169d6",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "db2489c9-23aa-4866-9e27-2dcd7b377ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d310003-c0c1-418b-a4ce-1a375f050a52",
        "cursor": {
          "ref": "a22a36da-ffc1-4492-b27c-c289c98b54fb",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "61c73c07-e9c6-4107-910c-2f8ca5c761a6"
        },
        "item": {
          "id": "3d310003-c0c1-418b-a4ce-1a375f050a52",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "7f311268-6de5-461e-8afb-9a956a42c9ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c40d79b3-7e35-4687-bfb5-48d50a64e08c",
        "cursor": {
          "ref": "0f9654b0-2a6d-4e44-9baf-396961f8d467",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "5bc1b46d-236a-49c9-84b8-d2fab6e7031c"
        },
        "item": {
          "id": "c40d79b3-7e35-4687-bfb5-48d50a64e08c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "e5288c82-025d-4c7b-a325-27584a01a6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908377bf-da16-4e0e-bc90-b77b093cb679",
        "cursor": {
          "ref": "2ea4c2f8-f5e7-4482-9667-ca4d32b6981a",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "17369ed5-e098-445e-886d-d0dc9f4b0dd1"
        },
        "item": {
          "id": "908377bf-da16-4e0e-bc90-b77b093cb679",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "b639d2ec-088d-4d5a-bce5-4b624e0092c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "803ebff1-5be9-4e54-9eef-d9e1d4f2f1f7",
        "cursor": {
          "ref": "fe9e5edd-7647-4160-b022-0e4c608f9f9f",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "6c716571-36cf-4698-930f-1bc3845666fe"
        },
        "item": {
          "id": "803ebff1-5be9-4e54-9eef-d9e1d4f2f1f7",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "f19c2fa9-29c4-47f6-b1f8-8641500a519d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edf8948e-9108-4a73-a057-70e958346651",
        "cursor": {
          "ref": "c6f6af00-9c67-4d1d-b53b-ed6da54408f0",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "f6d122e6-522e-4193-b95a-f689593c8744"
        },
        "item": {
          "id": "edf8948e-9108-4a73-a057-70e958346651",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "c2d88476-9234-4372-b718-c3b197e96ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbe02237-0af5-46a1-9779-5ce283f094c9",
        "cursor": {
          "ref": "5ee06580-eba8-4a08-878d-9495a30f0453",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "180daf9a-34a7-4697-bb99-3260b37b2d52"
        },
        "item": {
          "id": "cbe02237-0af5-46a1-9779-5ce283f094c9",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5d4d73e4-040f-4411-b564-0cf76af91914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dde90923-3661-4487-9585-3059c0277d36",
        "cursor": {
          "ref": "1d660d6f-afa3-4449-83ab-c94fbb3df960",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bb072921-5906-4fd2-bffc-f14f8b1524eb"
        },
        "item": {
          "id": "dde90923-3661-4487-9585-3059c0277d36",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ccf57c01-b826-49ec-ac9e-56c27fdb11d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3750000-b811-416b-9c55-99a82a6aff99",
        "cursor": {
          "ref": "229c954d-c702-452e-bf41-44138442cfe5",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "a5367a66-2be7-4cec-aed6-77370db61710"
        },
        "item": {
          "id": "b3750000-b811-416b-9c55-99a82a6aff99",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1c875684-352a-43f0-9b6f-ddc726248857",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dc49ed-0bfe-43eb-9065-f235d09cdbfd",
        "cursor": {
          "ref": "5396c3f7-06d0-4c37-bec3-2f93bd3a728f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "94c38e41-7b6c-498d-8175-ee056afcd8d5"
        },
        "item": {
          "id": "a2dc49ed-0bfe-43eb-9065-f235d09cdbfd",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9b76011f-7f88-48fc-a834-f4d98b6af7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe5127bb-3b8e-4c1d-88af-af3822f6c6fa",
        "cursor": {
          "ref": "a9f69f8a-6dee-4bbc-8081-af92884f6b60",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "81c72064-0e41-4e13-bd56-9a9b72521be8"
        },
        "item": {
          "id": "fe5127bb-3b8e-4c1d-88af-af3822f6c6fa",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "40497380-0806-4dec-ac5b-6a2b7d2d37ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 91,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a17a8a85-f408-438e-aa69-89a4f2e8fd2c",
        "cursor": {
          "ref": "7e5f40a1-019d-40ed-b25e-1b3a7dc5c00b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e9078548-f501-4b02-b806-dc2db15410ed"
        },
        "item": {
          "id": "a17a8a85-f408-438e-aa69-89a4f2e8fd2c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "2c276d53-a561-4d8b-b189-5a1a9f56a8a8",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "b063a2ba-031f-4aad-9071-04b2d5b2661a",
        "cursor": {
          "ref": "0f5d1b65-6957-4003-aea8-ed46b4afff5d",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "94e03cc3-e1f9-4e36-a540-d4616617754b"
        },
        "item": {
          "id": "b063a2ba-031f-4aad-9071-04b2d5b2661a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ddd4800a-4fc9-4a77-83ca-a595d196db09",
          "status": "OK",
          "code": 200,
          "responseTime": 182,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bef531a-fa10-4b61-b2fe-bb451a40081c",
        "cursor": {
          "ref": "4f797bce-2fd7-4ae6-b1f9-6db741092910",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "2096cbd6-d4e7-4de4-9fc9-6e328b71e997"
        },
        "item": {
          "id": "3bef531a-fa10-4b61-b2fe-bb451a40081c",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "cd5ed0dd-9f20-4ce8-9656-96f926248018",
          "status": "OK",
          "code": 200,
          "responseTime": 236,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "a842bb0d-eb34-461d-9347-212cc776547b",
        "cursor": {
          "ref": "97ae4194-7de0-47a1-a660-352388f0bff0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "043f85b0-2e74-47ec-86b0-7da1360d3f29"
        },
        "item": {
          "id": "a842bb0d-eb34-461d-9347-212cc776547b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "869021ea-1ce7-4d07-8caa-9f10a1a7e4e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a842bb0d-eb34-461d-9347-212cc776547b",
        "cursor": {
          "ref": "97ae4194-7de0-47a1-a660-352388f0bff0",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "043f85b0-2e74-47ec-86b0-7da1360d3f29"
        },
        "item": {
          "id": "a842bb0d-eb34-461d-9347-212cc776547b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "869021ea-1ce7-4d07-8caa-9f10a1a7e4e1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb93d4a7-17f7-4093-bd64-2ed2e4b3ce20",
        "cursor": {
          "ref": "d7ba70d9-24c9-424c-9f5f-6134a2935ebe",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "0023f9cc-4eff-4dbb-bfa2-26a863d577c5"
        },
        "item": {
          "id": "cb93d4a7-17f7-4093-bd64-2ed2e4b3ce20",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "f84be42f-3a5f-40fb-8f56-59c55de5aac9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f578df4-380e-4a04-b02b-5a1f5eb018dc",
        "cursor": {
          "ref": "0518b36b-d612-471d-a0bc-3878250cac32",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "96aec7b0-51f1-4003-b723-5340e0c97884"
        },
        "item": {
          "id": "5f578df4-380e-4a04-b02b-5a1f5eb018dc",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "d173bbc1-4506-44bf-bf5c-0eea337798aa",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 87,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}