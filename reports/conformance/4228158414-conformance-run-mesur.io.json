{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "c1c52309-1d5d-4bb1-a9d0-ff7cf8100abc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "58b48e03-1230-497b-b35a-0357afa887a3",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4539254a-2a8f-4fe2-b149-13146b2cbff8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3c48e444-8c5d-4a68-a75c-5fec1574f70f"
                }
              }
            ]
          },
          {
            "id": "e8cb3d58-f0fc-44f1-938b-2d7c8801a43a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "78a0c428-1d71-42ec-a709-d8a63e04e070",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3c87d2b7-3df8-4856-b575-3b212d393177"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1a3bc1b3-fc08-46e7-98ef-8ce58c150c95",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "0b2bd204-20f0-4541-8565-5a675ec6ba35",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7eee6f76-4dfd-4afa-abd5-b24b8059a0bc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7bd6a1c9-2993-43fa-add7-9cdd107f48e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6c09f2f4-68ee-4ebc-b337-126ee817721b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "674313bf-8743-4c2f-9830-1e841305812f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "26e5e47e-31bc-4f71-923a-94f5f17dbd33"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b22ffe78-ee02-46b2-8f5a-8504712a7c6c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65ef7571-7a45-419b-a139-cd74f293f5ad"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "04f80b6c-0e59-47de-bbe1-c0975518214c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "922e1bfa-48e2-4c12-aa11-b3e651fc1d09"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a0afd7c-5bb3-4d3e-81af-3affaccf395a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "23a4504c-87c5-483b-beba-54a0ec92b71b"
            }
          }
        ]
      },
      {
        "id": "997f9894-9823-4260-b50b-9a4c85acef77",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "095d1984-6875-4f3c-8743-1e01a0566f5c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2260f03-d441-4ad1-9e16-018dccb73dc3",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a27eda36-72e7-4615-af0c-3582b8c14f69",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5321390-66c3-4fd4-be36-9b8c46a92ef9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d0de3186-fed1-4bf3-85ee-b5cd06a356df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc580942-12f8-460a-8204-6f1c53d8f8f2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ae4fc0-ec65-44cc-a7b9-c2f1136fc5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ee3afb3-83be-463e-940a-fb8c2ccba38c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "228039fa-fad9-4678-9348-c5d40b1af33c",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "119c5083-3084-409f-a719-70c60ef3958d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cd49e89b-20c7-4eca-969b-818b087f04ef"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4c79a6fc-b465-4484-b791-6ab0f60af8c5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81fd3433-0d4c-47c0-b8b6-1cd5a3128139",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff75235-6c0d-46c5-811b-d004b29b6792",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96939b03-df99-4344-8d4e-f364769aa884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caa179c1-5403-466e-a77b-e84fafc8d803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "451fc8ae-5022-4a60-b879-62056d01ee14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4d6e626-2555-4da3-8168-7a3ffbf5584d",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d0314a-3806-47bf-a307-e9a649e2a223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24939cb7-682d-4f92-b0fe-774c1b0e9bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670ba7f6-d197-43b3-9019-7ffe1e7132e8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "7d680d45-aaad-4893-89a1-5b2a68253038"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e692c1d7-067b-43ff-9899-f51941afb97f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "83813559-6da1-4dab-8da4-ade1fa9921e9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a306e9f6-c409-4398-bd13-0d3295ade7b3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "1bf9d9da-5b05-410a-84b6-ffe4321a769c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9eb1e084-e521-4bca-bc5c-11ee3ac66460",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5c44a9ad-9bc8-482c-96e9-6309f3b6119f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "947b9256-fc66-456c-a19c-118449e3f19a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39f55a99-f04a-4309-b934-8d1d5775ec8a"
            }
          }
        ]
      },
      {
        "id": "2e2df11a-9b85-4710-8f6b-508c03a89026",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "328cd433-ba8e-4e8a-ad48-d6a3b194eb62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4f293b6-d9c8-442f-8c68-0b065e8dc6a9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "77e03702-c5cb-4b22-8f64-ae4420075946",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d4f3ca0-8080-4dc7-adc3-cc1e0bd240b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e87672-5d42-4cc1-b7fa-ca100d7ea5e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cd9829e-e252-4617-85d4-0ea15a187d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "18ae8175-7c67-4085-90ea-09b971ea9e96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd87e873-d739-454c-bc11-fe12ea665184",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04cf750-851c-4c17-a603-331aaed17dbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8c3ea1c-6f44-482f-a3c2-b5063e4ab35e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06a5eb0-a4a5-4f39-a2ac-bc723b502b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "88182570-c08b-4c33-ab55-8d70d5dd9103"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb70ff1b-36be-40c5-935d-9e88ad39d96d",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59f17e0-0939-43e7-b09c-b92e945aa3f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "185f69a9-f6c5-44a2-b12b-515948547e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb643101-cdcc-4830-811d-b196761799de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1952a3ab-9539-4dbb-8e3c-f3b3a52f0632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedcbf3d-28b7-481a-8633-fee7bc871e29",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f7e8b52-deb7-4876-812e-11658c9988ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80ab9ec6-262f-4ee3-a772-1de5eba463ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a09ff6c8-43fc-464a-93d2-9f4cadf775ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92d51cd9-ee43-4b33-aa5b-923fb325a17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df89aae0-5a7d-4e4f-9715-354becd7f345",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0dc4040-0530-4cbc-9d4c-cd2dfaea6e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99308f6f-1606-4a20-916c-8922eb24d34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b2f8ff-540e-4df5-a9f8-cccf78b08711",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ecfc07c9-c08f-495a-b38b-ae5ad7e2dc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd87982-1ce5-4b22-b935-b0d0113de17c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f50c4d8-65c0-41e9-855a-e85e83a305ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b3dd795-1739-4c35-9002-9a5b9946bce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c02070c0-40a4-4a95-9d3d-cd1efb82d816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e9b02fb-ff10-4b89-b826-22d268dacf53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93bee40-d46c-4af7-b1a2-0188310fa5db",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25efa610-8b77-4eb4-9303-a9eb3a741103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "766a035c-55ce-4c6c-aaf5-81d5575cad8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "390222a6-d11e-46f9-b0ed-6b7c53bed825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce9fe40a-d551-4485-b6a2-f301d108e4c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97a5920-297a-46c5-a9b2-f1e0665c0439",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfebdf9-496e-4a5a-b40b-fb390bb52705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6a61442-a872-4347-b5ae-a27b208e9eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d273c30-f478-4b5c-a5c9-e4f3fc449b15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bc3453e-ef8a-4fcf-b8dd-31f8feb7280a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4859251e-9ae5-4f86-812c-a329d075584c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f502e598-f82b-463d-9573-1fb7a50203d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1329988d-caf3-4f21-8575-b1a35cef5376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5abce7-a6c8-4dd0-bddc-700c03f46e6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ec3314f-512c-4ae0-b09f-c7d428129790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c8962fd-a6bb-426a-bfa1-be79882f1157",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c5dcae-2a2e-4fd8-a805-3ca3a6fd0538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b3fd596-6dc7-4c5c-955d-9c85c26d94bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeaeb642-e59d-4810-81af-f67d92c0f1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0d407eb-4b6a-4b59-bef4-774dc39aa21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f7dd207-980b-419c-971c-ab520aee71e5",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2a60e2-1c23-4c35-a015-08494e1db171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221a3afe-5ffb-43ba-9c6b-fcd297b6b4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1fb4ca7-66ce-44c1-adae-28e2c2038951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "87d9bd14-39d2-4dbf-b09b-85c862e6c627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3bcbff-5974-4cb5-bdf9-8b75d6d905db",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87eed752-f36e-4745-82f7-03494bdb8509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949e2dd2-a8d6-4c05-96e5-491e300aaf19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0f27c1c-58cc-4320-b810-5f7cd4ebc785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f00d59ed-149c-4c50-8a3c-58de5b7bdcef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18c4b161-4e2c-4c3e-8937-1cc374c319a5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b30cb215-8f03-40af-9705-4cd83e2df93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7211291f-ed78-423c-993d-d4cbdf415a18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6c20b7-c64a-4a3c-96fe-c6d3f856b949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abd26ac2-14b4-4e5a-96a9-73e1b7b0bc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca38af1-42db-4a47-adc2-f5da59893696",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b88c5459-f164-4614-8604-eb4420b3b709",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85421ddf-426f-4a75-95e2-e7e029301441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82613e94-4272-4eb4-aaa6-52b1bea522fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec1cd8a7-0a34-496f-9820-caf0a5b5d96f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b1a8eea-6a8f-4bcd-8f2f-a567dc379eb8",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c945bd16-7a2b-4025-9a5b-18cf42af3ef4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eafe3a5-8b09-422e-9aa2-ea19249af794"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a074b8-cae9-4ee0-939a-a0e4742f5cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "977f80c6-caa6-411b-a8f6-cf53804914c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2943545e-ddd5-466e-ae7e-b887b5ee2765",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b93c444-d07b-4f91-b53e-095ea6db5cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4c14bab-26e5-4900-95f3-4ca37b090e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "665bb448-eb67-42f5-8d9f-34c01a8720cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "344528f9-4dae-4ccd-aec0-5af137221115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02ea4a86-d270-4ede-bd6b-b4691ad70c91",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f260b78e-1786-4031-8a47-127de5ac951e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b773661c-8abd-4ac0-af06-be858dce4979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d528698-25d0-4dd2-a4c5-bffdb845ae1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd062ceb-ae37-41c9-b687-9d814773b438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ad47d22-2334-49f5-9d81-39fcfb7217c2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2809fb-6ea6-4727-ada2-edcfbfb5df1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f075ec5-a217-41db-a322-080b1da093c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecd237aa-8388-4a00-b5d0-95794828e00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e93ab66b-2ec2-47b2-bcfc-a5b0a242d32e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43cb3c5f-325a-4a12-a78b-8a38ae63bbb9",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b96e0d7-6761-4a2c-9c77-8974585f6843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "425321c9-916b-4b7a-aac0-825f40da4b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "929e7195-a47e-428d-ab60-ade200a637f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "04572c13-7ebb-438f-82df-b8df4f48b879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d65f174f-f14a-4fda-8f16-2139f9035ed0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "224434df-1cda-41b8-ae81-02c225907c1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09f7c7c9-23a1-4702-a8a6-4293f58dcfa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b370c546-29a1-4654-8b7f-f972d96f6927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b0c5ef1-87d3-4d2b-a4f9-b6bf58bf5be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f62143d5-3936-41f8-9757-8ee74b60815c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8384491-6917-42a8-a5c3-fbebbf132f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de8fe85-c8c7-4eca-a849-1829c5659ee6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2e6a9f-68be-4c6c-bef3-c9bf87004d26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcdc37ca-a950-461e-ab0a-1b16ee6a402a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abb392f-8694-43fe-9854-2bad02b299bf",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca47264e-5e48-4e94-8479-53792da94ffe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bda49e56-d199-413b-aba1-c6559e14c235"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f984cc52-7be5-45cd-9a55-a64e9efdd10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "03a4e5ea-e445-4f0a-809b-636f403b9b3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b23367b-1959-4689-98d9-d408e5b06a75",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a45ab8-ebae-4008-84d3-f7d24984d8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6e4644f-1213-48bb-a5a4-8288c86971dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f88bcfe-454e-4997-a4a9-167ea3e1a1da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98e59095-b1b8-4db6-830a-91644ce53d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1f5fc43-1dbf-4977-a584-cdd25cad1eb0",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfd69ff3-6161-4e62-97cf-975da72f8248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfa58157-759d-4a48-b982-0a038c77e516"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f2e9e1-49d5-4830-9f71-d8844bed7587",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "47fef551-d6c5-4083-92bc-a3e9a3722d21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b51ccea-b15b-4d95-ba1b-313e53dd661f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bbb6fe-b07f-476f-8789-51435706e97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43aff9b8-10ec-43d5-b13c-4c7976a7c979"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82ad36cc-26cc-477d-967f-8deed1e8243e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "39689cfc-0729-4ca2-9cd4-909d7c038289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7e183bb-a3df-4cda-8004-1e4aa0d21233",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c223ec-9e90-4426-954d-44d38e139383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1067635a-dfec-43f1-8929-872d41743048"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f621b76c-36c7-4e23-8707-0e8b5cfff84f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c54e8b57-443d-4e23-a4ee-2d9bdd43369e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483af66a-406d-4972-9b37-c34b5557145b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6cc2650-0de6-4b3a-b88e-c0e0227c8f80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0ccdc9d-2f30-487a-bb78-26e88eff2d6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "351c69de-8cc0-4e31-8955-185338475833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f8463b2-9153-4bf9-a8bb-0031194ad466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "445031e3-773f-4972-8893-181acb5877d3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "088d6e7d-a57a-4b13-b391-2e5468e1fd7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80d681e-b126-47cb-b187-7dd340960a22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b38643-f59d-48d8-aca3-a59cbd33a106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f220f15-e4d1-4933-9e54-b710102d38ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354d390e-bdc9-4d0b-9df6-aaec70eaf72c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3799fd97-8a8b-46e3-bfd0-6464400524d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f39a3cd-bbbf-484f-ad29-1e2df11b582f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9040ba-b743-4ba4-9c3c-380132188a2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2472804a-4d52-41cb-b9e3-b69018b9f853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b100314-7f70-4247-9669-e3cb405f75cc",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e474817-9ae0-4e96-913f-dba9fd901ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d968b75b-c7b4-457f-bc17-ebee385f3cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f778bfcd-402d-47d0-9e77-8cf6bccc8e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1da5c3f-aaf6-40b4-9e7e-4811082fc085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409e8e3e-ea89-4a3d-b9a3-6bfbb01efbfe",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e79dbd-b1f0-48a7-a9d6-685da495c8f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e717f1-c10b-4853-b0e1-fd116361df60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c935e8b5-edb8-4d6f-ba16-ab93dcea95c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "283e8e04-e925-4170-be0f-8583d039aa80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de641ea8-eb9a-41c8-b163-e6ce959a7b39",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1bc3e87-34b6-4746-b6b8-944e0e04d224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72f60486-b794-4f27-a3d9-0f1ea9cf5f4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0429a1-e9ac-4ea3-a81a-4cca2551d96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b72b1be0-22bb-4378-a998-f43067d9b5be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c48ab2be-996d-4129-a9b8-f720b5d64dea",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c20aa3b0-928c-49ab-9a3c-69037a4cdca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eca46b7-7f39-47a4-93e6-c0ce36574c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1e60d67-6ed8-459e-bf03-b021dbd668a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e09a29c2-6710-43ab-95ef-9e381ec302e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480cee56-001b-436c-b86b-f51eb12be02c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b06015-3c25-4e06-b0a4-9497c11f3c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8fcbd7b-4e8e-474c-94f2-3482850247d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ceaa72-5390-43ad-a7ec-a5bc98c34b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f3c0dbd-a1df-45a3-aadc-6cf8926da920"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40c7062a-283f-4941-99bc-309e1016301b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fe23c90-de93-4e85-b0b5-8332cb0f8cc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab05701a-eaa4-4ccf-85bb-593937ca006c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec877dba-e03f-419d-a2b7-87df63bd1dce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b6b7e947-e8f0-434a-9a95-12534e0babcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15783dab-44b9-47bc-bc2e-298b67660d06",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "336fac5a-0a59-4c1f-888e-ab0ef98721be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8002657-9a3f-485b-9d0a-6a7abc70c953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae7ed9b-8bf1-471a-8871-74be3418f46a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "388ed8d2-2661-4d66-87fa-f3d22d00263e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb1ed71-88e4-4289-ae9e-d8e2816a69f4",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bea3a0f-5f98-4dea-be25-61215dd7a21b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d051499b-a663-4807-9713-5f8aa2e5fae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df56fa3-ed31-4b3d-a8f1-83f0d35b1d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7f3fc00-1d82-419c-955c-71c0a0145645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3200d45-a7d9-4ccd-806d-d3623fbd9f83",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad92591b-9cd4-49da-bb74-635101f50aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52dc56a6-40f8-46d6-8fa7-f6be474ff92e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cac7ded-d88b-4950-9f03-7b00d6174d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c497712-cb30-4a15-b0d1-3a2e459570c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ef5797-f355-4637-831b-5de0f9a32ca4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff273d8-4013-4b9e-b7e0-f8559a424ec8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba491671-e15e-4202-b39c-5f5891e3d2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e0594d-5492-429d-ba8d-dadcab6d6d88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "72089489-53a6-4247-86d2-49a8ff6c9881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7483ee87-1c3f-401b-94c6-f0e361b8af43",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bb7c5b-e9eb-41f0-a2ff-aaa87f96f81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5128eba8-55bf-4f90-9a34-82a3f0b80369"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bfbcc05-1504-4601-afe1-29a3aaf28598",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "97777c19-50be-4eee-88d8-c9535d4098ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87995be-ce24-42fa-ab78-f8df51740b7e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29bc7c93-a5e5-417c-b7c5-2a35b2a907c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e957215e-63c7-42a2-a9e5-64d803c3bc42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70ae4d32-e2d4-4698-a596-c3682accf87c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f12c87c-63c7-46fc-a637-827476902900"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88dd636-aa3a-424f-9830-462506ea82c7",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce385451-9886-4d88-88e5-8daf7462ebaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c330335e-4f65-45cb-b2f8-07ff1c83f77d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c7456ac-abad-4f79-8e24-91461736362c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4ea228-26b2-4b58-89d3-94addb1ab384"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49c5667-323a-41b6-b641-7b8801cd0adf",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f5d70e-1dea-4df3-a1b3-5cd820e6077c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "218003b1-988a-4997-807e-90eb8549059d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1a8a109-9774-4a47-ab1d-198b84622741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1551b1cc-87c2-41c9-95e7-2daee4252106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57fbeed-bf2b-48ef-89d4-b90693ca9e92",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7118ed5-61ac-4219-83bc-418c5ec9f827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651cec6f-6fd0-4bfb-82bb-06f6cf5e32d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c01cfe61-27d1-4885-9621-b885ae089380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "d264b944-ea02-4045-9172-f951d63569bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd695f65-2914-431d-b867-6df7acda8ac5",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ecdc96-306a-4a5b-990f-8b38c8266393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c682f444-44a7-49d3-8090-032e85810701"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81169dfb-0a41-4fba-8b24-7384b0e8c90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "649886e1-f84f-4b4d-83f2-c7210e4f0afa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ed1a809-8e52-4640-b4ef-fd9ac708b665",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea7fe6b4-5df4-43ca-b630-4ada87a76d3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47a4bb3-7648-4a35-9d44-0e7970866cfe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a958fc2c-cd7a-4551-903a-b97fc0a1e438",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "09e959d4-6af1-4b2f-9272-8a48d32e1fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3794f0-d63a-4e6a-b26f-47645b30f641",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2302cf52-4926-4420-a852-1848a7baca8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41140acf-4328-4f89-8334-1edae1644695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eede0d81-b391-4557-a96d-0e15880e7895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "87de2ec6-4f7b-405b-b84e-53b1da2f38aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc53d1c6-6dcc-48d5-a266-3f0495620139",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2cd80df-0b5d-4990-95c2-ea46653302bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5ab29e-7f33-4d35-94a8-70e4e77430a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fd90dc-8c2b-42e2-b886-08105e0e5120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a1469869-626c-4b52-b2e9-2a824b39c6c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63224cf6-31e4-49b7-954a-9724aa221ca4",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5fbb7a3-a14e-4c64-8fdf-5c66e7a08360",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08658a96-a875-4322-beba-746b233cf8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc80713-73ca-4b41-8258-8ca3fdf218da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d78d400e-d6d3-4444-8a9b-b09598e74e36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87c5949-77a8-4f4d-b3cb-a6b19a117182",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b368e9-5912-4b00-8a96-8ebb1dc1d841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9c0c9b4-cce9-40f7-af88-d1d2ca5b35df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cf8c09a-10fc-4fe0-8478-22004d20f82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "673a8b65-623d-4c48-a423-521d06118ed9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55c0b14c-dc08-4a51-907d-c239eaf01a0c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045c342c-2a3c-47c6-a11e-614beb906864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bf8f7a3-9d9c-4cb7-b15b-704d2da58dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd6b4ef-be43-4922-8877-544472acdbe5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f631ce0-45ac-42e0-9d58-5b7827b84ef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55920d9e-773f-4c92-98dc-7a7555a453ee",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f67238-c86f-4be1-9496-d843d3560ace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b157d186-d7a1-4a51-8c68-23e10c13d283"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8f48240-5f22-4235-aa43-f988977caa59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e349023c-1cc2-40bc-beab-c9df5d1dbce9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d4b8a8-432e-4cc5-8de0-672ad3224d17",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b56d7f79-6613-401f-80bb-ffcd88aebae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd73cb9f-68c4-49ce-8417-187fb5169513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f719e891-fde7-49e3-8c98-3ed0572f87f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e38e73a-8eb0-4f8d-8d77-2d9c8d2c4ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3c1e18e-f7e9-4247-a103-b1981905be6e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cad25b3-d4ab-4b06-b4bb-af2c56771617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fb01b74-4f29-49f3-8264-0f6bd786be8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5e356a-3c25-490c-813a-d52ef2a1d5ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "83dbe945-c9b3-4c59-b156-33b7d048f75a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4f5202-7eb7-4237-ab7f-219188b7fd67",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81d6446c-6611-45c0-a024-1a5ae8ee6982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65ff1648-ff9f-406b-9bda-7e3eeb841cb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57e97aa-c78e-4324-b098-f464b8bb85a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a9e7eaf-ef20-4482-95f0-df9a6105ecdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62655b9c-2f9b-429f-8e68-2738510d7e84",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87d60456-834b-40b3-b770-69616490b56f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bab82bc-5cb0-4cca-8212-46ca7d2cfd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4929449-03e4-41dc-92db-9abc227da9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "84b0580b-0f2e-47e2-a0a4-0601b4497de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14f6329-363e-435f-a6bf-b1203af83866",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67df2ac8-afb4-4e02-b198-faa4c5bff786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04b199c7-dad2-432f-8e0c-15812a84d983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b365d2-753e-44c4-b754-c450ba5c4453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "317e0a90-9de7-47cf-9447-a14519cbc340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3bb79c-231b-40a0-b3ec-9fd0b5dc131f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd642e7a-b18f-49d7-b20e-306ba38d6445",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bec3aa00-8825-4d3a-a156-b6ba5e0d55be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5f2b27-311e-4dcd-81fe-92aa7bfe917c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e00de10-7eb6-4b9f-8b35-152762df32d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4a93e6f-02dc-4e72-9a69-922884d5e6f2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7eb6d85-29c7-4798-a830-78116329f729",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33ab92c6-af88-4c5c-976a-db7900efae91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c1abbc-d2f3-44a4-8728-f6f4c1b0170e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "900e0750-be10-4847-806c-2f56d274785f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f07df06-a232-4828-b965-d0f1c8a278b1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a2c59d6-673e-4b9c-aa6c-35550b61ec45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed417e0c-e9ac-4577-a746-89d5028d0854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b2fff27-3061-43ef-ab6f-e16755c2c637",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca117e64-5759-4fba-9243-6631b9ee1bb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d717fe96-d2ca-4168-b387-c17bf3010545",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c6ad22-2d25-45de-9cf0-0645573300fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "940ddeed-68b8-4395-b305-8324081eee00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c789e9-3341-4eb1-8670-b90073b1c188",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae1e375b-d79e-445d-999e-bc0b4d47f1e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87bbf85-27b3-442b-8a0c-b8b5625e12b9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "808dcc17-0bbd-4b49-ac47-7f017af3ad48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed859bd-e866-4406-9e51-814fca35e086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0a1b74-921d-4cf2-b525-c9276264ec3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c3d1d0b-0eff-4d2e-bab4-d1c0f675a4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7f74ab6-114e-4d3b-a8a3-ba137e02a1d9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f41af7-bf4f-40f5-9863-40603188b742",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9003043-a04d-46ba-ab82-2b2b8f138dc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d19125b-a108-44d1-93d9-0273808f8cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c854940-8120-46cf-82d7-0fa8d724226f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17b86acf-c840-4f7f-bbd5-8cfbc53bbff3",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ae42d8-a370-4080-9af5-b2c8d5fe3577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00e3e264-d679-4c75-83e4-a151a7fc023e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f313a833-f881-405d-9b9e-94b92937a979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f359db5a-60d5-4d52-ac3f-33f63be75477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4592682-01df-4507-a31a-fc32c2a7041e",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a4b1bc-b2c4-42b7-abf1-baf557529959",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d529ab9-8eb2-4a3c-bf5d-a233b31cd135"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a457252-3126-46fa-961f-7efbd7d76ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1415ad62-d8df-4a3d-80c7-8a8f65d66029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b11d6e37-7e4c-4e1a-b956-b2f026fd5381",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ef41db-7445-41c2-a69c-26b7c0551a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9eb5cd8-ee9a-4984-81f4-375fdf97c61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c518e4fb-8d0f-43ce-a556-dab81e76cd27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dc36389-43a4-48ad-88cc-22d49afd4668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f899a051-3de6-4ec2-a67e-be51cc1b4ddd",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e8d531-0d92-4055-a358-9f07b99955a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0855e74e-41c6-43c5-a3f5-96f04700ba46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18ae4d7b-ee28-4d1d-b698-449dc2f0840d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dd7da8a2-0c9d-4c75-b546-8a34e2534104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de96b860-b754-4898-abbb-dc06d4cf88d7",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c846d0d-05cb-4709-909f-81d105e1778a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8693a47-ec38-4020-bf2c-ec48ad20ba85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea429d9-d84f-4ae3-af27-214ffc8dd198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "943a0afc-355e-4299-896a-a27b4b8e23e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7c0bf16-d53a-421e-9071-aa241a0aed5b",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "804fedd7-1313-4b58-9681-e76a007d889d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5eeb3bd-fa6b-4755-88eb-4774dec7c91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d565051-4eee-4fb0-a7bb-2dd20e79a8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dda5a009-3e9d-4436-ab59-aa2e737ec3d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46562669-b5af-4fc6-a183-9cd42ff48273",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "132cedf6-3fe3-4f47-a741-a62e985a6f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca6590d-8ff2-4dac-b508-1f55301ef1d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06f3d5f-425b-491a-979b-1ce6d9ad4bd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e48c4291-d214-4fa6-8b1a-7b035c504bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94e6f62-4fa6-4132-815d-582e42f0f536",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1de2bdf-9e34-4918-aef2-9111baf1a69a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e730fae7-0e5f-42d2-95fe-791fe70812bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0db3521-f7f6-4488-a267-75dbfd8d7b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3264502-64f7-4f18-8b05-60d5abb4beb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0811a8-9f7e-48b2-b80d-fdb8cf4de791",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0264156-eca6-460e-9107-da0e73f17c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "410904a1-392b-4dc1-9cdf-0fddf3e8227b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5397d72f-7054-466f-b2e5-d70ffc3a80aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a0853a85-6ff8-4103-9521-88f81cb42439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ac14b2-107e-4dd6-adf5-048419e4b962",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb4579a5-4bd5-4d70-bfac-c66abb398996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f945116a-9b66-4a04-b29c-cc8466f224b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85014cf1-56c3-4b88-a1e7-4dfb85b40aef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1ee3a853-d208-4b9b-8df1-0ca9bb619ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ccd948d-4959-40f2-8f9b-bef5b09812f8",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89dcad26-19d1-4224-b69e-7ee2e70ba140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d45422a-cf06-49aa-b48b-c9012e8b8707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cc510cd-623b-4db3-9ff4-157e2bbdb4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "615e5e66-2f5e-4824-8798-b166641b585e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95b503fa-5d4e-4e44-b04d-3e261e80eaa2",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d91f47b-8ec1-49f9-b8cb-daa668649551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8157d9c-6ef0-4224-81a4-71499b53f53d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6f3792-c91f-4c1f-9560-5da523cc1f81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a6a8eea-3977-411e-8aa6-6587f8c6a33e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfaaff57-9be4-440d-80ca-43eff3e64008",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5e2bec2-86e3-4548-9eb6-87bb7278c09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fabc846-9c63-4dd2-a090-2d8292758dfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7a2c9b-4c5e-43b6-a69c-0b1825479f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "25e636c1-8826-4497-a166-77f2935662c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e395a66-3ec9-4270-b947-03ef340ce675",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68c42413-ec51-44d6-ab6d-e7bc84b3e99c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "667a149c-74bd-4a6c-a2fb-7a1212a54714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aca5f870-437b-4101-804b-b646b8e60dc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "938ae59f-b1c2-4fa1-9673-9334dcdbd5a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c8f27be-7121-4652-8964-b7b7a34811d3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c38eb5-a4fe-45ec-a595-825dc1e8aceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac1a26d5-9362-424e-8924-40d4d9b82e7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f99ce5bf-9546-43d4-8372-df57fd04433b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cc6e12b-e198-43e6-8599-7106d4df3f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ea1f1e-3b89-439c-8b44-5b4dd42b83f6",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c871524e-4c40-4f30-a514-54ce1a69e7da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf062061-2a13-4ba1-bce3-c408a6aa5259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d268a3-ce10-404e-9ab3-1aaab862e7a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "141744b1-a51e-4bc1-bdca-ea551db1dc81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4b42e4f-f328-41e5-9c0d-852abe991b15",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dea7564-9d75-4e19-b624-e1d5f04b2b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4aaedea-9b44-4d51-a99a-e6b68607b0dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d37b8e-f71a-45e0-903a-32cb92d56c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "936d267e-88f1-4589-8969-91703634939a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344eecad-aa1e-48ee-9459-548e60d32d5e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d19382e-e837-4aae-9074-9968719f9e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02360742-af0c-4001-9004-27456c9b14bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff3af446-e874-460e-888f-7ed505d2b78b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "29ee8697-093a-4611-8e88-58ff1e773cc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7d1ee78-b9ec-4d02-9be3-5d2d1ade4f64",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7087cd0c-4b95-405c-abec-09ab4be13f1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569112ac-7456-49c0-9f3a-67d5672b1a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56bf3c8e-b164-4bbd-b1ba-fbd2827e1a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "746fa3ad-d364-4d8e-9279-152feea284a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d749f71-53de-43b3-a8d5-d2158dc7556c",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4652edc2-7af7-412e-be8b-f4c5002b84c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0075c07e-8180-458c-9cc2-48fce8ab874f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6a846f-9caa-4f2b-bd91-240c88afb4f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fe43b0e0-2c59-4409-b1a0-ad6ce38ed341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13c1f6fa-935c-468c-8aea-8f0d219a19ff",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "113ad6a4-a5e1-4eb9-aad8-d67939f4b0dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5f52dec-bebc-4a8f-ab94-540c927ade4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "350c0735-be76-4929-9c2b-ef465d0d47fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bfcbe142-caff-4e49-a6f4-7d1c74f57003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a06d580-7c47-40d8-a0f9-a6789c354d45",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c70795b2-6431-44e8-a052-579a970e0d87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9662ff1e-fef4-4711-9b1c-2a4a2fd602a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c541887-8451-4146-807c-41bad4a2a5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27693179-5030-4cbd-92b4-febc31b5d0f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "255d6421-df33-4afe-9e28-aa417f55bda5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "773ca869-3107-4a76-9d1a-285335803224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec741cab-f444-4063-9f2f-73ccf05d98de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068b5f04-ec70-42fb-baa2-93419f6474b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccbaa09f-121e-4f71-bac4-6304f746ce4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9655f2b-5894-4a7c-8534-42cb58d6dd18",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1699452-c149-486a-93f9-e9c00202e71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43314913-3a8d-4cbe-8b4d-62617dcda549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b30ec677-43b8-4002-a458-e0be5295bdc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ee76756a-9db9-4993-80f5-e41ee1956cac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a180ce8f-f003-4142-a80a-6a3450bb6727",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0e917af-5ca3-4a0e-99e4-ccd68e8d90d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01dfee5-6b78-4aa0-8a25-483110f60288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0b529e9-a61c-4786-9c0d-3f7a3f36aa30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "30e10bc8-be94-416b-b02e-740bd5e775d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f313df8-04c7-49a0-8e64-c390a73891ac",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90604676-5487-4516-97dd-2246a63cf37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "628b489c-66d3-41da-bad6-4c2ea9e2345a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30e04612-21bb-4418-85ac-3854ba9b1bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc28607d-3e2e-4525-b383-fa551514ad38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d694dbf-c490-4da0-8110-1db9bbd6c0e1",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97871e91-85c6-4924-bf9f-b5663bee33c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aca4dcde-c60e-4a84-8050-58c5cdb48513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba50b26-40ce-428e-9c55-0c0312fb26a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "80c5b9ae-a95e-4492-8b53-ea51a2a8e03b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ca83f97-a440-4518-9315-87a1105da53f",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6b8db00-80b7-40d0-a669-5b2408cde79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55b77232-e50d-4f6b-b379-9589378e1953"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b35b082-6cd7-4fd5-9bea-a75de895fa61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbb6bbe1-81aa-4fd7-b929-aeaa98341934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97960668-78fb-4868-9f1b-794284ea7e04",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91429000-c5b0-4f40-8d55-e2eedd80bdd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "23e32b1a-d571-4b52-9a16-075fb6bc7f72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fe0b961-5b59-4d4d-a980-2f6a2c563d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6020a42-916e-4eeb-8bbe-9cabb0bc76f1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a7695c6f-27ef-411b-8f44-5713bfed547e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1f116894-21b9-45d7-9e81-a139cd54b6d9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "961f1d77-9614-4e30-b931-9aa238a1016c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd7ccf6b-06b1-49b3-9ba2-e9399bcf709b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "361a84da-9272-4a6c-827e-f816dbf91cee",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "5d4813bc-80b2-47bd-807d-bd5f0f9830c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f4d4ef-6bbb-4bcb-87f3-16184dde44ae",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2e47f70-cb12-4c06-9790-9e3bfc61f5de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ce357e71-153e-41a2-a146-0b7b86200345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6fb5fb1-f86e-46ce-9b12-5feda3868a14",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "9581e004-ee64-462f-bf83-e85cae345a57"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99cd0398-af50-49d8-94e9-6d261f59d3a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3f801759-ef07-4da9-bdd2-28b700d89926"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b0850ec-97dc-4996-89ce-92927cbef681",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1bd22669-ce49-470a-afbc-2a8fdb0a46cd"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84a3188f-ae8f-4832-bfe3-d347709d5414",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a7741442-9232-4870-b3d5-807c73fed395"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "49c23862-9250-4746-af5c-7efe42155cce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b28c2412-946c-438f-9f35-732efc15276b"
                }
              }
            ]
          },
          {
            "id": "87e227ed-ede1-4779-9dc0-f8af07841d0d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f1d0e572-bc6b-4064-83a0-4814cfd9f60f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4897325-2975-4c25-91d7-caa49300aa7c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70500d0f-0f96-4cfb-b137-bbbd955d4368"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "99cdeba1-16b0-4acb-8aac-0ca52fa46081",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "39129b6e-3bf1-400b-b6ca-7b91a83e2ba5"
                    }
                  }
                ]
              },
              {
                "id": "0967ef18-b62d-4dd7-8e9a-c5efb5d1cc31",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "718474e3-cf30-4e06-bd65-ffd1a8699389",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dc8015c8-1dee-480c-8248-457d1ed38b08"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac8192ea-8e11-4b37-a1c5-2a46a2afcb6d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "13dca867-d8cd-405e-9432-7abaf26f2b8c"
                    }
                  }
                ]
              },
              {
                "id": "938476e4-bff3-4f7d-aaa6-8619182b92b0",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe7579b2-92a4-42b5-aa89-10420331f7b8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "05d918b2-47f9-4088-9ab5-b871aa271446"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "80c2e8d5-1ca2-4041-a847-845458453245",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0754b501-1d7c-407c-93e4-04d270a6e640"
                    }
                  }
                ]
              },
              {
                "id": "7f33b4fb-6549-499b-85c7-c76f8094580d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "198cc885-d9db-4ff6-965b-6fe72d6dbad6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d3b2d013-d20c-455d-90be-6089ad5dee7e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "359d2925-7735-4ddf-819f-435131e10f30",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "77d19560-a48c-422f-8bea-a8f0964353fb"
                    }
                  }
                ]
              },
              {
                "id": "09d9fdfb-c47c-4944-a503-64353350e441",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "18b846c5-2b55-430f-9cce-3f3017cb405c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "95690576-6a04-4e89-b9f7-851c0bd08c52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca40279f-fad6-45e3-8c75-7e5da9f942d2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b79d22be-b7c3-46f2-8ddd-6765a8ebcb01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "282b99c9-01ce-44e3-8b11-fb21f0003a8c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5861a0f3-5a87-439d-ab9a-1abd0de89480"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3b45ef76-3033-4d8e-afce-49002df53063",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c6376972-918f-447c-9863-6de793b9875f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3283c933-3743-4b3c-b08a-98daedf1c2c6",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "eab7d8fa-17ca-4e5e-9f8e-0e2c293dab2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "598f0e60-6b1b-44b5-b1a6-dce0079484fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c4aee79e-496b-46ef-97f1-31cdf6607336"
            }
          }
        ]
      },
      {
        "id": "3608aa0d-8eb7-426e-adf2-2b5561d2eab6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "334f6a87-6ace-40ee-b7fe-9c6a9b1e8d0a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7d0e8ad9-6a00-4672-94f5-6b4a124ba591",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "62a9ea84-48ab-46f1-b022-e103e9eb37ac",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53f08115-7918-4061-ab13-3e3d2bf3d4d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833d9bd0-4553-46d1-8d14-0cb3a55a278d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20064e6b-621e-4f4c-93e8-edc77f0687bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "92087d02-2fb4-4cc6-b283-aead784e033f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b207f66-3eb4-4e2e-852e-e2ae979fb29a",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e8ed43-35aa-4ae6-97a4-2c4227c3376d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a481aebc-93cf-47c5-ad68-7e309933d904"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16f76e19-97d1-4455-9873-072e022722bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e72ac1bd-9e1f-480c-ad73-d74cd277245a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9d19c8-9434-4566-907b-c2b541dbf276",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59b20f16-01e8-4058-917c-a1f10621a97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f633b74e-d9d0-4174-8ea2-b58d82060452"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c746eb4-5755-4a9d-9812-05383874b6cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2282dd68-1702-4b11-a510-c238a4f5e52e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80679f44-d6f5-4bbe-995b-8ad1dbf475bc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce4301f6-e967-4142-b7ba-38d51b2f50cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bcb90a-eb53-4ecf-a6b9-ff6051308180"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae5c5727-c07a-4526-80af-d793fb00e1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5189be-a16b-4618-a3ab-c33f514995c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aaadc27-43fa-43e2-953c-7463866f7372",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43adeaec-2ecd-4103-aab9-863890835e91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f9c66a5-9bbb-4802-b733-311c24988906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fe74baa-4eb3-4547-a01f-c871fd817343",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "03cfcd11-073d-465c-aede-c32a93af1fe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666c04d2-db8e-4631-9465-a9ec02ba3530",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc164f0-ca2a-4a5b-be38-e28165c9dd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cdd14e0-8d51-4bbd-9ab8-3f3a19c2a0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d015e7d4-fb2f-4984-8af9-aac4f6cb4c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d34ae6f-930e-4f3d-8c2b-5fcf3de984eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b28dca-2d1d-4c51-839c-f5194dfbc10c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1176af-60d6-43b9-aa06-2469c70ce6c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "746dbb18-079c-4782-a2ec-7e7e60d512bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bcf82e1-320d-45d3-9a67-6783f96d7336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f1f49901-c310-476b-9102-8a3f4bea84ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06f4e31f-7761-4124-b904-35208bf5763c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96eb1ecd-4ab9-4305-9866-41d91a26c01a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "348fc02b-4183-4b70-8fec-84471a2e96e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4550352-5f82-4216-8e09-285848da6dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "18556677-dd35-4e06-ad4f-c988bc00190c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "200e18bd-74f3-4750-a622-5f7cae871e5c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23e56222-d3b2-44a8-b6d7-b0ca4f9b7844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8759d84-3828-4c8f-90ba-2cd7671c39de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a646868-bc66-4543-9b34-b8b4e90b891b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "913f845d-2718-4559-aa67-69cb2433703b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04fcefa6-92f0-4400-a142-38f2e854677d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf6dd0e-33dd-4b2c-81d4-4c96db1e93b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7852ea23-76be-401f-867b-dda4cb1a25b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b364d55-077c-4084-8169-b9eb638c260f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6826ab60-951d-4d88-b1ef-203ce2d39eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1409db07-68dc-47a4-8053-7aaebd2fc182",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9edc0fb2-4b3b-45f3-827c-386632fd6a4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "198dddba-ad24-4768-b16b-b5fcd90ccea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc32e53f-01e5-4ead-a20e-b78a36287393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "b1157eac-96c6-49e6-ae85-31b1d217784f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7ebacab-6740-4e8a-a246-9324dc0a5076",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "834011f8-2e40-4aa9-bb95-f514f920f83f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "decd31d6-563a-4852-9652-7fbbf4cac119"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5768a492-fc4d-4100-a4b2-3f91ae8c633e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "66548187-e952-4ce0-a5d7-afaaf7dbf344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a215f610-d6d1-4674-84e2-e3f6ce867934",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64af14c9-4d9e-431a-aa5e-c748aabc9768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed348d0c-d56b-40fa-b524-0892a658650e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa88e5ab-8f86-4a9a-8ba9-0863224ab386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2f975c65-4c38-4a13-bc73-88da9fbba325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f22da21-f642-4445-830a-f858fa81b921",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d174bd0d-bb63-4f96-a4d3-3c45d9869fd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbab8259-62fa-4dcb-a382-85d629b79c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea8b02a3-c2fb-4703-ba9b-6d3fe68683b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a6ac2f-907e-4952-acf6-ed424313200e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52a763d7-f8bd-4514-bf51-f81c4d433e65",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd170b9f-1ef8-4c2f-9314-78b720a52c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c8544f9-fb8e-4759-8c88-77d6524b8319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26cdb98-1a2f-427f-8d47-e4a981540f33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d0e8744-8d1f-4dd2-88ba-1283b4fc402e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89dbd2f-a81c-4812-bc6c-ca36d03b460b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aed6ffe-c22a-4e23-8b0f-5744882de916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cae863b-8c60-46c4-a305-e2c3645ec549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfecfa1-136e-4b44-b2c9-cf3ed25d5b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d9e9c72-1f74-424b-a05e-175d98ece9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b74e693-43da-4584-a3e1-2cf85dbecee5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4bd4113-aa5b-45bb-9b71-334aaaf3b9b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4d237d-04ca-40d2-add5-b05b4a24ff9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0405cd-156b-420a-89e6-5157d32e22db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "da608a01-ee49-4160-8c05-dc7203542699"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ac2d1d9-eef9-4c49-9731-d404cfb23fd3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d81f322-8a13-471c-9d5d-fed27767af5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfef3e62-66e3-412d-8ba9-918fd5401d11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0883686-e386-4b67-9ad8-77dca0e85784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ad7509-b7ae-4c48-baf6-57c9e23cacd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66487b87-52da-4d43-a23e-e73fb9cf1108",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8e42cbf-bf35-4c0e-9687-2236ca285219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad03ec2e-8c46-4a81-99f4-c4a8811527e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c86e30-09e0-4567-8945-fddad4618bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32bcff15-8445-4136-8503-50ada83fdafa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d4e032-39c8-4414-87b9-5b2629818075",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4c49cc9-489e-4c3e-bdbd-1d7bfc067850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9754ab50-7145-4f92-99b9-63d99bd7a144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48649e09-9bde-44ba-8b20-e5b2de8f16bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76f3c561-82b3-4bb0-a562-de8901d345dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b43e009-8528-4173-b7cd-d0f259d775aa",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0516f40b-78f2-4798-a3ce-092bc8849601",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b41b0fa3-a04f-47e4-9694-137613a0ca63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e333bf-b967-4cac-96a7-d3f368eea7c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4c63c3-56e5-48cc-8991-ee5638c7c301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffd92ce-48ee-441b-acf9-1c6ea9edbe33",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c7782d-61f2-4b60-96d7-d9b5e67f9fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c31f422-55c0-477e-831d-1335e6d9f335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edbd476-c021-45ad-b6f6-586ef8c94455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bb783ac-c863-4be8-9a56-297fa0b20a3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61dbd0b0-5793-46bd-8f7f-566f93de79d4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c5f568-a360-402c-91a4-7e1a30d159a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0f5442-3fdc-4fca-8e1f-fedf5ebdad56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d70270-2464-4643-b9da-afe281575bcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2e68941-099e-429e-ad02-642746684ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ff2accf-b399-4a24-890e-fd81cca92da7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f00c1db3-4300-4ca0-adca-4c40abb3817c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7512acfc-51f6-4458-8bf6-2d6fdc55622b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ce4daa-5f1e-426d-a286-4acc84176d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8978b98-0ee2-4ce6-aade-fceaade7ba61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a194a06-3359-4bc6-87f6-2813026792a0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "244f5ac5-6184-49f9-8149-8fcd29d48ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eea1267-1adb-4106-bea9-d61f879d7408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fad52f2-ddf9-42dd-adeb-2aea45102596",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a89862b-dea3-44e8-96d2-0e194c48f0b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2e4827-6bda-47f8-931a-a57bc8c5e1de",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e08a3117-0030-4cdd-972f-2ada30a6b4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ce87b90-379c-4bc6-bccf-a3795c4247d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8e9fc93-0003-473c-b1bb-81fe7fad9708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b80ad64-00d4-4fff-8f49-c41f9b5ab12f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e84067b-3094-4a72-b83e-42f87e0fb925",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9dddd4-9f6b-40de-9413-235e9d630d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f9a6e3a-7d83-497f-a4c1-db1fe21d939d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "729e5b0c-bdcb-4c96-837e-538c57128214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4070ef4c-b501-43bd-a3f0-1b44a8b7a5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc98e86b-1352-45a7-a320-b2ed39b2b634",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae66dad0-7a6c-423c-affd-7ca66a79816d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f3c358f-503f-471b-8666-6e658748384b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "046a39e2-2390-4955-b940-44b74c694e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db40da08-9fca-44b5-b111-2599c059c993"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e11ca0a3-b7e6-4c32-9ef0-cb5b54ea666f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d480aee-13c9-4f86-8615-3b1653efee35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2622429-f436-40b2-8d63-4e697d70ec60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0ab9c4-f463-4a75-9ec3-bbb9915d7cf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0bf8d85f-24ea-4246-85f3-1004d8b7d506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bbc6374-529d-4207-b2de-df08a723eecc",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5830a3bc-1b3b-4199-9472-558f84a308c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2419eb3-ea6a-4552-8ec1-537c82977934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef815d59-311d-45ce-8281-7127db7265a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94ea1e50-32c5-4d43-9fc9-7981b63c1d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e64d5e-348c-49a5-a321-03243153886d",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd7d8e2-4916-4c83-980a-973837b346c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "703a4d19-24d8-49aa-96d7-249bf46050b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "579b70dc-cc59-44f3-b13c-d9b2e3055208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e37612-86c3-42d9-9535-4a899d4388dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cae69634-8982-4a3c-a9b0-7de6ad747ad7",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f68b729-4961-44d1-8cd4-b76518c743be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9f0b17f-0099-4b18-8e90-02a40a6a5cdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0034de7-582a-4be5-8104-e9d44a691568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b12f479-b93e-4603-b749-502f3ecde568"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7bdd61dd-e623-45ad-abcf-30964322d27a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "00a66279-e7ba-4709-a283-7dfecf6fad5e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041b61d1-90a6-4456-817b-89c5a1798249",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87547f91-50fd-4bd9-954d-dde106720c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed0e7502-cfaa-446e-82a5-379365f36c4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c7f65e99-03cb-414e-8a85-8a93c7e1b2fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46b2017e-ef7f-4049-b72f-d933059594c9",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1e37880-90b4-4a51-8148-ad81961ac423",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "ab0f400c-d9f3-490a-a277-7672f69f073a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4998faeb-479a-40d2-bdbf-9847cfd2d173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0eb4bff7-22d8-4e98-b990-968a0d55c000"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98e35dfc-c05d-473c-b64a-0a5dbfc1ea16",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b70a0934-5ef5-4d79-98da-2c3d96e3b782"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3277de6d-afb2-4eed-b438-459809eadcc1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c101d75-81bb-4c78-a9ac-efe9422b8666"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "14c7a3da-3776-4dce-9275-321d55c73de0",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b73d0f3b-7b4c-4e6d-ba3d-7f8d93863b1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56cdcfb8-40e4-43c1-a716-04f029f219cf",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39d0fcf3-d354-4559-ac8e-cf869f8fab11"
            }
          }
        ]
      },
      {
        "id": "5c4c4cc9-f477-40a2-a8c5-690f991fa44b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "2cb971e0-44e3-4d7d-ab34-279f06d751fa",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a3580d3-f9be-40e0-8ba1-f6eafca20dcd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d03360fe-6044-461b-b8e4-257f9bee47aa",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00db6285-b103-4df2-8a1f-7b4639899e16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b899a03-829a-4f1b-91ed-b3121f57c401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fdd15dd-ae0c-4221-84dc-60972f01248e",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4b6f92-b00a-41f9-acd1-3d95db37b8f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f4d1914-c7b4-401a-bc5a-ff19bd461a43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0939af92-92c4-46d4-9975-e84cb496a0af",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83b3a23-bd73-467a-a8a1-a440df1619e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "568602a0-6dc5-4985-a612-45d9e3451238"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f25f9860-3c99-4ea4-8bdd-9a130e775897",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67ec18fc-7387-473e-957b-f97585306ed1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513b06d2-fc7b-4943-9cc6-da7e2d575725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad6f392a-2c48-4294-94e2-ea2e492586b5",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c932d31-5dc9-4046-8acb-1c7f84cb49fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "502fdea5-92d4-4515-805d-2d3e7d9036e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b089bf5c-9961-41ce-9fd7-dea173160272",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62801384-3bd9-49c6-bbb9-05324e848b57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0bcc464-2e8b-4a12-b1b6-7d7abf0560bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e5093e3-0c16-41b3-8e93-22404391506f",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92b6b75-613d-47ae-8450-59bab007f5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea11f57-0353-4776-b574-d01e781607d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "933e644e-854d-4ae2-a171-ab41c8cdc6b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeea5451-823b-4e17-bd4f-3e1cd9304547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fad6745-85fd-44b4-bd3d-9d29b5c8a537",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f44b0f4-5ad4-4ecd-8c21-5329356478a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "421d51fb-c11a-4420-9c0e-2e2a052fd4cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4812e0f0-234c-4ce6-b207-8ef51b7ac2fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c636f92-5d0a-45bd-a989-4bf2ec8385d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6523630-d7ab-405e-8439-d4e0685d0219",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "883fd5e8-0b60-4776-bfef-1b08d54f1a7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b38a0e42-4749-41d6-ad65-39cfa9f8bab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a9908cd-1d04-423b-9bed-3726a1cb17a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3a05b19-8098-4058-afdd-ca309c5ed288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf26817-3502-4c1e-a95b-548c3c90c162",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c78f79-9488-4500-a3fa-f10b1e768d70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "034644ed-d841-4a18-bf2e-dc7c1b296eb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed4d502-3871-44ef-bd71-ec7851b92898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd557c90-c489-42bf-b1d9-f825651d82d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946ad7cf-8357-4430-a5d2-3e9dedbb3ab2",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "919358e5-159f-4ec1-a1a2-dc4862ecf572",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7370a353-3cc5-4b5d-a4ea-b9cd9cb0365e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "650a7f17-e4d3-4e85-a630-de81ff1e2a6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f379aac-0267-4797-a657-c5d466cc24e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7240cb-c605-497f-ab5d-0abed497f259",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b2df106-8f88-4126-ae3c-4a76597be2cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f7e55fa-64d6-4126-b249-f16cefe17527"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "246a9a44-0526-404a-9dcb-01d109a2eafa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c586b4-0a8a-435f-964e-ccdaad4650b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc33896f-b251-4d4a-acde-61995986bc4e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1604314-34a3-4692-b392-0fba01777d6a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dcc87eb-6834-468b-97d1-c220d8881d4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5b5169-cd1b-4937-9a90-e7037128f523",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "064f3058-cd68-4179-aa4c-e037928dfa3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "795ecb38-ed88-46d0-ba14-b4ea3c2de499",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae07dd0c-3550-4079-9dec-d69b0a5ac508",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e49fb39-7cfd-4daf-a9c9-5ef9615a8fd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baf0c83d-13f8-4efc-bbfa-6fa3a9663f96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e093b39-2860-419b-b1e6-86eff435641e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51f5471e-8341-4b48-816a-e006c92c6c86",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c319f58a-fa50-4acb-be57-65e93ab9db29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bb25185-014a-4381-b814-30abb3187f45"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f213390d-618e-4802-9fbe-4d6e79183106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68f9f400-60f7-49a8-baa7-06a8f3999ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1a4ec6-32d6-4a61-b0dc-b6cb83e76d0a",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74499e74-573b-4e38-9cae-52a7b72d51c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9acd8192-1926-4f9c-ba31-0f59b8d70d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac20d507-6f31-41e3-9038-8b14c2d13c06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ce2dec-a4aa-4db7-ac91-37a8ac2dbc31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17382a45-c521-45ec-8bec-24a843a69a0e",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e0b85b-f119-4810-8300-59e52a4b1385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb00a7c6-02d3-40b1-8086-c72694c4610f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9177570c-be59-4316-987e-a0c3f31b0611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5b6a8f-6ea1-4d56-8ed9-a27cb39a9b9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc44328f-1bc8-43a4-bee5-8533fdfcb6be",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24855b6f-16d7-4ecc-b498-7473289d17c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cd47e1-1f3c-49d4-925b-fdda5779c555"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b5f4eb6-9465-4003-987d-9651a1e3a4bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a323954-6235-4ad8-a184-24f3ec17f41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b51cba84-3ec7-4cae-8bef-edb2ce8447d8",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5050c71-7eb4-415b-bc1e-b90ba5c7e089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f9704fd-e72f-4ebd-b121-53253bcf9669"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "951a2727-3a6f-4615-9b8f-d5fe4f8248cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4efed9a7-5110-4eff-8617-cba4bbeaf8c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b51301d-ca38-4493-a0c0-62be4a27d48b",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e727357-3d9d-4305-9bc7-36e80746784c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b9156c9-99bc-44e8-8fcf-770be97d6ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19b7306a-c698-4a05-b35f-3464ece5de80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "803ee183-71ea-4701-9513-5f333c782bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58df1102-2f97-48ce-a924-1237d8c4294f",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d60d620-33a5-4969-8474-eb80770124f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a07417df-7e6d-4028-98e4-0c81cb073a80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06a0ac3e-126e-47e0-be16-e8cdcb7ccd37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29686de8-64d7-4ad6-b7a8-07e73e60b001"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dbda82-1150-423c-9194-2d85c6478ade",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124e89da-4d77-4bc2-811e-4f59405d8689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d73852b-8196-4fec-8d65-ed7bd6dbfbcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4d2a2f-926b-4ccb-b20b-655656cd0a9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a122b0e6-1842-413f-8fb9-00efe2323512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c8132d-2777-4ff7-a2aa-211fb1552a5f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe65fb3e-79b6-4bda-8159-fec5b2d10c9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "599e0702-217c-423d-9660-aaf1059e55af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e8203d-731e-4c3e-9472-588b68e75bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad1b9946-ee77-4d18-929c-d3d1185944e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d234febd-e81e-4ffa-87c6-31bf00fc5c8d",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcfe5ef0-ec45-4770-920e-ea88095e315e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9685dea0-24c6-408e-bdde-0b1ae9f7526b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0b52ce-3cc4-4274-b3c7-067c3478d1d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34551154-f198-458c-9723-de5fba132b8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9b9940f-b36f-43dc-be40-368a73c0ef0f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29eec302-e093-470b-b56a-196388fb8923",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b84310a-994c-4b96-93cf-ed6923ee456b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ca474b4-aef3-4b8f-b96b-3efb338743e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b1b02f2-9d80-4629-8471-e4f557c588d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c03ffa15-f830-402a-9cc9-3d7fa31547f9",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52267b28-83bb-4e11-a0d8-17f0eb9bb9bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c90a117-0d55-4221-962d-012ed0f929c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ecf5f54-c252-486f-9013-36577e7db954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b37cce-b1a0-471b-bbb3-5c1672076e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d6e846-1935-49e5-8dc2-e2cd44bf52f7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78c63c82-78ea-49f5-9cb9-ee230ff27102",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb49bc28-708c-425f-99f7-ceec2f7e0e92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "663d3f87-1d73-475d-a81a-d33d553638fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aeb16f70-8888-4df4-b3a4-0000449010fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f82ba1-54b8-4821-a0a3-08aedaf60a3a",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87d6d64-afb2-4280-ba3c-5b0740f6f8cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ba3eb9-ea96-4c4e-8fa1-b25f7638f3a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54b8b87d-7328-4323-8a5b-4d7f90f82b3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573742c5-2d1b-4aec-9438-2785292afee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0a8e2e-99c8-4206-a0ce-7dacc0222518",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3057ddf9-66e6-48c7-a03c-06e3677eeeea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b81cc57-1798-48e4-8bcb-58d396583af6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e234f63-9867-4547-beb5-2116e1f79075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e322b05d-fbab-4ee3-8111-d17f1bb21420"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea412e24-40b4-4c69-ba83-5e6d1e19526c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03f29519-fb36-4194-8cf8-7dd44f7811d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342b57c8-2ed6-4b2f-b64b-5c897f28e8f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd99177e-8da6-4f0f-89e6-cd3fb1466328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36b18d0a-5ab7-4ff4-84f3-9d16d3a39eb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4975f11f-1294-4e4b-8343-aba6ff8e2b58",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22b3331-9170-4928-a806-e12f25fec1e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47e81a64-77e3-4c39-b0ef-35a726f6b2c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "051cd2f3-0f61-49d1-8d38-b139d121b8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49a94ec6-94e0-4de6-a7cf-2d1da5a5a25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3919b8e8-7906-43f0-a701-5eb18b79bf54",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58b87e07-b4df-41c9-a3ab-e3762f7e7115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe5109e7-f775-47f9-97ae-9c5a6890a4d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6109e43a-a4fc-4d12-8f25-d9b864f48b2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb897d91-0ad1-47a6-bf66-ae907753814b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74b4b408-abf1-480f-8d22-4ed7ff4fc536",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01688011-2078-48d8-b7f4-d4db62e2ca0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b31129f5-fc75-40dd-a9d7-0acd733a0793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e347a73-71f2-49d0-b923-afb9ba029645",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a174e5f-5125-4bd7-b6ea-128c8e1f7f1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b939abf-f6b3-4546-9a95-7b439ea6079d",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bc137c1-4c3f-4d8b-b4de-e71853c56e91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e0b4786-5531-4f25-b0f9-d339f3327c3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "383eb492-2977-464d-84cf-3346b360b0e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471b1c70-de29-41ca-ae44-2f4a9d0ad12b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3efe40f-84da-49f6-a744-bcd92f0fa846",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1ac8c8-d48a-40a1-bd29-3934350f366d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160db586-6392-4110-a175-2df254b325ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfecc77-e8aa-4aeb-91d0-79646b586331",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "835977ee-8244-4dd5-b1a7-212522443b35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39116f97-7d86-4659-b836-0a8fd3868719",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a6f7b14-47e0-4ef4-9a70-644fcd481c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb766a2d-25cb-4aba-86bf-676dbdd67fa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b95be400-dddf-44ae-b1a1-8a052fdc2277",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7baa3b1-1c3b-4e82-be75-bd3ea1c7da75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "912ed6bb-7318-4d35-881c-e16f07eb3489",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "913c90c7-200c-46c0-92c1-a8055ae3ba72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7f0536d-43af-41f8-ab78-7fbdfa1995de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "468ec481-9f36-4d50-ba03-f1a3d493f27d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dda413d-fa18-41b3-a641-4adff6bfa1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6294b7d6-406b-440d-9b4b-0b8de22be47b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b9b559-e018-4614-b03b-06a01574a5f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4726723a-1c7e-4c56-acc6-a76905e6d60d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ac84cc5-3195-4e96-8e77-8ef15b16fe1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffcab214-b885-4fdc-beff-e34628feabdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "745f46d1-f7c3-46d3-bd24-998731c2ae49",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d199a2-c3e4-4cba-a871-9e974db12766",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fb10b8d-e37e-4fd0-b729-3960ab380b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e567ed65-8f19-4edb-9a82-1f3688dba028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5467c4dc-05be-47c2-a8ac-f223fbf486ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1da49785-3687-4a96-983a-37ca0df172f5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c32490-f146-4858-9c95-7bed89971767",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6807650f-1911-4890-b1be-369b03522e78"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfac8517-4fff-4528-8d8c-c6b79a8f14e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33115458-a761-49e4-af08-660591832ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adddcbdb-16db-4583-b34d-8a7197296538",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2430b4-6dad-4d68-aaf0-7b0e4b744b0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51be4605-588c-4248-b4a8-92daa9cff9ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c86a3cb-c1d1-414b-b63a-1ca1dd5a2c9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2cd5124-c265-48ad-88c3-958cc3d61426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8066bdc-ce6d-46bb-8dc0-d9e8dcd1fe1e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a6ff36-ce6f-49e7-a706-eb20f6faaee9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ab01215-8ccd-4beb-9229-f698a07bed4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c606058a-db15-4a21-b7e6-c98115902a3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2f6b72-38f0-4d9a-a904-b3affd75bd09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae2adb1d-bc7e-4682-878b-e86b2f1c4352",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf16eee-741c-4032-8918-ff30875eac9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6751a39e-b434-4177-9eb6-fb96f1412172"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb00552e-3775-4eac-9846-ee7a92dd4bba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399abf76-a1ca-4af3-9d1c-564f63750293"
                        }
                      }
                    ]
                  },
                  {
                    "id": "461d1481-2b53-48cf-8385-07410a676e9b",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0816f84-e1d9-4e67-85eb-07c1951e90c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6e5eb4c-4c1d-42a0-bebe-3ba9c0cb8e0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31f687a7-4e4d-473c-9433-95e46f09460d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcedd5af-81f9-460b-98b9-4a35af3be401"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7046281f-3eab-4036-8a3b-30525f278a79",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b99cd5-3bb1-46b1-bbde-7e6da7c28d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710364c4-c66a-4fa4-87e0-e1836ae07399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1df1a4-a832-48b8-94c4-79234c75e03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499d7fb8-3172-4401-9577-244ab19985a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "274077b8-85f7-452f-994f-0f5e6487e76b",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90098e4a-e8d9-4ca3-ad81-1c247795587f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4feccf6f-f402-44b5-bcc9-eef9fcb0f6cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61adac24-1753-45f1-8735-346d3b7d61ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cca2a3-8f6c-4e3e-b68a-c0dfecd43eb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "769cf12d-e9cb-4909-8394-e3cd2213b123",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bdc9926-c7f8-4423-86b2-0716e83de636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de7fb28-1f19-4c72-a6c0-0ba81446ea74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "443a2661-5228-4b47-9b5a-1fb774779b53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46f0713a-71df-4a26-a5c3-c7c720b981ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e631ac44-f334-442c-af09-77a7374cbb8f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ffd083-2d41-4b54-81b4-6c491e07feea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f74b1c5-65a0-4b95-977c-a93bc11c2460"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3cf40d7-8e95-4e7c-a2ac-266e33d514f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ee11b28-f0ec-4f5e-81e9-1c95b61f1913"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca2ca1f-244b-4ca9-9802-5f02d031a19c",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "431bbd7d-b794-43d2-bf79-b69fca22760c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127e27b7-3c3e-4cf5-aa56-e8a3752d4944"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac2a23c-77d2-47e0-b042-0fc240bf3cc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "292fcf92-b1e6-4b78-a5f6-27780404c685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfed4131-171d-4aeb-867c-50696aca8417",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bf51ca-92b0-4893-9d29-6dca2be2e541",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f241fad-07a8-4c14-908d-6893d1f9c74a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63e7dba-a56b-4b0c-a139-b29227d67dd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb981aa6-2b5b-473e-85b1-2b3f9b539b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca9d5700-0f17-40e7-9535-5a6218a52a1a",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d980ac1-ba38-469b-979b-382432c91aa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcc2e6cf-b232-4b6d-be4e-c1062be92ab2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a10f09-99d7-4f3c-962f-972f1189f54e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da91936-909b-45cf-ab6b-504a501536e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cef3e4e0-4f61-4e54-9421-d62cd7bf3685",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1986ff7-c616-42fe-bed1-697cfbd2f644",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b8209d-a48e-4e88-a93c-8097e521e524"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f54b9bae-38cc-4a03-ab4d-c06abbde9aad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8472d17-5abe-4abc-836d-5054a0a8e2a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cacba2b-88b2-48a4-8615-2d1c1adb0553",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa074fa2-f377-443a-9c35-76d3f8703390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "158883df-2c2c-4f92-8834-4128ac930f2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a637c63-a20a-4bac-b060-8f3f650d6eb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f609fb-fe8e-41f9-bc4b-ba29e356b48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37f01d2a-8714-4467-92c4-adc07fc22d3a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b074aa60-3c44-43c4-a62e-d5ce831775ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d9d1fcb3-1140-4c06-9330-3828897c81ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc857e75-ce2f-4619-b0ec-e9909fd635ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "548dd82e-b283-4bac-928b-1e60fb639c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86fb351e-5678-48fa-b497-ff6ee499ab1e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef194eac-2d65-405a-8e0c-a2f642adb0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8fe34e3-ec18-42e1-905e-c8bf365188ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1eb61fd-e50b-4273-a309-20735b99b246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "174b1f7a-46df-453b-b2a6-5879036d7229"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c912bff9-f00d-44a8-8d9f-b639e2975fcd",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc74386a-7fc1-4992-ac47-220b1f0f16bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71543a5d-61f1-4763-a35c-da68e2e7818a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57eff649-de51-4b62-88c3-f2960ab25352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5e90acc-d809-4ce5-a655-b4a2a8c1ceab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "743094d2-194f-4a0c-97d3-749806eeda69",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bccf518d-af5f-4f5c-89a8-2c0617710c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f501f8e-a637-48a1-b310-deda32daad9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a438bc55-4a01-4b2e-aacb-bf61e1346226",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8daca6fb-f7d8-428f-8ef5-fe45ba653c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9332e4c5-7205-426b-8d76-259952530f02",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc55550-6b93-4dd4-adfb-29b377870f3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0f85ca-77d9-4386-b758-821b88b8d12e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc9051cb-9670-44f5-bd52-a5b5441acb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f757de4f-f67e-487f-9ded-94f023b0cc6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cc851c1-bb8a-489b-ba53-3dec3e5fdcb3",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f7890d-d345-4471-aef6-76dc4cb41344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06b25767-5412-4374-9573-85c2409a0f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8403c2c5-fd5d-481d-910d-e56df302e88f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35e09788-5bc6-4376-a353-50057937042c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e81e4fc-0b47-4f8f-9bc5-7c8349bfdf5a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35ce685-e8ac-4548-890a-eccc902f234e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cffc100c-33e0-4f16-b30a-dc543df3dca9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f6c9ca4-2f65-47c2-9140-ff089bd36c4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f2926e5-0d65-4d94-bb18-358f4acad84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d9660af-4aae-4eb5-b3f8-c5f371553771",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fde0722-8694-46d6-92e1-f52477c9c199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72f79965-d98f-404d-990b-cc77f2887a60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b4c1ab2-56f3-41df-bfe0-fb9dee2aea42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5f21a57-2658-4c4f-89bc-370aed088a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f61c79-ea9d-4a55-9301-aa8fa912c74d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b82d49-cb93-4e2c-bcd8-608186d8d13a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c111e63f-c2de-4eb6-a090-8ff3064e9db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f37a3383-8861-4a46-a7e1-7d91cfd9b3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffd10628-042b-4be4-9fbc-6bc21eb3e5a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b85684b4-d07f-4cac-b871-5549f96da9ee",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cad7af0-f8f6-46a4-bdf9-a4f01b19f803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a2b08a6-ec41-47fd-9edc-9948c0500f16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bf03c32-b4c1-48ab-b938-a451898d34dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d3fd40-9331-4125-b8e1-2a5585f73ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0aebfeb-cff7-4978-8f22-0410634e36e8",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cdeab97-2c9d-4e2d-ad17-efed96c723c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b8e6c661-d5bc-4670-b9f1-c3f53ec002eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2029984d-d48d-4672-8750-274e58e0d30d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24b7fa64-2244-4625-bff7-5c7134fd5783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dc3398b-4898-40c2-8204-3b8312372868",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5432713f-b110-43c4-9e46-74736c11ed1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b1c7b8e-004f-479d-922e-29754dbcf82d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5618c4fe-7300-4805-91b8-1ac265fc4e27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b45bd883-602d-4a20-80c6-2905c9e54f10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46b42aa-f5ab-4bf9-ac98-e7e86b8aab9c",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f3fefb-a62c-4d94-bfe8-911183bc4eae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b4f2a58-cdde-40be-a635-e03c47e3a373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "23bac387-3b5e-4abc-866f-99d967f3e5d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcff5f23-fe76-4600-80ac-85ca6d7d1196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24d4777-3794-46a5-8127-52ccf6971250",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7abdd357-58a6-435f-a195-80f6f114d2be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07f86c8c-5b73-4229-b948-bebd0e812c72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4dd70a6-b05a-406a-9c97-6d8ef164078f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a35c588b-33b8-4048-acdc-a948373f632e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d7fff27-aa49-4582-be37-a4a1ec83ea0d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9d87c7-b998-4d17-a3a8-15cf46414830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1f4840b-f57d-4f05-a4b1-0d0bad24ecb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceac3074-c3d4-4abc-8699-92fd46135b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e96c4ec-1a4b-4715-8e13-e69a5d7ca23a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff47bbd1-10cd-4d72-a6a6-51800bf663b6",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ef2d617-b2c1-4235-bed7-b11f9e27d64d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c25a970d-0b7f-4d5b-bf0e-286ee0b0d420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28d9b080-9fc5-4fd1-a8da-89327945a5b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2021d61c-1229-4db8-a13c-9b1b35e02eb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe9fc0f-9fbb-454e-a319-655ee01cd2e8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d1c499b-5c8a-4c2e-b8b2-a8af675f20db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf266de6-3722-43cb-9625-ceb82327cf39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "598e7fa9-a9a0-4e56-b59f-b17f11e70d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16441c8-540f-450b-8edf-3e39f49724e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb794b44-32a4-45b9-be4e-d4d374a5ebb6",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb798675-6816-4e2a-85a9-963ebbf67ab3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a71588e-114c-49e6-99f3-3fcbb74d9d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f14aeb3-9470-408b-bc4f-2a1d4f5f20f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f94c0b-34e2-4a66-b488-f420734adc20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6175a91d-ae46-4428-9ffb-d9df5999b6c0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251f1023-a2a6-40e7-b0bb-f6ad766c6c27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f89906c-205f-4b3f-b552-003112791292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "390e1568-15f8-4b4a-b59f-f4f5ffe20098",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6855cdff-6e84-4f3c-9ccf-d51e6c42cccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f69642a-c2fe-4198-859a-89927495a859",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d7b3d4-dc2e-4444-bca1-89f506e2c860",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "552a93b7-d446-4bb0-a37c-f31afbe7e593"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ef0905-f1f9-4126-9c2d-62bb72f9ef1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dd0218b-7347-41c9-8a9c-66724d3c846e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ace6aeb-3a4b-405f-bdf1-060793261711",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27de8ffb-3ea1-4faf-b77e-ea0a2678690b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7471c5a4-30c6-46f7-8ed4-4dadc779b490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e41c7457-b205-4be0-b019-dd69cd273310",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "058fd5d5-ac91-4caa-ab3f-d6e34ade3a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34251a41-dfb5-481d-a037-c92389d0821b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba59fa1-55fd-41cb-afdb-6103fb74ff29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82a894d6-c311-4c3d-8b2d-a15cde0921bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e738af37-20e5-41a8-96ce-160061e91ef5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "680192d3-69a4-414a-b44f-fd213e1b846d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4cc2665-3da5-4f03-83ee-ecc40ada53b3",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "582ae2f1-5795-46b6-a76b-94d1f47a3348",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd85295f-b3bb-4fcb-92c6-a18f886828ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "389c403c-7c2b-445c-91c3-662a45cc14cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a356e800-f27a-4f61-8711-085236867469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "643b8f6d-e570-447e-9759-9f0f111b98af",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59feb29d-da8a-4d30-8240-144910ef9ef8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f47d03a6-7095-4f2f-addf-26b4b6ac371a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ce130e-e283-4e88-9d2e-ea9287ee183f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "346948a6-77fc-42ee-b871-4b318f877dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1205666-edc4-49d0-b303-94ed86053ceb",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40007521-c714-48ed-b67e-4b31a403f5f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa34dffe-965c-4831-83d4-46c531a3b803"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e895a97a-7b44-4ac6-b3a4-09a0561b40a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51410f9-4ff4-4f97-959e-150cac86599d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b6135f2-3e29-427c-9f1a-4e9573fbf0ad",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db4bcd2-43ba-4d80-8e07-64f7e92fd8f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acabed33-798e-48be-92b6-b54a283b77ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cf6b1b-9cc4-469c-8cfd-aa4150c6773c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97ea68b-c051-4a50-8ddf-509cc1109e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4ddbac-4246-4a33-b0a8-fa4de37b7f02",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6f0d2dc-5779-4d24-ae81-2d37a164baf7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1dddbed5-b52d-497e-ba99-8b2d3d6d95bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ee00835-4ec2-4c07-a3d3-d0c86763dc30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e852955-5dca-4b32-a776-f77f3655be41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92bd4445-4981-427b-99cd-e00490006352",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da0345c7-fab7-45b4-8db8-b144d5f8bdf0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "177f1ae1-8f6e-41a9-9500-e54b708ec171"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff464dc-f2c5-44ff-870f-cd704c97d7bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "563efc2d-d5bb-490d-8437-ca540cf861a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31420dcc-688f-422c-8c17-40c096051bb5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f10e5d-1269-441b-8bea-4fe23cd42044",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86688ce8-1417-4a4b-b2a1-6535de6e1de8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb01476-b8bd-4ca4-abc6-b8e5d3c29537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b3be5c-d03b-47b5-8f8f-9c32a82ca5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c572694-63df-4bfe-987b-af073b6f0567",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9e751a-810f-42a8-ad37-479d4c1c5699",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8572ff38-391b-4610-a330-c72ca1e5b320"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb382d6-11df-4746-8a42-e9bd3bf330b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "569a6ef9-b016-445a-9083-156fb8f50b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac10bc3-dfef-4673-a437-a91da4e60ab3",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86001cb0-582b-4b9e-b2cf-a6e98c368d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e012ac74-90bc-4c5c-9375-1c15aa5d9665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc5e5cd7-8879-4581-96f7-d0db5ae8c14c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30977511-60d7-421a-a039-584fed9bd4ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed109859-8c0b-46da-951d-f103247d0e0b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d8e7a76-0a18-4f12-8f40-6c361de88690",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c853118-8c91-4bfd-929c-8f1bba40f450"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a06fa41-434c-4ef0-8fc1-c2fdc94d3958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8269eb2c-2dba-4f40-8aae-da7be4c0c720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0618737-e1a2-4354-a247-a94ce36d3a3e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f631ef80-a464-44eb-869c-80c7de57d083",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "913f3545-7e4d-4938-a1cd-e967823ecb17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc96e66-17b4-4d8a-8b80-a5ba0d186407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0a3ecfe-a5ff-4c41-a6a5-d1461c8e5b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f9ce62-7baf-414f-9c3a-d72e032e2d16",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba5ef25-5651-4bf8-b35e-2da2b6ad1f0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f30f76ce-3125-4bb2-b1ac-cd70b93ecc2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57a3e82-9474-41ac-8e42-23b8852f2253",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcef7528-0386-4ae0-adae-e2c213b7cf09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0326e83-bcd5-4cd2-b4e2-6d73b6a77ee0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11680bcf-2de9-4510-801b-cc020c6990db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eb85b40-1941-420f-b076-4f6fe3b4f736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88fdaeb-29e5-44de-9db8-2d98865219a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb6da494-5217-488d-bae9-542a071df0c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c67a87-49c7-412f-95b7-25a71a0c3a6e",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24ef109a-8329-460e-a24e-8947033aa390",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "93135d1a-0c73-40e2-9e8f-d98d3ee328b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a4b2384-393f-4f78-b896-e5d37dd26c0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0becb0f-2eec-48ae-b83a-7d0b6f7fcb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462356ef-0f59-49f5-8b2a-59b1c43017c7",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c22710-18b5-482d-9a0b-e3cabcbc7f99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eb8ee53-4c4c-41ad-8dfc-577b4248b71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e06002f-c81e-43f0-a5f4-785d4556394c",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24c13c6b-631d-4aa7-a168-b377dbf21829"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a679627-6051-4a37-9725-ef9cb141c18e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345f39fa-0574-4dcf-944d-33cd644b4475",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b199f14-1374-4425-8361-885f45634c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9165b28-4b88-4a27-a566-90405155a3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cd7e7ba-8c4b-4039-8936-0dafce7361f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8506655d-27ec-42e6-850a-5452568c49cb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0c76a7-3849-4ef4-a34f-9f3492856934",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0448f188-7f26-4b3b-be2c-acebb2580aa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae5d2f9-49c6-455b-a50c-ed4c52d772a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8bf0946-554b-408e-9112-0cdfa707d2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa50bb71-c5b4-4d65-9338-6028ed302c54",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fecd879-80f5-4538-a7d7-0d3bb6469ef4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c34e2dbb-b826-45ed-af73-29ef69743b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bf2d9e5-b801-4839-b2ef-33b7493911af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b656cb25-3f12-49f9-ae46-1268ec8e0afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc07ebc8-5f47-4e79-955a-5dd36e4710f1",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc43f84-0f08-46ca-92e2-70f9c1955df6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae8571cc-5c34-42dd-bc9b-3a5337c7a022"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56a46675-34dd-45f2-991e-f45cdab11068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40613d66-f03b-4ff6-93f7-9e98f7d3d171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf597fc-d790-4263-973c-950e13039172",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872e684d-0698-4be9-914a-c0c2a10e5d4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d2b03c0-9cfb-4420-b522-5368ef80df80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6746669c-c205-4ebb-9375-4df1f3b3bf5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aff681f5-1811-4c7f-8690-88cf4f1b7022"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09952913-c9ff-4667-b1a6-6c98c8d79170",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb180bd-454c-40ce-814f-5a215d431671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "617eeed2-3114-4228-97e5-a1b425518f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f060784f-3b1e-41f3-94b0-d3d0693967b9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7362e403-c1e9-4443-af94-f35fbd54d815"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5248be23-f48e-4ba6-8d7c-33ae0c2346af",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9954605c-dd95-4f0f-a084-0a8e1e30b6f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3238ede-0bbe-4524-a329-0e2d1b423c46"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86d55af7-b271-4589-92c2-c949b8f0ad23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efca347-ef08-4d81-98bf-37fd828d5c65"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c143793f-e528-4161-acc7-d68f0697ee48",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4303d033-b8a1-491f-82d4-4547cf1b9268"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28b8bdf0-29b7-43c0-b8e1-dc4d1e97618c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "866e5759-6afb-40a4-a182-b8d55667efbc"
                    }
                  }
                ]
              },
              {
                "id": "e9565297-2612-4edc-ab89-9a7fa7fd6bc3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8655bcad-5ab4-49f5-855d-c783c391c47f",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab38e0b8-c929-40b2-bfb9-9d39d461429d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "19f7446a-d2e7-4462-9330-01bf931201d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf5f280-852c-4413-8de1-89d6ec76acf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cc3771be-4c7e-43fc-b090-43dec27d41e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f3461a9-7580-4729-be5c-a3a7cef8466c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d537b452-49b6-4551-9492-3302eadafc71",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "67d9bfa2-1f3a-4c4b-b8fa-7fb558fdb0ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1cb2b63-70ae-4b06-9b32-e003e397c3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a74fd049-7cba-405d-9f13-1aeee03b1dbe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4940574-e90c-4854-91ad-45b4ffc82e71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e60fe30f-61cb-4ebc-aab4-c54db5b509d6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f622461-34ad-4cee-a5b8-9f5f1bb855a7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "debec2dc-ac29-4e39-ba1a-752a5d6d87d4"
                    }
                  }
                ]
              },
              {
                "id": "f0a92a43-697a-4419-bbef-62d4e47a3bce",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1c0f3ede-fe05-4324-9252-1d1d1a44cd36",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3463ba0a-0c99-4a1e-8a2b-ba29dff948f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "befeb80d-04a9-4370-ba7a-7bcedf5d9a59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f367937d-0ab4-42a7-8164-80e70fa47a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9eea946-e900-4154-8d96-0f46c38e1e18"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "35d59adb-bbde-4ab2-9dff-90ed2d175336",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1722eab2-5951-495d-b05d-10fb3fcfd0e9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a2f2f08b-5fc4-498d-a826-0d1c41def04a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b5e80e1b-b89d-4aba-b9c4-d2dacae651c8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95b70e69-4ace-4b4e-8ffc-9e62aac8347e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "903eb12e-792a-4c0a-a666-370c3d644fd9"
                    }
                  }
                ]
              },
              {
                "id": "45f0de64-3ce1-413a-8d73-adff5adaf3fb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "55057dbc-117e-4a67-ad92-120ae07d33a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "e0468b41-3ee6-4937-90a2-eb831cb93fd2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efd2ed66-eb30-46bc-a704-6fa1751b4ced",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "46af2a7a-b408-4d41-84a6-5ed1f4a760b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d3c93a24-d2f8-4a1c-aa1e-e80e142267bd",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "2cdeb4c4-b82b-43de-9597-e10f921c6634"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b085302b-4f73-42a8-a597-a72fb3c29d20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "471b1b74-218d-4650-9d40-ace449847726"
            }
          }
        ]
      },
      {
        "id": "6ca1bc3c-9a52-4dd8-a057-3829c14351f9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f31a6cf5-3e4f-459d-9b7d-11830503fd7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0e45b798-63d1-4aaa-95ba-7b49377687ce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36dc1a5b-7ffe-4df8-9786-da9eb3584afc",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8573178-ef1d-4bc1-b043-74be3524b380",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3ddf8a94-17d9-44de-9eae-28945043dfe9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce14238-09f9-4986-91af-42d330764b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01c0a7ef-1fdc-4004-8ea6-e4fec5536790"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7b7955-ff27-4f75-bb9e-5142fb39dc1c",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f422acc7-0f62-47e2-a791-b19f4f23dcad",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b11ca0b4-6e3c-4457-8353-289fe08fab71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6817920-7da0-4efb-a34a-06f4d13fa0ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2309d666-9f2e-4c19-8873-0aa946062fb8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac515988-f747-4a20-869a-751ed4c4de61",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "29b1a53e-9e99-44f1-b43b-2b09fe338f50"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1b53fa81-6b11-402d-b0cf-61e495be7e13",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5905acf2-0d4d-4d44-a67e-58ae89c13c89"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29dd429a-64db-4cdd-84a5-90ef450abc3b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3125a068-0fa4-4da2-af38-270ec026fdc1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d66356b4-6054-4680-a361-c187a03c7717",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3563a3bf-09cc-4bdb-b8be-4dc8afa53e98"
            }
          }
        ]
      },
      {
        "id": "c764639d-ee40-4949-a321-79cbc0975752",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "c5305772-5296-4436-b20b-a1a64d3391a2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "868a62fc-7dfe-4768-b7a5-a19ca3c64717",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c250bc31-3b29-481f-aa83-8915acc8dd6f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7e637c2-6867-4516-832d-3b90b9d8bf1c",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "998d73ca-989d-4224-8e61-ac4de5649a69"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efccb58-5981-49e3-958d-91393c83b617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "af22c533-017d-428b-9d76-6fc16828dfd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18cdbc5d-9b74-48f6-9b72-ade46332825a",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecc35f19-afc8-4dc1-aa51-e8b61ab97565",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fb08727e-7117-4d3a-b9c8-e5afb6358c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad52cbb-5695-4275-8117-875760a6546e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3082f092-acbe-43d5-978c-28387d2cbd99"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00ef5bea-6bbe-469d-ba0d-1fd669bad5c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ed3f077-9c7d-434c-b71e-9aee902b4654"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4f7c1be-80a6-4c4b-8049-cf037d6d2296",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "14c16eb8-6dc1-4688-bc18-239ce6d4522d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "28e4c9fc-acab-48ef-a467-7fae744dc93c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc07c4a9-db29-458f-8840-07cbc906c19a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4d46cb88-d503-4c39-b7a8-2054bd6eba09",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "921bd3f3-4830-48ed-adab-847a6b3bec69"
            }
          }
        ]
      },
      {
        "id": "2f24366f-6897-4548-86b7-d5c114a254ec",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c07097c4-34f8-4b7b-b8ac-d3f5595c5994",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b17e5d08-eb4b-412f-9458-dcbef3da414c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7029cf60-92d0-41f7-be7e-eb9943a93188",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65217de-0d10-445e-9e6b-3f2e4eedfcb6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ceff1ef3-9058-4172-ba87-9af1bf675494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21739a17-90c8-480f-963f-23023c07b8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec88bf1a-ad14-40b0-8085-fe536690f050"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d722c9e3-2665-457e-82e1-039aebd70388",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da62895c-42d8-49c0-9135-986b525a3bf8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "fa3900ce-e9c6-44df-bb6e-87ba18390032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "edf6263c-1c87-483d-b5fc-0b8356e60797",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "587fd4b0-14fa-4cfd-853e-b9c932c13a80"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6cc8c45-487c-428f-b8de-463c84d13e90",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "904f68ea-5047-47d1-968d-6674856f64c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "214a458e-1d4d-42dd-81f7-e0013c15d3bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a7d3af10-67b6-4c74-b2ad-628ca70aee40"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72641720-05f5-4858-bf92-c4b7ee78948c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "d2624809-aaa4-4988-b2ae-3cbd08916eca"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61c36426-a64c-4b19-af7f-2aea0b099846",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "62936de8-476a-4367-9321-28a2ac741359"
            }
          }
        ]
      },
      {
        "id": "af56c4cc-b15b-4387-a90b-4bf151c4b76b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2854f718-ea87-4a7e-94bf-f277fd50ffea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "844bcdea-3fe0-42d2-be92-604f67ab955b",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "06702535-c21d-4a04-b01f-dc8f8acaf63b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "02d5b3f1-3ab5-4f25-871d-568693494c48",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8156e66-ef52-4a38-b925-2b871979b2f8",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1901,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 259,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 511,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 955,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 946,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 56.91891891891892,
      "responseMin": 21,
      "responseMax": 325,
      "responseSd": 29.301738539833213,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676940181329,
      "completed": 1676940206732
    },
    "executions": [
      {
        "id": "58b48e03-1230-497b-b35a-0357afa887a3",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2bb96ffe-0ae9-4395-adae-5797cc4ea5df",
          "httpRequestId": "cdbf686b-bdf9-4d84-82e7-55e5033dd4c7"
        },
        "item": {
          "id": "58b48e03-1230-497b-b35a-0357afa887a3",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7e428aed-2baf-4d24-8a34-5f26f6e92c99",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 0
        }
      },
      {
        "id": "e8cb3d58-f0fc-44f1-938b-2d7c8801a43a",
        "cursor": {
          "ref": "6cc645f8-6afe-455f-b807-07d733ce18c8",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "866771be-7107-4f95-a055-043dabe46015"
        },
        "item": {
          "id": "e8cb3d58-f0fc-44f1-938b-2d7c8801a43a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "5918cf58-426b-4e87-b1d6-7b6d2144d3df",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "7eee6f76-4dfd-4afa-abd5-b24b8059a0bc",
        "cursor": {
          "ref": "c11cc990-8bdc-49d3-8879-09f56a6c37dd",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c227b4c6-0dfc-46ac-8563-ded0e0dc2a35"
        },
        "item": {
          "id": "7eee6f76-4dfd-4afa-abd5-b24b8059a0bc",
          "name": "did_json"
        },
        "response": {
          "id": "3412aa1e-d23e-441f-b5c5-486d2cc0287f",
          "status": "OK",
          "code": 200,
          "responseTime": 186,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a27eda36-72e7-4615-af0c-3582b8c14f69",
        "cursor": {
          "ref": "a90ed0cf-715b-430c-9918-d523b8154843",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f3e98e2-7b00-4827-9bc3-3a23585b696e"
        },
        "item": {
          "id": "a27eda36-72e7-4615-af0c-3582b8c14f69",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b2df5d5-e10c-4b55-a0f7-dd673210f422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "a27eda36-72e7-4615-af0c-3582b8c14f69",
        "cursor": {
          "ref": "a90ed0cf-715b-430c-9918-d523b8154843",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f3e98e2-7b00-4827-9bc3-3a23585b696e"
        },
        "item": {
          "id": "a27eda36-72e7-4615-af0c-3582b8c14f69",
          "name": "did:invalid"
        },
        "response": {
          "id": "7b2df5d5-e10c-4b55-a0f7-dd673210f422",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cc580942-12f8-460a-8204-6f1c53d8f8f2",
        "cursor": {
          "ref": "ed7c1290-3396-42fd-9960-816533276044",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "50cc24f8-3849-48bc-941c-6cea423bda65"
        },
        "item": {
          "id": "cc580942-12f8-460a-8204-6f1c53d8f8f2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "499493be-6da4-431a-b9c7-308131af9893",
          "status": "Not Found",
          "code": 404,
          "responseTime": 99,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "228039fa-fad9-4678-9348-c5d40b1af33c",
        "cursor": {
          "ref": "32b0cc27-9da9-4fb5-839b-e02f2cabefff",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "4d6a5319-5bf3-4d1d-b9ab-f97add77a038"
        },
        "item": {
          "id": "228039fa-fad9-4678-9348-c5d40b1af33c",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "86d70bb6-1415-4b04-8cbb-5f99feaa873a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fd3433-0d4c-47c0-b8b6-1cd5a3128139",
        "cursor": {
          "ref": "5717f962-abc3-4cf4-9642-561613a4ccea",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "36a1cc24-3188-48a6-b02d-07fb2b26569c"
        },
        "item": {
          "id": "81fd3433-0d4c-47c0-b8b6-1cd5a3128139",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "76409e1d-670e-41b9-8b4f-ae3a596c966e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d6e626-2555-4da3-8168-7a3ffbf5584d",
        "cursor": {
          "ref": "6846150b-6e6e-4dfa-ac3f-a017d60e2991",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c32fcbd8-b0b9-43ee-bab5-d7d6d4b94c87"
        },
        "item": {
          "id": "f4d6e626-2555-4da3-8168-7a3ffbf5584d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "03378ed0-9d63-4048-bf8c-fe604ee02dad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4d6e626-2555-4da3-8168-7a3ffbf5584d",
        "cursor": {
          "ref": "6846150b-6e6e-4dfa-ac3f-a017d60e2991",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c32fcbd8-b0b9-43ee-bab5-d7d6d4b94c87"
        },
        "item": {
          "id": "f4d6e626-2555-4da3-8168-7a3ffbf5584d",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "03378ed0-9d63-4048-bf8c-fe604ee02dad",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 53,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83813559-6da1-4dab-8da4-ade1fa9921e9",
        "cursor": {
          "ref": "5e848310-9e4d-454a-8f8d-06e1cdf6e4b1",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "631ac491-9d4d-4758-884e-f68ffcdfc7ee"
        },
        "item": {
          "id": "83813559-6da1-4dab-8da4-ade1fa9921e9",
          "name": "identifiers"
        },
        "response": {
          "id": "9495301a-f8c9-4897-a3bd-87664c931e83",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e03702-c5cb-4b22-8f64-ae4420075946",
        "cursor": {
          "ref": "b733a9bc-5d12-4ce9-af93-d425b7e1975e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "717b5401-09f9-4e53-8b18-7d37a6e846af"
        },
        "item": {
          "id": "77e03702-c5cb-4b22-8f64-ae4420075946",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "72280645-a9f5-410e-afdd-f53cfaf7c0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e03702-c5cb-4b22-8f64-ae4420075946",
        "cursor": {
          "ref": "b733a9bc-5d12-4ce9-af93-d425b7e1975e",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "717b5401-09f9-4e53-8b18-7d37a6e846af"
        },
        "item": {
          "id": "77e03702-c5cb-4b22-8f64-ae4420075946",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "72280645-a9f5-410e-afdd-f53cfaf7c0c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd87e873-d739-454c-bc11-fe12ea665184",
        "cursor": {
          "ref": "de78d902-7705-4c5b-abc2-c1cb568d3964",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "63a52ee8-7d95-4252-8a3c-8924e5d8e906"
        },
        "item": {
          "id": "fd87e873-d739-454c-bc11-fe12ea665184",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8567d6ce-efba-4da7-a923-e5fe70158da9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb70ff1b-36be-40c5-935d-9e88ad39d96d",
        "cursor": {
          "ref": "d8db2916-05f6-4e21-b55b-db8c9c33c5cd",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "bfb8c1e0-9b7e-4730-8262-fcdb26af0068"
        },
        "item": {
          "id": "cb70ff1b-36be-40c5-935d-9e88ad39d96d",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1723be3b-0948-4cb5-92b1-780d26437b15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedcbf3d-28b7-481a-8633-fee7bc871e29",
        "cursor": {
          "ref": "41573eb5-0d13-4064-945e-d5c075756a6d",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "237f3995-562c-4061-a875-fc1009715934"
        },
        "item": {
          "id": "eedcbf3d-28b7-481a-8633-fee7bc871e29",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "0ef48491-f7db-4d7f-acbf-5653c7507afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df89aae0-5a7d-4e4f-9715-354becd7f345",
        "cursor": {
          "ref": "dc787b15-6df9-474a-8154-ab3630dc2612",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "adc627ce-28f0-4e25-a76f-c53a5f74c6d5"
        },
        "item": {
          "id": "df89aae0-5a7d-4e4f-9715-354becd7f345",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "0bc7e517-3423-418a-aaa7-0b6d86c6ff75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd87982-1ce5-4b22-b935-b0d0113de17c",
        "cursor": {
          "ref": "92a16bb1-d377-4149-aba6-0805de636345",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "2b79e458-67c1-4841-9554-221064d60a10"
        },
        "item": {
          "id": "9bd87982-1ce5-4b22-b935-b0d0113de17c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "dfb86b49-17a6-44e5-8e35-3a33df6e5005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93bee40-d46c-4af7-b1a2-0188310fa5db",
        "cursor": {
          "ref": "46ce9455-85c5-4d89-ab74-675ca1e81f8e",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "65d44a2e-c4ad-4d37-95d0-9fdcc07b6f46"
        },
        "item": {
          "id": "b93bee40-d46c-4af7-b1a2-0188310fa5db",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "f631b4a5-ed49-4358-8fbc-f267fc48c1ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97a5920-297a-46c5-a9b2-f1e0665c0439",
        "cursor": {
          "ref": "086187dc-97cd-495b-9485-d2d309dd51d1",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "908078c8-6d34-4f89-8f3b-9bafb3d63130"
        },
        "item": {
          "id": "a97a5920-297a-46c5-a9b2-f1e0665c0439",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ace5865f-f097-4218-8cee-c6fdbec875b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4859251e-9ae5-4f86-812c-a329d075584c",
        "cursor": {
          "ref": "bf1e212e-a18f-4b22-a484-9accf1ef38ab",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "15f37415-18e3-4a81-a1a9-3b68d01ae0d1"
        },
        "item": {
          "id": "4859251e-9ae5-4f86-812c-a329d075584c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "c9209ea8-c954-4fd8-85d2-ecd58a399a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c8962fd-a6bb-426a-bfa1-be79882f1157",
        "cursor": {
          "ref": "86d40f2e-a7bb-4d65-91f4-5a609b09c67c",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "40621ef3-deab-43c8-a77f-6715bf5260bd"
        },
        "item": {
          "id": "8c8962fd-a6bb-426a-bfa1-be79882f1157",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b9abddb7-da97-4ca2-9c1a-52405041a3c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f7dd207-980b-419c-971c-ab520aee71e5",
        "cursor": {
          "ref": "fd5e7513-85c6-4e73-8202-e84f629c76b3",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "16b302d6-c08a-49b5-a352-29a736e4acac"
        },
        "item": {
          "id": "6f7dd207-980b-419c-971c-ab520aee71e5",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "2a84b63c-0dde-4234-a274-196c356f26c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3bcbff-5974-4cb5-bdf9-8b75d6d905db",
        "cursor": {
          "ref": "a0e36ada-f62e-4db2-8f5c-4c072aa9c218",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c1c399ef-82eb-4f8d-a329-e915cc62dbda"
        },
        "item": {
          "id": "2b3bcbff-5974-4cb5-bdf9-8b75d6d905db",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "2cd8bb4a-bbb9-4cbf-8885-567faa9270cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18c4b161-4e2c-4c3e-8937-1cc374c319a5",
        "cursor": {
          "ref": "32f3cf83-cd0e-4b68-bb24-de9ca592f903",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "a69fd47f-8eca-4fe1-be90-b7bbe669c48a"
        },
        "item": {
          "id": "18c4b161-4e2c-4c3e-8937-1cc374c319a5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "43cc0905-90ea-47b4-945c-1cd89093c637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca38af1-42db-4a47-adc2-f5da59893696",
        "cursor": {
          "ref": "3a484ab9-9f7c-4586-bc29-62d226868788",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d1284cde-dfe4-4f0f-b260-93933977ee4f"
        },
        "item": {
          "id": "dca38af1-42db-4a47-adc2-f5da59893696",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "3d4d3f91-719f-45d1-b775-d9e223ab1e7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b1a8eea-6a8f-4bcd-8f2f-a567dc379eb8",
        "cursor": {
          "ref": "4d3d8e33-b7d0-4cb0-aff8-ab97a5a4c955",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f977482e-207e-4a66-ba58-0a3b0254376f"
        },
        "item": {
          "id": "6b1a8eea-6a8f-4bcd-8f2f-a567dc379eb8",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f85273bf-0ac6-4a7d-8c7f-57c0bdbcb001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2943545e-ddd5-466e-ae7e-b887b5ee2765",
        "cursor": {
          "ref": "660f4766-b25f-4bbd-8ae6-d6f18ba6dfe3",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "8acd10ea-3fc0-4127-a212-6a04c551721f"
        },
        "item": {
          "id": "2943545e-ddd5-466e-ae7e-b887b5ee2765",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "eba39a56-4d14-462e-a3dd-7272e1b73630",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02ea4a86-d270-4ede-bd6b-b4691ad70c91",
        "cursor": {
          "ref": "95ff3f8d-b5b4-4f4f-8f14-e0be925a41e9",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "145a7518-e3bc-4b93-b5a5-cea1522d279a"
        },
        "item": {
          "id": "02ea4a86-d270-4ede-bd6b-b4691ad70c91",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "80f3188b-aff8-4d41-ac88-1fb55e2df62e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ad47d22-2334-49f5-9d81-39fcfb7217c2",
        "cursor": {
          "ref": "effdc968-0064-4f51-8f22-9e86e7c5368c",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "50fb5d28-7dd0-4559-ab3f-8792c075cce4"
        },
        "item": {
          "id": "1ad47d22-2334-49f5-9d81-39fcfb7217c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "94eb1fd1-cb27-4afa-8a90-17e6d4520f8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43cb3c5f-325a-4a12-a78b-8a38ae63bbb9",
        "cursor": {
          "ref": "e6915cda-5168-4d89-a861-868c66a89516",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "76067f59-0783-420b-9085-9b90ebd7b6e9"
        },
        "item": {
          "id": "43cb3c5f-325a-4a12-a78b-8a38ae63bbb9",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "18fc7250-67b5-4a79-b654-35d2b0ada8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d65f174f-f14a-4fda-8f16-2139f9035ed0",
        "cursor": {
          "ref": "b254ecd0-5e33-48a4-aa40-93ae371540cd",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "5c420624-d404-4991-84a8-464c265a798e"
        },
        "item": {
          "id": "d65f174f-f14a-4fda-8f16-2139f9035ed0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "69cfe74f-740f-4aac-bef2-edf2b2c59649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f62143d5-3936-41f8-9757-8ee74b60815c",
        "cursor": {
          "ref": "4a6e5afd-0cd2-4336-aac0-e4d837fbb599",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "6cd77044-670b-4365-a614-2a48ff778b60"
        },
        "item": {
          "id": "f62143d5-3936-41f8-9757-8ee74b60815c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0af4d27a-759d-4fbc-a284-f6796ed97555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abb392f-8694-43fe-9854-2bad02b299bf",
        "cursor": {
          "ref": "22499ff2-3551-4e14-8ae2-f97fd77bd731",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "75c025e8-c923-45da-bfb4-c5417a53b3c8"
        },
        "item": {
          "id": "5abb392f-8694-43fe-9854-2bad02b299bf",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "81f29441-b739-4ef6-82ee-c8a024dd352e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b23367b-1959-4689-98d9-d408e5b06a75",
        "cursor": {
          "ref": "c221a917-6076-4ffa-8680-a06f40194104",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "0b616263-6a85-4ae3-ae35-14105030b428"
        },
        "item": {
          "id": "6b23367b-1959-4689-98d9-d408e5b06a75",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "0c4c2f42-522a-4449-ae38-015f1d0998af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1f5fc43-1dbf-4977-a584-cdd25cad1eb0",
        "cursor": {
          "ref": "a26177c5-5387-4c16-91f6-e48c5602ab2e",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "977d3bfc-1a2c-4c85-9897-3010fc4097a0"
        },
        "item": {
          "id": "d1f5fc43-1dbf-4977-a584-cdd25cad1eb0",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "6ee07da6-0bf3-488b-bc38-47a61f4b6793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b51ccea-b15b-4d95-ba1b-313e53dd661f",
        "cursor": {
          "ref": "d69496f7-0225-4fca-acf2-db78a2ac7f39",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8915cbaf-be2c-4520-81d1-8cc0e2912340"
        },
        "item": {
          "id": "2b51ccea-b15b-4d95-ba1b-313e53dd661f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "f88bcdd5-2737-4ae5-835a-1f1461639dd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7e183bb-a3df-4cda-8004-1e4aa0d21233",
        "cursor": {
          "ref": "459738b8-89a8-4a18-9b9b-4e82f0fc73c7",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "e7d91de4-f08f-42cc-b583-7a776ce82217"
        },
        "item": {
          "id": "d7e183bb-a3df-4cda-8004-1e4aa0d21233",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "d27e38ac-940b-4d82-8cef-a62f4f3774a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483af66a-406d-4972-9b37-c34b5557145b",
        "cursor": {
          "ref": "b3175026-fc49-4d2a-8cea-c29640f8b3ff",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c1c041c9-4e31-42e4-93f8-e8a35b8691ee"
        },
        "item": {
          "id": "483af66a-406d-4972-9b37-c34b5557145b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "6dd12af8-467b-45a2-9a89-d8fe61ba0d20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "445031e3-773f-4972-8893-181acb5877d3",
        "cursor": {
          "ref": "ff04505f-e4df-4445-8221-158b6c5bbb64",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5ffc1519-38e5-4776-96d9-c28c2ef911ec"
        },
        "item": {
          "id": "445031e3-773f-4972-8893-181acb5877d3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d66729a2-e1e2-4410-8e6e-e587d21020ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354d390e-bdc9-4d0b-9df6-aaec70eaf72c",
        "cursor": {
          "ref": "ddfe4374-5142-43da-965d-c83256e084e8",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "b773f901-6b20-4bde-abb6-fe43ee6014c2"
        },
        "item": {
          "id": "354d390e-bdc9-4d0b-9df6-aaec70eaf72c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9da34fbe-437c-445e-a8ff-e58dc2adf54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b100314-7f70-4247-9669-e3cb405f75cc",
        "cursor": {
          "ref": "ac1f4485-da62-432f-9721-a7e67c97de2f",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "4e12737f-8281-4939-802c-04186b1ad5d3"
        },
        "item": {
          "id": "4b100314-7f70-4247-9669-e3cb405f75cc",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5bb95667-6769-47fc-b411-f514dfed5f45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409e8e3e-ea89-4a3d-b9a3-6bfbb01efbfe",
        "cursor": {
          "ref": "545f2a8d-c226-4b89-8f69-deb65474ff0d",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "872f8e25-ad2b-467b-97df-1a5ab0f56661"
        },
        "item": {
          "id": "409e8e3e-ea89-4a3d-b9a3-6bfbb01efbfe",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1f4975bc-816f-458a-a3c8-7c679349997c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de641ea8-eb9a-41c8-b163-e6ce959a7b39",
        "cursor": {
          "ref": "fc312fef-f98d-489f-a287-96a1cb94a855",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "319c4851-60ff-43d0-8667-d6bf5deba05e"
        },
        "item": {
          "id": "de641ea8-eb9a-41c8-b163-e6ce959a7b39",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "40ad6913-73bf-4d30-a81f-65a4a879b421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c48ab2be-996d-4129-a9b8-f720b5d64dea",
        "cursor": {
          "ref": "75d7bfaf-5167-43d9-b05c-4e833397ebd3",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "194665db-04dc-4d64-8771-1cd5f30cd46b"
        },
        "item": {
          "id": "c48ab2be-996d-4129-a9b8-f720b5d64dea",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "591ad4d9-9d3a-4cac-9593-872bb685d1ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480cee56-001b-436c-b86b-f51eb12be02c",
        "cursor": {
          "ref": "df2afb0b-faaa-4af1-87de-3d192211421f",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "195459a3-9088-40fb-8c59-2317d339d5c0"
        },
        "item": {
          "id": "480cee56-001b-436c-b86b-f51eb12be02c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "707355ef-4923-49a2-b997-4a42310a6fc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40c7062a-283f-4941-99bc-309e1016301b",
        "cursor": {
          "ref": "f2ae9bfc-bbd4-4fe4-825b-a2fde0fe6ecd",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "3d4287e4-236f-42da-84ad-2d5b70801ba1"
        },
        "item": {
          "id": "40c7062a-283f-4941-99bc-309e1016301b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ac47c068-9df2-400d-b325-c6f211b69a77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15783dab-44b9-47bc-bc2e-298b67660d06",
        "cursor": {
          "ref": "4c38b201-a3e1-4d22-a8f7-226d5ea7c38f",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c2e6e7c1-b014-422e-b14e-953181ee5700"
        },
        "item": {
          "id": "15783dab-44b9-47bc-bc2e-298b67660d06",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0d2d0630-a234-4568-bf44-5686f3389369",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "deb1ed71-88e4-4289-ae9e-d8e2816a69f4",
        "cursor": {
          "ref": "46f4e6ab-0301-4d84-b720-58a78fc052ea",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "8227b581-a679-465b-9a79-013581752d0a"
        },
        "item": {
          "id": "deb1ed71-88e4-4289-ae9e-d8e2816a69f4",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "9b037257-66fc-4424-91cf-dc8428dafb5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3200d45-a7d9-4ccd-806d-d3623fbd9f83",
        "cursor": {
          "ref": "ac842c8f-8446-4edf-8573-554b9b591783",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1a7d2a92-0ded-47ef-8886-7840d9e6fca8"
        },
        "item": {
          "id": "e3200d45-a7d9-4ccd-806d-d3623fbd9f83",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "3653ab2f-af49-46c0-967f-45add57e3a91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ef5797-f355-4637-831b-5de0f9a32ca4",
        "cursor": {
          "ref": "fe24ab69-12dd-4849-a835-608b3da2f90e",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "56c0a692-79e8-441b-b766-0af84c5955b9"
        },
        "item": {
          "id": "63ef5797-f355-4637-831b-5de0f9a32ca4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d0593aaf-9d5c-4b35-a9b8-7088e4276837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7483ee87-1c3f-401b-94c6-f0e361b8af43",
        "cursor": {
          "ref": "43d296db-ab6c-4cf6-99f5-4f3f2f308dcb",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "535c5dda-34b9-4b75-95a8-f44ab838838c"
        },
        "item": {
          "id": "7483ee87-1c3f-401b-94c6-f0e361b8af43",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "30323542-2028-4971-b32d-92aa4337da01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87995be-ce24-42fa-ab78-f8df51740b7e",
        "cursor": {
          "ref": "db0b7292-0a07-4ccb-aa77-83e8878f0fbc",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "539749e2-934c-448d-8adf-4b8e2db70596"
        },
        "item": {
          "id": "d87995be-ce24-42fa-ab78-f8df51740b7e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3a9e1d1e-446e-4a80-a014-ad4b7a10b067",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88dd636-aa3a-424f-9830-462506ea82c7",
        "cursor": {
          "ref": "8d74e338-e9f9-4c79-bff1-b97fcda43486",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "9de5ba4e-86b8-4b34-a31c-ebf1303692de"
        },
        "item": {
          "id": "c88dd636-aa3a-424f-9830-462506ea82c7",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9c5fc055-f2e8-42cc-83ac-75fabed74491",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49c5667-323a-41b6-b641-7b8801cd0adf",
        "cursor": {
          "ref": "e9abc5e5-3718-4eae-a881-a90dbddb373a",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1ccf4e57-75cc-43ec-b08c-185cb5714cb5"
        },
        "item": {
          "id": "f49c5667-323a-41b6-b641-7b8801cd0adf",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "78369a85-c185-4dbf-bd5e-d49e30dd6b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "b57fbeed-bf2b-48ef-89d4-b90693ca9e92",
        "cursor": {
          "ref": "fa0d0bdb-fecc-47f0-b03c-556d3b9d0579",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "27edc338-3421-4035-8be7-2001817a372a"
        },
        "item": {
          "id": "b57fbeed-bf2b-48ef-89d4-b90693ca9e92",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "4fcd3e55-c295-46ef-bf56-312d22c64fed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd695f65-2914-431d-b867-6df7acda8ac5",
        "cursor": {
          "ref": "0e5dec5e-1268-4663-abf4-9702daffbd64",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "bc4bbdde-c4f0-4d60-83d7-bf57a3fe64e9"
        },
        "item": {
          "id": "bd695f65-2914-431d-b867-6df7acda8ac5",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "60332599-8444-49d6-92ee-152f649bdc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ed1a809-8e52-4640-b4ef-fd9ac708b665",
        "cursor": {
          "ref": "d322cccd-2991-41ad-9070-6988029a2c95",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "11bd6e24-71e5-4c74-8e0d-7db94603e554"
        },
        "item": {
          "id": "3ed1a809-8e52-4640-b4ef-fd9ac708b665",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "27827c33-06af-45ec-b077-58f45a13a246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3794f0-d63a-4e6a-b26f-47645b30f641",
        "cursor": {
          "ref": "87954b5c-a1f0-4d69-961e-4f696b53d622",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5b6007c8-2123-4d38-8b5b-db580411ec36"
        },
        "item": {
          "id": "ab3794f0-d63a-4e6a-b26f-47645b30f641",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b2c3d785-5f39-4aec-a9c0-d9fd6689ad2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc53d1c6-6dcc-48d5-a266-3f0495620139",
        "cursor": {
          "ref": "561ab3ef-3861-48bf-bbce-e7c727a7b2eb",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "1924d1d3-d7d0-4957-940d-ee8a04223336"
        },
        "item": {
          "id": "cc53d1c6-6dcc-48d5-a266-3f0495620139",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "6c0329e7-19ce-4d5f-9c88-aca2ddb0c00a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63224cf6-31e4-49b7-954a-9724aa221ca4",
        "cursor": {
          "ref": "d580a205-86a3-401a-bec9-6eb5e8fade54",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "e7d72536-11b2-4b4e-b065-4e2cda3ff523"
        },
        "item": {
          "id": "63224cf6-31e4-49b7-954a-9724aa221ca4",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "b0d18c30-707a-44c4-b754-36c8980fcf24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87c5949-77a8-4f4d-b3cb-a6b19a117182",
        "cursor": {
          "ref": "5905d4eb-7bb2-4f10-8c71-b0b4b5762c10",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "36772b4e-5885-4784-84b5-617d289d3b64"
        },
        "item": {
          "id": "b87c5949-77a8-4f4d-b3cb-a6b19a117182",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "a0e1ee93-8a23-4e29-abb4-059f0359f9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55c0b14c-dc08-4a51-907d-c239eaf01a0c",
        "cursor": {
          "ref": "43eb6f62-484b-46a5-9937-f4c31deb2d55",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "22083012-e8f0-415b-aa60-57e422594d7d"
        },
        "item": {
          "id": "55c0b14c-dc08-4a51-907d-c239eaf01a0c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0dacb295-2aa9-4e15-aacd-6da6467e1560",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55920d9e-773f-4c92-98dc-7a7555a453ee",
        "cursor": {
          "ref": "a9588d58-33f8-4bc6-b942-c38d12b9c131",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "630899ef-b697-485b-81fc-b3fe4583c85a"
        },
        "item": {
          "id": "55920d9e-773f-4c92-98dc-7a7555a453ee",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7082f300-6197-4feb-a394-486a9cbbec3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d4b8a8-432e-4cc5-8de0-672ad3224d17",
        "cursor": {
          "ref": "e9f71bdb-e02c-44d0-b679-5ed9301f6dfc",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "f586f280-daa8-4699-85ad-fb9cdf39f55a"
        },
        "item": {
          "id": "30d4b8a8-432e-4cc5-8de0-672ad3224d17",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "46786627-929f-4854-b597-0c6fe0511626",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3c1e18e-f7e9-4247-a103-b1981905be6e",
        "cursor": {
          "ref": "a3faa22a-91ec-431d-b137-e9e9a158285c",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ba899fb7-8025-45a8-924a-4b993ef70670"
        },
        "item": {
          "id": "b3c1e18e-f7e9-4247-a103-b1981905be6e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "77ed0c79-1429-41c7-8e43-a9c7b631c404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4f5202-7eb7-4237-ab7f-219188b7fd67",
        "cursor": {
          "ref": "a3b067a3-17ea-497b-aaea-3fef52dbf51a",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f8e288fc-b857-406d-b30d-1a413ca7eefb"
        },
        "item": {
          "id": "9f4f5202-7eb7-4237-ab7f-219188b7fd67",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "259f8ff8-d976-49bc-9dbc-cfa710007699",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62655b9c-2f9b-429f-8e68-2738510d7e84",
        "cursor": {
          "ref": "b724cb03-2589-4983-bbdb-d97da486c374",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "44e99353-3116-4601-ac6a-793afdb1f03e"
        },
        "item": {
          "id": "62655b9c-2f9b-429f-8e68-2738510d7e84",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "90474189-9468-4f54-a9d1-7503c9068531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14f6329-363e-435f-a6bf-b1203af83866",
        "cursor": {
          "ref": "1358f938-e545-4b71-b2f8-b9213590f5ff",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "edfb4a32-fa38-4c6d-89a4-8ffe44c839fb"
        },
        "item": {
          "id": "f14f6329-363e-435f-a6bf-b1203af83866",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7b7f3fd9-9a68-4d9d-9921-bcb978566f50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3bb79c-231b-40a0-b3ec-9fd0b5dc131f",
        "cursor": {
          "ref": "46bbc64d-dda4-4cf8-8026-2e319d3a9d13",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8c3a2c09-60a1-4451-b59b-ad75e511ab04"
        },
        "item": {
          "id": "1b3bb79c-231b-40a0-b3ec-9fd0b5dc131f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "ca7f8a3f-12fc-4576-b4f0-b0ede95875b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4a93e6f-02dc-4e72-9a69-922884d5e6f2",
        "cursor": {
          "ref": "cc60f4da-14a7-4812-923b-83a60dd3826c",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "59a50edb-e570-43ee-a47f-f737e5389bf1"
        },
        "item": {
          "id": "b4a93e6f-02dc-4e72-9a69-922884d5e6f2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "e7c7253d-40b6-4f17-887d-2ebcb1ea5710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f07df06-a232-4828-b965-d0f1c8a278b1",
        "cursor": {
          "ref": "009e9a57-9526-4ba9-942e-1ff8914bb4a7",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f351d314-a524-4106-9f20-b1a9170feb5e"
        },
        "item": {
          "id": "0f07df06-a232-4828-b965-d0f1c8a278b1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "84b41557-c3f7-400c-9626-31393b7af885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d717fe96-d2ca-4168-b387-c17bf3010545",
        "cursor": {
          "ref": "6bda40d2-232c-4041-9cce-663e01f41339",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cc4578e9-82b0-4755-9095-d624024a4659"
        },
        "item": {
          "id": "d717fe96-d2ca-4168-b387-c17bf3010545",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ff8d29a2-12f0-4906-948b-7d2851234c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87bbf85-27b3-442b-8a0c-b8b5625e12b9",
        "cursor": {
          "ref": "daa4fdc4-44e3-46ba-a7b5-a0c2a486608a",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "261b8ff3-b79d-4cc2-a067-2bcaeb37c1b3"
        },
        "item": {
          "id": "b87bbf85-27b3-442b-8a0c-b8b5625e12b9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "ec5db1e3-3ee4-4f09-8d13-2c502ad09ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7f74ab6-114e-4d3b-a8a3-ba137e02a1d9",
        "cursor": {
          "ref": "b59519d9-8445-4caa-80d5-a016bb663e51",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "2553c0df-5872-4cf4-861d-6a4e319dbe34"
        },
        "item": {
          "id": "f7f74ab6-114e-4d3b-a8a3-ba137e02a1d9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f02e222b-8ed9-4231-96c3-af0a9d250569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17b86acf-c840-4f7f-bbd5-8cfbc53bbff3",
        "cursor": {
          "ref": "9ee706cc-3fbd-478e-bf86-3d9429caec50",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "3d6385d6-3491-4f7f-a873-532c38d558dc"
        },
        "item": {
          "id": "17b86acf-c840-4f7f-bbd5-8cfbc53bbff3",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "39c10de5-0770-4ced-88b8-484733759584",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4592682-01df-4507-a31a-fc32c2a7041e",
        "cursor": {
          "ref": "f7917b2c-9e2b-42fd-9dde-edf176fb3fec",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8fadac74-c155-4f50-8958-6c45261bc911"
        },
        "item": {
          "id": "a4592682-01df-4507-a31a-fc32c2a7041e",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "17cc958e-9348-4141-9ecc-4ba4f1d3b155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b11d6e37-7e4c-4e1a-b956-b2f026fd5381",
        "cursor": {
          "ref": "0a07499e-9344-4f59-9566-b5efd7453e15",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d3f62ca3-fd54-4a01-b57c-91520d75f827"
        },
        "item": {
          "id": "b11d6e37-7e4c-4e1a-b956-b2f026fd5381",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a8e8a6e3-c3fd-40a9-a075-ed59e1f4303b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f899a051-3de6-4ec2-a67e-be51cc1b4ddd",
        "cursor": {
          "ref": "34f02814-e225-4b9f-8e0d-c1ac7f21e6b1",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "5da608fa-5fc2-4eca-b8c6-d4374adc6a95"
        },
        "item": {
          "id": "f899a051-3de6-4ec2-a67e-be51cc1b4ddd",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "8d58ee89-6433-4e26-948c-64041469ceb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de96b860-b754-4898-abbb-dc06d4cf88d7",
        "cursor": {
          "ref": "3bbb72aa-3fa3-46d6-a52a-80eedc3ca928",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "175410d2-980b-4d4e-be83-6b560221cfa2"
        },
        "item": {
          "id": "de96b860-b754-4898-abbb-dc06d4cf88d7",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a4d4d971-134c-4145-a992-7b2334e059c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7c0bf16-d53a-421e-9071-aa241a0aed5b",
        "cursor": {
          "ref": "b162930b-4570-4758-9442-6038efd8d32a",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "88e0b9da-8a2b-4428-a83f-a5d7beea8b6c"
        },
        "item": {
          "id": "b7c0bf16-d53a-421e-9071-aa241a0aed5b",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cfdaa50e-dac5-4c7a-9c12-9e2423949a48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46562669-b5af-4fc6-a183-9cd42ff48273",
        "cursor": {
          "ref": "2ff5e2ed-512e-41b8-9b93-45e6fe25ae8a",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "4b99c204-ade7-459e-be89-ded47ae232da"
        },
        "item": {
          "id": "46562669-b5af-4fc6-a183-9cd42ff48273",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "5a2dd86f-10d2-47b5-9992-9aab33fe641a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94e6f62-4fa6-4132-815d-582e42f0f536",
        "cursor": {
          "ref": "47d2d225-687b-4a3b-a677-4970d73296c1",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "171d4f54-aa5b-49e7-9bae-b2bb4888556d"
        },
        "item": {
          "id": "c94e6f62-4fa6-4132-815d-582e42f0f536",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "115d1be7-fe10-4fb7-8585-fc82a3c5eea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0811a8-9f7e-48b2-b80d-fdb8cf4de791",
        "cursor": {
          "ref": "1f328ffc-7719-4d61-b9cc-a2c1e1610c77",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d89a1ca3-8792-4f81-aba9-a18821aa72c2"
        },
        "item": {
          "id": "1e0811a8-9f7e-48b2-b80d-fdb8cf4de791",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "0d089d58-b45e-483a-aa61-29b46372c4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ac14b2-107e-4dd6-adf5-048419e4b962",
        "cursor": {
          "ref": "6e8b4b82-3220-48a6-87a6-8f6f67e31d53",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "0870eb4f-411b-4a97-8fc1-b9f1b1674382"
        },
        "item": {
          "id": "93ac14b2-107e-4dd6-adf5-048419e4b962",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "25e79a09-c3e5-4fd2-8462-841f7f588b57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ccd948d-4959-40f2-8f9b-bef5b09812f8",
        "cursor": {
          "ref": "1af2c1ed-aeb3-419c-bc36-47f0099b0538",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "577ac228-cc49-4d86-9e87-d0f72cd22d7b"
        },
        "item": {
          "id": "3ccd948d-4959-40f2-8f9b-bef5b09812f8",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "064868be-b184-49ef-b145-15707107c7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95b503fa-5d4e-4e44-b04d-3e261e80eaa2",
        "cursor": {
          "ref": "68833aaa-39f2-440a-9aa5-673a76a39b14",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "847abb5b-ffdc-4fc9-9615-69838b88f31a"
        },
        "item": {
          "id": "95b503fa-5d4e-4e44-b04d-3e261e80eaa2",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "647e3e56-afe6-4a45-a4dd-62e3190988f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfaaff57-9be4-440d-80ca-43eff3e64008",
        "cursor": {
          "ref": "abdd38cd-4e39-43ae-abee-35cfa28121a6",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "67102380-2f48-40ea-a040-44057dc92f36"
        },
        "item": {
          "id": "dfaaff57-9be4-440d-80ca-43eff3e64008",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "f100604a-a0c9-4060-9d59-4aed4a934eab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e395a66-3ec9-4270-b947-03ef340ce675",
        "cursor": {
          "ref": "e0bd8459-4d10-4007-81cc-ea6d1c012e84",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "15e0f608-931f-4c96-bbe0-eeedb0ce5242"
        },
        "item": {
          "id": "5e395a66-3ec9-4270-b947-03ef340ce675",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "28f35b0b-81a0-40e2-ad7a-efef5a769b6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c8f27be-7121-4652-8964-b7b7a34811d3",
        "cursor": {
          "ref": "5c530131-ad53-4314-b923-328b5c4aa03b",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "82ef3e97-249c-45b1-b33d-195a0859ab7d"
        },
        "item": {
          "id": "2c8f27be-7121-4652-8964-b7b7a34811d3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "17548397-ea69-4459-94d8-a52ee36b671d",
          "status": "Created",
          "code": 201,
          "responseTime": 70,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "51ea1f1e-3b89-439c-8b44-5b4dd42b83f6",
        "cursor": {
          "ref": "5cf1f519-0c83-4958-a672-ef67067df71d",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "bc20a856-08ef-4af6-8fa4-3596c7d7c367"
        },
        "item": {
          "id": "51ea1f1e-3b89-439c-8b44-5b4dd42b83f6",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "ab767b47-53b1-4eee-a195-f41b3b301eac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4b42e4f-f328-41e5-9c0d-852abe991b15",
        "cursor": {
          "ref": "e1fd71de-e5e5-4094-a8b4-7777c153a891",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "5994794a-dc5c-4814-a588-0fdeaeeed115"
        },
        "item": {
          "id": "c4b42e4f-f328-41e5-9c0d-852abe991b15",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1dae15ac-0316-4649-9d3a-adcb9dbf0cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344eecad-aa1e-48ee-9459-548e60d32d5e",
        "cursor": {
          "ref": "84446bc7-6128-4488-92ca-d5be7fc0a8c9",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "faaaec34-bede-4704-9eb1-f15f860b66b3"
        },
        "item": {
          "id": "344eecad-aa1e-48ee-9459-548e60d32d5e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "859f5f2d-4282-404c-a428-fdfb43feef71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7d1ee78-b9ec-4d02-9be3-5d2d1ade4f64",
        "cursor": {
          "ref": "0a0e48d8-3665-400b-b2e0-c9266db9e311",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "990783de-88c7-4f55-a673-19c9f5797a46"
        },
        "item": {
          "id": "a7d1ee78-b9ec-4d02-9be3-5d2d1ade4f64",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "ed5d5e64-de73-451b-ba93-3f6c8fb3d361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d749f71-53de-43b3-a8d5-d2158dc7556c",
        "cursor": {
          "ref": "a6c57ca9-e9e1-4f31-aa28-ecf5122aca0a",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "068904dd-069c-4ccb-ac9e-aec139c19633"
        },
        "item": {
          "id": "0d749f71-53de-43b3-a8d5-d2158dc7556c",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "15672691-b2dc-4535-a609-6517881888d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13c1f6fa-935c-468c-8aea-8f0d219a19ff",
        "cursor": {
          "ref": "715bfa03-a80b-4e7c-aab0-15a6905e6c0a",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "c6ef9f3a-24b5-4b58-9462-b19751122d59"
        },
        "item": {
          "id": "13c1f6fa-935c-468c-8aea-8f0d219a19ff",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a1a607a6-537b-42d9-a37e-15fad6e5e36a",
          "status": "Created",
          "code": 201,
          "responseTime": 69,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "3a06d580-7c47-40d8-a0f9-a6789c354d45",
        "cursor": {
          "ref": "9499dd58-313c-4182-9a45-930c8750d9f6",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "7936a031-a380-4d33-8440-7adfdf994bb1"
        },
        "item": {
          "id": "3a06d580-7c47-40d8-a0f9-a6789c354d45",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7392792f-47c2-47bb-af89-e701317045b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "255d6421-df33-4afe-9e28-aa417f55bda5",
        "cursor": {
          "ref": "78930a3f-4287-4e91-8f63-df173f465a0f",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "408b4020-a987-498b-ae63-50b45fb13360"
        },
        "item": {
          "id": "255d6421-df33-4afe-9e28-aa417f55bda5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "64918b54-0a3c-4ce5-b649-1277ca0fdd62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9655f2b-5894-4a7c-8534-42cb58d6dd18",
        "cursor": {
          "ref": "43828716-60ea-45b9-b708-dbecdbc1598b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "807ef0d6-e200-4318-8fcc-0d0194f1158e"
        },
        "item": {
          "id": "a9655f2b-5894-4a7c-8534-42cb58d6dd18",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "051965ec-07c6-457d-9867-1447aa72cfd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a180ce8f-f003-4142-a80a-6a3450bb6727",
        "cursor": {
          "ref": "c8abf095-3694-4fc7-b05e-23e8334ca29b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "116aa3fc-a92d-4a66-a09a-738eb8c93b79"
        },
        "item": {
          "id": "a180ce8f-f003-4142-a80a-6a3450bb6727",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "37dd7896-615f-4f1b-ac80-09ca84adb24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f313df8-04c7-49a0-8e64-c390a73891ac",
        "cursor": {
          "ref": "e1635909-7638-49cc-8b32-74a55f94631b",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "1010d341-adb2-45a6-a676-f516ec8cbff2"
        },
        "item": {
          "id": "9f313df8-04c7-49a0-8e64-c390a73891ac",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9cadcab7-f14a-4057-bca9-7b7257fd2a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d694dbf-c490-4da0-8110-1db9bbd6c0e1",
        "cursor": {
          "ref": "aebc6ae0-d5ca-4ba4-ab5b-32e850b3a5ac",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "08f15bb0-eeb4-42c7-89c4-448e946a39c7"
        },
        "item": {
          "id": "6d694dbf-c490-4da0-8110-1db9bbd6c0e1",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4a73b7e5-87f6-40f8-b8aa-3f43c0bb52e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ca83f97-a440-4518-9315-87a1105da53f",
        "cursor": {
          "ref": "5a685704-31b2-4ed2-8478-49d65757707e",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "a31f5b5e-746f-42a4-9804-54de74e9197b"
        },
        "item": {
          "id": "2ca83f97-a440-4518-9315-87a1105da53f",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "8509006b-6408-4ffd-9e55-6752b2d23502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97960668-78fb-4868-9f1b-794284ea7e04",
        "cursor": {
          "ref": "3474a190-539e-4c44-97bd-607f8ce36986",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "647e39e4-5478-498c-9333-db940918990f"
        },
        "item": {
          "id": "97960668-78fb-4868-9f1b-794284ea7e04",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c6910a42-c01d-4f3c-be65-d65a47de2e20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f116894-21b9-45d7-9e81-a139cd54b6d9",
        "cursor": {
          "ref": "c36a974e-87f0-4659-9b00-f1462df1523f",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "dc8f0560-98e4-4bb9-9aca-d4295e6ebcf3"
        },
        "item": {
          "id": "1f116894-21b9-45d7-9e81-a139cd54b6d9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b87916ec-5960-41b8-a89c-17958c3c9cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "23f4d4ef-6bbb-4bcb-87f3-16184dde44ae",
        "cursor": {
          "ref": "4cc381aa-9135-47ea-89b5-eb8902f56e78",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "cbc8bad2-239f-424e-b0fe-98579d2528a2"
        },
        "item": {
          "id": "23f4d4ef-6bbb-4bcb-87f3-16184dde44ae",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "4f9ea252-a283-4274-a04e-fb6eeddaf313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "f1d0e572-bc6b-4064-83a0-4814cfd9f60f",
        "cursor": {
          "ref": "e5a938dd-d6b0-408a-96b1-d842ce0d6af9",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "14020d5b-f2bf-46e3-a70c-fdc07e946d07"
        },
        "item": {
          "id": "f1d0e572-bc6b-4064-83a0-4814cfd9f60f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8fe18bf4-7212-4433-bd7e-c0bf0094d551",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "0967ef18-b62d-4dd7-8e9a-c5efb5d1cc31",
        "cursor": {
          "ref": "35a2b3b0-2753-4513-bd1b-3ed02245ebbb",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "f3a73a7e-1d12-453d-92bc-c565b13382f1"
        },
        "item": {
          "id": "0967ef18-b62d-4dd7-8e9a-c5efb5d1cc31",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9a56a6a0-5efd-4021-a598-b055a24db3bd",
          "status": "Created",
          "code": 201,
          "responseTime": 79,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "938476e4-bff3-4f7d-aaa6-8619182b92b0",
        "cursor": {
          "ref": "2359b7ab-bb22-4206-835b-43f77c38d3f1",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e0c0e1a4-45d4-41b2-bdf7-e936f671542c"
        },
        "item": {
          "id": "938476e4-bff3-4f7d-aaa6-8619182b92b0",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1bd44f90-a9d5-4c4a-8f06-990074a72fe3",
          "status": "Created",
          "code": 201,
          "responseTime": 65,
          "responseSize": 664
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f33b4fb-6549-499b-85c7-c76f8094580d",
        "cursor": {
          "ref": "52a09c79-7078-4f38-abb8-03a6acd445f4",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4a6fdbd8-8c3f-4779-9ee5-329decd6eb77"
        },
        "item": {
          "id": "7f33b4fb-6549-499b-85c7-c76f8094580d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "16af1ba9-e4fc-41a2-8374-2203c15f0589",
          "status": "Created",
          "code": 201,
          "responseTime": 71,
          "responseSize": 633
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "09d9fdfb-c47c-4944-a503-64353350e441",
        "cursor": {
          "ref": "d506559a-24db-49ab-93ff-4d138b8a0f87",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "6ba259e2-0163-4ee5-8de0-71b6616fbd2d"
        },
        "item": {
          "id": "09d9fdfb-c47c-4944-a503-64353350e441",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e7ef7e61-8642-43f1-b1f7-26b62174c0ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "62a9ea84-48ab-46f1-b022-e103e9eb37ac",
        "cursor": {
          "ref": "7a7769fd-1e3a-4e90-90c6-7b64687bc22a",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "212a3faf-3b78-4c98-80fc-0db913de6d05"
        },
        "item": {
          "id": "62a9ea84-48ab-46f1-b022-e103e9eb37ac",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b6303865-8576-4d18-976a-7d4057c4b9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62a9ea84-48ab-46f1-b022-e103e9eb37ac",
        "cursor": {
          "ref": "7a7769fd-1e3a-4e90-90c6-7b64687bc22a",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "212a3faf-3b78-4c98-80fc-0db913de6d05"
        },
        "item": {
          "id": "62a9ea84-48ab-46f1-b022-e103e9eb37ac",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "b6303865-8576-4d18-976a-7d4057c4b9fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b207f66-3eb4-4e2e-852e-e2ae979fb29a",
        "cursor": {
          "ref": "09fd53e4-e8af-4021-af24-5217235366f8",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "776bc291-3ecb-4c74-bd30-0c24b78c4828"
        },
        "item": {
          "id": "3b207f66-3eb4-4e2e-852e-e2ae979fb29a",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0d57f424-208d-471b-ac5f-c6ce286bed8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9d19c8-9434-4566-907b-c2b541dbf276",
        "cursor": {
          "ref": "131760d6-18d9-4ff2-88fe-5e2eec47a7c2",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "ec194204-e401-4ef5-8eb6-e4b7b6425a11"
        },
        "item": {
          "id": "2b9d19c8-9434-4566-907b-c2b541dbf276",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "27983e65-0779-4c03-8770-01544d16f224",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80679f44-d6f5-4bbe-995b-8ad1dbf475bc",
        "cursor": {
          "ref": "7779830e-6000-4969-8979-212c49ec74f3",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "a27b63f2-5347-4b5a-b190-906c36195043"
        },
        "item": {
          "id": "80679f44-d6f5-4bbe-995b-8ad1dbf475bc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "20ad963e-bd27-435f-9725-382f0f5bd390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aaadc27-43fa-43e2-953c-7463866f7372",
        "cursor": {
          "ref": "141c3bb4-d60d-4c6d-b7cd-a2410107333a",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "af86f58d-41cf-4f86-97ce-22939429586c"
        },
        "item": {
          "id": "8aaadc27-43fa-43e2-953c-7463866f7372",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ac71d9f2-4c1e-4875-8345-b95d491e2114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666c04d2-db8e-4631-9465-a9ec02ba3530",
        "cursor": {
          "ref": "6db49c79-7d0c-40e9-8ab3-4193b0d13220",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c51e15db-4f3d-40f2-bfbd-c11a753c2cf0"
        },
        "item": {
          "id": "666c04d2-db8e-4631-9465-a9ec02ba3530",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2ca02206-f027-4bb0-aacd-426e4dc77d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55b28dca-2d1d-4c51-839c-f5194dfbc10c",
        "cursor": {
          "ref": "6786a3b2-7caa-479b-a475-2e4da958c001",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "d9d58b2b-c5aa-4d30-8d08-94fcec0e18f1"
        },
        "item": {
          "id": "55b28dca-2d1d-4c51-839c-f5194dfbc10c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "7e890cae-df99-4a2e-b719-efca1bf216fa",
          "status": "OK",
          "code": 200,
          "responseTime": 47,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "06f4e31f-7761-4124-b904-35208bf5763c",
        "cursor": {
          "ref": "1ac8d3d7-383f-400b-bdb5-7350b7376fa7",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "a4db0bd8-6224-443d-a0db-e5724fc78d9d"
        },
        "item": {
          "id": "06f4e31f-7761-4124-b904-35208bf5763c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5a67dc7d-ad43-4757-9251-b66db1167f4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "200e18bd-74f3-4750-a622-5f7cae871e5c",
        "cursor": {
          "ref": "24e70c21-0ca9-4a40-b1a7-228abc63c2a5",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "2bfa426f-3846-4a97-86f4-5a9a1fe90260"
        },
        "item": {
          "id": "200e18bd-74f3-4750-a622-5f7cae871e5c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1d489b9b-c4cf-4c33-8cfc-6bf3b7b24323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04fcefa6-92f0-4400-a142-38f2e854677d",
        "cursor": {
          "ref": "ef36f11e-e013-4f61-b951-d10345165861",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "80ead6e9-d79d-41fa-8846-bd1e99771c03"
        },
        "item": {
          "id": "04fcefa6-92f0-4400-a142-38f2e854677d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b845cebe-f4aa-4af5-9b60-2a2a1f422a65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1409db07-68dc-47a4-8053-7aaebd2fc182",
        "cursor": {
          "ref": "5642fa1a-a1d7-4837-8d21-e34758ea13ac",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "0b19cc8e-4f20-45d2-a4d4-10fbed83a2eb"
        },
        "item": {
          "id": "1409db07-68dc-47a4-8053-7aaebd2fc182",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "b46c0e7f-bd75-4a8f-a8f5-b7bde36e23cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7ebacab-6740-4e8a-a246-9324dc0a5076",
        "cursor": {
          "ref": "c5be2b87-1b8b-4b4b-adea-8b4594df54c4",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "c3357593-f47c-40d0-8dc1-2f050ed022f7"
        },
        "item": {
          "id": "a7ebacab-6740-4e8a-a246-9324dc0a5076",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d8ebe367-8a12-45ab-8166-e3c2a0361b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a215f610-d6d1-4674-84e2-e3f6ce867934",
        "cursor": {
          "ref": "cba2af9c-4928-448d-ba34-7a39de290994",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "73d033f4-ccf5-49b2-abb5-34ce8331de90"
        },
        "item": {
          "id": "a215f610-d6d1-4674-84e2-e3f6ce867934",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "95c7e831-7e63-4720-8af2-b90c76bdc552",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f22da21-f642-4445-830a-f858fa81b921",
        "cursor": {
          "ref": "cf5c0f81-c39e-411c-995e-48724d046a0b",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "30105e3b-40e0-475b-97e5-2f35e47eb06d"
        },
        "item": {
          "id": "3f22da21-f642-4445-830a-f858fa81b921",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9e877bea-4954-4bc1-b380-a3148a148143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52a763d7-f8bd-4514-bf51-f81c4d433e65",
        "cursor": {
          "ref": "465ecc0d-efbd-47a3-9e26-73f20d92d318",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "011c790d-0330-4ea6-bbe9-a79bb5a887b4"
        },
        "item": {
          "id": "52a763d7-f8bd-4514-bf51-f81c4d433e65",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3daa47b4-eaae-4314-96e9-8efcc3769cf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89dbd2f-a81c-4812-bc6c-ca36d03b460b",
        "cursor": {
          "ref": "27c82bf3-7fd9-4bd8-af50-1368f864e6db",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9e81cfd2-a9e6-43db-8de8-8fa70506d2b5"
        },
        "item": {
          "id": "e89dbd2f-a81c-4812-bc6c-ca36d03b460b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c1299e34-719e-4573-addf-e9cdab000a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b74e693-43da-4584-a3e1-2cf85dbecee5",
        "cursor": {
          "ref": "a63d793e-5e56-4db6-a2a7-a93b23272bb6",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "1af0ea98-21ff-4a88-ade4-21d52fe3b288"
        },
        "item": {
          "id": "2b74e693-43da-4584-a3e1-2cf85dbecee5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "66a1e164-a40a-42b3-b67f-104227eacffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ac2d1d9-eef9-4c49-9731-d404cfb23fd3",
        "cursor": {
          "ref": "573e3852-a894-4780-aae6-6634cfe0c8a2",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "4b981a17-cfa7-4b19-b92a-31413275f141"
        },
        "item": {
          "id": "1ac2d1d9-eef9-4c49-9731-d404cfb23fd3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "95973016-48f5-4a39-97aa-76bd57c3051e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66487b87-52da-4d43-a23e-e73fb9cf1108",
        "cursor": {
          "ref": "6fe0da87-751e-4b65-bde6-06a628f550c5",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a4e0fc24-4db9-4c9d-a923-f133caa40657"
        },
        "item": {
          "id": "66487b87-52da-4d43-a23e-e73fb9cf1108",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "54e24dd9-f5cf-497b-a240-bf7ace75b4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d4e032-39c8-4414-87b9-5b2629818075",
        "cursor": {
          "ref": "df9ef3bb-308d-413c-bc58-3866ae069752",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "911de85d-d1f3-4411-a6c4-693d8d0e694b"
        },
        "item": {
          "id": "c2d4e032-39c8-4414-87b9-5b2629818075",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "cf5500f4-0bea-4933-a2a8-47114c2dca70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b43e009-8528-4173-b7cd-d0f259d775aa",
        "cursor": {
          "ref": "858ea653-c160-40f8-8cc9-d499818ee5a6",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "e874daa2-34ea-417a-8b80-6160b416b03a"
        },
        "item": {
          "id": "1b43e009-8528-4173-b7cd-d0f259d775aa",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "74b929ab-5124-4af9-a5e0-25c7b40f4d25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffd92ce-48ee-441b-acf9-1c6ea9edbe33",
        "cursor": {
          "ref": "775bcf9e-1c10-4496-ba3d-87259d6e9da6",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "cf94b93c-7ec7-4c46-8ddb-ae5de7329fc5"
        },
        "item": {
          "id": "bffd92ce-48ee-441b-acf9-1c6ea9edbe33",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "93e5abe1-874f-4961-8ca6-d3750378bc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61dbd0b0-5793-46bd-8f7f-566f93de79d4",
        "cursor": {
          "ref": "0e2fe6e2-c99e-48c5-8254-befd126684d1",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1f120131-9b20-4219-9841-c8bb0fd6e670"
        },
        "item": {
          "id": "61dbd0b0-5793-46bd-8f7f-566f93de79d4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "5b2127ba-c726-4f7b-84b2-99c30d616ed6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ff2accf-b399-4a24-890e-fd81cca92da7",
        "cursor": {
          "ref": "0037e9f1-bedf-4663-b2c2-3741c3f2b4b3",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4f85c1ae-4817-40b2-b0a3-90bd903281b7"
        },
        "item": {
          "id": "4ff2accf-b399-4a24-890e-fd81cca92da7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "77b40185-da5f-4556-9b46-9584173a1d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a194a06-3359-4bc6-87f6-2813026792a0",
        "cursor": {
          "ref": "3afa7b00-c457-4701-9ee2-e91ba0bfc43f",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c266ef87-0287-4112-b269-b06280772bc7"
        },
        "item": {
          "id": "8a194a06-3359-4bc6-87f6-2813026792a0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9a9c3536-9137-4bcc-ab5e-5a8a340ea5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2e4827-6bda-47f8-931a-a57bc8c5e1de",
        "cursor": {
          "ref": "3cd9e999-3d1b-43db-86af-74dea1503209",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "85e8f86f-acf1-478a-8eca-3f831e306d76"
        },
        "item": {
          "id": "2c2e4827-6bda-47f8-931a-a57bc8c5e1de",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "843dc32f-eb95-4f7b-9162-b80e25300a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e84067b-3094-4a72-b83e-42f87e0fb925",
        "cursor": {
          "ref": "17cf10e3-da1a-4995-8124-54b081c45e58",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1f1f5133-3ac5-4b74-8e37-84ee3b82e3e7"
        },
        "item": {
          "id": "4e84067b-3094-4a72-b83e-42f87e0fb925",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f1a9708d-c73a-40e9-816e-ac1a22118679",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc98e86b-1352-45a7-a320-b2ed39b2b634",
        "cursor": {
          "ref": "ca18057d-0e95-47a0-9257-7a64bb7b4ae2",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c1f8d54a-1557-4b29-a610-7ef1a845e76e"
        },
        "item": {
          "id": "fc98e86b-1352-45a7-a320-b2ed39b2b634",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "33b7cee6-4763-43e9-9c9d-3f1be48e9429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e11ca0a3-b7e6-4c32-9ef0-cb5b54ea666f",
        "cursor": {
          "ref": "707010a0-845a-496b-b9d2-7c98cd4d714e",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3f224ea6-ecdb-4f2d-9df9-46beb97269cb"
        },
        "item": {
          "id": "e11ca0a3-b7e6-4c32-9ef0-cb5b54ea666f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "267a2e1a-780f-4a63-a800-70f5f79121f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bbc6374-529d-4207-b2de-df08a723eecc",
        "cursor": {
          "ref": "edcd6dd6-9b2c-4cb9-bed4-ebd091ae633a",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "292436a8-e38e-4f33-9116-976ecbddcf26"
        },
        "item": {
          "id": "6bbc6374-529d-4207-b2de-df08a723eecc",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "4eab1426-de80-4315-acd8-a7249604401b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e64d5e-348c-49a5-a321-03243153886d",
        "cursor": {
          "ref": "92d3187b-1679-45e4-b2b8-e3c720552765",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "74322d1c-8375-4515-b756-b1808d8889e8"
        },
        "item": {
          "id": "25e64d5e-348c-49a5-a321-03243153886d",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "b26c25c7-4e5d-4e40-adc6-e7a08454b4f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cae69634-8982-4a3c-a9b0-7de6ad747ad7",
        "cursor": {
          "ref": "1f3ad16b-558d-4c39-bbed-1fdf2ace0753",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "ceaa6283-f280-4a98-8b67-44b7b43f685f"
        },
        "item": {
          "id": "cae69634-8982-4a3c-a9b0-7de6ad747ad7",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "93f74615-d09a-46fb-af58-ba150ab939d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00a66279-e7ba-4709-a283-7dfecf6fad5e",
        "cursor": {
          "ref": "b5858711-de5a-4d8d-901b-1d2c09981b41",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "5960759c-3774-4ea2-885c-0ffa2bf7bcd5"
        },
        "item": {
          "id": "00a66279-e7ba-4709-a283-7dfecf6fad5e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c3a6a1bc-ec4a-4316-a041-44d35088937f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "46b2017e-ef7f-4049-b72f-d933059594c9",
        "cursor": {
          "ref": "b7e2564c-ff2b-4267-a0f0-2815a0e34a89",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "732d3fca-f6db-4e91-b93a-3dabebafe47d"
        },
        "item": {
          "id": "46b2017e-ef7f-4049-b72f-d933059594c9",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a1c5b8f2-6788-4705-bef3-9cb534cc35e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "d03360fe-6044-461b-b8e4-257f9bee47aa",
        "cursor": {
          "ref": "b0d8bb1a-c228-47bd-b916-f03c2e4edf64",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ea4936bb-0d16-4651-9796-f37e53623626"
        },
        "item": {
          "id": "d03360fe-6044-461b-b8e4-257f9bee47aa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7e77721b-acc9-4ba5-8a05-1a4a44d65463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d03360fe-6044-461b-b8e4-257f9bee47aa",
        "cursor": {
          "ref": "b0d8bb1a-c228-47bd-b916-f03c2e4edf64",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ea4936bb-0d16-4651-9796-f37e53623626"
        },
        "item": {
          "id": "d03360fe-6044-461b-b8e4-257f9bee47aa",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "7e77721b-acc9-4ba5-8a05-1a4a44d65463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fdd15dd-ae0c-4221-84dc-60972f01248e",
        "cursor": {
          "ref": "cd160764-100a-426e-a663-5958b97311b4",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5a5a9006-1d31-4352-a95b-d365ec121c7d"
        },
        "item": {
          "id": "7fdd15dd-ae0c-4221-84dc-60972f01248e",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "6692678b-4858-4d26-846a-144b32af8733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0939af92-92c4-46d4-9975-e84cb496a0af",
        "cursor": {
          "ref": "4cb94fb0-954e-4e94-ab4d-f51e5d87abdc",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "6cf516af-3a59-478e-9c79-27d0fad874cc"
        },
        "item": {
          "id": "0939af92-92c4-46d4-9975-e84cb496a0af",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6c42158a-38a5-4c9f-9328-2cf497a01978",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f25f9860-3c99-4ea4-8bdd-9a130e775897",
        "cursor": {
          "ref": "dcb0c480-a046-4ffe-a43b-4455686cc8a6",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "870f243f-4d03-4631-808b-0076eebe6896"
        },
        "item": {
          "id": "f25f9860-3c99-4ea4-8bdd-9a130e775897",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b1df63f4-7ed9-4efc-8b11-a44095bb66c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad6f392a-2c48-4294-94e2-ea2e492586b5",
        "cursor": {
          "ref": "07cafda9-6369-4a94-acc9-66251226f557",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "2852c770-1e01-4e2e-9889-623e3e5330a0"
        },
        "item": {
          "id": "ad6f392a-2c48-4294-94e2-ea2e492586b5",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "35425d15-52a9-46d1-b4f6-6f632792434e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b089bf5c-9961-41ce-9fd7-dea173160272",
        "cursor": {
          "ref": "50985981-4f2f-40bc-af41-a7ecd383eb2b",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "813a352d-e753-46bd-a116-d9124c393ac5"
        },
        "item": {
          "id": "b089bf5c-9961-41ce-9fd7-dea173160272",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "a8027313-737e-4381-9065-8cd41b4c499d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e5093e3-0c16-41b3-8e93-22404391506f",
        "cursor": {
          "ref": "a8698f86-6880-4e2c-9562-49de486981cf",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "213a5ec0-e8d0-40af-b695-643c4081b7b7"
        },
        "item": {
          "id": "9e5093e3-0c16-41b3-8e93-22404391506f",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "6d3a39af-9949-40c2-865c-02116b5087e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fad6745-85fd-44b4-bd3d-9d29b5c8a537",
        "cursor": {
          "ref": "15897879-f37f-4267-83ba-cd47eba8c5d9",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2223d22a-2fbf-4d50-978c-615d58137491"
        },
        "item": {
          "id": "1fad6745-85fd-44b4-bd3d-9d29b5c8a537",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5d07727b-1e97-4251-b7dd-a3032a6b5527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6523630-d7ab-405e-8439-d4e0685d0219",
        "cursor": {
          "ref": "f4971ed6-9866-415e-932e-6c3ae7953801",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "38dea6d2-1626-4d66-b25f-5a7ce465b9ae"
        },
        "item": {
          "id": "d6523630-d7ab-405e-8439-d4e0685d0219",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "81eeb953-ef99-453b-8baa-d033549a2145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf26817-3502-4c1e-a95b-548c3c90c162",
        "cursor": {
          "ref": "b040a9ef-9679-4e1e-8b67-1881036db9d5",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "4b0c784e-4beb-4707-a133-6b7fa897cc55"
        },
        "item": {
          "id": "3cf26817-3502-4c1e-a95b-548c3c90c162",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9616416b-31e6-44ed-bb1e-794a02ab9a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946ad7cf-8357-4430-a5d2-3e9dedbb3ab2",
        "cursor": {
          "ref": "92c4b372-cd0a-4b62-b116-e6aa58b9c732",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0097daab-0ebf-4091-95ce-925eef3bef47"
        },
        "item": {
          "id": "946ad7cf-8357-4430-a5d2-3e9dedbb3ab2",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "5ffede2d-ebf3-4e20-a995-5f71b08d1a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7240cb-c605-497f-ab5d-0abed497f259",
        "cursor": {
          "ref": "4a765349-7c64-4e75-b326-2ce415fde0f7",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "2147704a-bf7a-4f91-8743-664a617725c0"
        },
        "item": {
          "id": "db7240cb-c605-497f-ab5d-0abed497f259",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "186e4b77-f636-44d3-b3ff-77718d8fc250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc33896f-b251-4d4a-acde-61995986bc4e",
        "cursor": {
          "ref": "584ef877-b680-42ed-b04c-e42e827ee684",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "1a646351-395a-49b8-bf42-5ba8de8b79e4"
        },
        "item": {
          "id": "bc33896f-b251-4d4a-acde-61995986bc4e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e66bd107-4bc6-4668-917f-e41989834841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "795ecb38-ed88-46d0-ba14-b4ea3c2de499",
        "cursor": {
          "ref": "5e13380b-5cdc-45a5-af62-6e3a22aa25f7",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "c894919f-2bb5-42d0-9361-fe8e844dc6f2"
        },
        "item": {
          "id": "795ecb38-ed88-46d0-ba14-b4ea3c2de499",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "6ab4d74a-e7fd-4cbe-8f3c-c026957cbba8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51f5471e-8341-4b48-816a-e006c92c6c86",
        "cursor": {
          "ref": "c901c550-41b1-4433-9fee-941a60e1e089",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "87eae370-1441-4e38-9cf3-c8f39a8dcc0c"
        },
        "item": {
          "id": "51f5471e-8341-4b48-816a-e006c92c6c86",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "c3c46191-37c1-458d-b2b4-f836af57988e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1a4ec6-32d6-4a61-b0dc-b6cb83e76d0a",
        "cursor": {
          "ref": "2f9c98f7-c187-47e6-979d-f06af3cd283e",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6f9f5e35-058c-4013-bac3-1b9d35f503d0"
        },
        "item": {
          "id": "fc1a4ec6-32d6-4a61-b0dc-b6cb83e76d0a",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "405e5d16-e84f-4e6c-a844-e97b1685daf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17382a45-c521-45ec-8bec-24a843a69a0e",
        "cursor": {
          "ref": "dc02a2f8-48bc-4fda-aaef-e504006ca748",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "40938131-b0d5-465d-887d-3c5ed092e971"
        },
        "item": {
          "id": "17382a45-c521-45ec-8bec-24a843a69a0e",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "f6d5c491-b307-4b1b-b626-76941510096a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc44328f-1bc8-43a4-bee5-8533fdfcb6be",
        "cursor": {
          "ref": "d663da9a-218e-4bcc-af77-b03eea13889a",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "61897e51-aa0f-45e3-b922-6ef78bcfcd8a"
        },
        "item": {
          "id": "dc44328f-1bc8-43a4-bee5-8533fdfcb6be",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "0770b22b-a527-46d2-8a35-0889d34a7d73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b51cba84-3ec7-4cae-8bef-edb2ce8447d8",
        "cursor": {
          "ref": "5a4f4c57-f8ec-4525-bc72-5f323335fe00",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "67634636-a4cd-41f9-aa1a-574544327c03"
        },
        "item": {
          "id": "b51cba84-3ec7-4cae-8bef-edb2ce8447d8",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "b2ce606a-1337-47ca-b300-be2075214247",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b51301d-ca38-4493-a0c0-62be4a27d48b",
        "cursor": {
          "ref": "78d91e79-05c7-497f-a1d0-f8271489b383",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "4d2f0800-fb13-4266-a608-e91d5a99748a"
        },
        "item": {
          "id": "0b51301d-ca38-4493-a0c0-62be4a27d48b",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "07772dfe-57aa-42a0-b649-ee130016bf2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58df1102-2f97-48ce-a924-1237d8c4294f",
        "cursor": {
          "ref": "40150319-fc34-4938-8008-015eebe7bcb7",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "30459276-1506-4e53-a172-093ae8440c67"
        },
        "item": {
          "id": "58df1102-2f97-48ce-a924-1237d8c4294f",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "bd38a44e-8f45-41ce-946d-b44520b2c78a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2dbda82-1150-423c-9194-2d85c6478ade",
        "cursor": {
          "ref": "12efb0ac-1b18-4c4f-9b25-7d7d8c845b5c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2e264fcf-8220-4d64-b6dd-6c0f07044911"
        },
        "item": {
          "id": "a2dbda82-1150-423c-9194-2d85c6478ade",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0f8cab46-aae8-468a-aad5-30b372f5fecc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28c8132d-2777-4ff7-a2aa-211fb1552a5f",
        "cursor": {
          "ref": "c59c57f4-3ceb-4c78-8d7b-26c7bbaa2108",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cd7d9f90-cd4b-4b51-b406-48c3b660309b"
        },
        "item": {
          "id": "28c8132d-2777-4ff7-a2aa-211fb1552a5f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "ba759e60-40b6-4283-9a19-5a2764459906",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d234febd-e81e-4ffa-87c6-31bf00fc5c8d",
        "cursor": {
          "ref": "51d4bdc9-1ebb-4e43-9b8d-fc5121b427c4",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "4bc54f6e-8f80-4433-a269-94d0575cb177"
        },
        "item": {
          "id": "d234febd-e81e-4ffa-87c6-31bf00fc5c8d",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "b910339c-132e-483b-98e0-ed85fe31ec8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9b9940f-b36f-43dc-be40-368a73c0ef0f",
        "cursor": {
          "ref": "45ec6801-13bd-4f2f-a322-1aa0e2af4d0f",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "3036021a-4e9c-4e53-86b1-65c3d3dcc4ff"
        },
        "item": {
          "id": "c9b9940f-b36f-43dc-be40-368a73c0ef0f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "80255a47-0d89-493b-80c6-72f0bfa8366d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c03ffa15-f830-402a-9cc9-3d7fa31547f9",
        "cursor": {
          "ref": "63809d88-2a45-4590-85c0-8b895f2f98ba",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "35052c67-5827-4d48-8439-b191d03df983"
        },
        "item": {
          "id": "c03ffa15-f830-402a-9cc9-3d7fa31547f9",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "89a49a02-126a-4851-9a2a-77742b2bec36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d6e846-1935-49e5-8dc2-e2cd44bf52f7",
        "cursor": {
          "ref": "446eecf9-2a37-4afc-a11d-d0b41d25e5db",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2865b3eb-3308-4f99-866e-9126dad20285"
        },
        "item": {
          "id": "b5d6e846-1935-49e5-8dc2-e2cd44bf52f7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "42dfff0c-2469-43f2-8c52-1ec03ff4a7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7f82ba1-54b8-4821-a0a3-08aedaf60a3a",
        "cursor": {
          "ref": "99d910eb-405a-400c-a7f8-3043521fcaf9",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6bde4dcd-5609-4dcf-b47e-d010dc1aaa7d"
        },
        "item": {
          "id": "e7f82ba1-54b8-4821-a0a3-08aedaf60a3a",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "d7413fca-f374-4546-bb44-bcda0d5bab22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0a8e2e-99c8-4206-a0ce-7dacc0222518",
        "cursor": {
          "ref": "77220aec-d3d4-44bf-af08-ede27dfcad36",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "67175574-61b0-47e8-b7b6-6c7cbe81cc85"
        },
        "item": {
          "id": "0c0a8e2e-99c8-4206-a0ce-7dacc0222518",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "907cfcb6-9b14-4e35-8fbf-dd2fbdefc91f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea412e24-40b4-4c69-ba83-5e6d1e19526c",
        "cursor": {
          "ref": "c1fc5eb8-b5a9-4ad5-ad11-67a7a1be985d",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "054baf68-cf0e-496d-8a7a-adafaa90b87b"
        },
        "item": {
          "id": "ea412e24-40b4-4c69-ba83-5e6d1e19526c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "b8a9c418-5bba-4b85-8cd7-5c4e7f83f1be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4975f11f-1294-4e4b-8343-aba6ff8e2b58",
        "cursor": {
          "ref": "83b62e62-2dab-4355-ac75-4549e91941d4",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7e8aa6ae-967a-4b98-be3f-c7bb5bb2f5c8"
        },
        "item": {
          "id": "4975f11f-1294-4e4b-8343-aba6ff8e2b58",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "2ac627f3-f613-4e16-80ee-2c0f1e6b9aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3919b8e8-7906-43f0-a701-5eb18b79bf54",
        "cursor": {
          "ref": "e3809437-cb43-4508-9411-5a5e6db2a872",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "9208f3fa-41c4-402b-9089-ff40289c97bf"
        },
        "item": {
          "id": "3919b8e8-7906-43f0-a701-5eb18b79bf54",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ee052e48-4169-481b-ab9e-4861dd3e3989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74b4b408-abf1-480f-8d22-4ed7ff4fc536",
        "cursor": {
          "ref": "c0192b5f-846d-4859-b8f0-95765a2ff136",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "c33994f5-05e3-421d-a9ef-a8ca73a438cf"
        },
        "item": {
          "id": "74b4b408-abf1-480f-8d22-4ed7ff4fc536",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d208090d-b941-4bcc-ac63-f10bceaf595f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b939abf-f6b3-4546-9a95-7b439ea6079d",
        "cursor": {
          "ref": "dc62177d-24fc-445f-b978-d70453a4bc76",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b74a0821-f7b7-42b8-a31c-71c8b73ba498"
        },
        "item": {
          "id": "6b939abf-f6b3-4546-9a95-7b439ea6079d",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "f20ac2d6-a58e-46f3-95b9-ed7fbfaf1faf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3efe40f-84da-49f6-a744-bcd92f0fa846",
        "cursor": {
          "ref": "b56b8af3-998a-4cfa-8d1a-1bcf54ddec4e",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "0f164023-bf87-4afa-acd4-c3e252b5d8e6"
        },
        "item": {
          "id": "c3efe40f-84da-49f6-a744-bcd92f0fa846",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "23f3eb70-88eb-463b-91ca-81c962111ecd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39116f97-7d86-4659-b836-0a8fd3868719",
        "cursor": {
          "ref": "361d3ffd-89e6-4d0d-9164-65e03990e626",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2104d950-f0d0-453c-9260-0b1f986b1145"
        },
        "item": {
          "id": "39116f97-7d86-4659-b836-0a8fd3868719",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "6d9fb18f-d8b8-42f7-b786-ebaae96f12e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "912ed6bb-7318-4d35-881c-e16f07eb3489",
        "cursor": {
          "ref": "5f6f0c72-7965-4eec-9be7-6d6b8b4f0541",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "abd2b2f1-c2bf-46e6-8e31-beeaa7e6deb2"
        },
        "item": {
          "id": "912ed6bb-7318-4d35-881c-e16f07eb3489",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "e053d6c8-e43f-4769-abf7-21dbe74a9d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6294b7d6-406b-440d-9b4b-0b8de22be47b",
        "cursor": {
          "ref": "8c29ba41-6ae3-4a17-a7d4-e9a9384eb198",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "1e0e628e-0a4b-4b58-bf06-13c7a50556e1"
        },
        "item": {
          "id": "6294b7d6-406b-440d-9b4b-0b8de22be47b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "778d4f98-359c-456e-9a66-1e22c3eb21bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "745f46d1-f7c3-46d3-bd24-998731c2ae49",
        "cursor": {
          "ref": "ccfba697-b77a-48e8-81fa-3e49a9ee88c6",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "6b8a5fad-c86f-459b-ad27-f1995671d7fb"
        },
        "item": {
          "id": "745f46d1-f7c3-46d3-bd24-998731c2ae49",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "be107c69-b1de-4570-88c0-eb8155bceb34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1da49785-3687-4a96-983a-37ca0df172f5",
        "cursor": {
          "ref": "2ad71cd7-adcd-4561-aad0-a26f74d67fa5",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4b6767ff-d301-4809-8502-8538d7a95d1e"
        },
        "item": {
          "id": "1da49785-3687-4a96-983a-37ca0df172f5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "9ffe23ac-b02b-4461-b182-be37b592084b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adddcbdb-16db-4583-b34d-8a7197296538",
        "cursor": {
          "ref": "8832ccd4-5db3-4888-9159-edfd90c8e0ec",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "93b64414-e320-4d17-8638-130cc812cf28"
        },
        "item": {
          "id": "adddcbdb-16db-4583-b34d-8a7197296538",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "030b7e2e-044f-45a3-8e45-25303561598f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8066bdc-ce6d-46bb-8dc0-d9e8dcd1fe1e",
        "cursor": {
          "ref": "cfac72ba-a067-4fa0-af38-c54cbf48db82",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "184309fb-854f-473e-9d32-624076c9f23b"
        },
        "item": {
          "id": "e8066bdc-ce6d-46bb-8dc0-d9e8dcd1fe1e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a620088e-7de3-4d52-8bf8-09d429ada570",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae2adb1d-bc7e-4682-878b-e86b2f1c4352",
        "cursor": {
          "ref": "2fbe6608-480f-40f6-891e-a95d6da810cc",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "84f8f8ec-715d-43eb-93b1-01d9608c0651"
        },
        "item": {
          "id": "ae2adb1d-bc7e-4682-878b-e86b2f1c4352",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b6ca1be1-ff21-4dbb-a621-b0c5a4d86cbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "461d1481-2b53-48cf-8385-07410a676e9b",
        "cursor": {
          "ref": "c4f742cc-becc-4123-95eb-b0f75d630aba",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "4294c561-2a52-4c47-86f2-70e204592e18"
        },
        "item": {
          "id": "461d1481-2b53-48cf-8385-07410a676e9b",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "227ad872-e6bc-413e-8bad-ba5f7647015a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7046281f-3eab-4036-8a3b-30525f278a79",
        "cursor": {
          "ref": "89021f12-4c49-470b-a316-918717f73403",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2c9a4eeb-962d-472b-a9c2-bb87ecba4bf3"
        },
        "item": {
          "id": "7046281f-3eab-4036-8a3b-30525f278a79",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a097d0d5-0ba5-4fde-841d-92dd3409aed8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "274077b8-85f7-452f-994f-0f5e6487e76b",
        "cursor": {
          "ref": "d9ff7954-9581-4655-ad9c-c8b2f14c31cd",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "9c17e8cc-eb2d-4438-9f8f-d7ccade61b7f"
        },
        "item": {
          "id": "274077b8-85f7-452f-994f-0f5e6487e76b",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "1a25a38b-e36e-4705-b0bc-197b5384ad66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "769cf12d-e9cb-4909-8394-e3cd2213b123",
        "cursor": {
          "ref": "dbf7e58d-e844-456d-85c1-af55485a3bf8",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "10241d67-21cf-4301-bd0c-4834e40298ef"
        },
        "item": {
          "id": "769cf12d-e9cb-4909-8394-e3cd2213b123",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ec4c12bf-2c9f-407f-9134-445bd54e9547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e631ac44-f334-442c-af09-77a7374cbb8f",
        "cursor": {
          "ref": "027a188c-04a4-4121-b304-763d63dd9e71",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "8e67d2b7-f519-443b-90e8-0e147164c198"
        },
        "item": {
          "id": "e631ac44-f334-442c-af09-77a7374cbb8f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "b8bd4d70-85a6-4f3a-afcc-cb569f59a833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca2ca1f-244b-4ca9-9802-5f02d031a19c",
        "cursor": {
          "ref": "0cde918d-2ad0-4cb6-8a78-352d035fc03c",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9171a8ec-168d-4526-8758-8f8884617c96"
        },
        "item": {
          "id": "8ca2ca1f-244b-4ca9-9802-5f02d031a19c",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f35a87d4-f442-4464-ba73-dd97f4ce8c3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfed4131-171d-4aeb-867c-50696aca8417",
        "cursor": {
          "ref": "6e8d09c8-9355-4619-81d5-87b66d18313d",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "87e2676a-e638-464b-b8b0-df9efd9b78a8"
        },
        "item": {
          "id": "dfed4131-171d-4aeb-867c-50696aca8417",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "b7a61b5c-ca04-48e4-9c2d-1e1a8f93dd56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca9d5700-0f17-40e7-9535-5a6218a52a1a",
        "cursor": {
          "ref": "3423db15-b662-483d-af79-8a43019cfaf0",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "39e9cf29-ab66-432f-a061-4be9bff2ebed"
        },
        "item": {
          "id": "ca9d5700-0f17-40e7-9535-5a6218a52a1a",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5fdacd0b-ec71-4278-b0dc-01eae76794a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cef3e4e0-4f61-4e54-9421-d62cd7bf3685",
        "cursor": {
          "ref": "9790b807-7fa3-4fd3-81fa-b2ee51bd6af6",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bdcf9d76-a4fa-43d6-b85e-670a7ea52d7d"
        },
        "item": {
          "id": "cef3e4e0-4f61-4e54-9421-d62cd7bf3685",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "06b8e3b1-461c-4635-ab28-2ce4fa510c99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cacba2b-88b2-48a4-8615-2d1c1adb0553",
        "cursor": {
          "ref": "3c7a7c2f-13fe-4e54-aef4-c3418fd69275",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "c65c02b1-d5b3-4fec-ac10-ab6be8d6f0ff"
        },
        "item": {
          "id": "8cacba2b-88b2-48a4-8615-2d1c1adb0553",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "626f4c88-b81a-4d9d-84d0-4321aed7c427",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37f01d2a-8714-4467-92c4-adc07fc22d3a",
        "cursor": {
          "ref": "c8745959-9285-46b2-9df1-0cd6960d5415",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "4d85f5ca-17e5-4490-bf43-312f48c2ae75"
        },
        "item": {
          "id": "37f01d2a-8714-4467-92c4-adc07fc22d3a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "d49c7f01-21cc-462a-8d1e-a4749760f521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86fb351e-5678-48fa-b497-ff6ee499ab1e",
        "cursor": {
          "ref": "995e28d7-b491-43b4-b20a-ac9ae3a311c4",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b4fa466c-2483-45ba-9828-0d1e3f978e01"
        },
        "item": {
          "id": "86fb351e-5678-48fa-b497-ff6ee499ab1e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "18a867ad-80b3-4633-aabc-5b81a32633f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c912bff9-f00d-44a8-8d9f-b639e2975fcd",
        "cursor": {
          "ref": "219baa98-1c6a-42a6-9b1e-71df906d6133",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "fe79ee40-fff0-4ade-b11a-691b58279579"
        },
        "item": {
          "id": "c912bff9-f00d-44a8-8d9f-b639e2975fcd",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0caebfbf-f5d2-4d16-a675-551fd2e85cd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "743094d2-194f-4a0c-97d3-749806eeda69",
        "cursor": {
          "ref": "db61c2e2-5b25-44c5-8e1d-be60a296a941",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "04659684-5b82-45de-8fe3-772d4b21c0a6"
        },
        "item": {
          "id": "743094d2-194f-4a0c-97d3-749806eeda69",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "e8ff72cb-811b-48a1-8ca4-f2a78532db0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9332e4c5-7205-426b-8d76-259952530f02",
        "cursor": {
          "ref": "3146a50d-a752-47c5-8b8a-ae7d3715a1c2",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "560fd04e-f690-4374-a57f-9e9dd4b0a5f2"
        },
        "item": {
          "id": "9332e4c5-7205-426b-8d76-259952530f02",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "fbf7e640-384e-4ea2-90b2-6c9bc3f18ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cc851c1-bb8a-489b-ba53-3dec3e5fdcb3",
        "cursor": {
          "ref": "db320650-865c-44d2-853c-36c959917295",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "926082cd-159a-45ac-990c-f23ec39ea974"
        },
        "item": {
          "id": "9cc851c1-bb8a-489b-ba53-3dec3e5fdcb3",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5761a7b7-ef08-4506-98e1-610f9f004558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e81e4fc-0b47-4f8f-9bc5-7c8349bfdf5a",
        "cursor": {
          "ref": "9bcc8d72-ccf1-47aa-84ff-f94cac5ea811",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a623d977-a5d7-4326-b750-9433ce712e7f"
        },
        "item": {
          "id": "5e81e4fc-0b47-4f8f-9bc5-7c8349bfdf5a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "e815bc69-36e9-4f1b-9c36-6bb45d5fe554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d9660af-4aae-4eb5-b3f8-c5f371553771",
        "cursor": {
          "ref": "c922b702-1c9a-4482-a6c0-6c3f9f919ac8",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "f4570255-1a08-488c-b726-d44966f9aff7"
        },
        "item": {
          "id": "3d9660af-4aae-4eb5-b3f8-c5f371553771",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "1186f588-03ac-4790-913a-405b28115a09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f61c79-ea9d-4a55-9301-aa8fa912c74d",
        "cursor": {
          "ref": "36c98789-b675-4fa1-9c5a-dbf002833f71",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "22c2a350-39a7-4d56-bd8b-2edf7c9e51ae"
        },
        "item": {
          "id": "12f61c79-ea9d-4a55-9301-aa8fa912c74d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "03453a81-28c8-46fb-bb44-5e39014e35ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b85684b4-d07f-4cac-b871-5549f96da9ee",
        "cursor": {
          "ref": "87f3527f-542e-4b87-b882-8ab14b35cdbf",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "241c2b38-be71-4bf2-a90d-0f7bdf4b0d90"
        },
        "item": {
          "id": "b85684b4-d07f-4cac-b871-5549f96da9ee",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "4e59ec86-f470-4dd7-a39b-8a7e1846a2bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0aebfeb-cff7-4978-8f22-0410634e36e8",
        "cursor": {
          "ref": "26c447a0-8a95-4e12-b4c4-00cef96d6a69",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "96c8f5c7-ff3c-4584-ad03-954c4e980b27"
        },
        "item": {
          "id": "c0aebfeb-cff7-4978-8f22-0410634e36e8",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d1e45b2d-f49e-4d4a-88e2-2fc3bc3970c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dc3398b-4898-40c2-8204-3b8312372868",
        "cursor": {
          "ref": "967ddb41-0a2f-432b-ad2f-12119ab4e702",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "1c8eaf23-0824-461c-9bac-e1ec1186cefe"
        },
        "item": {
          "id": "4dc3398b-4898-40c2-8204-3b8312372868",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "4c21325b-9607-4e03-9eaa-d09c5fc83dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46b42aa-f5ab-4bf9-ac98-e7e86b8aab9c",
        "cursor": {
          "ref": "6d67245e-c17e-4d70-841e-48605598aa88",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "7070af41-fce6-4d8f-ba36-d2d73707817c"
        },
        "item": {
          "id": "a46b42aa-f5ab-4bf9-ac98-e7e86b8aab9c",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "904801fc-09cb-4420-9fea-9d649e7b963f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24d4777-3794-46a5-8127-52ccf6971250",
        "cursor": {
          "ref": "fd338df5-66f4-4a5e-9ad0-c468421be2df",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8adbde2d-9327-4566-b0e7-6767bf221121"
        },
        "item": {
          "id": "d24d4777-3794-46a5-8127-52ccf6971250",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "76e887f3-2e5f-4eba-b2e5-aea5cda1c5c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d7fff27-aa49-4582-be37-a4a1ec83ea0d",
        "cursor": {
          "ref": "d0af0718-7449-4935-af7a-929d8c03122e",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "c758398c-9be2-4b5f-9408-76d70b11f277"
        },
        "item": {
          "id": "4d7fff27-aa49-4582-be37-a4a1ec83ea0d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "00aad5ac-b8c0-47df-9486-93378f42bbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff47bbd1-10cd-4d72-a6a6-51800bf663b6",
        "cursor": {
          "ref": "6c9cd8c4-683e-4eaa-9ec2-6fd620491b0d",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "487431d0-1e6d-42d9-a35e-8dc5e2a59acb"
        },
        "item": {
          "id": "ff47bbd1-10cd-4d72-a6a6-51800bf663b6",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "5f04c447-d3fc-42a6-8ce3-c1bf5367d251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe9fc0f-9fbb-454e-a319-655ee01cd2e8",
        "cursor": {
          "ref": "86c9b557-5af5-4db8-bbd7-18172b4ce0c4",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "d46d8a00-15ac-4b29-87f3-e72ccfece0bb"
        },
        "item": {
          "id": "bfe9fc0f-9fbb-454e-a319-655ee01cd2e8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9f35c67b-a11a-4f97-af11-d6d7d69ba4d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb794b44-32a4-45b9-be4e-d4d374a5ebb6",
        "cursor": {
          "ref": "b06bb691-c045-4b85-860e-0ddcc53fe571",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "930954f9-a42c-48f1-874e-7bf69b02a2cf"
        },
        "item": {
          "id": "fb794b44-32a4-45b9-be4e-d4d374a5ebb6",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "d4d38ee3-368d-45f4-b5f8-fd80c90db6b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6175a91d-ae46-4428-9ffb-d9df5999b6c0",
        "cursor": {
          "ref": "cf07cd6a-bb18-4136-92ea-24f9cebd46fa",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fe8dc1da-90f7-47e1-917c-1e77a14715e0"
        },
        "item": {
          "id": "6175a91d-ae46-4428-9ffb-d9df5999b6c0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b3e6d20d-594a-488e-81be-d4ee758bdcbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f69642a-c2fe-4198-859a-89927495a859",
        "cursor": {
          "ref": "df34dd94-4938-4385-b5ea-5468fbe8066f",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "e8e38b7c-a35b-4d3f-aa1f-1c86a010be8e"
        },
        "item": {
          "id": "4f69642a-c2fe-4198-859a-89927495a859",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "d3585eed-7d18-4cee-97fc-4fd0ca0154f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ace6aeb-3a4b-405f-bdf1-060793261711",
        "cursor": {
          "ref": "f889ad3b-74b3-4d4d-bb4c-9c82fd5cce76",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6c6a1904-aaef-4324-adf7-a782c0b48976"
        },
        "item": {
          "id": "3ace6aeb-3a4b-405f-bdf1-060793261711",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8c43a43d-057e-4f75-b29b-0244738c9134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34251a41-dfb5-481d-a037-c92389d0821b",
        "cursor": {
          "ref": "4eeb00c3-7dd1-4baf-ae4f-6f646a069d9c",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b9cfb526-bdfc-440b-b10b-ba16e3761f7e"
        },
        "item": {
          "id": "34251a41-dfb5-481d-a037-c92389d0821b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6a371b3d-71c6-4207-b4cb-4c1c82d2948b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4cc2665-3da5-4f03-83ee-ecc40ada53b3",
        "cursor": {
          "ref": "46459d60-3eaf-42ae-a22f-630973394a15",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "057049c1-c7f6-41f3-b81e-9684e4de2546"
        },
        "item": {
          "id": "a4cc2665-3da5-4f03-83ee-ecc40ada53b3",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "831e9a18-1f7c-4cfc-b87a-2ebbfc1268e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "643b8f6d-e570-447e-9759-9f0f111b98af",
        "cursor": {
          "ref": "ea542297-1df8-4185-9022-ba8f1ef2da61",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "0ff7f080-38ac-4cc8-8e96-bad2a4555497"
        },
        "item": {
          "id": "643b8f6d-e570-447e-9759-9f0f111b98af",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d622e134-d27b-4bea-8137-f692f0457c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1205666-edc4-49d0-b303-94ed86053ceb",
        "cursor": {
          "ref": "f50d3c40-a42a-48e6-b007-1841a971d2d9",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d31c979e-a91e-471e-8f22-258230b5db01"
        },
        "item": {
          "id": "d1205666-edc4-49d0-b303-94ed86053ceb",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "92aa84bf-6286-463c-9921-d795f90fd770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b6135f2-3e29-427c-9f1a-4e9573fbf0ad",
        "cursor": {
          "ref": "c9345046-9d79-4182-b3af-6478607e9e89",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "9456bafe-9c92-4495-a91f-e56b9700eb14"
        },
        "item": {
          "id": "0b6135f2-3e29-427c-9f1a-4e9573fbf0ad",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "e9d71dbc-910d-41e3-bbf4-221150e951fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4ddbac-4246-4a33-b0a8-fa4de37b7f02",
        "cursor": {
          "ref": "a852a218-7143-496c-a913-df9a5e75aa28",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "f02b2c30-a3ab-4355-b2b9-c32a3e804622"
        },
        "item": {
          "id": "ba4ddbac-4246-4a33-b0a8-fa4de37b7f02",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "8f190ec9-fc53-4b51-afd1-bfe6d80b0600",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92bd4445-4981-427b-99cd-e00490006352",
        "cursor": {
          "ref": "999e302a-2fe1-424c-881e-0690e12e8d09",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "00730842-7cbc-4770-a13d-eb4a0ab5d218"
        },
        "item": {
          "id": "92bd4445-4981-427b-99cd-e00490006352",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "e9df97e2-fb75-4179-aef3-bdb33142aee5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31420dcc-688f-422c-8c17-40c096051bb5",
        "cursor": {
          "ref": "9d0554ef-d2c3-4469-b8f7-89040ba1fdf4",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b09d7a7d-bf0c-4362-b5ea-8a18a5a5304f"
        },
        "item": {
          "id": "31420dcc-688f-422c-8c17-40c096051bb5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "9e57716c-8e92-43c6-bc10-815ce8ee06a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c572694-63df-4bfe-987b-af073b6f0567",
        "cursor": {
          "ref": "ba16275f-d5c3-40dd-802c-b5cb7065f55b",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "2b33e072-0ca0-4d89-80da-6d74dbbf8acf"
        },
        "item": {
          "id": "4c572694-63df-4bfe-987b-af073b6f0567",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "ab131b9d-ea25-4975-bcf6-81717ea157d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac10bc3-dfef-4673-a437-a91da4e60ab3",
        "cursor": {
          "ref": "96f1691a-1e24-4136-a445-7a2afd6b1dec",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1375d8d2-19e1-485a-864a-fe3cf7c7d2e6"
        },
        "item": {
          "id": "bac10bc3-dfef-4673-a437-a91da4e60ab3",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6903e9f0-471d-416a-9de0-7c7d8e01972b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed109859-8c0b-46da-951d-f103247d0e0b",
        "cursor": {
          "ref": "41d128b1-7b17-447a-be1f-610394265c8a",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "37c7ead9-5ba1-4713-97c3-ce14a2ca7daf"
        },
        "item": {
          "id": "ed109859-8c0b-46da-951d-f103247d0e0b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7322f3b0-c424-40fb-99e2-a8c95a589839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0618737-e1a2-4354-a247-a94ce36d3a3e",
        "cursor": {
          "ref": "fd72fa2d-c1dc-4365-bbb8-44592ec2b91a",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0edd3e2d-1509-40db-b34b-f78bf892ab17"
        },
        "item": {
          "id": "b0618737-e1a2-4354-a247-a94ce36d3a3e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ac1d833e-6acf-428e-b3ea-5ed8605a9a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f9ce62-7baf-414f-9c3a-d72e032e2d16",
        "cursor": {
          "ref": "15f22049-953d-4a4f-a870-7d63c8431824",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6e1f7fd3-7dab-4c37-a044-3b26d91d936f"
        },
        "item": {
          "id": "97f9ce62-7baf-414f-9c3a-d72e032e2d16",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "ba5a2693-655a-4f83-9f39-c064ad881d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0326e83-bcd5-4cd2-b4e2-6d73b6a77ee0",
        "cursor": {
          "ref": "3319e8c0-23f5-4dd9-85ae-0d26f921dfe7",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "ccef4828-9d05-47b3-87a6-4e31bb7d9d78"
        },
        "item": {
          "id": "e0326e83-bcd5-4cd2-b4e2-6d73b6a77ee0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "97a3771a-e33e-4a2d-b9bb-20b6a362872b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5c67a87-49c7-412f-95b7-25a71a0c3a6e",
        "cursor": {
          "ref": "8ecb4474-80db-45b8-a248-ea4f65b93be8",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "e9e6e247-a50a-4903-a561-ae0db0c48293"
        },
        "item": {
          "id": "f5c67a87-49c7-412f-95b7-25a71a0c3a6e",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c43ef8c0-ee4e-458f-bef6-77a330753b3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462356ef-0f59-49f5-8b2a-59b1c43017c7",
        "cursor": {
          "ref": "d9092c71-0133-496b-8f86-0edaacfc91e7",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "7f2fa659-44ac-4fbf-8b36-3e08b364a3ce"
        },
        "item": {
          "id": "462356ef-0f59-49f5-8b2a-59b1c43017c7",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6fee40af-2de9-4074-8c15-0c294359d4ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a679627-6051-4a37-9725-ef9cb141c18e",
        "cursor": {
          "ref": "5980faca-50cd-44d2-b23b-719649746645",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "1735c016-5471-4e15-82de-af57ce23b5b4"
        },
        "item": {
          "id": "6a679627-6051-4a37-9725-ef9cb141c18e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1f511d42-2874-40cb-8dde-26c754e49436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8506655d-27ec-42e6-850a-5452568c49cb",
        "cursor": {
          "ref": "938f1168-c0c4-4cb1-8336-e92b6f88a6d5",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "c09359cd-8873-4637-be58-28195e4708c5"
        },
        "item": {
          "id": "8506655d-27ec-42e6-850a-5452568c49cb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2dcb99d5-5337-4167-919a-21074a2a62c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa50bb71-c5b4-4d65-9338-6028ed302c54",
        "cursor": {
          "ref": "f6cad0b1-e0d5-40ba-a8e8-e3a99cc483e8",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4ee7de3a-ce8b-4eb7-b8c7-16613b953905"
        },
        "item": {
          "id": "aa50bb71-c5b4-4d65-9338-6028ed302c54",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cf8fd867-7376-416e-9485-55f5d572ce1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc07ebc8-5f47-4e79-955a-5dd36e4710f1",
        "cursor": {
          "ref": "eded888e-c49a-4bdb-b26d-038f65debabd",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "35eaf637-f53e-40d7-9911-a64a3341f4ff"
        },
        "item": {
          "id": "dc07ebc8-5f47-4e79-955a-5dd36e4710f1",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c0e39a94-bf0b-4499-9b73-96b6c3fab315",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf597fc-d790-4263-973c-950e13039172",
        "cursor": {
          "ref": "1db2c7cc-a7d3-41ba-ac93-ac5aa4b9e4f6",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "a98b3055-bcdc-4ba1-a67d-fb4bb739a393"
        },
        "item": {
          "id": "5bf597fc-d790-4263-973c-950e13039172",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "ba6e0050-9952-4ed7-8604-02f8b67b4eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09952913-c9ff-4667-b1a6-6c98c8d79170",
        "cursor": {
          "ref": "f8df2195-0727-4bd1-ad98-7cbbe6140fc0",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "8916feb9-7438-4ace-b690-6cd278c9e671"
        },
        "item": {
          "id": "09952913-c9ff-4667-b1a6-6c98c8d79170",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "4f082ba1-8647-4fd4-9010-4965439bb176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5248be23-f48e-4ba6-8d7c-33ae0c2346af",
        "cursor": {
          "ref": "d52dc5e8-b513-41d1-b986-0e798575fd8d",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c35db12d-0cf4-4c15-8f24-61605e026813"
        },
        "item": {
          "id": "5248be23-f48e-4ba6-8d7c-33ae0c2346af",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "83c1d995-c3d4-48af-8d62-37f5aef767a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8655bcad-5ab4-49f5-855d-c783c391c47f",
        "cursor": {
          "ref": "4a235256-9e71-4350-b43d-58c0eb813eb6",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "3d642ac2-5cb3-44d8-9535-d797a4959f08"
        },
        "item": {
          "id": "8655bcad-5ab4-49f5-855d-c783c391c47f",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a1ee95d4-4804-4ad4-a524-70bedf4700bc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f3461a9-7580-4729-be5c-a3a7cef8466c",
        "cursor": {
          "ref": "1af1819c-785d-441e-bfba-68796b23511c",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "88ab8ae5-d2d8-4b8b-81b9-d8a5085a8b91"
        },
        "item": {
          "id": "0f3461a9-7580-4729-be5c-a3a7cef8466c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "60c7030b-164d-4e36-b1c6-dc1720a77d40",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 51,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0f3ede-fe05-4324-9252-1d1d1a44cd36",
        "cursor": {
          "ref": "b51332c2-7091-479c-b265-6038007673c3",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "43479622-e135-4f06-ac33-73423e5296e3"
        },
        "item": {
          "id": "1c0f3ede-fe05-4324-9252-1d1d1a44cd36",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "decdb5f9-6a2a-4555-b035-32386bf83ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:242)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:242)"
            }
          }
        ]
      },
      {
        "id": "1722eab2-5951-495d-b05d-10fb3fcfd0e9",
        "cursor": {
          "ref": "10f69e68-95d2-4192-98aa-02ced1faf7bd",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "7cc57ce7-732c-48b2-b2c0-2b1ab4b56bfc"
        },
        "item": {
          "id": "1722eab2-5951-495d-b05d-10fb3fcfd0e9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "0f5b1e67-4e7d-496a-8e88-35565da6526a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:243)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:243)"
            }
          }
        ]
      },
      {
        "id": "45f0de64-3ce1-413a-8d73-adff5adaf3fb",
        "cursor": {
          "ref": "1ab10d86-9883-4422-87fd-cd5b93da1fed",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "923ab96f-1d4c-4150-b5d6-1b920a322696"
        },
        "item": {
          "id": "45f0de64-3ce1-413a-8d73-adff5adaf3fb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "ab2026f8-2b64-482b-bdbd-c1abd7e6ccd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:244)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:244)"
            }
          }
        ]
      },
      {
        "id": "36dc1a5b-7ffe-4df8-9786-da9eb3584afc",
        "cursor": {
          "ref": "5163339a-6243-4488-ba22-732ba83a25a9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d738c1d7-eeec-4613-a2cf-dd40db1a1a74"
        },
        "item": {
          "id": "36dc1a5b-7ffe-4df8-9786-da9eb3584afc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0871ded3-7998-4798-9007-985a85926941",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36dc1a5b-7ffe-4df8-9786-da9eb3584afc",
        "cursor": {
          "ref": "5163339a-6243-4488-ba22-732ba83a25a9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d738c1d7-eeec-4613-a2cf-dd40db1a1a74"
        },
        "item": {
          "id": "36dc1a5b-7ffe-4df8-9786-da9eb3584afc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0871ded3-7998-4798-9007-985a85926941",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36dc1a5b-7ffe-4df8-9786-da9eb3584afc",
        "cursor": {
          "ref": "5163339a-6243-4488-ba22-732ba83a25a9",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "d738c1d7-eeec-4613-a2cf-dd40db1a1a74"
        },
        "item": {
          "id": "36dc1a5b-7ffe-4df8-9786-da9eb3584afc",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "0871ded3-7998-4798-9007-985a85926941",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7b7955-ff27-4f75-bb9e-5142fb39dc1c",
        "cursor": {
          "ref": "6b7c076d-120e-4e27-ad2f-bd35170c5efd",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "598c8810-b7db-4bc8-8025-7c062e4b8fa6"
        },
        "item": {
          "id": "7d7b7955-ff27-4f75-bb9e-5142fb39dc1c",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "02af461c-32ad-4277-a9b0-47e07e3f61b9",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 52,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c250bc31-3b29-481f-aa83-8915acc8dd6f",
        "cursor": {
          "ref": "3b04eb24-f95f-4708-a31c-32b9e109ae9a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9a8f1d47-a6e1-4318-908c-7ad6ea8c184d"
        },
        "item": {
          "id": "c250bc31-3b29-481f-aa83-8915acc8dd6f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6e67966e-e7f5-4b6d-a7a6-1ae2e6357f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "c250bc31-3b29-481f-aa83-8915acc8dd6f",
        "cursor": {
          "ref": "3b04eb24-f95f-4708-a31c-32b9e109ae9a",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9a8f1d47-a6e1-4318-908c-7ad6ea8c184d"
        },
        "item": {
          "id": "c250bc31-3b29-481f-aa83-8915acc8dd6f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6e67966e-e7f5-4b6d-a7a6-1ae2e6357f5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "18cdbc5d-9b74-48f6-9b72-ade46332825a",
        "cursor": {
          "ref": "0ad700d8-b5fa-469c-b6fb-8d4b891b15d5",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "361c6b74-350f-452d-8970-9b6dcee277ac"
        },
        "item": {
          "id": "18cdbc5d-9b74-48f6-9b72-ade46332825a",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "2943503f-67ee-4f36-9aab-79a087f1cebe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "7029cf60-92d0-41f7-be7e-eb9943a93188",
        "cursor": {
          "ref": "c6c884e1-4883-443d-a78b-def2dc63469d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0180985d-adf9-4436-93d6-0fd2e7cb0954"
        },
        "item": {
          "id": "7029cf60-92d0-41f7-be7e-eb9943a93188",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69220dd7-d5ca-4610-ac73-a7180794a937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "7029cf60-92d0-41f7-be7e-eb9943a93188",
        "cursor": {
          "ref": "c6c884e1-4883-443d-a78b-def2dc63469d",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "0180985d-adf9-4436-93d6-0fd2e7cb0954"
        },
        "item": {
          "id": "7029cf60-92d0-41f7-be7e-eb9943a93188",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "69220dd7-d5ca-4610-ac73-a7180794a937",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "d722c9e3-2665-457e-82e1-039aebd70388",
        "cursor": {
          "ref": "4256fc79-e2c3-4442-acde-86a497534a2f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4e241f53-827c-4744-bf88-930461c005db"
        },
        "item": {
          "id": "d722c9e3-2665-457e-82e1-039aebd70388",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "49154ed9-ceba-4e61-bb53-df47dc504d05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      }
    ]
  }
}