{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a9c495b9-61cc-4ea8-b866-5ba17b5919b4",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b5508548-da2b-4230-88d6-d4745abca95a",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "70b59415-216d-47a4-85a8-8cc9b646fdac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3bccd2f6-e2b2-4cd5-8c5e-5c7be3f15c49"
                }
              }
            ]
          },
          {
            "id": "32bec576-3364-4d26-bd10-f312867a96a6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8eeed526-30f4-46ef-8aa6-93ab7669a54a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3642171e-ad24-48c3-89c0-702b862ebcdc"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f753eb76-3e6e-4c4c-8672-8d9a33999b85",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1feacc71-db64-4133-99ac-7d8edc58d652",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7fc0f084-ccff-4c84-a8b8-4bec0db65300",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98c389bf-2816-49f7-afda-dd12833c6387",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b4bc389-c68c-486c-9650-cd42b9826343"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8cb3cc0c-8018-4a57-a952-9864489df942",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7c68e896-187b-4e48-8876-73ccc9459d05"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e942a6d0-7e00-4442-81ac-591b28db0b5b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a126b2e6-b7b7-427b-aa21-dc97f0ab344d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "34955c41-d607-49c1-b08f-2648ab0bfdd4",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "17badb15-9ab8-4553-badf-eea0b3836e67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad66e278-02b4-4d68-aafc-6e329a5c5d04",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1915e221-7838-450a-b2bb-0d0fdba9624a"
            }
          }
        ]
      },
      {
        "id": "f3ff79ca-ad5c-4826-bef8-9315dc3762f5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "598f3748-eb59-47e8-ac50-dbec91263c63",
            "name": "Negative Testing",
            "item": [
              {
                "id": "6daf4b98-3ad8-42c7-aa66-4ffa739b5fba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7686b517-19e2-4dc6-bfaa-6acfca5aa46b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4369e85f-c378-42b2-93ab-5c465cfcb3df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fde1488a-c03d-4c33-a242-a4d1a38c6e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e50b4f35-6d55-4561-b46b-e8fae490afc2",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34beb4dd-1fc3-4945-809a-b0bf4f1c804d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "30190689-bd0b-4e2a-8bfc-64187da6d41c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d5726e-4265-48c1-8b7a-d70e1f034080",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "104c506f-cc64-4359-a3b1-a3cae4a148be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "537dc36c-9979-4751-b1c7-0b3ee6825e42"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "565dcf79-da1c-4648-b467-9e9eb20ab6cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d600b866-3a13-41b9-9006-67eb8e2a7deb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1dc5b7-1dde-4506-909b-73d72970a470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fbb402a-8cde-41ae-a5b9-eb1442d60725"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6183918e-f6ee-4fee-9dfc-ab8057d5e9b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6115ca95-748b-4449-a2cf-31b218ddea0b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6e77ca3f-c736-4b42-a69d-1d8a7cf6538c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4a7eddcf-fd30-4034-b1b4-365521438473",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "95597183-06d7-418e-9a31-21caa3f78400",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e6aeb016-d914-4726-8606-552fdc8cfd88"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5ee61a00-560c-44ef-b4d2-ec253b0ad36f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "26878862-bbb4-4371-81b5-6ad34d01efba"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "302d3255-60c1-4497-ac9c-657f63d24ce2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a4aafded-4115-48bc-9fc4-8227759d52b1"
            }
          }
        ]
      },
      {
        "id": "f7f61d4d-93c6-4ca0-98ee-44a161ff9bc5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "19b919fc-d3f9-42ae-adfb-0d051ea5f093",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d664de8-87ae-4bfe-940c-52818bda923b",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d48213ce-0bc0-4d5b-8952-55e73fcf9f88",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40dec7d-ee4f-4ae3-afd0-79cf8f22739b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e6c2ec-7a7d-473c-bcdc-3d3e816f6ee7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6cd07e1-786c-4ff0-aa76-88cd45e80a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dab9a64-6a88-4cc9-ba5d-ca01a6ca1978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfae3f6e-a3cd-4f53-a192-938ba645fd7d",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dafebd6-c60f-44e3-bb34-6e2c6cfbe3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f17c2623-0edc-47dc-8487-43ea4efa3e62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e515fc-4681-49fe-875a-56c5de332410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "168019ff-4c08-46be-b0cf-75044373d680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a55298f0-81b7-4f69-861b-a30a457b1a84",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9075297f-a1ee-4bea-8907-52d12a8c9d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "517cca81-c1c1-4b0d-8fde-705ac18616b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f4c5459-5656-4542-b361-f950f9564b63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3d99930-3772-4e1e-8f71-04605cd96601"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6adbab2d-0625-4304-b6cc-d35e4573ea3c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a327e22f-c21f-4743-a4e9-e2a3f1b38e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e8418f-2f7f-409a-a3cc-840dbe5fa91b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9c60fb-8601-49b5-b78c-285ad16d66b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b373dec4-e558-4cd0-bec3-a7712ec827cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06670f38-3f97-4873-9f34-5add99605c50",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b44a04-daf9-4238-ab39-a7a90841dedd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f94e59-a720-472d-83d3-78eeb185235f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145309e1-dd41-49b0-8c0c-54948686c851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d4141cf-23aa-4c48-b8e0-07c02769b58e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5532303e-89c4-4d94-9576-28930260d9ae",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b521d0f7-afa4-4760-8288-a6024b565753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd85a968-27c0-4ec9-9b33-74b972a2af99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a6ed948-4d3c-4815-b046-8c6b70957b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15b72973-67dd-4ed0-8ee8-cb6757711e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28b508c-cf65-48f5-83a5-51a887a5a4e0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d099dff9-e5c6-44eb-986d-8424df6aacb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad8f386-32ca-4fb4-8d2d-049e1f73deb3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b9d130-393f-4f7c-a696-a53045fbcb0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2343d0b2-f3ab-4285-a498-4e635e50d059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f57e569-89e6-4f2a-a0b7-a3f118fb62e8",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619adbbe-407b-4008-a2e5-a178376bc65b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d56dfc71-2af8-45ee-b0b3-b0dc0fe67ffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5018d1b-1070-4b09-bb92-34071a3ebcfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7925cc3d-bec0-44f2-bd09-10c3c4dfa192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3d8afc-0b42-4aaa-8094-df16d8e37fd8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b92edc28-041b-4112-8bc1-ae580ad4009b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b4f3f8b-5d4e-49e1-a0ac-5ac30df53189"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f8e64a2-00bd-4cbc-a969-1abac51e4dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c57501f3-384c-43ec-ab52-22e3b01b8d81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0552f157-5321-44b8-9f5e-411d15557739",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6b8b619-89cd-471b-8acd-8ed508639ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad4cef0-f8d5-41a5-9289-3c34feb9ca31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f7c4595-87e4-46dc-933a-12f7862dcf1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d1804ef-d655-45a6-b07f-44834c952942"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28a6b5e2-0c92-4343-acf5-10000137365d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72aa84ab-c6ee-4700-beae-bb69cc8dade4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "015f3464-4037-4700-b154-1fedd45b1735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88118cb0-396e-4104-9c86-af1d39fec661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e7c73451-a849-4e56-9299-dde2f62bf783"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d669313b-163c-4625-a62b-749daa4ece30",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c284a128-707c-4d50-ac44-8c9c8a4fd340",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c654c9e-4d92-451a-b0cf-6b7065dd6e58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273cb8eb-4707-41b9-abf7-56bce745f267",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7044ab58-b2bb-4d7e-9454-1b69d22e12f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bcb03c-049c-4fa2-8afc-bbcd38546197",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f5f5e2-a216-4acc-8a82-bbd27bd70ff0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de99b82e-a85b-436f-a617-7e9eb1942441"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955cfd33-9ce4-4e1b-8c53-99735edfe30a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bc000cd8-9398-4153-afe7-ee95e922cd49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f397fd31-e1df-4065-bdfd-69484e15e3ad",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b08108a-3735-4139-a708-54f2b666298e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fabc7e01-2490-4418-b350-a2c6e96f4dbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1682732b-3902-462c-a3bb-348c4f2efd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3363c233-e2aa-46a5-80a4-f8bc87384a2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fb453c7-75ff-4b30-8c05-9b5f486cc1c2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13cf5035-f723-4979-856d-0a3a13007523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aef8918f-0da3-4cf5-8c18-d6d2ea8816cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dc27b31-bf26-48e1-bbf2-b4b94b0394fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f7d8ce0-fc96-4da0-9787-3b4b202aaf6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b098de4c-736a-4594-8cbf-d6f458a55d3d",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fcb4d7-5ef8-4627-b187-9c6f80415c2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eede054e-8c63-4ddc-85fe-95aa0ddb8d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6acc54e-3abf-4ef0-a3d5-4f3d763a4b91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5bb71019-2fb2-4931-a61a-70c0537b099e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68324912-31d2-4d39-9757-1ab3b75745df",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "622bb0ee-ec48-4ddd-bc97-5e5b2686871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0f50398-272d-4d37-bd35-8af9a0a8d095"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4465329-82f4-4878-9803-bfacabab51b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98e4fc8b-e7c2-406b-a7f5-ce29bd6f3b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1658f7-53f2-4aa5-af13-d0ba3ca99150",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b108aa6d-bb77-4c86-9569-d4bf63cdbec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5351ff3-82a9-45bb-8371-f5ce7211f685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f683cfb5-2e0a-4d2d-9856-14e7fc94a0a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "336b91bf-0902-4bb7-8848-4ccabaa6629b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f108df1f-09f3-4472-b157-a8f0fbca1f8f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ed59a64-a8ee-409c-939d-c5602d7bf84d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e278c4c6-83fe-4af3-8254-1b9ff6834c1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a62b3be5-e621-46f8-a6d6-34df2df031bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3cf8c5-f098-4d26-9c9f-7d38c017c244"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85030f0-05e2-46f1-9c50-334502f13a72",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22f8ac1-ca77-47ab-8e8d-9453c0b05757",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51cccd78-a6b8-4175-b763-9619ff06f89f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43b49da-ade2-4a75-8ab0-ca5b62ce4e03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "923e5302-d94a-43ba-901a-cb3a04e2a47c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "392fb483-7391-48f8-969d-bacada392155",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "117ec8f9-bbc5-44ae-99b5-f9fa9fe98ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a04a3d29-4c52-45b1-8c95-143d50f4cd51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f45d7e-fe6d-468f-b474-46202f9a0971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cd99e9b-8f63-4594-b62c-5e1df2707279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a4d065-64cd-48bd-bba1-485b0dc4f4f5",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f1be6c-a2cc-4f31-bd07-73892f298acf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a884eb19-d29c-431d-9a9b-61c98a00d0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ad11e2-dad3-4a9c-88e8-e7e7622aad33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "968a0658-fcd3-464c-be00-65830d9daf1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82dc8694-11d0-40ba-ab01-d2e62228f216",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ec05a3-b2df-4cf3-bfc5-f4c502b97801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5e5c229-33d0-48d2-adfb-a81224d2a9e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecaa416d-3b9a-479b-aa27-3dc69a5f4d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "27249759-0a16-4fd1-95b9-f12d2941b0ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1577db-126e-4165-b022-819ceb3f053c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa83cfc3-5cc8-49a3-af9c-bf5be52fc0f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3d8633-6e8e-476d-94b4-a8410baba8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c58b47-fad5-4e79-807e-3b4eb357729d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "dab171c5-598d-4d17-a494-34c2179676d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71fa07e5-c8ee-4e64-a1d3-ac7006b1c5d5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f25d0384-fd80-4092-82c1-c178bdb69675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9ea61a-34c9-4f9e-a238-d7208e7f2622"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca129ac-6246-40d2-b562-bed3e560bb48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f0db309-c4dd-455a-8f66-751626d9f527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "164c2808-8a76-489d-a913-512366f32219",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "108c9b5e-b35b-440d-9944-60684c724064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a76b69-cb14-4287-994c-c015a011612a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b230cb0-7901-4744-805f-5bfe465ce808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "023bdd14-63c7-4d92-bd15-b0df64982223"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd17aa0c-3f90-477a-8bf9-8dae5cf054d7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f934cf0a-cb8a-4468-90d4-f8f3e26f5546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d847a5f-5525-41ea-b928-ff9e3f005a85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42fc6d41-b701-44e6-8f02-b662908c16ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c120213d-3be5-460e-8dc7-9a0584d0b06a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5a7351-b175-45e7-891b-6c70e0934e73",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b74ed46-515b-4bb0-a9d4-6e035f2a6671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d82be04c-49cf-486c-906c-333f8295a006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3282e72a-183c-474c-b1a5-1dd40f43c9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aaf09b8-e4b8-4300-b3c0-c3fa4153afcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf730ac4-fba3-4e38-a5d1-a0fc6b1b0f0c",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade84ffd-03ef-48a0-a7bd-73b40bf47f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffc907aa-304d-43c6-9adc-34ee0301be98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4c98aa3-c047-457a-a9a5-066f1250e163",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "19370310-7863-4a1a-8e41-3dff0193e519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d305e72-1032-4179-a3c1-af48ed345497",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5481f0b4-1e6f-4017-a76c-45fca726395e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8152574e-8043-40b4-9046-0e134c1ced65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac1c582-2f50-4d72-af79-bd2023b27420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac5888dc-96d4-4bb3-9941-c0a6c532d44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d497325-c689-4803-bc1e-db60867674cd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e18680c-263d-4a34-ae3f-27734b8cd1a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b696b22e-dc9a-4b72-a292-652051054534"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b969ae81-eee1-4602-ba57-59303e486215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b873e365-01a7-4697-9e3c-300413b231fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d7071dc-13ba-4ca8-8666-74ea3349a4f1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7adb7d-0e6a-4b3c-aac0-c01ca2ce7594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13d723b3-28e8-49a5-bdcd-e334bfa32861"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee74eeb-688b-46ec-9f13-f42bcecadd67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5523c96-1080-48b5-af60-da5ef5e30a83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e41cfad-d4e3-4841-aa13-d28adc6de78e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c779dab4-1b41-40ad-a3dc-67dff9ea58bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2965c087-453e-4e07-8dc9-07883bb06b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b93cfceb-82c3-4400-a76d-7c96a4266e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e91197ef-6dcd-4444-a2dc-3e2219bbedfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1871c25f-4f9c-4729-95d9-53c4cddb5e62",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5dc0e14-3e9e-415c-8971-60a55c4d6835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abf25716-5782-4332-904a-aa2133c53012"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a260011b-9814-4a50-8a2f-4834006daa0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf13a45-aa7d-499b-afc7-f5dd967b79fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7be60bac-f404-471a-bcf4-0754b0a8306e",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d20b9c-8789-4c32-8fc7-5eef36342190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863a0bf5-5f80-4386-a0cb-efb68101fdca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a730f7-caf4-4bb1-80fa-4897a493e4e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "4b53b722-8afc-47b0-9440-a63672cc9796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "681d337d-726d-4aa5-8166-fa6f2c7f71b6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f52a0b74-2293-4d69-b35f-2e18b6272c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3749654e-9613-4433-8b04-4a7a1948937f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e15f50-fd14-4f3c-b199-124e202c2e36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "76409c97-a22d-4054-8ee8-8951f593c837"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1586486-7bd4-421c-9373-3052e71e5aff",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac19ea54-15aa-48c3-ac14-d2c57e1ab282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c61ab51a-2102-4b7e-8750-0cb44beecd8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7070747f-cdbd-4770-a359-140a7a80c955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0514fbea-9eb7-47b3-8c3b-13a195639e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc04c83a-ef25-48c2-ac32-30ba42cef9d6",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f03d9c0-1cd9-423c-99b2-1642649531fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd737308-fa0c-4313-b686-c11b4f00a695"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "654173ac-b2e1-42cf-a2a9-db1560415b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f1e194b9-1c5b-4d6c-866a-e60816f60ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aff12bd-580d-4d66-92fc-56b8edb8731a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0d717f-97d9-4d57-ba51-5eed238e890f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2f4cdf-e1af-4cc0-81ff-d4dfda76dc47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39e69f1f-3580-4481-94c5-bd1fe655e037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b5122d73-1e7f-4461-a747-cf8392d06b8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "866f096c-c5ee-48eb-91ac-2392e5b74c71",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57c7b634-edf5-4ade-b9d4-1917fcf27a9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5c14eae-5867-4667-b82d-5f76396ee08e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7072ab62-1b18-4041-83dc-c90c9ab34312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4bce75c1-9d95-4353-9d63-80a5e170a176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c57debd-819c-45c2-959a-01bde01a3027",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e89fe6-f0f2-4940-ab4b-9e39664c1b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdacc1ad-5f31-4866-9141-17f25b9b0c19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93c2685-37ec-41cb-b48c-4ced50c9ce3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c47394e6-873f-413e-b54e-7a2c3c24ac78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfa59b5-e85d-4e1b-b626-b412a46d86c0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34f10a8b-bc4c-4d37-b32a-2811bf820142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf5bb73-ac1b-42e0-9fb8-79c63f774810"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43c7196c-4b88-4d16-9248-71833b5e15f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "e74fab19-23a3-40fd-8b80-906a469e902a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4294a839-4782-4c72-a38b-2a7f6e81472a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce9f80d-9bf7-485a-8e44-ca734c2f0a6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "247e152a-b439-48a4-8436-03136d74f9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "471239c2-7f19-4385-af15-44a730e8dd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "515dbf2b-9bc8-4f9f-8c4c-d1791da402ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c72b8f4b-ca5e-46f2-9445-549887680824",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "052faaf9-56b3-4572-974f-01bf326c3ab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db13906-2da0-4df8-a1c1-1d76158b268f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ad54a29-85b3-4c92-a49c-6bb593caee83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6540d4-511d-4a4f-9972-2dcdf7ac08aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce40eb2-6c89-46b4-b778-f0106e5fa0b4",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc4c7c5-40d3-49dc-b7a5-92d7ad6ab9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea0451f7-0ba7-45d5-b7dc-1cf9fd391ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c01d52-999b-4bb5-8fb4-e37bd04f7ea7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "96ab53ca-0729-4b57-ad42-9e87d6554565"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6abbba2e-4a85-43ad-99b9-0a5bdeff2d9e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47dcb7a8-c58a-42b5-91f0-21abf64db242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8c84990-b853-4cab-ba67-e99c6f374b14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ceef9cb2-4b07-41e8-b30f-8edfcdc3608f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6199663b-de1b-4440-95f9-5fe8dfc8e0ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d3a765f-ee22-4b97-bbe9-4b922124946d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa6918e-8276-435a-b1de-c9a193b1878b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6efc8edb-b833-418c-bd18-c21b65ab5448"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a920d014-3fb4-4c62-bc28-4c1c4af1883b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8ec702-8cb9-43bd-9470-caf64c5053ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e517b59c-b2a8-4ae6-aed0-55225ef9ab7d",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "565157d0-081b-4bbb-bec2-066dd104eb3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d7c41d2-6e26-4c9e-8980-eb827ecd949e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffdbb0c-fe65-48a7-be12-2e8cae0bf7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9a79e26e-88e2-471c-9324-818adb89ff92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6148da2-ca1e-4900-866c-2f37509118ce",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "182681d6-b247-4cd7-80f3-7bd2b53aaae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ca3ede1-65b7-402b-808f-cff0a1130002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8fa58da-597e-4eac-b9de-668a47a56538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b6c9c38-2052-45f1-9b36-11b552c128ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9678158-aced-40b4-a624-c15eb05f5032",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f86b3a9-61a1-4359-bbc3-53f8bb5a609c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eef29e78-fabf-400c-97a1-67ea31f6eb90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd3b4b5b-1f14-4e76-bc50-c04c2d0881df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "848116a4-c89b-4a30-a1aa-f5c572b9a91a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fd06f6-3b67-47ad-a5c0-85093b56f9d3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd6e750-51a2-4919-a6c1-32041680eb90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0484b6f8-7210-40af-931f-280297ac259b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1884f846-a1f9-4290-8b37-07f0a78ac63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a3d8e2f-c0c9-4d92-9f21-50a23a67eee5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30a525c8-0472-4ce1-94ed-6219f20256f3",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a1dd54-ef0b-4f63-887b-5a72025d9639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94de2717-011c-4ca0-90be-dc1005d92bcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29706868-b515-4875-8ce6-fe7c68ee9e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "88959725-d8b6-4b8c-8f6c-2655a7c1ed61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9952eb10-a7a8-435c-b05d-4bc4a0dcae3b",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f40f0361-a08c-491a-8971-7cb59d683449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acffc6b3-9900-4c02-b242-edcd67d38f47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1485252f-48e0-462c-b2ff-ad621797a06d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cc6cbfd-2583-4aab-bb8c-5f9070fc20de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "471e4ba6-1a67-410c-8918-f247088104ea",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bd0b54-eb0e-451f-b4ba-caa2fb6707c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a920fcf-6d0e-4d84-8660-a3998a5306a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b7f0687-9c1a-4c28-a807-b1ab540724ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "22e254b9-52c4-475c-b644-9d2766baf38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f5efbd4-456a-4859-a2a9-a36a7405157d",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5033317-4455-4219-9f95-83224d785a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be5b44c1-4c0a-47a5-bf9c-c3f919340818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7f6bdfa-103a-455a-a69e-9e794d10c6d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5e245e6-5a7b-4b84-8112-9361a4f28495"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d6a0d0d-2c39-4c3d-87ae-51881595fc86",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24abbec1-ffbc-4bec-bfd0-edaff69452bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4469eef3-65a6-4408-af50-79285c9a4e44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9025636-87b6-47a8-88e2-f34140f2f334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "05372bc3-03fb-4267-b066-0bff73644277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aea8d7f-9444-434b-a91c-fcfa6a11bf35",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f877c8-45cd-4f5e-a5b0-83de6e827718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef0ebfb9-f83d-4339-93cf-36b722d15626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01236fe-9fff-4bb6-ac2e-5dc274fc2cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "558fb3e3-9428-4ba5-8911-63b95f712bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb6bdcca-0c9e-4c74-9edd-d66ae52566a0",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a231cc38-28ea-46d6-83a0-aca496d2fe85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b38edf6-146c-4b68-95ba-6521344594da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fc6755-411a-482e-a4aa-ef7e05787fc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "74662898-5548-43a7-a2cc-64693b0b6a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c9b1e75-d7f7-4d71-922e-33ab25c4e10d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "000fd17e-b15c-4cfb-ab0e-5253f5b22f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcacd047-b0cc-44a0-b612-adef8560b561"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "830bfc97-7e62-4f4a-a213-3a69851c33e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "691eff10-fd5e-4471-8ce8-785a12660cd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98c67446-17e7-4048-a74d-a66faa5aed9b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc440b6-7d79-4ffa-9ef2-60f6f2510c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d6ee56f-9700-4e0a-955c-5a38be9e6d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a71334b-85c8-4efe-812e-7112f49b338f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "2caeb01e-84f9-42da-bafe-e503219a8701"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3abb2ef-5251-4a1a-aa47-9ea5b7b1d422",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce48805-b0e4-4f5d-91e8-cc505dad5ae0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2be5379b-05ac-4343-a45b-ad9f5feff4ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b602d0-0d41-4674-a0e5-eefa2896e3ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "71bffe69-a19c-4d92-9948-cc85574ad88d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de06295-5a85-4041-929e-3e20f347db8f",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4307e0c8-c6d1-4672-b424-acb7f0addb61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "beefb3cd-9cd5-42f3-a367-1fe5ff712c99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e402e6a-35be-4eb6-885e-91ba1d68395a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "5bdff4d2-a077-43cc-aa52-afa367b276b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "163eeb0f-a2da-4cc2-8742-3fe999699656",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f183779b-8c7e-494e-b503-ee31946c316f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ea3efb7-aeed-4129-b846-b76b0e670b41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "221c114a-254c-4980-abda-de146cc24685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa64791-bbcf-4ee7-b582-1cdb6ea0a7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48e1f394-72c1-4763-8fbe-ef3fa3443e00",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a08f2a2-4567-46ce-8667-5ea1affec5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72fbca1-ced0-4442-bb40-caace9963e6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a72c0cda-0863-4d3b-a734-18d02c5f006e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "42a3ef9b-418c-4e99-8e7a-fbc43ff6200b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c31b33b-4bb2-4938-8586-cab35c610e4a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc470559-00bb-4fdf-891f-1f6970b12e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f04c36ea-ba19-4e03-a6bd-0b4689cafdee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebefa86-269d-4af2-aefb-deecb2dc20e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8736c45e-f5b3-48ff-b92e-37929607da51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a32c6272-f7bb-448e-9ab7-0460b185ffde",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd5514e-8772-4fb6-91b6-fa4d53d7dbbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5561d307-9e92-4924-81a6-cb03cb0e6919"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccf066d-25d8-4374-b4c1-0ee2a9e5792f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c5951f-9492-4a74-a438-e01bf9241eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e76a0b23-70f0-4f99-b98b-6d6e9b0f057a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0aac384-5fa9-4979-a392-b52d89718ffd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf39991-3972-43f6-8e51-6bfecd7619cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "452992e3-ffa1-405c-9047-22678c4837f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e956dda7-4f64-4857-8290-02c724753e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903c6726-4cc3-4a22-8359-20d4ec1f02b0",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6eea9754-ab6f-48b9-b76d-11568bf6f5a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c378abf-2d04-4191-a0f8-e6ab31a5a667"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73b4b4b5-06de-49a9-9669-6c8f17c4a33e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b5943d-2a6e-419b-b56c-d91e30f1afa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe85cfe-acd5-4b6a-94a4-cbcd72a149d2",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbffddd7-5619-431c-868b-8e8b633a3b4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecb9084-cd12-435a-8308-99bee541fee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b93c3c-c7d6-43fa-8b9e-2b31b31b1cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf7ebca-8cf6-4569-98c8-1c2715196d27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9ec91a2-eaee-4f95-8500-77af70a8928f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48743930-b0d0-4350-9ead-bc6cb5f5c7e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bd72d69-ab2e-430f-b420-57dd492f0e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78858eaf-5798-4bcd-8815-db3b6e8f2883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff23727a-d698-4a40-80c3-cf5538ad8811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a998fb3d-e148-4c58-b076-e2fb0030d84b",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf887c8e-efdf-4ebc-8641-efbc029174a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79edfdb2-fab8-486d-82b8-20381df24fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b76e75-f9e8-4c96-875f-8d0a414f6883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "823b81dc-3265-4b85-bb49-9073c52a6d79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dc6fd45-e916-4a69-ad58-0fbe68c37d0a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3347da19-ceb5-487c-8d91-2f658ba2f3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318ad1c7-661b-41be-ae23-2d055522c3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c622d7-187e-446a-b44b-098462ae640e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "53f5d57a-89d0-4fb0-be4f-8e9323ef167f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8691e3d-d69b-44db-bfe7-0e8c7e8f2093",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50854cec-efa4-44f7-8b06-d0a7417148c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "737e0e29-6828-44a7-94bf-6add026d59be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fb7cdcb-d205-4f57-adbd-3fb17f8e1365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d9427feb-a8f3-4d99-92bc-ae8a1e8bf823"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3658874d-8e85-4757-907d-cc20568e5e37",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46dc991a-b114-446b-ae7d-8d02de4ab6b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c318fd55-ccab-4863-9510-f3a655087c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5dd39fc-5d1c-4dcd-a5ce-79957c5d8e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ebe80e1-5bdf-4239-9314-b503296b04dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17417dc5-acbd-4bc4-aa0d-abd067f0d2e6",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36b00d4-83c5-460c-bef6-32423c4d39ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45bd120f-cdbc-48b7-a3c5-3c5d01595c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f799af52-71c5-4ce4-9ca1-34e215b338f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "06e6e5d1-6fac-48a2-b27a-7b2416a2c248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090fd4ca-7ba4-4f7f-bef9-e52cd0d787ed",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30aab63-8d67-4d1c-bc30-b8dfb16e9592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7478b6c3-f61d-4dc9-970f-75afbefa39b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a7e4e4-efb3-4b70-a820-70e1521388d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f91c1ff9-c000-4c77-8f3f-211966bae884"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3c5bac-6730-49ed-a993-0646aad21593",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6cab4c9-50d6-4205-98af-0f3fc4072ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34aacea5-1a10-490e-97c1-bf579b55eb31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24058d3a-2775-48a8-80cc-decec46d4531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0fd650-62cf-4cbf-b456-ff32a7267b0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8efd0079-e584-41b7-8466-6de9415166d0",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc087f20-1da4-4c71-a410-acd7d3fe7bb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c07d76-657a-4405-b838-72b0173013a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16e9c3db-c56e-48f8-948d-5ce75ebef092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fde74d71-c53c-48a3-8031-50d2ccb12a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd62616f-8d45-4483-b6cf-278aefcbac21",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63efbe2d-b635-4397-b45e-4969b47212b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47cdb365-a0b2-44e0-9579-cc0de9506798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ed61220-093a-45d4-87b9-ba44667bd389",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4a276a90-dcbe-411a-bae1-fdea895045cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b139dd4b-2579-47fd-a367-c8eee9bae55d",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec089ae8-d947-47c7-90ff-645a449453b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eda0bc84-bda0-4aee-825a-2b1d864fba0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae38bee-143c-4915-9703-0db74e6d06a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6271bcf6-6057-494a-8fd2-342500fca0da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "583fbf48-75da-43ed-85d9-51321db53022",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e47493-3ceb-4df0-9fc0-09aef228e936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "317b3494-e189-4328-ba54-f2610d39984a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "099bc635-9b80-4db5-b28e-cb7f2423aec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d50f1092-b265-46a7-a8bc-58020d486487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1c19967-0418-42cb-9dea-2bb86846afa3",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c65bcb2-8dd1-41b6-990c-e2c175401f67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17552811-1c55-4754-87da-0d3d2339930c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e857d4b-405b-4eb4-be20-ef4899bf6542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2184c6-c2da-4956-b5a8-8197e92b9036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b92d897-17be-4842-831f-650645a3f097",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6a3edb-5d8b-4c01-8e12-2f1759066067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76d360c2-31e2-4e6d-9f62-03b0d89a612f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe633fd-41c8-426a-ae98-a48706f8ed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb1a4822-8d4c-4da0-b73f-639245be75e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3a7678-a5c9-4c79-8432-bf2f51571d0f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969561ca-7100-49e5-9915-ff5108e9bbea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf50c5d-8393-4698-be36-c471c3fa3e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b110ec1a-7b15-40ea-8f08-dd2d5256681f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32d52279-d1ae-4109-86c6-09d47bb1c0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5830b8-8ff9-4c1f-94ee-1ec915f8af9e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72433c56-3244-47d3-b869-5c8244e88b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e6d3dc3-24b2-419a-abb8-733bb2a6e6b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76569bc4-82e5-4346-a8f4-8ecbff66a2e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca67efdb-1a2e-4d5d-9a0d-d9ec6e51bdcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af07a256-3c67-468f-b5d6-1c7441a5fb02",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b93dca9-cae4-493b-a7e4-c72ee4458f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6de0943-42ac-412c-8085-63376d222bd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dadd6556-3afb-4007-8812-beb7abc729a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9172fe47-43dc-463f-916f-5f5df5a60f98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ee525f-07e0-44fd-a220-f4443f306279",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1156869e-79c4-4e0c-8f56-66de28630758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ea12441-8d02-4db8-9e0b-54b32980b363"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9af1307-ebb3-4407-847b-5a68a750e15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dbbf9b1-fbd4-4dff-bf9a-85ef33fa810d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb13a398-d751-4eba-beef-7ae56d7473ee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc87649b-2f23-4f61-86bd-91024e5f646c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fba9f4a2-4d82-4909-ad36-b62d5fbb5aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1acd580b-67ef-4032-8158-bd42df8edfbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "67dd5bae-9a45-420b-9c63-8aee4fd18b31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49684e71-9834-41a0-850e-8561fcaa320d",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5c66dcc-b021-4c72-a0df-91612458050a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce2d1078-ac50-4f89-8361-81262fd3d82f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb8ac0d-5c1b-4add-bf7a-7a3a87c6a405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "69ef64c3-12cc-4786-82a9-e28702f2efc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "907f4596-7758-4468-af5c-67b938a76c87",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f563cb27-e7d7-4120-8e4d-88952e1df5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81832efb-9ffb-48fb-b4df-3c56c1d71eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267b6d5f-eb41-4e22-9e52-3de70c0e6f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f52f9b37-3eee-47ac-86a6-440e9ed77a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b0a7985-4465-48e4-933e-cd2232188ba5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5950c9a8-f8c6-4753-b8b3-fd26e2f035c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "051b7eff-3f47-4cf4-bde6-65bcf4ad3263"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6919f40d-d613-400a-8534-e083b7d9eef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2dd285-e8fe-4289-ad4e-d2f1214322c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea0f4dd3-5dfa-4aea-96e6-5a184b91c1d6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb7c4f9-93da-4fae-a6a2-01cc3a16d3dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "02a75876-f1f9-4ac1-a743-bba03f3dbd59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb27537-b4d8-480e-8fae-16010635c8d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b07e9670-e25c-43f5-8572-7af4267af7b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d8271986-3c7e-4388-b4d1-1251316079fb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "726a8767-0f27-44cd-90c0-ad99d8614faa",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52344411-5100-42e0-9d3d-9a2ab9247994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1719ccbf-d8da-4e63-bcff-92e6bcad347c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d30faeb-3518-4418-9fd5-54dc5160fdad",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab624595-c67e-4796-bc9e-066880d68f64"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90bdd64b-a351-4cb8-87d8-5063346a9775",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7a415758-d0e2-47c7-b866-913c43c26ad5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbb40d20-1efc-4985-8a14-9bf30f3ece5e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b7f7716-3480-4578-8a87-93692bb65bb2"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a1b875b5-ffb2-48c2-bd28-0f5eb32bb5fd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "de7dca0d-7089-4b5a-8467-16007a45391c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2cbfb56b-7588-4ddd-a532-691dc3db938c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "84520685-37b7-4f25-9d01-2871bd0d3973"
                }
              }
            ]
          },
          {
            "id": "0f69d45e-c5bc-4c9e-8280-09b2006bf61f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a32a113-cb87-43ed-abbd-a01c5f389578",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f46dd1ae-99a2-422d-ad5f-93602be1f1cf",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01dc9ba8-17dc-426f-8a55-981cbfd64f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "60f7a877-d85c-4cdb-8de7-73b3478fe4d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd734b73-d3f4-46a8-aea2-551b39528a36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46abf9a0-d0d4-4c8f-ba57-947a94509411"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fcf747ae-1e37-469e-b731-ad626b27188d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "00205481-650a-4ec5-b8b7-c267eaa73aa1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "23220fac-45d6-4b2e-a4b4-67f4e1b3fdc0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0b49b4d3-cc71-4628-989b-4716a68b8b7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c6763b0a-31aa-4231-8c22-46eab6feae14"
                    }
                  }
                ]
              },
              {
                "id": "510caf74-aea5-48f1-af0b-05a1467d16fc",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e6d199eb-c472-4839-98c7-6ac4e972cf98",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "70127506-2341-4b14-b0fa-952a31f72655"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6c189eac-d639-478b-8020-c1aa2f8fb135",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d14c217-d0df-422b-9879-fd2dc4de1ddc"
                    }
                  }
                ]
              },
              {
                "id": "661cd988-ae0f-41b2-b2b9-fc50813cb199",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6539a71c-3f6b-4299-b3de-806268e034b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "efbf1467-6aa2-476a-8379-1da17b8db9f0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fb832b7-85f6-4386-ba56-81e9e311beb8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8c1ac51e-11cf-4158-823e-bfcdee7e46ba"
                    }
                  }
                ]
              },
              {
                "id": "ede2d612-ff84-4b79-a236-ea078a583345",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe425a68-6de4-40d0-aed8-2f12c3d3a9e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d8852e2b-b416-49d1-bca5-f33ab2c4377b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6a633f94-348d-4f67-82f7-49dafddd2581",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "40e01122-30b2-4247-bbc4-8dedb4fbec74"
                    }
                  }
                ]
              },
              {
                "id": "7f888a02-a8c3-48fc-8cc6-df3f79d9502d",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb905607-b59c-4bc4-b089-6d6561b9cb80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b3ad06f9-781d-4a64-b455-25308895d944"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d7c80757-32e0-4210-8f21-5d7e7ea18206",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "4d9f0d20-b1ed-4297-9cde-3bbddf374521"
                    }
                  }
                ]
              },
              {
                "id": "6ab852fe-2e01-4b74-b09a-bdd9aea2078a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bcc7d02-f33e-47c7-9bdb-f98aab1e76d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a1a081d7-d21e-4a83-b59e-88553435152f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e6995f17-8b29-448c-a542-c3e20b94f422",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "59388f4d-9182-4622-871e-e9221acdf526"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "009390a9-32b0-4aa1-87f4-54c2a83dc9ed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c0796b5d-f8fe-42ae-9ba0-d2c0e4047ad8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06624a6f-3597-4667-9d50-4aa8b99313c5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c4267890-a75d-4017-8271-a7ef54ad0dc8"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3fb94148-4991-4360-8e2e-7ba69b392454",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ef41ac34-c476-4564-ab3f-6a8b9aeca27c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad53c699-2a0f-4ee8-bbab-0e0a0e4bf637",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1706c5c2-9c39-4263-9fd8-711333336911"
            }
          }
        ]
      },
      {
        "id": "daa9d28e-b654-4235-b86a-1c32c2a70244",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "bbd3ce76-896a-4d53-8417-0a9b1b963660",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e2f56a2f-a4f3-4e4c-997d-1e866c0435c9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "99ceb87f-df05-451b-ab85-4025a00d3867",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e146d91-8ed6-4880-8c1e-9d3553f6ed63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26a3e418-64a0-45cd-8dcf-e823ea805367"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba3ae3c-bae2-40c1-a27a-cbc3256b670c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b466a17-2dd2-40fc-835f-9d6674f57510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a1c4194-eb35-4a29-a1fc-d01c85c76673",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e39a9ea-14d7-4943-b989-4e00a9d46fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f613f033-cc99-4454-a226-6895b1202b11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7645875d-2fbd-439d-8a75-7fce447cc84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7cc9340-7f8b-4fef-aa5f-bce64c5422ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca0dde35-0826-4f2a-8fa7-f1c8cfbf6985",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b966b01-4147-4f9e-a103-674940a480c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8590df37-9c58-46ad-9806-5f8a333dcffa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fc10fb7-7adc-43a0-94f8-4041d24bf456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6bac34ea-7a5a-4dc8-ab61-a132b062c46e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bfa05b0-0105-4575-a4fc-f11071721567",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c3e57e6-57ff-4065-a8e7-8d23995e92e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de7f94f2-01f2-4eca-abf8-ef1a55034e3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5f0a32-9db4-4ff6-b02b-b224ce39b3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "468f1a78-b578-4b80-8308-8dcad7e6cd0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64239a16-839a-4c42-963a-5d4078b7d75a",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eda6eef1-a5b2-49bb-8a98-7ac916bed948",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b0ed6f9-9111-444e-8d21-62b02c9e5c02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893645f1-4a3a-42db-86c7-c65d8f0487ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eb263a92-c852-4c09-b3e9-1c8a89b20609"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5770fa9b-51ef-440f-a95e-618629b3411b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4539aaa-7cad-4581-a185-a69ffba088bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15bee67b-ce25-4fa2-93bd-71d3489d8ff8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0529386-47af-48a1-a022-23eb324ee8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f4baa891-f0fb-48d5-9264-b36b03ae0e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0966fdde-41fc-4fda-a7ef-14ae241b3c30",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0737b8cc-1d97-4e15-b0bd-ec04e666d0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc5421c-b587-47fe-8e40-0b39f04f4ed2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4246ea5f-0a8c-4ac9-b453-386b3a96b01f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcbaebf5-c837-4984-85cf-52086056b1bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ec7c955-1014-40f0-b374-d75f995b0480",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b36f509a-3d24-4117-b8e8-3004deb090e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2d6926c-34c5-4aad-ac51-c21f5fae7f80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b0e0f16-b9e4-4c08-bd03-4b999a9fbcf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "48378481-d14c-43b0-ac13-58fbd99053c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae492c9a-34af-440d-a3bb-7032a972a31c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca36f7f5-8c74-499b-8786-1d13e3a237c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c9dd8c5-3090-4ae0-952b-53b1659e7e4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e1c4c59-2b4e-4311-b90b-072a1c5229fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5fec81a-e4bf-4710-a836-e734c1bc2910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2aa4c171-c05f-4a05-936b-b4871c6fbcf8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a279e19a-336f-4fec-a306-9729add6d3e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "671333ff-4f89-4c75-8d39-f72815243a81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e897918-fcc7-4ea3-8ec4-c6a22097696b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5aae13-2aa9-48c5-9e40-6c19f82ec4a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3589202-17c4-410f-8366-56567c6ff56b",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73476d7a-c96b-497f-95c3-81849b3e438c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ad24298-bdfd-43ba-aa92-ffb2793994ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0445364-53ff-4097-a2d6-6c55ceee8f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "63e55bbb-aefb-42ee-9dfc-1f44c3eb3b61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccea97b-d4f3-401a-9cd5-28f19b8311f9",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11770edb-9767-418e-9864-ece1c382b97e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34e88fca-d796-46df-9edb-8fec76445439"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dbcf7b8-ef4e-4a6d-b2d9-354779281aec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "303fa486-3577-4c36-a38c-fbfb5445e241"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b4b185e-dde5-46fa-bedd-9e3e0297e28e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff2d24e-13d7-4cc5-b826-ca438a2af623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c342dd6f-3ef3-4850-a9fd-addb644d7998"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50933e2b-3f43-4196-98ae-941ca0b6de13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0056ca10-82ff-44b8-a6e2-b4f4d9787ea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d09015-b12c-4a57-b39c-e22789658127",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619c8358-8b4d-4bd1-9a17-705c2e21abb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47bf47eb-c92e-43f5-8b33-fc8153a43b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165430c7-5051-43a6-a3f1-38de2f8bb867",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cd37178-8913-4060-8d0a-227d53adc8d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbdc0d6-f7e9-4539-aedb-904360a54846",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d5b2ac-5e1d-442b-866b-7d3e3c5c16c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94e70b29-1075-4c1c-bc71-74c680b4328b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4d7579-5b0a-4113-92b6-95af95bbb999",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d66cbe5c-0f2d-4e5c-b9f2-d152747faae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30cd70cb-4459-48bd-aa16-1849e1561b1b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6100badb-3fa8-416e-a7ca-5da214ef65bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3450d46-cd58-4fda-91ee-232141ea5c96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fa8ad2-c8a4-474f-bad9-2c2b32dca885",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ec415ec7-52f0-451d-a14c-a0d55f322021"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0859488d-1a02-45cc-86ce-83741421aef5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be5142a0-15ad-4c29-8480-40f9d960fe31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a751aae-c0d8-4d58-9c09-92fdf24e4bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33612a75-e073-4d73-a8fe-6dcadf188a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "167f077a-9edd-4a46-8bee-330ecbb1b296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b0474b-6913-4ca8-ab4d-be2251b049da",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0effe24d-2662-45f8-8681-de05aa7b17eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c39ffb98-28aa-459d-8bc8-f241914422de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f1d1e0-a498-4051-ad94-e75a649dfc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "7701e06b-41ad-41eb-8811-416ef69d0bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c8a040-3371-4011-bf8d-ae5ed0e8d617",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d76fbecb-8a62-4799-92f9-2dc7b3c767ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8bf79f8-8046-496a-ad2a-7e79c37e5108"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c007fd61-78d7-448a-8595-0d42df8dcc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15dc233a-84a5-48a9-96e5-f9fd473ae57c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496ffc10-2c58-4fc5-a252-f1952166c890",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a622a1d7-140b-43a7-a2b0-5529469a9d8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbdb530-4327-4604-905f-f4d9634b1aae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ce00333-00f2-40da-94c9-3a0a9b78f088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9c4445f0-3ea8-4bb2-a6a6-1e8696a03fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8e66519-1d6e-48de-b2bd-3b6fcaef5807",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cd8e21-9b55-4023-bed1-408f0c4bdc16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "677c4739-84b8-44af-9376-6f79a1bdf25d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ed4b0db-f5bd-4189-940b-890b44533055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dfb3d27-472a-48f2-8b96-516c43f0b455"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a96e53-d7b1-4b8d-b3f2-c24b1e687299",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f69e499-01ae-4f6d-b0f1-5ed9633a9d78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35072513-f1dc-404e-8cad-de60062109ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dd1dcbc-aba2-402e-bc3b-42c5cf687f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0d919147-942e-41d2-8aed-c0235975279d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957742ca-4749-4c21-817f-9337d12348d3",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14cbdd33-9ded-4d49-b869-e465a03fd39b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e573ac45-ec1c-4f82-8d91-c8b83df20e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "204c8b16-409a-4c20-b0ca-026855e8730a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e92928b8-52ba-4e48-94ef-0215795f572c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a18c0718-3b94-4e97-85c8-dbc997635d4c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "287a5dbe-f815-434a-8283-fedd0f471017",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "355e6b20-d27d-437e-887b-16fe8ef5cc71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a6c6db4-ab4e-4435-823a-e318d46e4228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72fbedf6-7171-4c74-9ac5-43994cd969f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6846489-6a31-49dc-a4bf-25c7310a9124",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb22de06-8ea0-4c2d-8005-530a94b7bfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f4519d-367b-4efa-9c52-88a358659633"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "489e89d8-f466-416d-9d50-269a4dd362a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c6143d8-56e4-480f-8f10-ad808b3d45df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cb8b4c9-2c47-4b86-9306-d332b09cfc7d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "385cd6a0-54e3-4c61-bb66-612758356b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc593465-5858-4258-a2d6-b8dace91f9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad414721-6fb8-4538-b34d-e6d542dc2d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8864e03-afa8-4ed4-bc17-f4050f134a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ca3a781-b4b5-4c81-add0-25a6e6c27044",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1c1076-947c-4ceb-8494-52f17d9f5741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30f630cc-aa26-4e86-acfb-5e8de981abaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78428f4a-a4a3-4c00-a237-9b8063c6e36b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70f095c3-a5b0-44d4-bfcf-de7bb1a18dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d09a0d70-ed22-4eec-a150-0b0a6f8cd4e4",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "115eb39d-0015-4e38-92b0-87d3989bdbc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfb89f89-e785-4977-91e9-02e22eda91dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c415035d-5994-4e11-9fda-efb1082eeed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c189f8e-67ca-49c5-b4ff-cd6665afcac1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4328783-2067-4726-beac-b92665c8a036",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca4ca09-13e6-4916-8ab4-3829614ad3d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "552bfe3a-e65b-4b87-ab8c-5579bd8a2bfc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5de26770-9967-4933-81c8-0f18919425b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15becd8e-14c5-438d-a911-4e7b04beabe5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91a23763-ac2e-40d8-8de8-3057a353b2f7",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ec364cc-f653-4de7-9d36-0ebb0d140a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf51eb1-f3c4-4d91-a1c3-4309aac280ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efda5b4d-e223-4b0d-afe3-c23cbb6876ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "064bbf8a-917f-4916-89ab-fa7310b27116"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95584c08-dc47-4ef8-89e0-cec55cbe85a4",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49432468-2577-4191-9522-02269603e7a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0bc5b7-daec-4c11-9c12-025fed1a58ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f07d856f-0ef9-4d3e-b855-2ec7a41031a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43af6c96-aacf-4f62-95b2-8416007e73b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02326eff-3db7-499d-8df4-666a6fcb4df9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a411bfe-3bc7-4328-ae69-52d4e4d50710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69b6ce99-cca5-41e0-9884-76043a5afccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4b80aa5-41ab-4186-9f39-87f11dde59bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "60c28022-fd6c-4368-9183-c23370c4eaf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fbc1c55-1fa2-4a8e-9506-eb9f41c2d365",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6548ba38-7e8e-403f-81e7-79853da881f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10ab91d9-3cc1-4e7a-8048-b526e7566a21"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "175c522f-27cb-4e8a-9c09-c0b6de772108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20680f92-0392-4817-8080-73a7649db71a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0701bb30-4299-4487-a23e-ee10990dbdcf",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9aeb0e-f557-4ace-9f8a-c57786a7f90f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "913d0988-eccc-46bb-b82c-247e5b323b90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f21fc384-fd95-4c58-8819-13978669920a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "218ce8fc-6e7a-4539-8ac8-f37217bd18b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d9635a3-8ed8-429f-bac0-bce39773056d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79121fa9-f27a-4ba5-8314-8502fdb2efc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "936814a6-8ae5-4236-9493-74e539c7911f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aea231cd-a24f-4dae-8c93-72791f9c27bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4085cb8-1d4d-4e34-8d9b-a662458ea7bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23729923-12bc-456f-a87a-2cc80fcd9ac8",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f8edf34-008f-4f0e-9530-ee58c29b0061",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cbce7366-95d9-4d87-b6f6-8348c5a40958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0a7b027-5e6a-419f-847b-4488f8dd3747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0288eb64-2fcc-4309-aa55-e07a89194b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9500b98-70e6-4ca0-88c7-864bc25c9e8f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1e6f149-3f11-402a-948c-99b074cb2200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9bc9cb3b-0716-4889-beab-cc0b1c8efe1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3aaa1f-00b4-4a1b-955f-692663827928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "114762c3-c724-4116-867d-629eb101455e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2fb9410a-b109-44dd-bad4-9c4cdf5edd89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "98aeefb5-05cb-4f90-ad1d-70d074b5b99e",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88de6678-3735-48de-bf59-ed7b77f5c70e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "48019e7d-de51-4eed-bd54-fa4cd1b7f413"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3f3df50-d44e-4301-b5a6-8dd4f1030126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "516932b3-a332-4784-a33b-7601c36af9fb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f69f8f5-3b16-47d0-a7cf-b6615dc17322",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "16a08038-562e-45a1-86a7-5af9b94818bf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b34de14-03f9-4bd3-bacd-819916994bea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68d55c85-0f24-41ac-b143-eb5d5ccd0be4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d2ee7045-96cc-4638-851f-fdc763efb9d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "20cf9ad7-3428-457f-a294-6cd4bd3811b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e485ef71-ee83-46fe-8442-450f2b1e36b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d4d333e8-5b57-40da-921f-a1e4b3dc794f"
            }
          }
        ]
      },
      {
        "id": "0f078fb6-cdd1-473a-b5fc-2b944381c2bd",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "f3aa652a-da52-436a-89bd-232e7f60a841",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9852b640-52d8-4d43-a76d-30c605e5d4a9",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f70f4d7d-89f6-4f81-b735-a12d204b52d7",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e2817d-a443-49cf-be93-2d4a802de128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34bfff4-8b9c-4278-b174-ae011a8d8723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc0c782-37b5-4b6d-90e5-05618e4a3b52",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac710952-9a54-4aed-9f27-c00f995ba8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0478d44-3508-437e-98ff-f70307d6027f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a15a1514-c732-4225-a4c5-d46d0bac5473",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99626d8c-d158-4d7c-be76-bdfa8a4d71e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d81aac41-e9ad-4b03-9b42-9414d8bcb93a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff7bb0ad-3ad5-4324-87e0-1ef046d266a7",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae302d14-79d6-438a-ae53-a4f7785ec16b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "211379fa-cc8c-4dc0-90fe-ee11372474fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4109fb2-3e28-4c75-8de2-d8ace076c7a3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0891a388-1986-4090-bd5a-268be7f7b5ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8683795a-e77f-49ce-8eb4-bc8747247de7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdc277b6-4669-4d33-afc5-78eee15ecdd5",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bc155d-7e24-4cc3-a3d5-7d9e1bc71de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5388484f-26db-458d-8b6c-0538eda08fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42c3bd38-b357-4f04-890a-b720394209d6",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c25b597-6803-478a-aaea-7ab879279fb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6059df06-b147-46ce-916e-6a2344cd4277"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115e3396-dca5-43ba-946a-1f529bd2706c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de8bfcc6-3c64-46fe-aad7-8b07b2872f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86e8efaa-030b-4363-bc7a-752870da6812",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb5accc-4dbf-4ad4-8834-e01f85ebfec4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f9b3e19-d97a-4c14-ae8e-4b1b9b97a4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cf07522-c4e4-4322-b5d0-c6d959ea9d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6aaa3d-3f73-4726-a9e4-539bfda92212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd3ae83-78ed-4217-8270-b16cff911ecf",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db328c5-eff5-488a-bd99-f1cb6aaf2205",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38408318-7a41-4311-b81b-7d768d5f7d14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46fe9a3a-0066-4a6e-8563-afdc22a2b26e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "703c2bb1-2365-478a-8898-629730473c0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28feef1c-6ca4-40c9-a3c6-9e3baf3b1f7d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f9bb36-6ef2-42cc-9508-2b902a867512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0a4c54-a1ac-4828-8053-8cbe93bf21df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13a18aaa-e981-4995-8d61-c191ecb88f2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab11bf5-90c4-4a18-8128-6d8873b092d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f243096b-26a2-4010-bdf1-14aea736ed25",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80b1a32-08ee-40bc-834c-a3fa95e64fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efc9bd80-9407-4e76-964f-e10f237ec91c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f316172c-633e-4742-a86b-54abe6980b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "478cb672-85fe-43b9-b501-d46c4e8324a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45566fb5-f4ef-46de-bac5-be80a01cb250",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a89766-9f69-4940-ac62-efad9c5afcb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "857df38c-d6d9-4239-aa70-6854099519b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e05f5d67-60e7-44c2-bffd-0dd99f21040d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab386b10-514f-4aba-8bce-a296f209d8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899e83cc-712d-4748-8643-fc421737329e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c30dd77b-f32a-43c9-a544-cc2079dd952e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a90ad90-c1c2-47a3-9139-720dfd72cbea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c953ddcc-36e4-45d8-a139-d3a46d5ebff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebb3294-4c14-4919-84d2-87e9fd98aa9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d8bca7-7bfb-421d-ab75-652f3b11c9da",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc3061a4-517a-4e61-bbdd-85adafe23b28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "490fd4d8-b3d4-4b24-a00f-eeb04392ba5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b27a30-d399-4ad6-82b5-7986fc39a483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ab24a8-d518-4fec-b9c9-9240b66b1543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d63b283-8796-4069-b8d4-837813ea0649",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e12a9ebb-0cb9-4f6a-b336-1d7c401d6bda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca87eecc-fa1d-4ade-80d4-8cb4df77d8ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c76b5fb-989f-447e-b7ff-d8e6306b3b0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df91742a-49e0-42ff-a3f1-de8518cbea2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d894bc4-101d-45c0-ac50-b6ef334f219d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0ef4fc1-5b56-47d1-acc3-3d9a3b486fdf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "749500cb-e66f-4e93-a8fa-21fd52c549c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c22acc5b-512b-47b3-92eb-32891c0ccc58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81cbddad-caba-46f5-82de-bf0d36c81781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617e324e-be6a-494f-854c-5bff2132d9ab",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53580d76-363e-498d-817e-d004e2598baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ca0bbca-92d8-477a-9426-4f3cb7d6c676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77c5b2e8-5621-440f-abb7-158a95d15b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0d1beee-fa3e-4f99-bfd6-80419fee0ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5269d8cb-2f85-4029-a14f-102bfaea52f2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c444ebf1-e1f5-4e50-9d6e-07b8b3c27d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e02ce3d-1985-4e0b-a670-49bbd40ee17e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34931095-225c-4c75-b4c0-991120c3c716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0b3be2-5b09-4ef1-bef7-f30d31df8465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe7a3faa-1037-4b40-bc43-64305c9ddbe6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3959347f-9b3e-4601-a607-5381f7af443d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38cd6227-2e25-45e7-b065-740620613980"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454c142c-728e-415b-a2b1-f97995755ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94b55715-c624-455a-ae5b-bc2d8648450f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45efa64a-1050-4962-b15c-bd779ee45bc4",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c5b965f-e5fa-4a4f-86ac-e6ce7107582c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "500b57e7-1fd4-4a2e-9552-87518953375b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c696a5a6-1d8c-4c6b-8745-c31ce94f7573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d778442c-9de3-4988-a451-ed50bd1f46a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a87f9c3-bfe5-4912-b31d-123ebe24b445",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2557eab1-6aad-42cd-b22d-610db54c2479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e40c692f-0487-4607-850f-c7732b4d28ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e94301e-b125-4275-b008-2f87ba5a0db6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44ef322e-8bc2-44fe-a50a-f606b9d9131a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbc84a63-cbc4-40f1-8ae5-aac957e7fddc",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fb1572b-7765-4cf6-a517-e2a5b3364bf4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37f500aa-d262-44b6-88bc-e5abdee51e5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f095e99-d71e-4203-a045-0b4eda8844e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6934eea6-d403-4525-b27d-3dc3b0c28786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a870740-3ba5-48c2-9ce4-2bad8db17bce",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884a8546-b1df-4ea9-ae0d-73618e34fb11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83883adc-169c-48ac-94c8-d99e030733cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3635a1e-dddb-4a1f-97d1-ffe5baa3c76a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e614baf1-0958-4618-8ce9-7511aa22a7a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a0e5675-bf49-493e-9d9c-fcfeaf821252",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63bc2e17-a53d-400a-9a1e-1dd86d329e80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0abeb2d-4dea-47af-8b96-cdea8e5a6e9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6e52972-507e-4347-8680-f12ad471b4ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "322cdf4a-dd99-4673-a500-47ab40ad6f59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7686259e-9218-468d-9868-e96316c52ebe",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b27807-aab0-4be9-87d6-6de0f9dff48c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79a36f93-c9a9-4cae-8885-0f0dc1c83633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ca806d-076e-4eac-8691-8619733969f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4363df6c-dbb4-43ee-be30-286ed4e1b34f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f65adab3-fb8b-4634-9607-629d18a8d594",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f26de58-c370-4038-b057-6d97a46bec04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f942836a-5058-4021-98ef-2b0e347b02ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8eb80e7-7f1c-4652-8480-1062d9ed9678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f366725b-9e2e-455e-9902-4ae5026392dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abb3bcb6-ba2c-44b0-b703-730d4cfdfb8a",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af7291a-d678-44a5-8f64-8b366ae99e6b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19c00f9a-13f4-4483-948f-ba444013498b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38138790-be22-4f81-b7b8-3699d6cb4210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68d95682-b022-4863-a701-23f51f8d1575"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca67b2fc-699a-4c57-8f9e-68e87e09b204",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6f34b0c-6e69-4db9-a93c-4802630d52f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c931c4-a2d1-4386-9f74-fb0158791e33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f79cd4-2c32-4525-a42e-bd2f8eca5c7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03042f29-74d5-4a62-953a-015853afab8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e4f4e0-f48b-4eba-b406-950ec8f0e1b6",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb189d9a-9b81-4ffe-b35b-d10ad7a6b593",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0044157e-4395-4efa-b85c-7deb68385730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b7a792-ad39-4a4e-9dad-c234c95b64bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6c44b0a-df42-43f3-8cdb-a0bdc10d0313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e3eb108-4dde-4abd-b558-d51ca0ffdacb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4928a9be-1520-4339-a2a3-5f7c36fb7e7b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47bb1a4c-b039-4cb9-8aff-d9a9bfdcebcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a709c42f-2bae-4fee-a4b0-75fa2278ec1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef99c3f6-c19d-44c5-a40c-698732071ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f71562-3da2-442f-ad81-8bc8b3d30b41",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46843bc5-b090-4934-ab26-fb69ba2713b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca8b8851-9d4a-4815-9f42-138113ef423b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde3ca05-5b98-4937-917b-7b78a4506e1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ffbeac4-98d6-4ea6-b8b2-ab6fff6d7ca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d82ef89-58ed-4910-9098-b43a78e6158b",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5efe91ea-3632-4ca1-ba2b-e7d1ae1dbd8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7405130b-3b05-458f-b5ca-e54f4d2f6e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "722fba7e-b84c-4731-acd9-5bf7bd12b193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85edb678-7dfa-4a11-b139-d74e2b53049e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f062f483-7b18-476e-9958-dcf068f9c261",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a92ed995-8281-446d-86d1-b7aed0549e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f90c36fe-b7d2-4946-ad0f-7f5e8ddf1b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6385861-00a6-483b-96f6-4bdb70ddc9a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0bce9f9-0a55-45c4-a3dc-bc9708062972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30527ef3-dcd4-4512-a483-5a2b13b415da",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f21f65-b1d3-4fb6-9be8-3d8d714699dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11956b2e-74cc-45a8-a6fa-e1fc087d4102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d364e11-ed95-4919-abf4-dfc61f0a2e83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c6cacfb-92e0-438a-9ff9-2b3d21fdf762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eefae989-67b7-476b-8436-12600f979adf",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4a4f2a-3de3-4449-8be2-ff560c711706",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7617b4b7-28da-43ad-83f9-e9c0a1ba646f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd24f23-61d8-4466-a591-55aea47466a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516f0df1-977e-4b93-b5e8-0524ea0c58a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19b42aa3-b5ab-4722-b874-d1d686f906f4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f245e985-8246-472e-a306-58ddf8c2de51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64f3d2fd-77bc-4f02-a367-8b3b132ec4c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af3a95a-6a61-4fb8-85c5-76fd2715aad5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd39e70a-c2eb-4dd1-ba1e-3fcd8e7fa159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfdaafb5-92d0-412e-a2d3-e0f3e2f45f54",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7781bc41-9eea-458e-9633-b4e1cac6d27b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df354e4-b929-4f7a-a7db-2c9c88f5a158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45bd21a-8931-49ec-b77e-ee1a505a4d19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f2bfd19-c61c-4979-9311-59f0f0bd7ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63651860-7205-4a40-a358-cfab4350c95b",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf8752a5-7066-4b3e-a4fb-5ab86823f6e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8185967-221e-430d-86f9-e68542b69ba0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "370c8e3d-bed3-4549-ae18-628310626e63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df81ccfe-3750-4ee0-898a-9861d3cd36d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f78aa1-2f5e-49ae-9c53-7f407a850d17",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5580d76-5999-451e-bb9c-7cbea1c17cae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ddf06d5-6d53-4dab-a36d-266742db774e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4548fd5-c69b-4ef5-875f-5a91892f1c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5ba4789-755b-472c-b6d1-16676aa235a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0cf093-5be2-410d-88d9-d538dc94cee0",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42adb48e-3866-4064-9bac-1c474032f139",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1d86a14-84a5-42ff-a5ea-c907fcde8576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71910da1-db84-465b-86df-4b0d195afff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b2a51c-b13a-4ad4-b3f6-5eb446e91e3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "250f95f3-3341-4e80-9525-fb38506ceb47",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ac829c-b6aa-40c3-9113-ac020429ef27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25e06952-69b8-4e59-8236-686ba2a32b43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1f641d-2fd5-44e5-a638-ae7b91be2f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d895aa84-1f67-4452-a6ef-52297546e467"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb7391f0-2dd7-44fe-8982-3f88105e6eed",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb38564-f6e2-4e79-b496-ba241bbb29aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2de31b09-1ce5-4f57-b4ae-6de25910e27c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82210c7-230c-462e-bc7a-d4d0595625a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81672929-fd1b-4c82-a7c2-10d643a23983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43b7703e-8576-4bc5-8404-8f5ef6b29fb9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd851bc3-7327-4ea1-8cd4-92630232127c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef252c31-207e-4d26-bd58-367558180554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8d5c30-4831-4ea0-ac5b-fe46f3234574",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3f9e09a-48ae-4b87-a23a-25cea074cda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2616c5-94e4-4d66-a13e-0f18319b6016",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f803e92-eb48-4a02-872a-0a8ff896e97f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3c04b46-d27d-4679-80f9-989b22d15639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d74aaab-09c1-4a75-b5ec-2589895174b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21feffba-455d-4360-b022-fd3604194a24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64ab47de-7276-4c39-aaa5-71ca19d8a8df",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99787a6f-f602-4144-808d-fb8cdbccbcf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b67bb18-e0ef-4af0-87ad-a00fc3e93087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6697f812-1e36-4929-973c-809fbe4868f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2675dfa9-8d6a-40b4-b7b2-fff2929c92ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b46eba86-29d0-4b1b-a805-db0fdb3716f6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4016687-5f9d-4f54-9002-055119afb33b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "408aaf93-5a86-472c-8647-2a86e91439e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec1aaeb-5f1d-4b2d-afc2-567f42a0f8cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5fbcc8b-c7a9-442a-875e-fa9385209f22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4611df84-269b-4dbb-8195-43ce65806965",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46cacbc1-3906-40fc-bc67-5f563bf8b4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f684c3b2-ac6b-458a-bc5a-453e305816d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20c6ec93-7fb1-44a9-af7c-e5ca0df3169a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e08b9b2-2160-4891-836c-52bbea7fd126"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7294d676-bcb6-4bb8-bfe9-3c6f804b4910",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61249a3e-9d74-42ba-8034-6b8a7dc15618",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ffae2f0-da72-4b3a-8e75-69bbd4f96e44"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff76c921-c698-48fa-a8a1-12b939fe9c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed5b7f8a-19b1-40b6-9428-79234f189bad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90b67eba-35f5-4b6f-8057-b1fbc70e99d6",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c5c131-c026-429e-b819-014838d6b257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1bdaaa1-a417-41b0-8576-a2065e5d5568"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e33634b-d8e7-4324-882f-7baf8bfafdb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24384c23-8de5-4c26-877b-3a014fbe89fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52bb8d67-0cc5-4679-889b-fbcfca2d9f59",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871af79a-e0df-4af2-a09a-73d8ad734ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7436bdc-c699-4ec0-a620-8602f3fde7fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0625537-ed30-4241-8251-6dd4672adfe3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a84a38-4db1-4ae9-b55b-6704aa77bdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04df8b02-29b7-4519-8c07-81299e0b9a16",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab982c0a-07c5-4d4e-a7eb-7bc4b2f8d4d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c5e6135-7b7a-40b4-8448-767e7ef40684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51729c2-0352-477c-93a9-dc15a4aa91c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a62f579-c374-4e72-80df-9e8e0ce4836e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "996ca9d2-6097-463a-b173-d02be92fb035",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cf58930-b28d-4fc2-81f0-4c9e8fe7e19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b6a99cc-0880-41da-9a9f-e25ab091a5bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3f8b7f-ce90-462e-a867-232cc0c6b73d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8c7da11-2a30-48e7-bac9-174994cb029b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b945a292-d66f-4888-9f1e-7cdbba2fe6be",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a016881-9b28-4929-801a-0e243e17bbaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f33637a-ef85-40e0-949c-d4054071e110"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1c4f6a-5faf-47da-bcd5-f18e7dc6110f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2691d24e-a961-43b6-a28e-095d2ac35691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27a2492a-71c2-4fe9-8c0d-ac63974d03ec",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc457bdd-bb08-4074-8447-5c3531961f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87a72b16-295e-4d03-bd48-d7ef45fb8447"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa9c4ac-1a79-42ba-9f37-9870ee3b8698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25cd794-70c0-4527-a741-36eb78ea81a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b818dc8-72c9-4920-9f12-c859d765479a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3fea83f-8caf-4bdc-b701-5124cae65297",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724d5f9d-298a-424a-9fb8-8ed005fca53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39e9a7c1-2542-4f72-8ebb-95e3293e9060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6fd295c-315d-444a-a437-ebf87e4b9c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebe36080-3ec0-4180-9060-64f22ffceb23",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17da13e0-a9bf-419a-8658-d9ac2e0f49ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9150c16-329a-4568-a671-46a2b9316665"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4caa6d-f56b-469a-bc71-c089022b3a15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c38a7248-0b60-4597-97f7-35a1f23f523d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a00469e-f281-43b8-a1a8-4380c339176e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d47086ab-0046-4195-9c3e-01a793556e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4292463-0faf-4109-8207-7362b7039c77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde536bb-b441-4b01-b181-7cd510db0124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de6c413-5b5e-437f-81b3-1d347d61504f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d3c1f0-754c-40a7-9d1d-250be53710b9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bc1f5e2-009a-44c4-abda-c654c6050414",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f6ca596-1bcb-432b-b8d7-db587a8a5d49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7f7bb0-99ca-411d-8a3a-820e71424e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf0b1376-7ecf-4ea8-8dbd-151864ab8fdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eabbdfa7-c289-4a85-adde-b857c6bffb29",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68adc4ef-a4c8-42fe-8d88-c17b1d848eb8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895ce71f-f2ee-43ff-b005-63584d485dcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c465690a-7b9a-4b01-9773-f0a4914bcd3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74d0e5e1-e122-4015-8eb0-171bb4ce90ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922aa0ae-01ba-484f-b3f9-1c73a1fe6987",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499a2d8-bb4e-4923-9c75-140ee20d761e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa9dd186-020d-4d10-9b0f-fcb96d5e162c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2584bb9-b020-4759-8720-4f91680a82c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbafb0b5-ae00-4bf3-8bd8-9213e13f0827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f788233-0c4a-46c4-9143-ef3fb7ddde63",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b8c38e4-1f72-42a5-b23d-1961fd4f32f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ca29cd2-b4fb-4a79-8aef-509e59d8c54c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5094a7b1-73b6-4508-8d64-eb994427111d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e778a76-a380-4797-9c7c-aeaec9299a6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0856fa0c-d8e4-4210-94f1-a57544ac6b78",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "554744e0-a96a-4fed-a415-cd88419c38c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c21948f-c60f-41f4-8b10-0995b6b28a7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3c8bea0-afdd-45c7-bfec-7e7375b29dfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5f860df-4a74-444c-980f-0e72005fcbc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3820c871-d86e-4b11-bc5d-88959eb3246e",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11d59643-1ece-45b4-ab10-514056dd63db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c37df14c-9a38-42eb-bcd0-e9c3d7cd0e4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab6b5a65-cf98-45e7-a758-3951b6dd7e70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d177ae2f-20fb-4f8d-ba7e-1a98035fad8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03591673-4d96-4ec3-8e3d-b129cbcb1155",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44e7bd58-3d5a-4ca3-806a-9666b971eeaf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e4fdb37-f44f-45b9-8eea-64170caeea2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333db828-8326-4825-95df-16a5c41094fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc4676d0-ddf8-452d-81eb-9ae72cd7d80e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4a1be5-4371-4720-b911-eb130952ec1f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b56bc22-35e7-4864-9f27-faf9f5089f63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec77938e-bd88-42e4-94db-d6089e1d8a5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60d36cca-ee3d-4b30-b1f1-c3683c62f22b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf472a0d-0bc3-4672-95bc-e1f6db5aafe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d82c388-2eeb-4039-83fd-4ecaa6ed7f59",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "481e3741-4d96-4005-b1c7-9e6e41718bd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f485fe4-cd0b-402a-9bfa-4db3a361c9fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4d73621-b5c0-461a-8d6c-b1833c10e6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde795a1-e580-4cc8-b909-ea9e9ec11d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1533432-a0cf-48ad-be79-dcc43fc23853",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14266590-52fa-40cd-99af-c2116d84ebef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b4d54f5-a276-462b-ab06-a174d2b190cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6dcde11-7b89-46e8-b1e4-244bf111d06f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5cbb8f97-66cc-4473-846c-2fa744261cfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cab4e8b2-7306-4f2b-a031-91d8ba25e4e0",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2032b1bc-5cfb-4eb0-aca0-eeff032e98c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "638ff582-4f50-4eb7-8526-2dd8ef39c0c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c07481-e188-4fd1-8af6-bf165ebebf01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ec382e0-af6c-4fb3-a7f7-aeb656a9564e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e872b8b-010d-4b9a-bee9-eb00dee74300",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c7caa84-0df5-4008-aed9-1fb589d7db4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe1a2ec7-30ec-405e-a085-f1dc5d62cbce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17508def-ed8c-4f44-a1b5-828b49eb18af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7bd89f-b119-4314-995f-950c520ae41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98b14c3-6e9a-4d1b-973f-934a006dcedf",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af0b45db-e825-438b-83aa-a37fbc463d72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e807ed1d-d661-4ef8-919b-dc3ae261fe80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be7c1bf9-7874-4987-87ef-67750e8dd0f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73c48911-173b-461e-8645-c46a8f6b1029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e316609f-9e98-4efd-a340-75aaf4de4254",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e35371-5beb-440c-bd0e-326e342c5c2f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0caca4b-4e1c-40df-9e35-c2c24de4052a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee5afd12-12de-4289-b896-5f3c1e192f6d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86e0a5e5-bf37-4764-aebe-f81f16dc2634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeb73be9-706c-4ad4-aa77-381876d0e9db",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef97596d-2e68-4acf-8f19-b6037d6d0268",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b73015a7-d3cd-4410-b582-f60b6b120025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d344a02-94bd-406b-9464-8948dd6430cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f229dfe-13af-446d-842d-e8bb18526524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce7a4589-db7e-4431-91cf-0935b7c4324c",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6e56247-6de3-4a57-b05f-76907f72ecd9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f91d7476-6157-41ba-8e49-fa9baefcbbc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e0d2e4d-0bb3-4e18-a0e2-2a738e2b8983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22016d74-c875-4f1a-a795-5cc425d2b5d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a45f3818-875e-4fc0-b8f0-0ce7c4a7ac0c",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70b92a2e-98be-4df3-a798-4ede78f7dfa6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bea84a4f-40de-49a7-9ab6-63674ec3f24c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4ba0778-6b56-490e-8ec2-c779dc2285f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4bc700d-61c8-4447-b837-48e5bd62de78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a19302ba-3b48-4cb6-b110-a6839f41494d",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0580b448-0c04-4522-977c-e5664a4408cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "301ab89c-c639-48e5-8f46-8e75edda16ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da4700c-d8b1-4546-925e-970bb5474ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26fac70a-e696-497d-b563-a9aa9f9d69d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f439b195-b8f7-4252-bade-ab763c9c58c2",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "486cea86-eb2b-4bc6-ac82-cd745fe7bc0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78304004-f2f5-4322-b213-51e5bfd0fb92"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f65d3ab3-046c-4668-b964-bf10bb9f08ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6659f7cf-c41c-44e5-9a4a-3afd691b522e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88556de6-16a9-4eaf-a06b-665d1cc3bb28",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7a97e2-3918-47db-bec2-4ac80d31ddf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b60c5b-e538-4847-85fd-ae26e79fa14f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0dc442-e7b0-43c8-aa96-7d938440cda6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e6695c-8010-4e12-be72-9998193fad35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690d033f-d4b8-47e9-a4c0-83590406b1d6",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce408b7-8c94-401c-bb18-5f074dac8d7f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f57f22e6-de76-4080-a778-85348d60cde0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cd2e4dc-fe85-4eba-96b0-b72b650dbc4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88b4f73e-6703-4940-999a-dc597ae1ef03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f996f9-5c71-46a5-9d2c-5cd3d38b5ab2",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a31073bf-e956-4801-a6d1-40fecaf14876",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "599fbd85-7686-42b9-abe6-7fcad4d916da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb2c1906-5afd-4b61-9343-013925e1e713",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d905f3-f156-4ddb-aa0f-1f25bd65b5a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d2aa88-7609-46aa-af37-23768fbb2e80",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c05fa3f4-143e-49b3-8e99-211b05bf5fd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77c7d7c8-1365-41ea-b9d6-14ce63530b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7748ed8d-7714-4b73-885d-31e7cbb7bbaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "276005c9-7f15-4644-abcc-4f2563778415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1eae902-8e03-4e14-a04b-b71af0bd1f2a",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7221121b-16c8-475e-9d1c-331cb4f89cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8db4a513-e63e-4ddd-aa81-8645f270ed7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2279e7ee-9eff-414a-8356-212177e0aadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c830c0-8ec5-440a-b3c2-efd831989f38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c28aab-2948-4286-851e-7b45fa9d99ee",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1bbbc63-07b8-40a9-b01d-caf65031dc46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fdc9d93-e422-43ff-9558-41796a04b3fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb29126e-974c-4cb4-913e-51f2d7124f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9fcef9b-4179-4e4e-9436-4390049b6217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ffa253-d18b-4afa-ac4a-414f2e990ad0",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894a9212-d225-40eb-981a-78080273a095",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ecd99760-db84-4c4b-8d91-c33323fce04a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbc5179b-e77e-44d3-b352-b1ad2a328761",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28a28ce0-4396-460d-af75-82ae58828ba5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfc8af5-a8c0-4e66-8e13-42e65cf4952f",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac74933e-b1f0-4c7c-aac3-4aef867b5bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df9bc607-27a9-49e1-9005-24d9ac03b037"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee28fd3a-41a0-4f33-9ae4-6170941ed3ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a3452de-c864-497b-84b0-7318ef99404a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f37dc148-be82-4f72-9531-fe075f5ea41b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d02f649a-a752-4b85-a3d3-0a9ed4b6212a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1215805d-472d-406a-b33f-81e559341135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9b878a3-00ae-44e1-9ced-3008a3a388ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc454784-13e3-4df4-ae12-2e41ca4a4b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8847dc63-99bc-4e41-8143-6ce9bfadbc27",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8aeaa26-6ad8-4ddb-8084-7209727ae9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e6f9a3f-b56d-4b53-a6d7-a10611ea4ee7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b18a2c3-22e5-42b5-8259-9af07370ea87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a46464-7d63-4c7a-8620-2fcee8551e1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfb0642-6da6-4332-8d39-a51f3fc95257",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020cb88d-d27f-4a58-a4d6-fe4dfd082c2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "343da8fc-30f6-43e1-abfb-65d5c23275cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d007e89-b452-424c-954b-0a98d4c5dae7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "546b793c-8972-4e0b-9e74-c8b267a64796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05a44857-1cbf-430a-8548-c060f1f1fb33",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e4054a2-c756-497e-b99d-c72e74428932",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c47fbf67-afc2-441e-ad1d-58da0e1674e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21df3865-2b16-4275-825c-69acd97f02ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d6b550-a29e-47a8-84aa-c76d423176e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0b753a9-3104-4dec-bb86-6e665e149400",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af31eca-2872-440f-a1b6-407ba1740a57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73e58f5a-bca0-437e-92a5-542516813c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8e29e3-4f7a-4ceb-a87f-a6ac4bb67165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8137f7f8-928d-47c5-a930-3ccdddc72bf5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62ad1ef-908b-4e71-abf6-dffb091e4ede",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a198f107-9be5-466a-bea9-fb2a2082b800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "506b913b-e15d-449b-94fd-bb38ff322e0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "575e0316-6c9e-4253-a69c-0633223d4142",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2f300ca-ef80-49e6-af0b-948671c1819d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ac8f5f5-67a9-4949-a666-5648ea5e7c96",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb36102e-bcbe-4102-b21a-f3e223b15b48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a64fc678-4b85-44d5-b4d0-396a826659bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "753ce192-ecc0-4e9e-9bc5-75e7f61d02b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7ae5b17-d47d-41eb-92b5-85ae2304e30c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa7f54c-609a-444a-a946-efd6057dff5f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb932600-9698-4cfc-b445-f6b1b90eec0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5792e1cb-360a-4f7c-af45-d20058a0293b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "745daee6-8ae5-4be8-8f24-8a92063aba5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cdc9aec-1966-4137-be4e-d2f8adcf89a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b36328c-2789-46cc-b701-8b39b50fcd45",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c79c369-18ac-4504-9e74-80c496e93740",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8bd4a2b7-8be8-4e19-ad29-87086babbf4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d8a9084-8418-43c3-961a-49b6248f3714",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96ed9ad-3195-43b4-b5db-fe26dc40465c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7918f0ae-5b88-442a-9e98-0b75c4ac208c",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145dfaef-39c2-4f6e-a4fc-06e061faffbb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54021a77-c955-4b80-b30d-14b7cc3431c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80bf315b-5a03-43b4-b26c-b6d7d27bd6ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0fd2fc9-e2f5-498a-a00f-d4c5ee593650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfdaf5a-59ac-4cd1-8331-8b773498b94e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eda12c7-8059-40a2-8833-5f9859c96dba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "030db596-eaa9-4ad4-9bbc-79a44619820e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e625127b-5945-4fd2-8e01-c5b46861e5df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "147c387d-2519-4d25-8a73-dd434e2eb7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2426e6b-a11a-4649-80c6-458037649ea7",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc778f4b-04b7-4220-88d1-dd5f11702233",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1f2e242f-fc2b-4e4a-9cd1-e2a115ea7f77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0d0f43-559e-4d35-8730-151155a3d24b",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4b6331b-de16-41b9-8cb2-83b22d716add"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d078fcd4-b763-4ae3-b99b-25e37d9bf56e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c936492-3c00-4c88-8ed1-fa9c53246180",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a95f0b8-617e-4d6e-9901-b3b6971e70c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b493ba3d-2149-4624-ae96-8ee56eadcfdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d1bbfe7-5049-4325-9b5a-9f685ca30a1a"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1d6a4054-212e-471a-a71f-0571635747cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a90ce157-bcec-43a2-85ea-6a05f8eaf935"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a38cfd8b-239e-4fdf-ae30-d5e2c70b4faf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9840bbd2-3c00-4e30-b3f4-e0eed9ba980a"
                    }
                  }
                ]
              },
              {
                "id": "0642e958-69dd-4a86-99e0-6f166759ab55",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c9e85407-65e0-4019-8af7-21d0a3547672",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf92090c-d543-4729-8b8e-26efb253452f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "d19900c4-08a5-4574-b305-f3ba82109602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5e002a-00e8-4b6a-a9c7-422fe4f5c45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ce56829-b323-4320-ad06-d5d45f37ae75"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "62ecb728-caf2-4c2b-8db3-0eccd0483655",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6a2e6295-26a0-4261-b7fe-9bb16ee52ffe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e534e547-02e5-40a3-ac2b-ce9780d7ac08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afd6a7d1-0bb8-42e4-b211-69dd3b37d39f"
                    }
                  }
                ]
              },
              {
                "id": "369aa16b-1fdd-497d-9a84-3785c845ffb1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a88811fd-6fd3-4b4a-b434-bc85aea07154",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b990373-ceaf-4147-9f88-02fca68c2cf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "48cb59d9-efee-4208-aecb-00ca73b53490"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b222cd4e-76db-4237-81bd-dfd1f744d83a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efff0da0-bdfb-4a71-b044-5dc428d01970"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cb6c0309-c987-4a61-88cc-7bcda34435bb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "09cee6ec-5ad9-4cd9-866f-3d9ba6003a70",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c4891376-5e1d-43e3-8aef-adbc4dc13599",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "24641add-efd5-4c61-b6e4-dbb0fa5764a0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b02d1d4b-faf3-42c4-b0e0-d583e6029b94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3fb299af-30e4-41e0-9902-3ff508f7f367"
                    }
                  }
                ]
              },
              {
                "id": "56764174-8dd9-44cb-8b57-ccaaaf15fa22",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33af30f1-235e-4195-9f90-7ad150cde5fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c7d70016-e669-4c8b-8ad1-0bed1b31ca52"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4993e6a5-ac0b-494d-92ae-da2a02752625",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "af09cee5-211d-4ad6-a86d-8ac740cf7adf"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "300076cf-a601-4f20-97f0-6cb4be6bc3f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "80109f5e-25cf-4924-abbb-c7726697b5b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4943b771-50a1-47b0-a32b-85811ce696b7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c291019-ab84-43e3-ae42-1ef04454c340"
            }
          }
        ]
      },
      {
        "id": "24c2785e-6ebd-45dc-9ab8-4d90a40a99e1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "2a68954f-243c-4902-88a5-ccdc61f1cc42",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5bfc88e5-f37e-4247-b562-76f1887c14b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8b6032c-17d5-4f74-a524-9f5dfef7a69a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8edc6d4-6612-4f27-ace2-2e99136200b7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "c0c91ad2-a04a-4bbd-a895-a62b62329eab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a5dee41-b89a-4941-89e9-43f16106e31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f510c822-bd2e-4795-a1bb-44975c036b33"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d578fc9a-d917-4019-a521-25ee60bf37fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd683a6a-14ea-43e8-b846-0ac089294741"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ddb878d5-cdea-4984-a532-d45df95467f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fe3b2490-6411-4702-a28f-ee6b3adcbab0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "468d7903-7b25-416c-8e4c-92f2ef38ef11",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8c62cc39-317c-45c9-9add-d41e054d63d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c93815e5-40a2-4690-9a5e-55e385823352",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8883ff23-06d7-4ebf-a143-646f330c33ef"
            }
          }
        ]
      },
      {
        "id": "389a0f34-598a-412d-a3d9-1eaa8760c188",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8c84c17f-6b35-4e3c-876c-ed14d2c5a505",
            "name": "Negative Testing",
            "item": [
              {
                "id": "215cfbca-4235-44d9-9bc9-8339e5551686",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "80ae63d8-f511-44fa-b27f-62fa31f12299",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32b9bd8-cdc1-49ca-98e1-f5e07f2398f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c8414e0-583c-4e95-9564-a8efe3206aa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8028b503-a9b6-4f29-81ad-2c6bbc48ba9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0dbe1aa4-5c6b-4a10-842f-ac94e67c8e60"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ddb350cd-9f9c-4db8-88b9-41ed817b104a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "872be891-1a9f-4332-9678-3fb0f65f5d2e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c6de9a5d-660c-42b3-b650-5716118e42df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6310b206-47cc-49c4-aceb-374cea514be2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "24d1db31-8b18-45f4-8f0c-27c993e136eb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "afa3d4a4-e54c-4135-afe8-092de4665bfb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c0788b08-29f2-4eb4-8e33-1556fa412f3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6fa140cf-0dc8-4789-a0ad-ad6a9934eae3"
            }
          }
        ]
      },
      {
        "id": "a9c4aa37-367f-4011-af5d-2bc430109d1c",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ca0b29eb-2643-42fc-975d-0152fa7067b0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3ab197f9-abbe-4080-9fd6-e7d8cca82ef2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3dadfb51-d641-4b42-9297-58c19c8d5370",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7180aeee-eb3c-40aa-a516-27156b002718",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "acc286ab-699a-4810-b82d-3ab7b43a6e7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "666f28e2-1597-4c83-9dde-08fdaa2e5f26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d169fac8-d5c6-45ce-aead-73ab15909038"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ab8ffd3-3189-45bc-af19-b41342c0c810",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4444d963-0b07-435a-a180-7d6f0b2fc850"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b292f35-1ec1-4bd7-b4f5-1a30f654d595",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b4a12f3-8c8a-4690-a92c-e0fc70af517e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5817c795-705d-4204-8dda-2e8d963184e4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "afec5521-8b94-4129-8035-45b99b85eaed"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca8fa304-349e-4674-9484-f88b1ee21ada",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "068b8435-084c-496b-b3c2-48c52b51c901"
            }
          }
        ]
      },
      {
        "id": "58794dd2-74bb-41f6-9841-64339b7087d6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8ffc0868-ac3f-418f-b14d-aa8b04902a11",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a232eb0a-048b-4407-9f02-132e8e6fa0df",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "856042f8-4027-4f2f-9b54-e33ef339fa6d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "508694e7-8d25-4f14-8376-96d08bd25238",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7629956a-d0a9-4f45-a50c-0798bde715ed",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 27.8015873015873,
      "responseMin": 7,
      "responseMax": 342,
      "responseSd": 29.85441389855955,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717461460211,
      "completed": 1717461475490
    },
    "executions": [
      {
        "id": "b5508548-da2b-4230-88d6-d4745abca95a",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b17e06dc-5792-4980-903f-4c492d9c4873",
          "httpRequestId": "08b3f784-5a56-413c-9744-5f6a9a5beaf3"
        },
        "item": {
          "id": "b5508548-da2b-4230-88d6-d4745abca95a",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "0b3c4597-e1b1-4ab9-9a7c-8fd7b8764bf9",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "32bec576-3364-4d26-bd10-f312867a96a6",
        "cursor": {
          "ref": "d6a1276b-156f-4e7a-bd89-ba45e3ba5a26",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "ec3a2c3c-f7d1-4183-88e6-7ff1476ce99c"
        },
        "item": {
          "id": "32bec576-3364-4d26-bd10-f312867a96a6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "725138d6-34ec-44ac-9173-1102f3439da6",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "7fc0f084-ccff-4c84-a8b8-4bec0db65300",
        "cursor": {
          "ref": "41408000-9ac7-4b79-976c-ff3134a82914",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "a87af7ff-4e01-40dc-b450-6cf7daac0f84"
        },
        "item": {
          "id": "7fc0f084-ccff-4c84-a8b8-4bec0db65300",
          "name": "did_json"
        },
        "response": {
          "id": "dabc567e-74b6-402d-9a1c-eec6454d371b",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7686b517-19e2-4dc6-bfaa-6acfca5aa46b",
        "cursor": {
          "ref": "09426ad8-74f8-46cd-ab9f-d1578d11a69b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d89a08f-8072-4100-b842-be050b70dbfa"
        },
        "item": {
          "id": "7686b517-19e2-4dc6-bfaa-6acfca5aa46b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e976b23a-7e84-4690-958d-f2a80f5255e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7686b517-19e2-4dc6-bfaa-6acfca5aa46b",
        "cursor": {
          "ref": "09426ad8-74f8-46cd-ab9f-d1578d11a69b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "2d89a08f-8072-4100-b842-be050b70dbfa"
        },
        "item": {
          "id": "7686b517-19e2-4dc6-bfaa-6acfca5aa46b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e976b23a-7e84-4690-958d-f2a80f5255e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e50b4f35-6d55-4561-b46b-e8fae490afc2",
        "cursor": {
          "ref": "ff80a9da-cb1f-4701-8b43-75ee757e96ab",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "ee890bcc-cf4e-44df-8eff-eaf5940a1aac"
        },
        "item": {
          "id": "e50b4f35-6d55-4561-b46b-e8fae490afc2",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fec98ae6-dbbd-4867-bc86-bff01b0e3206",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 211,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d5726e-4265-48c1-8b7a-d70e1f034080",
        "cursor": {
          "ref": "12d125ec-bdb8-4f6d-b599-b4c0b232fe84",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "390c3ca0-c46e-4271-b209-6deb8d6606d4"
        },
        "item": {
          "id": "80d5726e-4265-48c1-8b7a-d70e1f034080",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "9b06c4fc-f332-490c-bc42-de9df3f02665",
          "status": "Not Found",
          "code": 404,
          "responseTime": 23,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d600b866-3a13-41b9-9006-67eb8e2a7deb",
        "cursor": {
          "ref": "c00addcc-29d0-42a7-b639-31aa46e08abb",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1f799989-6c08-4fca-9eab-d91d04f2efc6"
        },
        "item": {
          "id": "d600b866-3a13-41b9-9006-67eb8e2a7deb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d6a2fc22-8719-4d73-8092-361d393bbc9b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a7eddcf-fd30-4034-b1b4-365521438473",
        "cursor": {
          "ref": "02f7bfb6-5412-41c1-b2a1-910787d06a2a",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "80a0e02e-e3d5-4725-b480-c5a7868b6778"
        },
        "item": {
          "id": "4a7eddcf-fd30-4034-b1b4-365521438473",
          "name": "identifiers"
        },
        "response": {
          "id": "dea2fb26-6daf-4e0e-96f4-dc909112f10d",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d48213ce-0bc0-4d5b-8952-55e73fcf9f88",
        "cursor": {
          "ref": "357f60a7-f2a8-4b4b-8f5c-e2c24b983392",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f7072a94-cccf-4b39-b72c-fdd11b7d621c"
        },
        "item": {
          "id": "d48213ce-0bc0-4d5b-8952-55e73fcf9f88",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "12390355-b122-4e3f-b8b9-7d7c875a6b2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfae3f6e-a3cd-4f53-a192-938ba645fd7d",
        "cursor": {
          "ref": "f1ad23dc-7476-4cf5-b040-9c3a2dbce36d",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "3a761cf1-bf81-41f0-83ef-65d739157179"
        },
        "item": {
          "id": "bfae3f6e-a3cd-4f53-a192-938ba645fd7d",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "2fc8f0b0-f908-4590-9feb-c7464b7f9ec3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a55298f0-81b7-4f69-861b-a30a457b1a84",
        "cursor": {
          "ref": "f9ce6a99-5275-4872-9db4-dfa08ebb6693",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "18cbf8dc-b35c-4dad-80bc-a96b9bda2af1"
        },
        "item": {
          "id": "a55298f0-81b7-4f69-861b-a30a457b1a84",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "1e1effb0-4b4e-42aa-a233-5e2e284bb105",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6adbab2d-0625-4304-b6cc-d35e4573ea3c",
        "cursor": {
          "ref": "5773a4ba-03c9-4b63-8e14-1474f228061d",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ac6367fc-c09c-443f-a627-e603b2eaa570"
        },
        "item": {
          "id": "6adbab2d-0625-4304-b6cc-d35e4573ea3c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "c605c2b6-d337-44b2-8f05-da7d27927a07",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06670f38-3f97-4873-9f34-5add99605c50",
        "cursor": {
          "ref": "269b3ef3-188a-466d-a897-5e495ca6d304",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "695b82c8-4e33-4da6-995b-82c1f95f04e4"
        },
        "item": {
          "id": "06670f38-3f97-4873-9f34-5add99605c50",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "660f1bf1-2e0c-4359-adde-0a44e8baca2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5532303e-89c4-4d94-9576-28930260d9ae",
        "cursor": {
          "ref": "35f4a6cf-6739-4a93-b5ab-dabb66caa5ef",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "c348a248-935c-4d86-a531-bf2db7380aed"
        },
        "item": {
          "id": "5532303e-89c4-4d94-9576-28930260d9ae",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f4e8162b-c5ff-4b5b-9f7b-10944bceadb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28b508c-cf65-48f5-83a5-51a887a5a4e0",
        "cursor": {
          "ref": "2eb7ed0a-20c2-4a8c-8b6b-3eba9a61ed27",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e6beb5ff-3677-4037-890a-acc21d36a086"
        },
        "item": {
          "id": "a28b508c-cf65-48f5-83a5-51a887a5a4e0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "6b88bb2a-69dd-4305-91f8-1939c02bdedf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f57e569-89e6-4f2a-a0b7-a3f118fb62e8",
        "cursor": {
          "ref": "d93f6767-8690-4ad1-af43-4dd1c050ae45",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "c8b62046-f3df-4a35-ad90-2356c29721a9"
        },
        "item": {
          "id": "8f57e569-89e6-4f2a-a0b7-a3f118fb62e8",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "5668d00b-9bff-4a32-aede-705551ac0bc0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3d8afc-0b42-4aaa-8094-df16d8e37fd8",
        "cursor": {
          "ref": "eee68310-6de7-4140-b4ba-1263e44dcc35",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d3cb91ab-167e-4625-80bc-32d7814ade65"
        },
        "item": {
          "id": "ed3d8afc-0b42-4aaa-8094-df16d8e37fd8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "265e4a36-a44d-4c86-bfb8-64f04adfe863",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0552f157-5321-44b8-9f5e-411d15557739",
        "cursor": {
          "ref": "e5808e93-02eb-43d2-8994-84fb46311677",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "80910cfd-fc2f-41a9-87ad-91b38c31e4cd"
        },
        "item": {
          "id": "0552f157-5321-44b8-9f5e-411d15557739",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b7e0941c-1e08-4dc4-abfc-238c07af00b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28a6b5e2-0c92-4343-acf5-10000137365d",
        "cursor": {
          "ref": "8161f302-3fc9-4149-8103-1ef4216ea8a9",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "4fe3d0b2-7ae5-495e-80c2-e24954b631d7"
        },
        "item": {
          "id": "28a6b5e2-0c92-4343-acf5-10000137365d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "b2716acc-b70c-4e48-8a5f-262c0e102d99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d669313b-163c-4625-a62b-749daa4ece30",
        "cursor": {
          "ref": "75dc35a5-de12-4507-9f39-3d02e2971964",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b7bcf99b-7be0-40d9-adae-c0ac0115b683"
        },
        "item": {
          "id": "d669313b-163c-4625-a62b-749daa4ece30",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "36eaf9d9-5cbd-4c46-960c-89d8a43f700c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bcb03c-049c-4fa2-8afc-bbcd38546197",
        "cursor": {
          "ref": "ae276205-e548-4cce-af11-a071c5bda18c",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "059353ca-c793-4f6e-80f5-f2dfcef0fcbc"
        },
        "item": {
          "id": "d2bcb03c-049c-4fa2-8afc-bbcd38546197",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "50c02bc4-5bca-4f5a-835f-0c18190d56b5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f397fd31-e1df-4065-bdfd-69484e15e3ad",
        "cursor": {
          "ref": "d7fefe3a-c818-4d5c-8039-df8f801f534b",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "0a372391-1f9d-41b5-a9df-884f9fb232e2"
        },
        "item": {
          "id": "f397fd31-e1df-4065-bdfd-69484e15e3ad",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "b7eb3c76-18f0-4c3d-8edf-4895b49e68aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fb453c7-75ff-4b30-8c05-9b5f486cc1c2",
        "cursor": {
          "ref": "45710df8-8641-456f-aa23-bd191e497f52",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a99430c0-d5c0-44f4-85a6-c615ce36ea9d"
        },
        "item": {
          "id": "3fb453c7-75ff-4b30-8c05-9b5f486cc1c2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "502c8cfa-a254-409f-b2f2-4a8c9cd54147",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b098de4c-736a-4594-8cbf-d6f458a55d3d",
        "cursor": {
          "ref": "83097fc4-771f-4a78-9be4-ff61e4fd2e52",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "4e62c08e-3427-4209-aa48-552cf7816138"
        },
        "item": {
          "id": "b098de4c-736a-4594-8cbf-d6f458a55d3d",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "847f5a02-d283-4de7-b3df-aeaf4e80926a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68324912-31d2-4d39-9757-1ab3b75745df",
        "cursor": {
          "ref": "6d3625d6-e916-48fa-b500-4d844879406c",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ac532e63-7ce3-4461-a131-35de9f723cfc"
        },
        "item": {
          "id": "68324912-31d2-4d39-9757-1ab3b75745df",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "40fc468d-adda-4838-80b7-d924870b57aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1658f7-53f2-4aa5-af13-d0ba3ca99150",
        "cursor": {
          "ref": "f75d2ad3-4fc9-4065-98cf-b24441b792dd",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "95df834b-f4ce-43a4-aac5-8b4e5adb1108"
        },
        "item": {
          "id": "9a1658f7-53f2-4aa5-af13-d0ba3ca99150",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "8b86142f-e204-4e62-936e-875da0dd12b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f108df1f-09f3-4472-b157-a8f0fbca1f8f",
        "cursor": {
          "ref": "93000f7d-be9f-42e8-9065-dfc6928605dd",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7c525fe8-2ce9-4789-9cc9-c522d0737ef4"
        },
        "item": {
          "id": "f108df1f-09f3-4472-b157-a8f0fbca1f8f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "9573d538-4245-49c5-9957-6c63c067f58e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85030f0-05e2-46f1-9c50-334502f13a72",
        "cursor": {
          "ref": "832ceb5f-ca6e-4ffc-8352-28caa2e3230f",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "63f3db8e-7d32-457b-9d37-9b7e32092df3"
        },
        "item": {
          "id": "d85030f0-05e2-46f1-9c50-334502f13a72",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "a2279db5-ee12-4f8e-8a21-7fe844ea2cde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "392fb483-7391-48f8-969d-bacada392155",
        "cursor": {
          "ref": "b42d7578-64f3-4155-b4f4-8bd9ae8e0b9a",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "23e4e74a-4c5f-4002-bc94-bc3ee8114c17"
        },
        "item": {
          "id": "392fb483-7391-48f8-969d-bacada392155",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "81ca1b5c-3640-46db-a956-9b331b9bfbcd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7a4d065-64cd-48bd-bba1-485b0dc4f4f5",
        "cursor": {
          "ref": "cb61ea23-58fc-4b67-a614-a1eb7980a4bd",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "10a39084-c8c0-46ea-b047-1975bff9fa7a"
        },
        "item": {
          "id": "c7a4d065-64cd-48bd-bba1-485b0dc4f4f5",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "4e0a065b-a2d9-4039-8710-f22368969265",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82dc8694-11d0-40ba-ab01-d2e62228f216",
        "cursor": {
          "ref": "3bc1355b-d748-4666-9566-d2dc68af577e",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "750e1c78-6e9e-42f6-a1aa-3a1f59031b5d"
        },
        "item": {
          "id": "82dc8694-11d0-40ba-ab01-d2e62228f216",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1f07ab3c-1659-46ab-b74a-e2e9204b2d4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e1577db-126e-4165-b022-819ceb3f053c",
        "cursor": {
          "ref": "817d926e-477f-49c3-a5b4-ad9c83c16608",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "606970da-50a5-45f0-a9b4-11eb12be9020"
        },
        "item": {
          "id": "2e1577db-126e-4165-b022-819ceb3f053c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "8be36155-6aee-433d-a04f-384b609bc20d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71fa07e5-c8ee-4e64-a1d3-ac7006b1c5d5",
        "cursor": {
          "ref": "5f2cc545-1b58-472c-988d-db084d39f5ff",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a48e54b2-a97d-4e95-918c-6acfb3f0163b"
        },
        "item": {
          "id": "71fa07e5-c8ee-4e64-a1d3-ac7006b1c5d5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "4358de61-e782-4d86-ae4a-61827d6f7ca6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "164c2808-8a76-489d-a913-512366f32219",
        "cursor": {
          "ref": "b8103255-05e6-4e24-b28c-4134c9d5bb9a",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "6b8e55ba-6b15-40d7-807b-a119d62830a7"
        },
        "item": {
          "id": "164c2808-8a76-489d-a913-512366f32219",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "fe1b878b-849c-4f71-8ad1-047156a87ec5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd17aa0c-3f90-477a-8bf9-8dae5cf054d7",
        "cursor": {
          "ref": "cdf32a13-83be-43b4-97c0-0a334eb54843",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "30b75546-78ec-42db-a008-aa9f9da7cce9"
        },
        "item": {
          "id": "dd17aa0c-3f90-477a-8bf9-8dae5cf054d7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "35bee545-7f5e-4427-a089-891851adc84f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5a7351-b175-45e7-891b-6c70e0934e73",
        "cursor": {
          "ref": "bdcc99e0-f09c-4299-8639-c02850e95b2e",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "499f66be-f222-4f14-abd5-4f69db8b1645"
        },
        "item": {
          "id": "1c5a7351-b175-45e7-891b-6c70e0934e73",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "d8601008-36eb-44c5-bea3-47ac1e8de27d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf730ac4-fba3-4e38-a5d1-a0fc6b1b0f0c",
        "cursor": {
          "ref": "62e696d2-ce1c-4b15-acf0-7bec6563cfab",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e9fc9aaf-1e9f-4694-9577-ee8d87f8fcdf"
        },
        "item": {
          "id": "cf730ac4-fba3-4e38-a5d1-a0fc6b1b0f0c",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "d7d1095f-6901-424c-bc16-cf3dd4b803f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d305e72-1032-4179-a3c1-af48ed345497",
        "cursor": {
          "ref": "00e3dbf3-0212-4752-b631-5264ce85db6f",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f024d1ba-3bb4-498c-8815-bf7ce5b0c1d3"
        },
        "item": {
          "id": "5d305e72-1032-4179-a3c1-af48ed345497",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "84f37a70-b3db-4e3c-bc68-4fd2ddad9a6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d497325-c689-4803-bc1e-db60867674cd",
        "cursor": {
          "ref": "6c4146e1-4eb8-4aad-9134-d03fc3dd7a18",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "9e2a04ba-6e13-42e2-9966-1fadefea894e"
        },
        "item": {
          "id": "5d497325-c689-4803-bc1e-db60867674cd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4c5f7d97-c180-4632-9c14-77b72b069199",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d7071dc-13ba-4ca8-8666-74ea3349a4f1",
        "cursor": {
          "ref": "1b176667-68eb-473d-836c-9485637cc447",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "e94aaf23-2d55-4041-abd3-6376f1fe3154"
        },
        "item": {
          "id": "0d7071dc-13ba-4ca8-8666-74ea3349a4f1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "c2438c60-7bab-401d-8c06-d97d5bb79df2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e41cfad-d4e3-4841-aa13-d28adc6de78e",
        "cursor": {
          "ref": "90ccde5a-5fa5-4625-943a-add4b7a1b738",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "64f7b7f2-03bf-4a13-9cf1-0a07775e4bed"
        },
        "item": {
          "id": "1e41cfad-d4e3-4841-aa13-d28adc6de78e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1cafe6f1-cced-4875-ad62-a9778f69a7e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1871c25f-4f9c-4729-95d9-53c4cddb5e62",
        "cursor": {
          "ref": "849b2657-255d-497a-8dc1-4a8750157664",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9fa4eba3-3b6c-4c51-8a77-9de869aa84bc"
        },
        "item": {
          "id": "1871c25f-4f9c-4729-95d9-53c4cddb5e62",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "14da2ca9-e8c0-4fd8-805c-cf253d0da86c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7be60bac-f404-471a-bcf4-0754b0a8306e",
        "cursor": {
          "ref": "320afabf-020f-47cb-b90b-f91d929d01d8",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "e88a1de4-eb92-456d-9c22-799493de3846"
        },
        "item": {
          "id": "7be60bac-f404-471a-bcf4-0754b0a8306e",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cf9783da-fd9b-4594-b6a5-66ced4ff2b0c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "681d337d-726d-4aa5-8166-fa6f2c7f71b6",
        "cursor": {
          "ref": "74c23d6a-bf48-4c31-836c-92cc803e8217",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7923f93f-4c71-4487-82e8-3fa53e5e6dc5"
        },
        "item": {
          "id": "681d337d-726d-4aa5-8166-fa6f2c7f71b6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c6bf6ab9-6b2f-42f0-a943-eb1499953dc9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1586486-7bd4-421c-9373-3052e71e5aff",
        "cursor": {
          "ref": "108c9efc-3f58-451c-84b7-8831e9464443",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "5ab5a6b3-7bc1-47f7-8d5d-324326e86adb"
        },
        "item": {
          "id": "e1586486-7bd4-421c-9373-3052e71e5aff",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d57d391b-222d-4402-a626-1ac34ad07af2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc04c83a-ef25-48c2-ac32-30ba42cef9d6",
        "cursor": {
          "ref": "3f055658-f273-4928-8bc0-7ab4f76a211b",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "9b8302a2-17e5-4541-8c9b-b9088df07cbf"
        },
        "item": {
          "id": "cc04c83a-ef25-48c2-ac32-30ba42cef9d6",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1a68454d-f668-4972-95fe-b62e888ce5c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aff12bd-580d-4d66-92fc-56b8edb8731a",
        "cursor": {
          "ref": "0a0f6bc5-6d3e-4195-9138-9b2d6254b47a",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "03819408-ab90-49dd-9137-5ad3c06aab20"
        },
        "item": {
          "id": "2aff12bd-580d-4d66-92fc-56b8edb8731a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "4cfe69aa-240b-43c9-a6ae-b14f9dd336d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "866f096c-c5ee-48eb-91ac-2392e5b74c71",
        "cursor": {
          "ref": "ef49c745-f3cc-4003-9a2b-c12728e8fa92",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0fa87e47-bd0e-4d15-9b00-8e5703a130f1"
        },
        "item": {
          "id": "866f096c-c5ee-48eb-91ac-2392e5b74c71",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "b0e8ac58-916f-45b8-ad0f-ce6e8742b463",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c57debd-819c-45c2-959a-01bde01a3027",
        "cursor": {
          "ref": "67250a06-c4c3-4468-a26d-91b686b412f8",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "df50df35-3c43-4a83-8585-a95754e46826"
        },
        "item": {
          "id": "0c57debd-819c-45c2-959a-01bde01a3027",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "bd8ea80d-16ae-405c-9de5-71c3f177fc33",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfa59b5-e85d-4e1b-b626-b412a46d86c0",
        "cursor": {
          "ref": "fe0ddb37-48ba-494e-8efe-be6f74951ba1",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0706b8fa-f23a-4875-a32b-ad9b903aa077"
        },
        "item": {
          "id": "2cfa59b5-e85d-4e1b-b626-b412a46d86c0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4d962b40-75e2-4b3b-bd63-b145e9b57fcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4294a839-4782-4c72-a38b-2a7f6e81472a",
        "cursor": {
          "ref": "89de97b2-9469-4dde-96ce-3cba5b3083fb",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "39ad0ced-9713-4fc0-94b7-e27e70e69f63"
        },
        "item": {
          "id": "4294a839-4782-4c72-a38b-2a7f6e81472a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c1dbb3c2-7fde-4bd1-9f8b-7b56505005f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c72b8f4b-ca5e-46f2-9445-549887680824",
        "cursor": {
          "ref": "1e7172ef-ef34-4795-87fa-fd733c0c2b33",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "fc021db9-ae3f-47e8-bb8d-ffb026d2f343"
        },
        "item": {
          "id": "c72b8f4b-ca5e-46f2-9445-549887680824",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8eabf801-62ba-4d03-b983-f170eff9fc39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ce40eb2-6c89-46b4-b778-f0106e5fa0b4",
        "cursor": {
          "ref": "98695020-a038-44ba-9d4a-318821aacee7",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d4cc6e60-7251-43a6-964b-35a7e2e6104a"
        },
        "item": {
          "id": "2ce40eb2-6c89-46b4-b778-f0106e5fa0b4",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d683f4a6-b69e-4b4a-ae01-905c95db92cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6abbba2e-4a85-43ad-99b9-0a5bdeff2d9e",
        "cursor": {
          "ref": "332ca157-15d3-4d4e-8d1c-7921b3f3452d",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "f5a32840-a885-418c-a31b-f97ecc3f8f41"
        },
        "item": {
          "id": "6abbba2e-4a85-43ad-99b9-0a5bdeff2d9e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "25289356-275f-4892-9f32-4ee0fcf84d05",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d3a765f-ee22-4b97-bbe9-4b922124946d",
        "cursor": {
          "ref": "5b24e6ad-02d6-4600-be41-f8dc3d0413dd",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "e1647e47-3aac-4dee-8b8c-e07e0ef50335"
        },
        "item": {
          "id": "3d3a765f-ee22-4b97-bbe9-4b922124946d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "edef67c8-2827-4066-bbc4-1ea3f272cabc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e517b59c-b2a8-4ae6-aed0-55225ef9ab7d",
        "cursor": {
          "ref": "70e32771-41fc-407d-811b-3d96854cc237",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a49fedc7-31e9-469f-bc09-a2cb4dc4c28e"
        },
        "item": {
          "id": "e517b59c-b2a8-4ae6-aed0-55225ef9ab7d",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "354c45c7-e9fa-4b62-af7e-fa5b53e80b2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6148da2-ca1e-4900-866c-2f37509118ce",
        "cursor": {
          "ref": "8f544974-8222-4bac-922d-466040612381",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "280ac4be-3fc8-485e-843f-dd0712bac85b"
        },
        "item": {
          "id": "f6148da2-ca1e-4900-866c-2f37509118ce",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "8c42f669-1244-4b9a-9761-6eaa2b590e3f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9678158-aced-40b4-a624-c15eb05f5032",
        "cursor": {
          "ref": "42688d72-25ce-4f95-87b1-5cf84ffc1d8e",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4ad87c75-0be6-4874-810b-0e4a71ee0a7b"
        },
        "item": {
          "id": "e9678158-aced-40b4-a624-c15eb05f5032",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "933b23ea-b435-4755-9495-7762a55283a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fd06f6-3b67-47ad-a5c0-85093b56f9d3",
        "cursor": {
          "ref": "edef0f08-5908-46f0-9bf5-0397a4692012",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ab5df5f5-b962-4afe-82c6-a7698f9c80e1"
        },
        "item": {
          "id": "97fd06f6-3b67-47ad-a5c0-85093b56f9d3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "531c9bc0-78be-4a7e-a7a4-f997beddd8e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30a525c8-0472-4ce1-94ed-6219f20256f3",
        "cursor": {
          "ref": "427352ce-2ad6-497d-9cfe-67b74ca9d560",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1988d21e-2092-4e0d-9b85-680a997819cb"
        },
        "item": {
          "id": "30a525c8-0472-4ce1-94ed-6219f20256f3",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "ecee1e31-a6e3-4e47-a9c8-29549959da66",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9952eb10-a7a8-435c-b05d-4bc4a0dcae3b",
        "cursor": {
          "ref": "16d37301-285f-4ae9-9eea-d051024c0c2a",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "08eb0078-67f0-4700-9dd6-cbbe4752e431"
        },
        "item": {
          "id": "9952eb10-a7a8-435c-b05d-4bc4a0dcae3b",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7c038678-9cad-4fe7-bcdd-5d06cdc73795",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "471e4ba6-1a67-410c-8918-f247088104ea",
        "cursor": {
          "ref": "2a1e056e-fe41-46ac-8a54-8e2d54608226",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "10ac8ca4-1354-4822-9d01-3fdadb706270"
        },
        "item": {
          "id": "471e4ba6-1a67-410c-8918-f247088104ea",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "06726cbd-4b78-4ede-bf2b-1852e2c4af0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f5efbd4-456a-4859-a2a9-a36a7405157d",
        "cursor": {
          "ref": "4067e58f-881c-4a9d-a296-17316c65a203",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "d6e20943-4c35-47ab-af1b-0e82f565270a"
        },
        "item": {
          "id": "5f5efbd4-456a-4859-a2a9-a36a7405157d",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "6747da5e-77fe-4f99-b191-8a8178dbc5bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d6a0d0d-2c39-4c3d-87ae-51881595fc86",
        "cursor": {
          "ref": "0b9c21af-524a-4dff-874e-7c42a7fbf962",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "9a42a5cd-42f2-4792-aa21-489aafea37ea"
        },
        "item": {
          "id": "2d6a0d0d-2c39-4c3d-87ae-51881595fc86",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "735324e5-170f-44c4-b626-2e99e4389c1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aea8d7f-9444-434b-a91c-fcfa6a11bf35",
        "cursor": {
          "ref": "131ce57c-d6df-4446-b203-00e82ce913f1",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "e8ac5aa3-1804-43db-bc91-f61af2b407da"
        },
        "item": {
          "id": "1aea8d7f-9444-434b-a91c-fcfa6a11bf35",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "c3fc7244-5c83-4c07-a81b-76d0a71ab578",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb6bdcca-0c9e-4c74-9edd-d66ae52566a0",
        "cursor": {
          "ref": "4f5f9210-2813-4fef-9b4d-0076951eb15e",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "475d9fa5-3708-4d0a-a955-b828cb1c30c5"
        },
        "item": {
          "id": "cb6bdcca-0c9e-4c74-9edd-d66ae52566a0",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d15a9d25-3574-4a13-903f-d34f69220725",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c9b1e75-d7f7-4d71-922e-33ab25c4e10d",
        "cursor": {
          "ref": "872a78c7-d169-4e92-8ee4-e3d7662a4595",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "d0f0f2b1-9b72-4efc-852f-1dfa81f60cf0"
        },
        "item": {
          "id": "6c9b1e75-d7f7-4d71-922e-33ab25c4e10d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "a24251d2-cdac-4896-9756-5106b13cd54e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98c67446-17e7-4048-a74d-a66faa5aed9b",
        "cursor": {
          "ref": "b1bcd8e6-cc94-4267-8d2c-b7740a5c2455",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "60687dcc-62dc-4b19-9973-9fc7d513acbd"
        },
        "item": {
          "id": "98c67446-17e7-4048-a74d-a66faa5aed9b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "18db9210-606d-4ed0-bee8-ef55392a90d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3abb2ef-5251-4a1a-aa47-9ea5b7b1d422",
        "cursor": {
          "ref": "bbf165ef-5f7f-4b13-8445-f9878867a204",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "db94d403-e47d-4bc1-9267-8de995182e06"
        },
        "item": {
          "id": "a3abb2ef-5251-4a1a-aa47-9ea5b7b1d422",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "96adc770-9931-4b70-87f4-2637667095c2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6de06295-5a85-4041-929e-3e20f347db8f",
        "cursor": {
          "ref": "2b86f312-b315-4705-a6e3-cc6eb605bd27",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "347d9136-0ad7-4e99-8ce8-9c3e9bac87bd"
        },
        "item": {
          "id": "6de06295-5a85-4041-929e-3e20f347db8f",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "41aae235-9392-437a-9924-b1edaeee5884",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "163eeb0f-a2da-4cc2-8742-3fe999699656",
        "cursor": {
          "ref": "5d1d1166-fe07-432a-b042-e0da001c9052",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "878ecc69-8812-4d5f-a0df-15e9366e782b"
        },
        "item": {
          "id": "163eeb0f-a2da-4cc2-8742-3fe999699656",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0c5a7c85-1eff-4566-99fa-5fa116df8ecb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48e1f394-72c1-4763-8fbe-ef3fa3443e00",
        "cursor": {
          "ref": "886ac147-4a7f-4439-9c4c-b322f419a5d6",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "aebe621f-ecfc-45bd-9e09-34f0a432bf8e"
        },
        "item": {
          "id": "48e1f394-72c1-4763-8fbe-ef3fa3443e00",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0694f600-9f38-455e-8d70-1bb58719ddb7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c31b33b-4bb2-4938-8586-cab35c610e4a",
        "cursor": {
          "ref": "715a3e90-7c0b-4544-a637-4379dc93d0da",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7af04883-9640-4087-a302-95a47eff0ab9"
        },
        "item": {
          "id": "2c31b33b-4bb2-4938-8586-cab35c610e4a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "445a825a-e73b-4ee9-b229-7a814a098cb4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32c6272-f7bb-448e-9ab7-0460b185ffde",
        "cursor": {
          "ref": "418876e4-bbf4-4b3a-80c0-e4ed537cefe2",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "65dc2907-de37-43e5-a772-76dfc32f30bd"
        },
        "item": {
          "id": "a32c6272-f7bb-448e-9ab7-0460b185ffde",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "ada3ffbd-2251-484b-b5df-a65f79816ff0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76a0b23-70f0-4f99-b98b-6d6e9b0f057a",
        "cursor": {
          "ref": "56a1b29f-a13e-4b17-9012-321f78f85c0a",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8835c6bc-c6da-486d-b720-98de997ca781"
        },
        "item": {
          "id": "e76a0b23-70f0-4f99-b98b-6d6e9b0f057a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "181a4728-c945-4867-9d33-0f65c6509ed6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903c6726-4cc3-4a22-8359-20d4ec1f02b0",
        "cursor": {
          "ref": "b1fa0da4-3424-4d00-9e9b-87fbcda93dfb",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "acbbeca4-b811-42aa-99f0-3c51eed7a02a"
        },
        "item": {
          "id": "903c6726-4cc3-4a22-8359-20d4ec1f02b0",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "194740e5-a0dc-44ee-94fd-0c0ace277ccb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe85cfe-acd5-4b6a-94a4-cbcd72a149d2",
        "cursor": {
          "ref": "a0b6581c-f91f-4f64-bf3a-9560059be3f3",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "81298315-3dfb-4647-83b9-bf6bfc0f9a46"
        },
        "item": {
          "id": "ebe85cfe-acd5-4b6a-94a4-cbcd72a149d2",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "8440284c-ef05-4dd5-a3c7-19512592ed1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9ec91a2-eaee-4f95-8500-77af70a8928f",
        "cursor": {
          "ref": "dee64a0c-adb1-4e2d-979f-8196ef70945e",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bade33c5-04b3-4816-92d5-42bf42015c26"
        },
        "item": {
          "id": "e9ec91a2-eaee-4f95-8500-77af70a8928f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8f962643-5d4f-41e9-a6ac-66450b3f0824",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a998fb3d-e148-4c58-b076-e2fb0030d84b",
        "cursor": {
          "ref": "0ac453d6-b237-4b47-8eac-5c78dea71d63",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "869bb9cb-e7de-4df9-b61b-8a84c8b1c1b9"
        },
        "item": {
          "id": "a998fb3d-e148-4c58-b076-e2fb0030d84b",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "9190ba5e-b736-45be-a54d-8161adb7f6f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dc6fd45-e916-4a69-ad58-0fbe68c37d0a",
        "cursor": {
          "ref": "eb53ad97-bca4-4591-8a6d-13ed3899fade",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2b93dbe6-373a-4b6d-a101-c544340c5171"
        },
        "item": {
          "id": "3dc6fd45-e916-4a69-ad58-0fbe68c37d0a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "2b69910d-14ef-444a-b3ff-b31bc00ff827",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8691e3d-d69b-44db-bfe7-0e8c7e8f2093",
        "cursor": {
          "ref": "84e49e13-f290-4db1-9f12-79b0e24a8771",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d8101dbd-c739-4d53-b459-7710963b4145"
        },
        "item": {
          "id": "d8691e3d-d69b-44db-bfe7-0e8c7e8f2093",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "a84fe3d4-3145-463a-ac68-7a94202556ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3658874d-8e85-4757-907d-cc20568e5e37",
        "cursor": {
          "ref": "d6d1e49e-0582-417a-9e62-3ed3b1b191fa",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "738fd0f0-163e-40d9-80ab-28e1bab3e29c"
        },
        "item": {
          "id": "3658874d-8e85-4757-907d-cc20568e5e37",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "81d0d26e-e226-4eca-b07f-8eee132715f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 27,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17417dc5-acbd-4bc4-aa0d-abd067f0d2e6",
        "cursor": {
          "ref": "b502613b-cd9d-4d91-9f22-70080a5123be",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b2367396-29a0-4fa6-bde4-9ca1dbbc7231"
        },
        "item": {
          "id": "17417dc5-acbd-4bc4-aa0d-abd067f0d2e6",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "aac15304-0116-41d4-8a3b-0c4dc90dee53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "090fd4ca-7ba4-4f7f-bef9-e52cd0d787ed",
        "cursor": {
          "ref": "2848f07a-79f9-4de3-a579-0f17e700e618",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "528803a7-a3c9-45d9-8286-8ba57bb00b13"
        },
        "item": {
          "id": "090fd4ca-7ba4-4f7f-bef9-e52cd0d787ed",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1440de77-0943-486a-970c-00f5f21d4b8d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3c5bac-6730-49ed-a993-0646aad21593",
        "cursor": {
          "ref": "00c85707-0eb8-45ca-acbb-9e3b283dc9f2",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "10228cf9-b8e7-40d7-ad4e-1587156aadc3"
        },
        "item": {
          "id": "1b3c5bac-6730-49ed-a993-0646aad21593",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "fd278111-8d22-49bd-ac80-49dd1fd54955",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8efd0079-e584-41b7-8466-6de9415166d0",
        "cursor": {
          "ref": "f9dd49a4-b6f0-4f0f-8096-e307629645fe",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "1f5910ec-b40e-4a88-a5ac-e40cf7ea5133"
        },
        "item": {
          "id": "8efd0079-e584-41b7-8466-6de9415166d0",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2c1daf11-fd0d-413d-b037-5ec33f225a51",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd62616f-8d45-4483-b6cf-278aefcbac21",
        "cursor": {
          "ref": "c6634150-1803-442c-9624-f1104e2ce847",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "ae40e3bd-f21e-4669-8890-6ec8c9fdf2e5"
        },
        "item": {
          "id": "bd62616f-8d45-4483-b6cf-278aefcbac21",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5e276d93-0c8f-4f18-9c79-85ae59e1972e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b139dd4b-2579-47fd-a367-c8eee9bae55d",
        "cursor": {
          "ref": "096ad97a-639c-4c00-bccf-7f5a87792bd3",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e2a9547c-4506-4b73-aab2-20ae29c24755"
        },
        "item": {
          "id": "b139dd4b-2579-47fd-a367-c8eee9bae55d",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "a6ac88cc-4c35-4a81-94e3-9da39b8c3856",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "583fbf48-75da-43ed-85d9-51321db53022",
        "cursor": {
          "ref": "d9e8c432-7f7a-4532-9e2b-1ec44b19782e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "58cd7d0f-8b1d-4e6e-ab7a-5bb27b857bdc"
        },
        "item": {
          "id": "583fbf48-75da-43ed-85d9-51321db53022",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "87c124c1-8e0e-48fc-b41e-2483489ff20c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1c19967-0418-42cb-9dea-2bb86846afa3",
        "cursor": {
          "ref": "3b777b7c-afdb-4917-804f-e0eb77b27756",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bf2488e8-69e8-42b6-869c-318a568d9e0f"
        },
        "item": {
          "id": "f1c19967-0418-42cb-9dea-2bb86846afa3",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2dbd4652-e116-4365-8b86-55c830df2649",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b92d897-17be-4842-831f-650645a3f097",
        "cursor": {
          "ref": "b9db8289-73df-4425-99b5-9f1757e7b204",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "d9560ac1-900e-4c73-bb52-2f72a4bd61b5"
        },
        "item": {
          "id": "1b92d897-17be-4842-831f-650645a3f097",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "09a7f425-930a-49bb-8480-cb36535df3e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3a7678-a5c9-4c79-8432-bf2f51571d0f",
        "cursor": {
          "ref": "dac94cd3-612a-438c-bff2-ba962acfe03f",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "1f8c7ca6-e89b-4d86-95b7-65e61fb4f40c"
        },
        "item": {
          "id": "8d3a7678-a5c9-4c79-8432-bf2f51571d0f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "f2c46662-8c65-47b9-9434-a062e31c089c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5830b8-8ff9-4c1f-94ee-1ec915f8af9e",
        "cursor": {
          "ref": "6e7f8e26-82bf-41b9-8e0c-510301243a01",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "afda0b50-f5d6-40b6-9d69-a7bdc738f339"
        },
        "item": {
          "id": "6f5830b8-8ff9-4c1f-94ee-1ec915f8af9e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "32417ae8-66f6-42de-b437-774af4dd323e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af07a256-3c67-468f-b5d6-1c7441a5fb02",
        "cursor": {
          "ref": "305c99af-26a7-4070-b23c-b14ba81f7f30",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "421b0818-ecde-4ff5-8fb9-05ac0405a18f"
        },
        "item": {
          "id": "af07a256-3c67-468f-b5d6-1c7441a5fb02",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "8d336363-b189-4112-bf87-6146c0b7644e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ee525f-07e0-44fd-a220-f4443f306279",
        "cursor": {
          "ref": "333b6b94-3546-42a0-abf1-96559832552b",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "37e5aa08-2dfc-45a3-ae55-f956d2ad67cd"
        },
        "item": {
          "id": "05ee525f-07e0-44fd-a220-f4443f306279",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "346b383a-0e4e-47d9-b95e-e870f2cf967e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb13a398-d751-4eba-beef-7ae56d7473ee",
        "cursor": {
          "ref": "64535939-5a59-4bc5-b0a7-6d133d6a321b",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "9eb4248b-2046-435f-b7a3-4642d511477c"
        },
        "item": {
          "id": "bb13a398-d751-4eba-beef-7ae56d7473ee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1605237f-cba8-43b5-aa4b-4b4b2d0c0e1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49684e71-9834-41a0-850e-8561fcaa320d",
        "cursor": {
          "ref": "f71109cf-585a-4827-81b7-de531a208fa0",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "05ca73e6-3dbb-40e2-b00b-1ca394f0f34d"
        },
        "item": {
          "id": "49684e71-9834-41a0-850e-8561fcaa320d",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "1e95eb9f-4544-4c0e-8054-cd3b82b88cc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "907f4596-7758-4468-af5c-67b938a76c87",
        "cursor": {
          "ref": "0fbf5d30-f9ad-4d36-86de-875c05daf19c",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "944dbb01-0cb0-4a02-8a15-7f59e44b644e"
        },
        "item": {
          "id": "907f4596-7758-4468-af5c-67b938a76c87",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "185ee7fe-de35-405b-8db1-5f78580dc16e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b0a7985-4465-48e4-933e-cd2232188ba5",
        "cursor": {
          "ref": "45f5774d-b3e6-49db-9f0e-d67f3eeab421",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b1f98934-d0b1-4bc6-991d-a0b53a7750d8"
        },
        "item": {
          "id": "1b0a7985-4465-48e4-933e-cd2232188ba5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "7904ca4e-99e1-4668-ab9b-c1a3f510de64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea0f4dd3-5dfa-4aea-96e6-5a184b91c1d6",
        "cursor": {
          "ref": "30c26006-a53d-45c7-9c2c-58699fc0ada8",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "37e9e349-1b06-4b4d-91a4-9bd8af182b52"
        },
        "item": {
          "id": "ea0f4dd3-5dfa-4aea-96e6-5a184b91c1d6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "93694f5d-3f89-4ac1-81c3-ca28bc354bec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "726a8767-0f27-44cd-90c0-ad99d8614faa",
        "cursor": {
          "ref": "b8f5bac4-3634-455e-ab43-59ee087286e7",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ba62e195-609e-4057-8352-b8f5054bf155"
        },
        "item": {
          "id": "726a8767-0f27-44cd-90c0-ad99d8614faa",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "859ddd32-01e7-4899-912c-f42184c57327",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f46dd1ae-99a2-422d-ad5f-93602be1f1cf",
        "cursor": {
          "ref": "e9c9a7b3-ef63-4333-9b44-4b6424ee8c21",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8db6e5fb-d2f7-451c-bb72-ed1567c134ad"
        },
        "item": {
          "id": "f46dd1ae-99a2-422d-ad5f-93602be1f1cf",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "a3705039-9bf7-464e-ba07-daba9f5a8ed2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 26,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "fcf747ae-1e37-469e-b731-ad626b27188d",
        "cursor": {
          "ref": "63fa9d14-9665-45a8-97e4-4b6915ce12c4",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "ff804833-8d9f-4643-9521-20a7c1295559"
        },
        "item": {
          "id": "fcf747ae-1e37-469e-b731-ad626b27188d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "8d88f161-544e-46cd-a05b-a4da695e527f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 217,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "510caf74-aea5-48f1-af0b-05a1467d16fc",
        "cursor": {
          "ref": "4936c820-8758-4c72-a8c4-0e2f81109a7b",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "d0fd062d-45ee-4bf2-985b-16ed36168d30"
        },
        "item": {
          "id": "510caf74-aea5-48f1-af0b-05a1467d16fc",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "78cc49fe-9b3f-45e1-aefe-51e85a2203cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "661cd988-ae0f-41b2-b2b9-fc50813cb199",
        "cursor": {
          "ref": "6c5b3307-f253-47ff-911f-90444d62446e",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "3f515ed4-c419-4027-b00e-94ed078fae6d"
        },
        "item": {
          "id": "661cd988-ae0f-41b2-b2b9-fc50813cb199",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9d0d66ba-4af5-4d04-bbbc-d2820b8b075a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "ede2d612-ff84-4b79-a236-ea078a583345",
        "cursor": {
          "ref": "5ad5819e-7adf-4957-9852-57d24dc7b545",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f20f67b8-4f4f-4527-ab7d-cf6768ba1876"
        },
        "item": {
          "id": "ede2d612-ff84-4b79-a236-ea078a583345",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "f7acddb0-8c9d-42df-bec0-70f80bb4a52e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "7f888a02-a8c3-48fc-8cc6-df3f79d9502d",
        "cursor": {
          "ref": "f81945d0-c1c0-472d-a94c-2cc875a17554",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "80918116-d195-40ca-9d4c-44c0f177dc97"
        },
        "item": {
          "id": "7f888a02-a8c3-48fc-8cc6-df3f79d9502d",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "65864472-e060-4cab-b222-a5e0e3ff1678",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "6ab852fe-2e01-4b74-b09a-bdd9aea2078a",
        "cursor": {
          "ref": "b6cd9041-8447-4b56-adeb-5a3d0e35e74c",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "11982a9c-30e3-4c9c-976a-b26d5e5c1329"
        },
        "item": {
          "id": "6ab852fe-2e01-4b74-b09a-bdd9aea2078a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "1309d474-37a2-4ab2-87de-aeadc2fcdec6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "99ceb87f-df05-451b-ab85-4025a00d3867",
        "cursor": {
          "ref": "4f67ffae-ac7e-4cea-bc2d-b03fa6b14a8e",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "a862cce9-3c06-40cb-84d0-747eef93f0d4"
        },
        "item": {
          "id": "99ceb87f-df05-451b-ab85-4025a00d3867",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "223510ae-f6c4-4f98-b023-5f99aa4a8409",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a1c4194-eb35-4a29-a1fc-d01c85c76673",
        "cursor": {
          "ref": "6a4972a7-5109-4716-bf5b-3c146603d56e",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3926fb7c-12bd-47af-a472-38813c0f346c"
        },
        "item": {
          "id": "8a1c4194-eb35-4a29-a1fc-d01c85c76673",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "11bcd196-55cc-403e-92ae-184a0ad62b24",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca0dde35-0826-4f2a-8fa7-f1c8cfbf6985",
        "cursor": {
          "ref": "d0c64397-4859-4ed2-9aa7-02c8af81f071",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "23f99b40-d008-49ec-9b80-59c755687417"
        },
        "item": {
          "id": "ca0dde35-0826-4f2a-8fa7-f1c8cfbf6985",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "068e6530-5405-4c2b-8d5b-0e8c37448852",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bfa05b0-0105-4575-a4fc-f11071721567",
        "cursor": {
          "ref": "ee189f0b-97b4-4e00-8dbe-538a0415c87a",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "28fc025e-0c97-4cd0-ba39-23e19c361054"
        },
        "item": {
          "id": "0bfa05b0-0105-4575-a4fc-f11071721567",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "ea707a61-3ccc-4304-9658-7a956c8e2869",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64239a16-839a-4c42-963a-5d4078b7d75a",
        "cursor": {
          "ref": "14517294-5497-49c4-a1bf-fc30f2934eef",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "762ad6d7-cc9c-4d5e-a18f-5bd534e3564f"
        },
        "item": {
          "id": "64239a16-839a-4c42-963a-5d4078b7d75a",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ea21c4f3-cbac-406c-9694-4de62735de6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5770fa9b-51ef-440f-a95e-618629b3411b",
        "cursor": {
          "ref": "3766a7b5-cb8b-4642-8e5d-ba7f48527549",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d1218f60-f1f4-4409-819a-38cbbcc03cf7"
        },
        "item": {
          "id": "5770fa9b-51ef-440f-a95e-618629b3411b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8d117006-4143-4101-aca6-f4c324c5f63d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0966fdde-41fc-4fda-a7ef-14ae241b3c30",
        "cursor": {
          "ref": "73ca6d20-8a93-411c-bff5-5f0d740d0339",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "9bf2bc5b-1b7c-4e3e-bb05-9db81c873dc2"
        },
        "item": {
          "id": "0966fdde-41fc-4fda-a7ef-14ae241b3c30",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "96286c6b-4770-4af2-8cb6-a1bd90af749b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ec7c955-1014-40f0-b374-d75f995b0480",
        "cursor": {
          "ref": "8231447e-b9cb-44c6-9880-d19f6e6aae7e",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "8714c29d-8cb5-4957-b3fd-356e7f3244f6"
        },
        "item": {
          "id": "5ec7c955-1014-40f0-b374-d75f995b0480",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5c134926-de28-41a5-98b6-030c32b92c95",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae492c9a-34af-440d-a3bb-7032a972a31c",
        "cursor": {
          "ref": "33462471-3a5d-4dfb-a574-8caa5b99a59a",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "04c07e6c-d54c-4fc2-8f6d-52e30818eb85"
        },
        "item": {
          "id": "ae492c9a-34af-440d-a3bb-7032a972a31c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d555b83f-7fb4-4800-9b6a-c05e22779894",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2aa4c171-c05f-4a05-936b-b4871c6fbcf8",
        "cursor": {
          "ref": "9f511fd4-c26f-4dba-914d-90a89420c721",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "fe9d71c0-2be5-44ab-b891-b9201f910fdc"
        },
        "item": {
          "id": "2aa4c171-c05f-4a05-936b-b4871c6fbcf8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "d0337bad-2e04-49da-ada3-bb891aab10ed",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3589202-17c4-410f-8366-56567c6ff56b",
        "cursor": {
          "ref": "62e67aba-e727-4f91-8333-54ed3499240f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "7ff92045-a7eb-44e6-808f-8f589a3e8b0b"
        },
        "item": {
          "id": "d3589202-17c4-410f-8366-56567c6ff56b",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3b97ea5b-1563-47dd-8674-8f95b1fd064f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bccea97b-d4f3-401a-9cd5-28f19b8311f9",
        "cursor": {
          "ref": "62ddb7cf-3e49-4da0-8b2a-1162c0398ba7",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "7e2f9ecf-6463-4b70-a29f-3ae459cc23b9"
        },
        "item": {
          "id": "bccea97b-d4f3-401a-9cd5-28f19b8311f9",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "41e1adc9-2fb1-4fa2-9083-844c982722f0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b4b185e-dde5-46fa-bedd-9e3e0297e28e",
        "cursor": {
          "ref": "8719c22e-3a65-46b1-a632-0fd808d2e674",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "4798c3cc-bdd1-49a6-ad63-233c71b6e488"
        },
        "item": {
          "id": "9b4b185e-dde5-46fa-bedd-9e3e0297e28e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0d14cd6a-ff00-4824-9b9f-f300f86e5281",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d09015-b12c-4a57-b39c-e22789658127",
        "cursor": {
          "ref": "9772579b-115d-4448-b201-967a91e37a84",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a5c707d5-d3db-4d9a-b84c-b93f68364eec"
        },
        "item": {
          "id": "c2d09015-b12c-4a57-b39c-e22789658127",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "3e9c11fa-7639-4b4b-85b9-92a3e356c9ac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cbdc0d6-f7e9-4539-aedb-904360a54846",
        "cursor": {
          "ref": "4ee2fbbe-b901-45eb-b0c1-fc1a6185c50d",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "256af9ab-eca6-4a6a-b423-42b4bd6fabd1"
        },
        "item": {
          "id": "3cbdc0d6-f7e9-4539-aedb-904360a54846",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "69edf556-240e-409b-8f54-eba97528a2be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30cd70cb-4459-48bd-aa16-1849e1561b1b",
        "cursor": {
          "ref": "f09f9610-465a-4832-b981-0a4c394b2c7d",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "12505025-627b-45c7-ad7c-72464686bd06"
        },
        "item": {
          "id": "30cd70cb-4459-48bd-aa16-1849e1561b1b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1016cf1c-b041-42e3-acc8-df8c431cdcc1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0859488d-1a02-45cc-86ce-83741421aef5",
        "cursor": {
          "ref": "127ea168-9237-4d53-9b86-5dc8b5327e62",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c885bcb5-5f33-4d0a-8bf9-d26b7a7a9046"
        },
        "item": {
          "id": "0859488d-1a02-45cc-86ce-83741421aef5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "da72ae2a-95a3-4a3c-9607-f98191e6816c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16b0474b-6913-4ca8-ab4d-be2251b049da",
        "cursor": {
          "ref": "583170d9-9e1a-46c3-a348-c58dddb50783",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "99dfa2d6-39d2-4008-9029-4ad9a9b904ed"
        },
        "item": {
          "id": "16b0474b-6913-4ca8-ab4d-be2251b049da",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "594f68e6-7ef1-420c-80b1-69582711f889",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c8a040-3371-4011-bf8d-ae5ed0e8d617",
        "cursor": {
          "ref": "4092a918-2ddd-47a4-aa49-31e0e58c885c",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "a3812e4c-ff49-4691-9b4a-189afca32016"
        },
        "item": {
          "id": "57c8a040-3371-4011-bf8d-ae5ed0e8d617",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "67718bc8-5509-4a8a-8e44-24b6f9918965",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "496ffc10-2c58-4fc5-a252-f1952166c890",
        "cursor": {
          "ref": "8414f6b9-da3c-4bd5-9bbc-bb71c8b553c9",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "75cd56f1-f10f-4814-8a9e-3689a4f01dbd"
        },
        "item": {
          "id": "496ffc10-2c58-4fc5-a252-f1952166c890",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "42007c88-fda3-4d9b-9335-87cb36c5680d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8e66519-1d6e-48de-b2bd-3b6fcaef5807",
        "cursor": {
          "ref": "e02b5aeb-a916-43ae-8a09-62fd9a1e1935",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "4f08f968-8212-4b03-a37c-ecaf8bc0158f"
        },
        "item": {
          "id": "b8e66519-1d6e-48de-b2bd-3b6fcaef5807",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "69d44cab-6dc2-4b68-8591-cabfc780bf39",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a96e53-d7b1-4b8d-b3f2-c24b1e687299",
        "cursor": {
          "ref": "65bdb10e-f182-43ed-9fe8-122bc5430069",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ea0d6748-6440-41c5-9cfe-542494477048"
        },
        "item": {
          "id": "b7a96e53-d7b1-4b8d-b3f2-c24b1e687299",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f1a13694-e1ac-4423-a5c1-5d5a5b7401d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957742ca-4749-4c21-817f-9337d12348d3",
        "cursor": {
          "ref": "d260a9c1-d853-43a8-9577-e0d5e6f018f9",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "55393586-4a82-429a-9822-5cce36437912"
        },
        "item": {
          "id": "957742ca-4749-4c21-817f-9337d12348d3",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a9a98f18-f7bd-4932-8679-ba940f92a952",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a18c0718-3b94-4e97-85c8-dbc997635d4c",
        "cursor": {
          "ref": "e8b22fe9-9f76-4b45-860a-edfcffc722b6",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "032f45ad-176d-4e69-ad69-2e6d2c629886"
        },
        "item": {
          "id": "a18c0718-3b94-4e97-85c8-dbc997635d4c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "6e674307-56fa-42b0-b3fd-d554338065f7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6846489-6a31-49dc-a4bf-25c7310a9124",
        "cursor": {
          "ref": "18d868a9-3817-4d91-8bce-616e1f27df8c",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "389c09c3-69c7-41eb-a67d-58b6e78703cb"
        },
        "item": {
          "id": "e6846489-6a31-49dc-a4bf-25c7310a9124",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b1f96beb-46ee-4fcf-8b74-0f76ca28de2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cb8b4c9-2c47-4b86-9306-d332b09cfc7d",
        "cursor": {
          "ref": "f6f73e74-cfe6-477b-9501-da5c5bde5393",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6f1e23a7-4361-49f7-a8f5-461354eef0b3"
        },
        "item": {
          "id": "4cb8b4c9-2c47-4b86-9306-d332b09cfc7d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a0371095-4ee9-40f1-913e-531dae7d6edf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ca3a781-b4b5-4c81-add0-25a6e6c27044",
        "cursor": {
          "ref": "ad64e8e9-e131-4c61-9f92-b1be5d101aff",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "9294ed4e-748e-4a26-b688-807caee7307a"
        },
        "item": {
          "id": "1ca3a781-b4b5-4c81-add0-25a6e6c27044",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e7498e8c-f556-4f5e-9e72-1a636fefe29b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d09a0d70-ed22-4eec-a150-0b0a6f8cd4e4",
        "cursor": {
          "ref": "e651433d-f1bd-4971-80bf-5a35a56ff1fe",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a888611a-6eba-454d-aff4-6fbedc3745ec"
        },
        "item": {
          "id": "d09a0d70-ed22-4eec-a150-0b0a6f8cd4e4",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a2f3c5e2-42d4-4400-a566-cba4f9604846",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4328783-2067-4726-beac-b92665c8a036",
        "cursor": {
          "ref": "5a483627-e435-41e9-86e0-c4b6b40f7ef0",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a4fa0642-c8b1-4d03-b9e3-2444df9622a9"
        },
        "item": {
          "id": "f4328783-2067-4726-beac-b92665c8a036",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "64fc92d6-f3b2-42ba-9d8a-55c392711cfc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91a23763-ac2e-40d8-8de8-3057a353b2f7",
        "cursor": {
          "ref": "474b47a7-9a01-4a46-a4d0-4102c6451d1c",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e3d567f2-deed-4201-b30c-d060375fbdfb"
        },
        "item": {
          "id": "91a23763-ac2e-40d8-8de8-3057a353b2f7",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "35acc807-fb46-49d1-8dcc-d6773265f46c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95584c08-dc47-4ef8-89e0-cec55cbe85a4",
        "cursor": {
          "ref": "56a90394-908f-46bd-aa04-560eab1611ff",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "277050c3-c9b4-4b45-a777-c19f700e640d"
        },
        "item": {
          "id": "95584c08-dc47-4ef8-89e0-cec55cbe85a4",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9357aeaf-01fd-4cb1-a958-6179ac77d81d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02326eff-3db7-499d-8df4-666a6fcb4df9",
        "cursor": {
          "ref": "232f6097-602f-4c74-a254-f4b36ea21461",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b277c2be-b33d-48fc-9604-1284897a58d5"
        },
        "item": {
          "id": "02326eff-3db7-499d-8df4-666a6fcb4df9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "4907299a-cb72-4158-8066-8abb492981c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fbc1c55-1fa2-4a8e-9506-eb9f41c2d365",
        "cursor": {
          "ref": "3c09691a-1cc4-4b0b-aca5-bbd9150b85b4",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cb7558ca-3beb-42f0-8966-9a6d56d50bc1"
        },
        "item": {
          "id": "6fbc1c55-1fa2-4a8e-9506-eb9f41c2d365",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "defd5198-cec3-4478-9a5c-be3ecd09292d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0701bb30-4299-4487-a23e-ee10990dbdcf",
        "cursor": {
          "ref": "fe7842ec-f3e3-4403-99e6-6546708f63cf",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "1b78b6e1-cc65-4987-a5af-ca3756c61b8a"
        },
        "item": {
          "id": "0701bb30-4299-4487-a23e-ee10990dbdcf",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "30e8cc25-27d7-4b15-b407-7e06a2c9fde5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d9635a3-8ed8-429f-bac0-bce39773056d",
        "cursor": {
          "ref": "3a73a781-eea7-4923-a40b-0d12f82d2ad8",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "2ed20ed8-c328-42ed-97ae-83d43339fd11"
        },
        "item": {
          "id": "8d9635a3-8ed8-429f-bac0-bce39773056d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "475d78ae-5c73-4f2b-ba33-87ba52e1b673",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23729923-12bc-456f-a87a-2cc80fcd9ac8",
        "cursor": {
          "ref": "44dc3f65-3121-4631-ab6e-9772b07a8f1c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "e7063b4f-f559-4a3e-8b74-b980e1c9bd9c"
        },
        "item": {
          "id": "23729923-12bc-456f-a87a-2cc80fcd9ac8",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "1e88b9cf-5d1f-4807-a696-d8cd408cf2a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9500b98-70e6-4ca0-88c7-864bc25c9e8f",
        "cursor": {
          "ref": "c3460b26-7c4f-47d2-babb-e0acdb181675",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "524c5e6a-7a10-46c1-96a7-2fe99c1b7761"
        },
        "item": {
          "id": "a9500b98-70e6-4ca0-88c7-864bc25c9e8f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1b9f2a1b-03b4-48a9-89a0-ef935a763557",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98aeefb5-05cb-4f90-ad1d-70d074b5b99e",
        "cursor": {
          "ref": "372eee28-bf80-4c95-84fd-4619494c7797",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "743591e8-82e6-4edb-b392-32782de28ac3"
        },
        "item": {
          "id": "98aeefb5-05cb-4f90-ad1d-70d074b5b99e",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "bd5a0ef1-453a-4ac4-96c4-3827de566e9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f70f4d7d-89f6-4f81-b735-a12d204b52d7",
        "cursor": {
          "ref": "21f0d150-64a7-434a-bd2b-81f5e98ad3ae",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ca7191a2-240b-41e3-87b3-f8f7a55b4d62"
        },
        "item": {
          "id": "f70f4d7d-89f6-4f81-b735-a12d204b52d7",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "6c1026f6-cf9b-4fc2-ac73-423111f4af44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc0c782-37b5-4b6d-90e5-05618e4a3b52",
        "cursor": {
          "ref": "701f150d-f288-4e25-9487-d5804e8ac7e6",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d7272be1-e0b0-415d-8cc1-2413ecd029ad"
        },
        "item": {
          "id": "edc0c782-37b5-4b6d-90e5-05618e4a3b52",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "a84aeb31-4991-40ff-becf-98c10e458521",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a15a1514-c732-4225-a4c5-d46d0bac5473",
        "cursor": {
          "ref": "6235ca4a-bc53-4f92-9ca1-805e46170112",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "045eb78c-a06b-4d06-94ac-8940e6d372e1"
        },
        "item": {
          "id": "a15a1514-c732-4225-a4c5-d46d0bac5473",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "78741672-10fe-46b7-bf67-06c58f7fde4b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff7bb0ad-3ad5-4324-87e0-1ef046d266a7",
        "cursor": {
          "ref": "1aefe15b-2301-4c2c-9f06-3d8de6f803b7",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2a6c05d3-4dfa-419f-be0e-4cff48ac1dd7"
        },
        "item": {
          "id": "ff7bb0ad-3ad5-4324-87e0-1ef046d266a7",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6cbe1b62-622b-495f-948b-cb14cd0ba6b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4109fb2-3e28-4c75-8de2-d8ace076c7a3",
        "cursor": {
          "ref": "80da0aa9-188a-4262-8567-6fb52c0906ae",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "7316bc99-cad9-46d1-adb3-603474d2b89b"
        },
        "item": {
          "id": "c4109fb2-3e28-4c75-8de2-d8ace076c7a3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "f85f1bfa-070c-4aa6-852f-973d89b6995c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdc277b6-4669-4d33-afc5-78eee15ecdd5",
        "cursor": {
          "ref": "d1d8303a-d309-413a-bb79-b1347bd2cd42",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "77d3c62c-ba10-4760-8966-4692811a1989"
        },
        "item": {
          "id": "cdc277b6-4669-4d33-afc5-78eee15ecdd5",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "1ab13b37-50cd-40ed-b0a1-f6be878cf4d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42c3bd38-b357-4f04-890a-b720394209d6",
        "cursor": {
          "ref": "b83c4bd7-b2eb-4a51-bb02-0607569ee8f9",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "e92fdd22-fe7c-4fa6-ab02-22da9c1cd92e"
        },
        "item": {
          "id": "42c3bd38-b357-4f04-890a-b720394209d6",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "1278dd1a-0209-460f-8ebd-12564c3b98e5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e8efaa-030b-4363-bc7a-752870da6812",
        "cursor": {
          "ref": "a3ca2c10-d201-4532-aa41-c846c48f710d",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "8090585b-8785-4852-8475-dee1f87e7dc4"
        },
        "item": {
          "id": "86e8efaa-030b-4363-bc7a-752870da6812",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "7f3c13b8-7be3-49bc-8320-01b27844733e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fd3ae83-78ed-4217-8270-b16cff911ecf",
        "cursor": {
          "ref": "cf5c53a2-517c-4edf-a56f-9c9c0c884c42",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "4491e97b-08bd-4e56-a1d8-512d5309275b"
        },
        "item": {
          "id": "1fd3ae83-78ed-4217-8270-b16cff911ecf",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "137165b6-cac3-48d8-aaab-ac9853fc20d4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28feef1c-6ca4-40c9-a3c6-9e3baf3b1f7d",
        "cursor": {
          "ref": "95663443-0bef-448d-aff4-9e3232b2380a",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "43cc02af-7eb4-4b3f-80bc-99763e84bd29"
        },
        "item": {
          "id": "28feef1c-6ca4-40c9-a3c6-9e3baf3b1f7d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c82d1466-8fa4-4a23-b0b5-7347a4bbeda6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f243096b-26a2-4010-bdf1-14aea736ed25",
        "cursor": {
          "ref": "6d62c906-19cb-4788-b2ab-86576bba893f",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "ef988c0e-65f5-428c-a300-f80c92a264a2"
        },
        "item": {
          "id": "f243096b-26a2-4010-bdf1-14aea736ed25",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "1ceec012-da68-4a6e-84bc-177d2557563b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45566fb5-f4ef-46de-bac5-be80a01cb250",
        "cursor": {
          "ref": "287795c4-8163-448f-b72b-9bd1f998085f",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "39f04907-3a8a-4adf-a71f-8cae0714e437"
        },
        "item": {
          "id": "45566fb5-f4ef-46de-bac5-be80a01cb250",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5f31abd9-e81b-4ec1-85b3-c597517ac430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899e83cc-712d-4748-8643-fc421737329e",
        "cursor": {
          "ref": "dc421f7d-9e4e-4ef5-a5ed-848fe5cebcf4",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "9c1d3d9d-42b9-4a7f-b045-431e81f0d125"
        },
        "item": {
          "id": "899e83cc-712d-4748-8643-fc421737329e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "1276f31c-1c9a-4c9f-8a1f-2bce84e16fc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8d8bca7-7bfb-421d-ab75-652f3b11c9da",
        "cursor": {
          "ref": "88db5c5b-e088-4171-bce5-375fad937c6c",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "5439fb08-9746-4423-98fa-ee77acf2604d"
        },
        "item": {
          "id": "e8d8bca7-7bfb-421d-ab75-652f3b11c9da",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b399001f-68ff-46a7-b348-d42f6ff9166c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d63b283-8796-4069-b8d4-837813ea0649",
        "cursor": {
          "ref": "3c8ddb87-5289-4064-aa83-252c42b830d8",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "dff3495a-199a-426f-89fa-39742c49b724"
        },
        "item": {
          "id": "6d63b283-8796-4069-b8d4-837813ea0649",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a9873e32-cae0-4e9a-9662-0bf02119b0a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d894bc4-101d-45c0-ac50-b6ef334f219d",
        "cursor": {
          "ref": "eb86bb9b-fee2-4dbf-bdee-3096ef6f1cbd",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "059350c3-767a-465a-b5b2-e9202d607154"
        },
        "item": {
          "id": "1d894bc4-101d-45c0-ac50-b6ef334f219d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "695631da-a83b-42eb-ac8c-cfca36a00736",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617e324e-be6a-494f-854c-5bff2132d9ab",
        "cursor": {
          "ref": "94844ab8-ea7f-40cc-8c65-7bbc0296f507",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "63bf6d51-d54d-430e-a727-688fb38030de"
        },
        "item": {
          "id": "617e324e-be6a-494f-854c-5bff2132d9ab",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "455c273a-31a9-4035-84c0-a80a1f6fb71a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5269d8cb-2f85-4029-a14f-102bfaea52f2",
        "cursor": {
          "ref": "8d3b554f-3e03-4626-8249-3faccf239b72",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "f5236351-079e-4f78-b6ae-03f9aaa84dca"
        },
        "item": {
          "id": "5269d8cb-2f85-4029-a14f-102bfaea52f2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "367552b2-6cfb-4288-b0f9-e04089e9fd23",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe7a3faa-1037-4b40-bc43-64305c9ddbe6",
        "cursor": {
          "ref": "6cc97c04-dee5-45b9-adfd-41a2d0b4f72d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "e8b2c4a7-c15c-4635-ae7f-0a6e263e4122"
        },
        "item": {
          "id": "fe7a3faa-1037-4b40-bc43-64305c9ddbe6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "ffe30dab-6c37-430b-b144-bf756dc151fc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45efa64a-1050-4962-b15c-bd779ee45bc4",
        "cursor": {
          "ref": "15d99bc2-7e5a-4e48-b8f5-9d9e37a7557b",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "f8c463d9-badc-4299-9c49-dc9415248412"
        },
        "item": {
          "id": "45efa64a-1050-4962-b15c-bd779ee45bc4",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "50512887-1eb6-4d68-ae97-f95d4a0975e2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a87f9c3-bfe5-4912-b31d-123ebe24b445",
        "cursor": {
          "ref": "bbdc6c89-1775-4df6-a810-20ac6ae7eb59",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "6a8ab3ca-3ca5-46be-9282-dba74156386e"
        },
        "item": {
          "id": "8a87f9c3-bfe5-4912-b31d-123ebe24b445",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "caaae329-ea64-4266-a57a-260382663692",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbc84a63-cbc4-40f1-8ae5-aac957e7fddc",
        "cursor": {
          "ref": "8cd95305-cc52-4988-92df-1bab2609da0c",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b7ee2787-d042-4a1e-86f9-96b1a9d31c35"
        },
        "item": {
          "id": "fbc84a63-cbc4-40f1-8ae5-aac957e7fddc",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "9a6c3dca-63a7-4cec-81d3-281df4624c0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a870740-3ba5-48c2-9ce4-2bad8db17bce",
        "cursor": {
          "ref": "fc1c30e6-e306-464f-be1c-a493cd40b3d0",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c5b54918-d587-4350-967b-91d725876c53"
        },
        "item": {
          "id": "9a870740-3ba5-48c2-9ce4-2bad8db17bce",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "00ef4bf1-84dc-48cd-8067-84c1ee46ec55",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a0e5675-bf49-493e-9d9c-fcfeaf821252",
        "cursor": {
          "ref": "8c7d1447-8b0d-49b8-807f-e6545f53f9c8",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6b771df8-4910-4b73-9e93-864fb1b46302"
        },
        "item": {
          "id": "4a0e5675-bf49-493e-9d9c-fcfeaf821252",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f9eccc19-f127-4cda-92d9-ad24b37fb3ae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7686259e-9218-468d-9868-e96316c52ebe",
        "cursor": {
          "ref": "561e8422-af2b-4a3c-a9c5-3544058b1b82",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "1c377abe-82d0-42a3-90c7-e4aaee52cd8c"
        },
        "item": {
          "id": "7686259e-9218-468d-9868-e96316c52ebe",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "8528e952-ed34-4f2a-9e6e-5c85c0e521cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f65adab3-fb8b-4634-9607-629d18a8d594",
        "cursor": {
          "ref": "011aa94c-21ff-462d-915a-60c1d4458c17",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "5d7dffca-29a4-41ab-b763-7d633c3a87da"
        },
        "item": {
          "id": "f65adab3-fb8b-4634-9607-629d18a8d594",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "75ef5181-b691-49c3-aed3-0819c9707373",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abb3bcb6-ba2c-44b0-b703-730d4cfdfb8a",
        "cursor": {
          "ref": "db8ba972-feba-4d07-9b10-8f7fc0508a9e",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4b4e39cc-8a4e-4017-a438-a2cf82af9c08"
        },
        "item": {
          "id": "abb3bcb6-ba2c-44b0-b703-730d4cfdfb8a",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "6ec47318-3316-4e91-ac46-f84d0429dfd2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca67b2fc-699a-4c57-8f9e-68e87e09b204",
        "cursor": {
          "ref": "13dde6dc-fbd5-4bc5-a298-0f09d8adeefc",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "dd584d66-429f-4bac-81c6-9883d7374856"
        },
        "item": {
          "id": "ca67b2fc-699a-4c57-8f9e-68e87e09b204",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "77a1ac8c-1506-4846-9e1c-1749c6a3b5d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e4f4e0-f48b-4eba-b406-950ec8f0e1b6",
        "cursor": {
          "ref": "d0c59631-8823-4822-836f-a43cc969601c",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0c9c827e-1007-4a1b-8aa1-a1354db57369"
        },
        "item": {
          "id": "68e4f4e0-f48b-4eba-b406-950ec8f0e1b6",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "25db47ae-30fa-4818-97fa-43efe5c9e070",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e3eb108-4dde-4abd-b558-d51ca0ffdacb",
        "cursor": {
          "ref": "da48649b-f00e-4358-8f01-4248ef81ed2b",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "ceb8102d-f874-48b5-9206-abb87626dc9a"
        },
        "item": {
          "id": "3e3eb108-4dde-4abd-b558-d51ca0ffdacb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "3100d982-6fd2-4fab-934f-ef9ca24b09db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f71562-3da2-442f-ad81-8bc8b3d30b41",
        "cursor": {
          "ref": "eb549d9b-1766-4e52-b0c2-3b26705f288d",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "563004d1-c8a7-4fd7-ab8e-8d2e072d5b10"
        },
        "item": {
          "id": "57f71562-3da2-442f-ad81-8bc8b3d30b41",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6282c99e-e198-4c4c-b54a-a65d9f5612d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d82ef89-58ed-4910-9098-b43a78e6158b",
        "cursor": {
          "ref": "9d95d795-be14-4ad2-b8d8-9afc0d3cffa6",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c0206d67-07b8-4f13-a7e6-4b0bbfe894c9"
        },
        "item": {
          "id": "9d82ef89-58ed-4910-9098-b43a78e6158b",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5db4ee45-5fbf-4dba-af3c-055f62188851",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f062f483-7b18-476e-9958-dcf068f9c261",
        "cursor": {
          "ref": "cbd655fa-8db6-49fd-bbc3-33fe979e346a",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "28d39431-8b4f-4308-8027-689e18e0a0c3"
        },
        "item": {
          "id": "f062f483-7b18-476e-9958-dcf068f9c261",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "d41a57b6-6e04-4f08-86ff-bae0df8f9d1d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30527ef3-dcd4-4512-a483-5a2b13b415da",
        "cursor": {
          "ref": "6153def9-be4f-444a-8d5e-b6896b149336",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "28ccf696-c35d-4673-b6a4-b7ffaa7e33a7"
        },
        "item": {
          "id": "30527ef3-dcd4-4512-a483-5a2b13b415da",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "8958cef5-03f5-45f5-8302-e0b5affbbfe4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eefae989-67b7-476b-8436-12600f979adf",
        "cursor": {
          "ref": "3c1f3d94-446f-4392-b19c-efeba0b238a4",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "87271e9c-01f8-4dc8-9c3b-844994ab4ffd"
        },
        "item": {
          "id": "eefae989-67b7-476b-8436-12600f979adf",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "6ed09ef2-603d-4763-8e2a-a19786de9598",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19b42aa3-b5ab-4722-b874-d1d686f906f4",
        "cursor": {
          "ref": "e06fb035-4850-4c16-af50-959ed9d629cf",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "afecb159-9579-47e0-9900-a21e497fa568"
        },
        "item": {
          "id": "19b42aa3-b5ab-4722-b874-d1d686f906f4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f4d66a85-6618-4524-b72a-530245e6c4e6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfdaafb5-92d0-412e-a2d3-e0f3e2f45f54",
        "cursor": {
          "ref": "4b3a7a25-59b7-4b10-a907-7f6b38b409c3",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "10c76c9e-0319-48d9-b2ef-7ad5181dc3ad"
        },
        "item": {
          "id": "cfdaafb5-92d0-412e-a2d3-e0f3e2f45f54",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bed82373-7c8b-4b99-a153-5c18e7af1f99",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63651860-7205-4a40-a358-cfab4350c95b",
        "cursor": {
          "ref": "8fed0e0e-4591-489c-802d-0ca0f0e3b87b",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "0f2f46a3-8ac7-4b89-9102-0a16f0a543f8"
        },
        "item": {
          "id": "63651860-7205-4a40-a358-cfab4350c95b",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "ef6e9842-1d27-4717-ab4c-53cbc1a48949",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f78aa1-2f5e-49ae-9c53-7f407a850d17",
        "cursor": {
          "ref": "d1bcb8dd-e5df-4a87-acf9-861885b342f0",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "85460edf-9d5d-4441-8a64-53a032c16487"
        },
        "item": {
          "id": "a4f78aa1-2f5e-49ae-9c53-7f407a850d17",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "ca25535e-1a52-4ba2-a800-a22b4bbd9bbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b0cf093-5be2-410d-88d9-d538dc94cee0",
        "cursor": {
          "ref": "51468588-bde6-4d45-a2a2-c8ee9c080059",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "034c021d-fa32-477c-8d65-5f3c4b7a4958"
        },
        "item": {
          "id": "9b0cf093-5be2-410d-88d9-d538dc94cee0",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1c065a72-cc94-4bed-864d-e4b6a3c65ace",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "250f95f3-3341-4e80-9525-fb38506ceb47",
        "cursor": {
          "ref": "11bb7144-f7fd-4abb-b3c9-e6ba1649b6f0",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "08a55757-bfdc-4ef3-91f6-9c02e5f409a1"
        },
        "item": {
          "id": "250f95f3-3341-4e80-9525-fb38506ceb47",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "d92ddff2-9e59-4b3c-b0ce-57f21f775343",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb7391f0-2dd7-44fe-8982-3f88105e6eed",
        "cursor": {
          "ref": "c8a32aae-87f6-4e29-acdc-5416c0c466dd",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "44b98104-f20d-468d-a1c9-81a6b54ab947"
        },
        "item": {
          "id": "bb7391f0-2dd7-44fe-8982-3f88105e6eed",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "e3d18f69-8d67-407c-93ce-3592072f4294",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43b7703e-8576-4bc5-8404-8f5ef6b29fb9",
        "cursor": {
          "ref": "bf219a05-c3d8-4294-8c25-33a1831e2ee4",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "3240946a-8b39-4863-addb-fb48aa919f9f"
        },
        "item": {
          "id": "43b7703e-8576-4bc5-8404-8f5ef6b29fb9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bf62854d-8d52-4172-9982-e973cad075cd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2616c5-94e4-4d66-a13e-0f18319b6016",
        "cursor": {
          "ref": "1f7f4ceb-7ea6-48a2-b4ac-de1c0c2234b9",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "4f0efcf2-3362-48d1-a239-caf379c4a154"
        },
        "item": {
          "id": "9e2616c5-94e4-4d66-a13e-0f18319b6016",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "f7ee1127-574e-477a-a910-a4ce458259f8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64ab47de-7276-4c39-aaa5-71ca19d8a8df",
        "cursor": {
          "ref": "11b33a54-c3c0-44ea-8ae7-cbdea5786267",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "41e932a2-3bb1-4899-9150-add75168a51f"
        },
        "item": {
          "id": "64ab47de-7276-4c39-aaa5-71ca19d8a8df",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "98dca990-c76e-4e37-a564-5457eb78f9bc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b46eba86-29d0-4b1b-a805-db0fdb3716f6",
        "cursor": {
          "ref": "5f04afa4-fe78-4f00-9c1d-1d0e1f660a9e",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "0db1070d-1080-4dc7-a4be-901958925827"
        },
        "item": {
          "id": "b46eba86-29d0-4b1b-a805-db0fdb3716f6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9397176d-139f-45fa-9ed8-098c23f4c6e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4611df84-269b-4dbb-8195-43ce65806965",
        "cursor": {
          "ref": "f39074b3-994a-4e76-9b93-79aff8623e5a",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "97205906-10c9-4fa8-b32a-81849a00fce8"
        },
        "item": {
          "id": "4611df84-269b-4dbb-8195-43ce65806965",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "5b59f180-c82b-4daf-b498-6b7123d0dbac",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7294d676-bcb6-4bb8-bfe9-3c6f804b4910",
        "cursor": {
          "ref": "c1eb154a-3330-4d01-9055-5378dd38aa25",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "139130f6-7174-4d4e-8fac-9f3515c7ed45"
        },
        "item": {
          "id": "7294d676-bcb6-4bb8-bfe9-3c6f804b4910",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "4626544f-cb90-449e-8413-d1d2f6221469",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90b67eba-35f5-4b6f-8057-b1fbc70e99d6",
        "cursor": {
          "ref": "6c092323-de03-4e45-984e-a70593c6fab0",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ce3f8de2-eddb-43e9-8ecd-1226519380a3"
        },
        "item": {
          "id": "90b67eba-35f5-4b6f-8057-b1fbc70e99d6",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e2190616-1432-4c99-a6c4-d28da6153111",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52bb8d67-0cc5-4679-889b-fbcfca2d9f59",
        "cursor": {
          "ref": "5f241017-1fde-45cd-9080-2f8a15422735",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "1faf8218-a96e-47bb-a0a5-4ed5f05c94c8"
        },
        "item": {
          "id": "52bb8d67-0cc5-4679-889b-fbcfca2d9f59",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5c766623-263e-483f-83fe-2dbf56b86b3d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04df8b02-29b7-4519-8c07-81299e0b9a16",
        "cursor": {
          "ref": "2355115d-1a7c-4632-a541-a668d32d1de1",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a687275e-a817-4843-849b-35f63ade585d"
        },
        "item": {
          "id": "04df8b02-29b7-4519-8c07-81299e0b9a16",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "b54e0af4-9b97-41cf-b2ff-37f6eca706f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "996ca9d2-6097-463a-b173-d02be92fb035",
        "cursor": {
          "ref": "9e148456-7bf0-49fd-98d5-f38f8dec9949",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "aac328fe-14bc-4b3f-9e5b-e5f6392ef9ff"
        },
        "item": {
          "id": "996ca9d2-6097-463a-b173-d02be92fb035",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2225e18c-ffd9-4024-8936-3d95b3a98e3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b945a292-d66f-4888-9f1e-7cdbba2fe6be",
        "cursor": {
          "ref": "4332bbe2-b7a1-4d64-b3d7-1543f12710ba",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5e487f42-9e39-4393-bd5a-71baf122aecd"
        },
        "item": {
          "id": "b945a292-d66f-4888-9f1e-7cdbba2fe6be",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7f1651e8-05ea-4a0f-8f28-77e2e05af48d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27a2492a-71c2-4fe9-8c0d-ac63974d03ec",
        "cursor": {
          "ref": "7d83a6a4-e728-4382-b143-24be37e80431",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "fc716e60-42e1-492b-9044-960111da8595"
        },
        "item": {
          "id": "27a2492a-71c2-4fe9-8c0d-ac63974d03ec",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "22e4323e-26f1-46c2-aec1-37803eb0e0a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b818dc8-72c9-4920-9f12-c859d765479a",
        "cursor": {
          "ref": "43330870-09fa-47e9-8d75-1209c52eda04",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "eb4ce1b2-bd9d-45b1-8b2b-37bd9e39e76c"
        },
        "item": {
          "id": "7b818dc8-72c9-4920-9f12-c859d765479a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "4de3fa5a-9daf-4f20-af4a-6cff730058da",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebe36080-3ec0-4180-9060-64f22ffceb23",
        "cursor": {
          "ref": "7106c389-5b89-4829-89c6-3350a6fc9c9e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1386f232-e892-4d8d-98d2-d02c80c1edbc"
        },
        "item": {
          "id": "ebe36080-3ec0-4180-9060-64f22ffceb23",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5c88ba23-9ae5-42da-a622-0257d3e8a46e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a00469e-f281-43b8-a1a8-4380c339176e",
        "cursor": {
          "ref": "945f2b0e-b93c-4562-bab1-7a47b03078f2",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e441b265-ca11-49cd-b733-d96364362b2c"
        },
        "item": {
          "id": "4a00469e-f281-43b8-a1a8-4380c339176e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "a7cd02b6-11af-454c-9b44-eb9be575f69c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 214,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d3c1f0-754c-40a7-9d1d-250be53710b9",
        "cursor": {
          "ref": "cf45644c-0640-4292-aa30-a6545752d2c0",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "d9952f2b-47bd-4f3c-8c63-d30ed55ec7a8"
        },
        "item": {
          "id": "64d3c1f0-754c-40a7-9d1d-250be53710b9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "af90fdc3-9fea-452d-a9a9-277a76e7486a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eabbdfa7-c289-4a85-adde-b857c6bffb29",
        "cursor": {
          "ref": "74f5c3ef-4039-4114-96ce-3e72dca3de19",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "88a9876e-a8fd-41e6-842d-eabc46fdcc5d"
        },
        "item": {
          "id": "eabbdfa7-c289-4a85-adde-b857c6bffb29",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "f61ceda4-2a24-4d48-817f-a428564783d9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922aa0ae-01ba-484f-b3f9-1c73a1fe6987",
        "cursor": {
          "ref": "33dbb9e7-d574-474c-81c5-cba4227e8fdd",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "3748ae61-30f1-414b-a755-0a2fb9ef5873"
        },
        "item": {
          "id": "922aa0ae-01ba-484f-b3f9-1c73a1fe6987",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "16c3b9ff-535b-4019-b4aa-7013de107e2a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f788233-0c4a-46c4-9143-ef3fb7ddde63",
        "cursor": {
          "ref": "14ce4215-d69c-45a5-b554-c70188fad0ec",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "372fec5b-a07b-4793-a8c4-372d5ef4f6c9"
        },
        "item": {
          "id": "2f788233-0c4a-46c4-9143-ef3fb7ddde63",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4320741d-1e81-4661-a4d5-eb5fde5ae562",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0856fa0c-d8e4-4210-94f1-a57544ac6b78",
        "cursor": {
          "ref": "8384d25c-ea80-4aa8-a034-642a2cde3e24",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "c43ad395-9ccc-4e82-b446-6496112e6e85"
        },
        "item": {
          "id": "0856fa0c-d8e4-4210-94f1-a57544ac6b78",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "9f836845-a657-4b8c-8ae2-0d98ca147e80",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3820c871-d86e-4b11-bc5d-88959eb3246e",
        "cursor": {
          "ref": "f5ec0214-27ab-425f-b1c9-a3387b412296",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "d9be5939-f289-4e11-a963-8703b21e59d1"
        },
        "item": {
          "id": "3820c871-d86e-4b11-bc5d-88959eb3246e",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "6aace939-cfdc-46c8-867f-dfd2efe88b1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03591673-4d96-4ec3-8e3d-b129cbcb1155",
        "cursor": {
          "ref": "cafdc411-24eb-4141-922d-6b94f3b6ea34",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "eb741ee2-de61-47c5-872e-9f40a2023f4c"
        },
        "item": {
          "id": "03591673-4d96-4ec3-8e3d-b129cbcb1155",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "a1425dbe-920c-449a-9c8a-c5354e7890e7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 22,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4a1be5-4371-4720-b911-eb130952ec1f",
        "cursor": {
          "ref": "0958b9e3-15b3-48d7-b146-c8000a562e75",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bf69f46e-bb6e-4aa2-9490-0af990804a30"
        },
        "item": {
          "id": "1d4a1be5-4371-4720-b911-eb130952ec1f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "13c1f386-e8e8-4627-9c47-aa7fbdc39260",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d82c388-2eeb-4039-83fd-4ecaa6ed7f59",
        "cursor": {
          "ref": "3ff1f4e0-9c4e-4181-a1a4-335cdfe6f549",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "b1998265-8120-403e-ab19-cab334a5262a"
        },
        "item": {
          "id": "4d82c388-2eeb-4039-83fd-4ecaa6ed7f59",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "b7710a60-f6ab-4daa-9bd6-5680bb640330",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1533432-a0cf-48ad-be79-dcc43fc23853",
        "cursor": {
          "ref": "71974603-82eb-4268-9796-637cce5f296b",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "4d18aeef-bb4f-4ba7-a3c6-8bc1cd063dfc"
        },
        "item": {
          "id": "a1533432-a0cf-48ad-be79-dcc43fc23853",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "c0a2a2b1-349e-4ac2-bc2d-803325fc77ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cab4e8b2-7306-4f2b-a031-91d8ba25e4e0",
        "cursor": {
          "ref": "545b1617-2ae3-4846-a780-9fff02f6890a",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "9fb2d735-c96f-45f6-aa92-a7517114e270"
        },
        "item": {
          "id": "cab4e8b2-7306-4f2b-a031-91d8ba25e4e0",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "74951cd4-efda-40ea-be74-c405561e1c76",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e872b8b-010d-4b9a-bee9-eb00dee74300",
        "cursor": {
          "ref": "fe40cbde-5e36-4208-b2d4-20d2efe8193d",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b983ad2b-d589-465d-872d-cc424bf1bff4"
        },
        "item": {
          "id": "6e872b8b-010d-4b9a-bee9-eb00dee74300",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "637aff15-b5b8-4e1c-af85-f8135000a605",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98b14c3-6e9a-4d1b-973f-934a006dcedf",
        "cursor": {
          "ref": "0b1479fd-bc89-4c51-9e59-2fe5857b5e57",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "1a7d357c-6e18-432f-86e5-9f2f0a91d7c7"
        },
        "item": {
          "id": "e98b14c3-6e9a-4d1b-973f-934a006dcedf",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e4a04b59-a660-40f8-8893-953022bbb90d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e316609f-9e98-4efd-a340-75aaf4de4254",
        "cursor": {
          "ref": "36fa7afd-2060-4e03-9e63-63e5021f972e",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "d98f4914-432b-410a-81fe-5601ed0c6d35"
        },
        "item": {
          "id": "e316609f-9e98-4efd-a340-75aaf4de4254",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "9de7525c-e518-4677-8a6e-b5b85e2fbd2e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeb73be9-706c-4ad4-aa77-381876d0e9db",
        "cursor": {
          "ref": "51b8391b-dda2-4107-bc3c-eca30066f2ee",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "43edd2c7-9e0b-4b1c-ad47-21207d024c58"
        },
        "item": {
          "id": "aeb73be9-706c-4ad4-aa77-381876d0e9db",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "880eff2b-b4f3-4d9b-b4a7-2e3e42d7420d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce7a4589-db7e-4431-91cf-0935b7c4324c",
        "cursor": {
          "ref": "5ec7a1fe-f625-4e2b-b412-037f220c0c3f",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a2e6f151-df11-498e-b39b-22797c5ffb17"
        },
        "item": {
          "id": "ce7a4589-db7e-4431-91cf-0935b7c4324c",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "b64332c6-2063-4d4e-8239-1f93fb449e83",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a45f3818-875e-4fc0-b8f0-0ce7c4a7ac0c",
        "cursor": {
          "ref": "525f9763-20ab-4b48-853c-d42da5dbcc30",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "d679619c-543d-4862-b8c6-ef58b7a67ee9"
        },
        "item": {
          "id": "a45f3818-875e-4fc0-b8f0-0ce7c4a7ac0c",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "c206e0a8-2fa4-4bd6-accf-e997a88972d2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a19302ba-3b48-4cb6-b110-a6839f41494d",
        "cursor": {
          "ref": "623ce17d-95be-4090-a0f6-452cd936f07b",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "d8977eef-2d02-45b9-8fb9-81c927b1071c"
        },
        "item": {
          "id": "a19302ba-3b48-4cb6-b110-a6839f41494d",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "55d02368-4a4e-48d6-be6f-827e32b00a8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f439b195-b8f7-4252-bade-ab763c9c58c2",
        "cursor": {
          "ref": "4972863e-bdc5-4cd9-883f-a1de788ba43e",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5b061f41-6656-4db2-82ec-c55b7579d89f"
        },
        "item": {
          "id": "f439b195-b8f7-4252-bade-ab763c9c58c2",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7596c0a0-f642-4d29-a3df-444c46c179c3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88556de6-16a9-4eaf-a06b-665d1cc3bb28",
        "cursor": {
          "ref": "83163869-d0fe-4951-806f-c33f3c2c418e",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "498ed569-c79a-4b67-9353-0d3e92eaf26f"
        },
        "item": {
          "id": "88556de6-16a9-4eaf-a06b-665d1cc3bb28",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a2910951-eb8b-4c99-bd57-dcac6d299ab8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690d033f-d4b8-47e9-a4c0-83590406b1d6",
        "cursor": {
          "ref": "30f4275d-9bfa-4291-88a9-286b434e1dd6",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b50c45cf-cc07-4904-8d30-96b4aa7e297f"
        },
        "item": {
          "id": "690d033f-d4b8-47e9-a4c0-83590406b1d6",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "a3a7ffe9-8bbe-41b1-9029-0a02b0596015",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f996f9-5c71-46a5-9d2c-5cd3d38b5ab2",
        "cursor": {
          "ref": "e8e42a83-1d1c-4d19-a7c8-202f80d49456",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "910bbd69-8d41-4f01-a51a-fa11ad94f171"
        },
        "item": {
          "id": "a6f996f9-5c71-46a5-9d2c-5cd3d38b5ab2",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b4bd311d-0129-4b65-909a-d725f1f1c050",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d2aa88-7609-46aa-af37-23768fbb2e80",
        "cursor": {
          "ref": "c351f867-49df-4d41-8148-83ef0a8f5196",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "084bd1a4-39fc-4465-85be-3281bcd09b23"
        },
        "item": {
          "id": "47d2aa88-7609-46aa-af37-23768fbb2e80",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "1814d147-f7a2-47d5-b3c4-ce4cac312d00",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1eae902-8e03-4e14-a04b-b71af0bd1f2a",
        "cursor": {
          "ref": "2ce7a1c5-17e6-478b-ba35-9ae0bcc7bf22",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3c94de3b-4b6f-48c9-a5b6-2ed231c6a06c"
        },
        "item": {
          "id": "d1eae902-8e03-4e14-a04b-b71af0bd1f2a",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "90ab8d40-4eaa-44cf-9c44-a5bf2f01b445",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c28aab-2948-4286-851e-7b45fa9d99ee",
        "cursor": {
          "ref": "4ec66c70-2bbc-4e5f-843a-6162e6853973",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "31b6ecbb-ddca-461e-9384-d52a5d4f39f9"
        },
        "item": {
          "id": "61c28aab-2948-4286-851e-7b45fa9d99ee",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c23b780b-4559-4383-8b43-a1479f17ae53",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67ffa253-d18b-4afa-ac4a-414f2e990ad0",
        "cursor": {
          "ref": "6c77da7d-4957-415b-952f-c97c71ad86ca",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "a274fe46-0ea6-4cc0-9e42-6daca3ce61ad"
        },
        "item": {
          "id": "67ffa253-d18b-4afa-ac4a-414f2e990ad0",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "9a4313ad-fdef-41f0-a924-1c9dc502dd0a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfc8af5-a8c0-4e66-8e13-42e65cf4952f",
        "cursor": {
          "ref": "158c9eb6-bbb5-4266-bcdb-872b6e301a33",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "1ab57c00-d716-4c58-aa50-08a088d24250"
        },
        "item": {
          "id": "3cfc8af5-a8c0-4e66-8e13-42e65cf4952f",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "182d0c21-82e9-419e-b7af-63a5281ca81d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f37dc148-be82-4f72-9531-fe075f5ea41b",
        "cursor": {
          "ref": "7058cb21-0149-426e-9447-8f7582c747d9",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2da83de1-eed8-4148-b751-b2ebf7a1a727"
        },
        "item": {
          "id": "f37dc148-be82-4f72-9531-fe075f5ea41b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "89d0e3f9-2f6c-4879-99b6-ab0b851f8ea0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8847dc63-99bc-4e41-8143-6ce9bfadbc27",
        "cursor": {
          "ref": "48159c8b-0da5-4a3a-8553-6ef4a965fd8a",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "0b8b14d1-a67f-4dc0-a767-d48650c9bbb9"
        },
        "item": {
          "id": "8847dc63-99bc-4e41-8143-6ce9bfadbc27",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "28240b2d-0afb-45d3-9050-c8ede99e6ea4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfb0642-6da6-4332-8d39-a51f3fc95257",
        "cursor": {
          "ref": "dcd00418-1f6c-4974-a3ae-7765adfc862e",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "48971055-d07d-4224-9c6f-5915ce021d31"
        },
        "item": {
          "id": "ccfb0642-6da6-4332-8d39-a51f3fc95257",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "4ff8e227-3200-4c1a-91a9-4cd13b417171",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05a44857-1cbf-430a-8548-c060f1f1fb33",
        "cursor": {
          "ref": "3b90e5a3-a0a1-490e-94cb-931428abd696",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "100cf0a1-8bf6-4c6f-8fba-d4900ac24ad2"
        },
        "item": {
          "id": "05a44857-1cbf-430a-8548-c060f1f1fb33",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "73a60152-23f0-4103-a48c-b85d7a45076c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0b753a9-3104-4dec-bb86-6e665e149400",
        "cursor": {
          "ref": "f9243df3-df35-457a-9e2a-040dec3a434b",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "f833a572-7db3-47cd-a9b9-7df0473ccb9a"
        },
        "item": {
          "id": "b0b753a9-3104-4dec-bb86-6e665e149400",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "48ddc000-ecb8-4188-ad16-ff00ec0fce1f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62ad1ef-908b-4e71-abf6-dffb091e4ede",
        "cursor": {
          "ref": "89ce7c2f-65bd-4f41-8409-7a87afd63d6f",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a185f110-0121-47d2-84c2-3ce19ccddd13"
        },
        "item": {
          "id": "e62ad1ef-908b-4e71-abf6-dffb091e4ede",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "da8d3bdb-f3bd-4f73-9bdd-f50130e24998",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ac8f5f5-67a9-4949-a666-5648ea5e7c96",
        "cursor": {
          "ref": "0d35f1ac-7dbc-40ec-abb6-693971e64573",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "1cb44250-7307-44a6-acac-1f3fe5b293cc"
        },
        "item": {
          "id": "9ac8f5f5-67a9-4949-a666-5648ea5e7c96",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "13393d04-f0aa-4fdd-b560-62b7128dbf9c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfa7f54c-609a-444a-a946-efd6057dff5f",
        "cursor": {
          "ref": "9a7cbcde-b2ba-4fbc-9c46-f37d9b30e672",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6be21794-bd50-4a7c-a756-e6576e2e4f99"
        },
        "item": {
          "id": "cfa7f54c-609a-444a-a946-efd6057dff5f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c055bf22-fd42-4ee9-8de5-40f6e8f0f1de",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b36328c-2789-46cc-b701-8b39b50fcd45",
        "cursor": {
          "ref": "58476e5b-9d4d-4bb6-9908-4214a3d62312",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "8ae31526-02b3-4467-a54c-c063f4535b1d"
        },
        "item": {
          "id": "0b36328c-2789-46cc-b701-8b39b50fcd45",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7ad87f3f-327b-473e-8bc4-8a5ec209372f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7918f0ae-5b88-442a-9e98-0b75c4ac208c",
        "cursor": {
          "ref": "feaa9639-5928-421b-b043-7abb4261f802",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "768c2560-0d47-4775-8865-f35b7fccc6f9"
        },
        "item": {
          "id": "7918f0ae-5b88-442a-9e98-0b75c4ac208c",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "a38202b0-bd3a-45e9-9ea9-c82da64736a0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfdaf5a-59ac-4cd1-8331-8b773498b94e",
        "cursor": {
          "ref": "7afe6b22-d7bc-4f04-9177-1bf5481d78cb",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "c0eec0c5-f6c3-4e86-b6a4-f4e7459a7089"
        },
        "item": {
          "id": "7cfdaf5a-59ac-4cd1-8331-8b773498b94e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "604237d0-fc24-4737-81f4-24826da9f539",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 25,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2426e6b-a11a-4649-80c6-458037649ea7",
        "cursor": {
          "ref": "12efc036-69f8-4de7-8704-04001919abae",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1c9c3cc4-a3c6-4e8d-86e1-2f7d9f00fe75"
        },
        "item": {
          "id": "b2426e6b-a11a-4649-80c6-458037649ea7",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cef32a34-773f-4398-bcca-380d5c5726ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d078fcd4-b763-4ae3-b99b-25e37d9bf56e",
        "cursor": {
          "ref": "fed470fd-94f0-4377-99f9-136e715eb185",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b1a4a020-ced8-4776-8b2e-0ed0edc8ada4"
        },
        "item": {
          "id": "d078fcd4-b763-4ae3-b99b-25e37d9bf56e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8c32fa56-1bd5-49fa-8bc3-87c23b1b7436",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e85407-65e0-4019-8af7-21d0a3547672",
        "cursor": {
          "ref": "0fd9e32e-9ff5-4e39-a272-a954871b01f8",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0da8d7f3-3ed6-4936-8619-519b80f705bc"
        },
        "item": {
          "id": "c9e85407-65e0-4019-8af7-21d0a3547672",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "9dfcbdae-fae0-4202-ad07-a59adcffa3f2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a88811fd-6fd3-4b4a-b434-bc85aea07154",
        "cursor": {
          "ref": "3bed983a-94c3-4a1a-80ef-82f550feb387",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ff6447c3-0dcd-450e-9fb2-65f1623dfcd2"
        },
        "item": {
          "id": "a88811fd-6fd3-4b4a-b434-bc85aea07154",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d7d61a43-064a-4774-995d-621804c060f9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "09cee6ec-5ad9-4cd9-866f-3d9ba6003a70",
        "cursor": {
          "ref": "cd940827-4a96-4de9-be96-91fb8673f51f",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "46540186-a958-4198-8f85-f717f6838af4"
        },
        "item": {
          "id": "09cee6ec-5ad9-4cd9-866f-3d9ba6003a70",
          "name": "credentials_verify"
        },
        "response": {
          "id": "2e4bc9d4-2d4d-446a-82aa-0d1583f2c58a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 23,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "56764174-8dd9-44cb-8b57-ccaaaf15fa22",
        "cursor": {
          "ref": "47ea9623-83f8-4707-a5c4-1f5350e5b79e",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ada47046-fc01-40fd-912c-aba8a540c368"
        },
        "item": {
          "id": "56764174-8dd9-44cb-8b57-ccaaaf15fa22",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d758acc1-3e3a-4be2-a026-5b7b199fa7dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "b8b6032c-17d5-4f74-a524-9f5dfef7a69a",
        "cursor": {
          "ref": "e3d84c4f-ef6c-43ec-a975-068c4e856eb0",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "70133261-6787-41b7-9aa6-48a6b939e558"
        },
        "item": {
          "id": "b8b6032c-17d5-4f74-a524-9f5dfef7a69a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cd9a8758-851e-42b0-9588-9bae083dd41b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8b6032c-17d5-4f74-a524-9f5dfef7a69a",
        "cursor": {
          "ref": "e3d84c4f-ef6c-43ec-a975-068c4e856eb0",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "70133261-6787-41b7-9aa6-48a6b939e558"
        },
        "item": {
          "id": "b8b6032c-17d5-4f74-a524-9f5dfef7a69a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "cd9a8758-851e-42b0-9588-9bae083dd41b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80ae63d8-f511-44fa-b27f-62fa31f12299",
        "cursor": {
          "ref": "6f87961b-6d4e-4eef-b3ad-5982d0096fa9",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "2a6a1f0a-489c-42fe-aca6-0efbcd5d386e"
        },
        "item": {
          "id": "80ae63d8-f511-44fa-b27f-62fa31f12299",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "75156dc6-afdb-41d7-873c-ac738157a827",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dadfb51-d641-4b42-9297-58c19c8d5370",
        "cursor": {
          "ref": "70b6cefa-feaf-43b2-88b7-575af64d015f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "01dfc707-95ae-463c-a866-accc5111eaee"
        },
        "item": {
          "id": "3dadfb51-d641-4b42-9297-58c19c8d5370",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "37cffdd6-ae17-4e8f-86ee-3c16a9d0ef47",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 24,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}