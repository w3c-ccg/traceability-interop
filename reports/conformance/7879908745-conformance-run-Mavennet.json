{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "8e8371f7-3b8b-4dca-99ef-1bc3273d541d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "74ae32bb-6cd6-4c01-8102-7bf3e87d2e35",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "348b69f7-2fed-4530-bc12-cc8a3019be5d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "82aed96f-bf2d-43d6-951e-c574b7184b6e"
                }
              }
            ]
          },
          {
            "id": "e9c3fec4-fd66-4d11-8d33-b6ca4ed23106",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cfd02847-fdf0-4787-8fea-20478e1bee28",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "704efa45-6b35-4a9d-aad4-96598f7acc5e"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1d8608d6-d56b-4632-a62c-4e2df8f41338",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "d24f81b8-e6e8-4934-8409-3edcacb07101",
            "name": "Positive Testing",
            "item": [
              {
                "id": "620dc595-13b1-4d0a-9ba9-bf2a5e13da67",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7dd6a150-f8ff-4c15-8002-63d4a20a4dec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "65772c5a-9c31-497f-85fb-316cd6f678c0"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a0e3306d-0c94-4110-9804-251de6a03cff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d721c3a1-4bc9-4444-8bba-4bbb96a77bfc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "43d805b1-c0fc-4fd0-b1ed-d6c4a8bfbf12",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ba8d2280-2085-42e9-bc84-8d8e9c7a99e7"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53f8a5d6-a1dd-4a57-a306-25db66065899",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "eff326ff-6f1b-4b00-8077-675a49983216"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "258c376b-fa94-4d68-a42b-d6e70483df06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "357837fc-449a-4e81-9eb3-fab56e4dc320"
            }
          }
        ]
      },
      {
        "id": "e6b553f2-4aef-47c0-90c1-d62afd1757e5",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b64f6307-b4cf-4f7c-8584-e4372cb8ab97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cf6a2f92-2dbd-4ae7-afc5-a1cb29a0a7e4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "78d68158-b810-40e9-9f47-dd052c26ca6b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75790761-0105-459f-a135-13ae954a6518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6e445826-895a-4b65-a065-8234dc7a0fc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80d87bbe-c737-4333-82fa-60b4bb5771e3",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a0c145-ad2c-43d2-85d5-7b5931408f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1a1999b-7539-46f8-aec9-6c91aff7e603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e830f6d-d80d-432c-adcd-1b70a54c0aec",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39372594-bf85-4114-81b0-d44f9a2cb32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a31e587-1eaa-4d62-ab44-9ce04e88b24b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1ee14938-9fe0-452b-85af-17631d69c1b9",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e8fec6fe-931d-44a3-ab09-871c296ff393",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fff1527-2c24-4a84-b0aa-0068deca8e29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c1a8e3ed-0a9e-45c9-b3aa-8db3c707b567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42b9d75d-adb0-4949-b8d4-36808726748a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "574de6a8-1e64-41a5-ba54-c647782e2e19"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "74f67748-fd35-4576-a920-13b327cbce5b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fea9a05b-f3d6-4fe1-9293-5568f636c335",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b1041da1-3584-483e-8f03-7957d0f630e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "aecce8a3-dd97-4791-9522-243b54b50fc7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0c9dbf0d-0ccb-46a2-89b7-1461be3cfd1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "4c5fb211-347a-4d3b-9ab0-225286c2391b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c90b9650-67cf-4b5b-bed6-72dcdba1b04f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9baf6a78-4ff3-4637-bef8-d6a8b93fef16"
            }
          }
        ]
      },
      {
        "id": "9145b53c-b1ab-45f2-a46d-bfab4642cdf3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "306be086-ece9-4242-8bda-133c7c420b26",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ed6554df-98ab-4ef0-b7ee-03d9f1d9bcb7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8cd27513-e4bd-4f68-8378-c52948e6eb86",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d93caf51-bb4e-467f-b43c-b88a39816b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649ce7e6-effc-45a2-b69d-ba6c568a0648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bd8cfa-cefc-46e1-bee2-7a9ee539fa8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "11c29808-6b21-4ee1-8baa-9e1276b4ff70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcfa59e-ab63-46c9-b1b9-e800ca0edd87",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc23fad6-63ae-4d50-b98b-14f83b2dbdec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f32ce069-b98f-4ce5-aa33-1a953bfda6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24f4421d-0041-47de-8c39-cb90a375f4c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2f814432-217e-48b5-bff0-65805d2f0ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13624954-922f-4264-b409-90e6fea8e4bd",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "745a673e-e897-4ec6-b73b-3dc325993bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b29ce4-958d-455f-ad97-0da007b772ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3e2741-df9c-4d7c-920c-47f3cc9ee062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3dc3da6f-6f4a-4169-b8be-b38499d09d5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d485650-ec37-43a3-9cbe-2c0efa8a3def",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fbf40ee-0f48-4680-9ed9-2d4ef0e23c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af14e427-bb03-4c3b-bcbf-866f904d3b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d297170-d196-4cca-97ab-56095a40bced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "972b7bb5-ef8d-47bc-941b-c5ff97ac69c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38557bb6-0ef7-4b10-86eb-272c51c84598",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b3dc10a-1cfe-46c9-8c50-9669ebd0e964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be2c9c7-b337-4ed3-8277-cf973cf59213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45430893-d0e3-4318-886d-444aa7c67dfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "57b8f1b2-3d20-4f64-b1c9-ce5df3a11e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f22f270-5dc2-4c1f-bbc2-e4760c8ebf8e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7112afbd-258f-4f51-a136-848833ecfc0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb4c07ec-ce25-4cf0-a8f9-de705c659322"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182ecc05-ae51-4664-a41b-8c0fde55eb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "752c8e1f-7348-4d25-bae5-70f198c62499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d57c5eec-cca5-4ddd-8d7f-3d227753098d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4381e96d-a116-4950-a2b2-87f42b3e2703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0366aeb8-086f-4892-8c40-015a34605a99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dad063e-f4c5-4262-9684-630d6d50c9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ebd644dd-12c5-40fe-9af6-3d27c70ad7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978cc272-0e09-4e14-bae7-75f412ec7370",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab5cb947-5eb6-44b8-b5e0-9db606c219a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b78cdcf6-de96-492c-84fd-bbaea3297c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d21a94-ca70-47f6-abd0-b62fde7cf83b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4e8f25e5-c27f-44b5-8873-bb6d56fe2934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "daa1a32d-9b00-40dd-8e58-61fc20ada454",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43f597d-2f34-4492-b689-01fa8c00f5e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406faff8-483f-4c44-bb5a-95a8c28a064b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34ac55c9-f9bf-4e5a-a96a-422a724ba2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a626ecb-b370-4f6e-a595-80080c0bf839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c025146-3d1b-4735-80a3-1a0afe3c7b63",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6a5f7d2-8c16-4a72-85c2-677c6a06bec9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e67a9f75-4823-4150-af1e-6e8555f9384e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99cd2868-1ea6-4487-a465-1d19e25143ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2feaa1bb-e8fb-41a9-be3b-1a94f59b2856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efb174c-074e-46b0-8357-6d83f7204ed8",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66269ceb-2d6c-496a-808a-cf8862217b9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef8f56c6-815d-4aba-b0eb-253803df436f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2af7907a-8f93-48cd-9f55-b8b482efc3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dd977c9-73c7-4083-8f2d-7f24ab435818"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0ff6bc9-453b-49c7-a6c8-0fca2015d25a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a476460-dc12-45b4-87a5-d47027605f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ab4c5d8-00f3-4b25-9a11-8679c1d2969b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188a659f-b6fb-490d-aeb8-eee842a8a194",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86f93b5a-2c6a-4da6-8e4f-ea126ec40c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fd1945e-2f44-456d-9a79-1f6e5c8ecbdd",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5792747d-9a67-416a-af1b-a2748fe06dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9292cc8e-bce6-49fc-b1b0-1c473cf0496f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6febe530-dc04-4ce5-99c1-aa293b460d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf328dbc-f80f-44b6-99f6-3be1170c08e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62bb8d5-32c1-4539-b903-97660a2ad755",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "099bb558-5ff7-4b26-b7c5-c69bd2ce177c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3657e1f-4278-4cdb-9ac6-9abd6791f1fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe3c3539-4117-423f-9e69-087295881ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b5cd3e6c-307b-4f0b-beac-38e74a41fe18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1e8dd20-7f4f-422d-8403-7a290fbe33ce",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc3a393-4f6f-48e0-a29b-a73e4dccd714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cdb13b9-ca87-48a1-b6e7-9a7f8caf24d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fd5a49f-e4fd-45e6-809d-8b8aaf5a6b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a4e4233-dff0-4523-a512-a788d744a2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7905f3-1230-4a05-8e73-bfd3c62bbf74",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a614a0-48a6-41d2-9187-fd04cb9531aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d016659-4547-4740-96d5-2e34763478d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1422aa27-95a1-4b1c-afaf-28bbc8bc5c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7f542228-f9c3-4475-b6c1-a50b06899ff1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fb7288-5b6c-46f5-adbf-0476bcb865c4",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "989870cf-df12-4d4d-bfed-ea9066ec4ff3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e99e56d1-dc42-4709-a23c-9a7b9837e593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee16124b-1dd7-4d4c-9f56-88740bfeeba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b205c9c1-3121-47d1-a5c5-7cbd2cead4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02417ed6-10c2-4970-9f32-9d85f5aa6b55",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe8a4121-c75a-44de-86a2-dac176475589",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3959184d-572b-459f-b35a-536719088ae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55fc7f8-1e38-45dd-9f29-7e150512f2a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e29e285d-a474-4ce4-b37c-d65d0b4b046c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3cc327c-8a8a-4e9e-bf81-480289644552",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6b7a782-4390-4a0c-9dbe-bc46354112e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd54d213-1806-41b8-9f85-e6d6c7b5a7a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8650f9-4acc-4242-a8be-13c606d40ab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb15ade5-106b-4def-a41d-b837d71d8796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9410fd5-7a33-4d8f-b895-8aef2b4b0033",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59eebb94-1155-4455-a2cf-66a8508b6679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56d0db03-4413-4ccb-9fce-38b36da99c44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0554c68-a4ee-4bc3-ac98-ea44f909e367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c89967f2-11f0-4121-b739-a2c4b30e861d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "242395b4-acb3-4637-b54f-a25fd8d61425",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "666ec95c-6f2f-4761-8af8-2941d1eab8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a547923-6bb1-4306-89d8-6127fde053f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d3c657-8982-4012-a27d-a828658cd7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c33685e7-55d0-40dc-8c57-80d2a6b067d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35c7a432-b300-40aa-aada-2961e1b2fc0b",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c9b1e73-0620-41db-bd94-d2b04e28dcba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ed784a-0e1e-4f38-8ad3-fa2242a9cdac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee4acc9-f8ff-4733-ae14-e0d7baefca85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "80245dbf-461e-46c7-b0a6-0058c729e5dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1b8ebf4-a14b-4243-97ea-4037efe74bfa",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d9e439e-e790-4b21-a5c0-103291108221",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c5a6b29-a94c-44fa-b4a2-97ba3cda1290"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8775ef64-2459-464b-9185-812453343689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0c31cc51-0784-4ab7-95d2-3feaf5a1e901"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9248362-0f8c-4958-b52c-cf2193bd90dc",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe9b57ed-66f8-4576-85d0-1d9cb3fdd76b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693d07d2-5f74-42f2-b175-dc0f446c60c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e07a11-70ff-4a4e-b66c-f378ba8f54f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5d815d6-0d09-4725-8898-f196c794e69a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d844515d-754e-41d5-b04e-feb3575017df",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef56c9c4-edac-4bf7-9a41-44bc36a19eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686d8bd9-7251-46b1-b2aa-738889dd7ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe8680ea-1b10-4b1e-b0c0-1db2af96c715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8261736-7a74-45e0-a5e0-6f6e90120f95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efdbd11-33b9-4e73-88dc-55a54a6b9f81",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a026f4b9-3226-4571-8b77-3a6fb379dff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "070af7f0-373c-4aad-ad4b-7a01dc64b0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be419e80-25ce-43ac-b7ec-22fb1b6b5b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d35d678-2723-467b-8d79-df9b26eb1edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf9e42f2-ce75-48f5-bb34-42184ba1862b",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9799204f-0545-40d3-af41-476f645b964e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45c61dfc-96c4-4a63-a802-14eb7052bf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1557f3f-00f4-4534-b9dc-2471a8442ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e5f09a25-210b-4c14-81e3-905db96a6f68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86a73d5-3ab4-4402-9bc2-cf9e7af49b14",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e9ade8-4ff1-4a9c-8dff-afce22ef70ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b7553d7-1e3c-42df-bdd9-968a59e5d49c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a541e6-0377-4d72-91b8-8f685a51f8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98ffecfa-5549-4eea-a6f3-d625e79097c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d424468-0833-4b43-8f76-da94c4b5ca85",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dffa87c6-7cf3-4190-80a7-94beda32258b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc530a6d-bd6d-41ca-bc6d-fad94171955d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422f2458-e892-41c6-975a-6f289252ba2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "98b5c91f-f390-400a-a291-fa3d10ffc864"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64d980be-c35a-4183-9aff-86965d5b3e15",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fe4f749-5d79-4bca-b73a-ff98244807b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afdd9626-c5d7-418b-92c7-cafb360473ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7170d192-c995-4d62-8af1-ff3c8a2ea36f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a252dee6-13a8-4f8b-92c1-4635ee8352ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983bca37-8dc5-4c1e-af38-98def98282fd",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37ae1249-e3dc-4e14-850d-f29487765e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f46b3539-c0c5-4428-a044-2a7831cca6a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c29027-a88e-4901-ab00-cf423f416583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d0c1c5e-f170-410e-8434-256dcbaf1b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa76370-b61c-4f43-855d-1ae8f9e3638e",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3dee0e2-f4d2-4a82-8c71-ead2356d47c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f14153c-17db-4fa9-88cf-a2308537e432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c771f3e-127a-4c44-b646-0e04765cfc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "47939a53-f801-4601-b380-1b32283b6b50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b947f8cb-8a63-4d55-a0d7-8310b7993a50",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b6cfda1-5e12-462e-acb3-c32a301885ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8f5394f-1557-4f11-979a-30bd9cfe9384"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42dc15d4-57da-4902-a8cc-bab7c709c4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "014587fa-7f1a-4cf6-baf7-731d85c3b0bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6581a748-fda1-434c-b3d4-a278d9ab0728",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1b4848-01a4-4143-877a-4fd3ecc947be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebdb47ca-16d1-47b7-8772-a9dae463a939"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0618d9c-2aef-4194-88ea-7954ad4a57ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cd53c67-a908-49cd-8e3a-710dd04abed6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f14ae5-f3a4-4e77-a124-354066533717",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "273770ab-650e-4bb7-b23a-6e1485f8ff6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66d4b2c7-3c96-4ade-b426-d00d63748c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5765fe6-b68c-431d-9f10-f072395b0c5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "545bc91d-1fe0-486d-98fe-60bddc6471ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c766374-55d5-445f-a769-1b792a1aac45",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2803b27-6033-4a18-8b43-ebd9e877a632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4a4358a6-ca77-4490-8a41-86dc84dfbea0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f5b96d-9ea2-4ce2-94e6-7e831551990e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13654ffb-7361-4142-85f8-a80df097563c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e336a924-feb2-48c6-b684-d0e570d0e237",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0cfc796-205e-49b8-b1fb-8dbd7eabd8e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de32dc16-94d4-4cb6-afec-1f7789456594"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fa9b84-d8f4-406c-b2bb-807b68221570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3381386a-a45c-488a-8fee-c96081b0bc24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95129c84-2a90-4e6b-9870-7b78ff08cc20",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f4d4f6-e7a3-4127-8ee7-c56326717ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7116219b-21ad-4e90-a494-2460655619d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35895131-670c-4de4-a7d4-78b13b1b3486",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "601a038d-1c86-4aa5-b1fc-afb532d001fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae40983b-66e3-4736-a145-bbc675cec6e7",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c58919f3-a143-4c00-83ad-2bd852d3967b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e247bcdb-3efb-4fb5-92d2-4ae09c390556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e35d9aeb-caa2-444d-8409-dbaa857c2d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "755c510b-1573-49c9-8b27-8d7497524cf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea17074-1337-47de-b19e-c7a25dca4fa1",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2716e07e-4d2c-4bb0-9434-c7ee4a903bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe1ff4e-b81d-44e5-899f-0995e14c34ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e788a53f-ac85-4197-8e56-51cc63f2e212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0036b04-fb0b-4261-8aeb-18e01d8bf386"
                        }
                      }
                    ]
                  },
                  {
                    "id": "406db1e2-1124-4fbd-bd77-39c0676cb02f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1461cb83-5254-4df0-a814-0af7cf9afb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68968e63-1dbb-4b59-b879-4d2b68026c7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b28bb0b-4527-42a7-9a5a-b82a532fdd61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "230d1d4c-596d-4c54-870e-157689680c86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa7ae52-148c-40fb-9a0f-5b9dda64e688",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33268040-debc-485b-a4e7-a95fd12a9be5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd5f43a-e76a-4973-b154-ba4a7b8f7644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e004e8b-2266-4b89-8d5f-07c3c5b28df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "078331d5-ccb0-46b5-b018-ba8462cf489a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd01f743-24b8-4cc5-a8b7-289bca0d10e7",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47c45c8-206d-4b87-aa27-4d800608d203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b88bc77-78df-40d1-a5e8-35fabe3bc366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9b81bbd-eac5-44ae-8e37-527758a06136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c14944a2-7999-4c50-8dbc-9a4204bb4ff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f819a05a-0256-4d9f-898b-790c7c698db9",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05893449-cb2d-480d-985b-0ac6932c07c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3eb12198-c433-45d7-b50a-154e2db9c513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19619bf5-4d8a-4106-809b-47fa8db7a997",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9bcbf973-1561-4a03-bf1e-1447fbbe7998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b814e0cf-d7ba-4f1b-bdf9-c6335a93327d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fc5e3c2-d7de-4df7-ad8a-47dcdb4494f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23d9883-c731-4ed2-8798-e48848f05685"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508d1e60-13a1-4214-b7f6-0b24a41596ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e26578b0-384d-43d1-b049-74d3e10b4112"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9755c8b4-af16-423f-8d18-32d84426aace",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a9d5eb5-941a-4a43-960c-f7b181a698fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e45e862-501c-4f4d-9440-64edc4b56619"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b5ea0a1-f697-4da9-9bd4-f465a66eaa5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db8f906c-64b6-4789-9b70-2335e641a813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10af3c87-eb63-46e0-b198-643b58ec57a9",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2ed5dc2-4b7d-4a2d-ab0d-9674253ec2e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df772581-142f-4c83-b49a-0bb3387fc886"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6790e4b-ea73-42f7-aac6-dc71ca6eef51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "97529d1a-b157-4667-acc3-dcbcfdf6fc1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65849d7e-d44f-4ccd-bafc-51b0a58241cb",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8615f6d2-be8e-40e5-a98d-6b7415317665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "720b7df6-a90a-4163-b4f7-70477549f464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7270818-dc59-4e1a-b0ee-ae1e8be6b2b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "deff6f84-b4e2-431d-95fd-87faae10c07c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55dedb99-112f-419b-9faa-54dbcbeb43c9",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50efb881-edd2-45dc-ab6a-aac783114e51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f7598ff-490b-4a0e-809d-da3d06cf1cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bfffb2-1ea6-4503-8dc8-d2cbb765135b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "51a14282-c226-4fc1-ad45-28671ae65cf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b06f3f-5d2d-4550-8ff6-c156eb7109bf",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3e0c881-1482-4f9b-af3f-f232fc071f69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc388b43-8426-4deb-9509-4e0745cd5d77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae6eab13-1e6a-4d71-8c5f-608a55033f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "737ac9f3-58ed-4677-a690-cd355797469e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a74e93c-4ab9-4ba5-82ee-c86755d965e4",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7724e391-f8c1-4f7e-9266-f2b0076f42ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2bacc43-6bd3-4b81-8dcd-bcc5a2d9902f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c01a1e-81d8-47e3-b527-d17bf0bfb8aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "d3c4771b-face-478c-b872-57d0eb3bb21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94ff14b-02b7-4f4e-ac88-58946ba6da98",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31638469-8d96-4299-8221-1176b4852813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a151f4-3fa4-4ba0-b073-b0a362b26a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f70f279-5094-44c9-8eb6-9b09b5ee1a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "09b65b52-7627-4a69-8af7-43272c83a23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a189f291-9596-4c5c-9950-7e4c49f1bc0d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f12b7d71-af75-4b59-a08a-1f810a3b0a51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e29dbe44-b754-4958-9dfd-7e3c66fc1e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c8282d8-8105-46cb-8da4-016816fb1f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "66305577-e0a8-4432-907f-744e196c8dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a83c93b7-f052-455a-8dad-e78b9148b184",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce448cc6-6652-481c-86f8-16e2b6fecadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce1177e4-794a-47b0-8ee0-d9183c21b4cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a18f44-f055-4621-b084-fd91a7b52813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7ec60d1-d555-4002-b53e-1293db6dbd08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea706fa4-615d-42ef-8c41-b0e238ded738",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db37cd72-b7d9-4c85-a58f-36384af85058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87de6ca9-bcb5-4179-a635-c1c46f8e7ac7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95f5d37b-b4ba-46f0-9066-9691c63decfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2af4c526-cd27-4be4-bdd0-a9fb10e65d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b08f6a17-70a7-48d3-a792-8985c1288a64",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b2ee8e-4f18-402d-b39c-2ced48eb9862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae63f6e0-edcd-4483-bdb9-801512623779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a12ca5e6-d94b-4b45-8e3b-b85386d0bd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "1fc58ddf-eb6b-403d-8ef9-4ceae196a5f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4d6e32-1e42-41bf-b434-71c45d94efbe",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a018d7b3-aabc-496e-bb66-41390831890c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c073351d-0c68-45b4-b77f-6f89777101f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c22d6f-e64f-4ae5-843b-d15f5c3b83fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c68adcd8-9e03-4b44-a4a3-5b588e1ddc8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9154ee76-3232-4e9f-b584-cb85dc56218f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf2b79c-c718-4b35-9301-09a47ab85bc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ac5fa4a-9c16-4142-a4b3-92c20d3d22b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5da0d608-7ded-4265-83d0-0045d9610b98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "adf81628-68c6-47bf-9684-a4cc99573713"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e22ba21-9c09-4f40-86df-5a2cff4dc407",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75713dd-8c66-44bb-a230-fd9987152ff2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aea5a6c8-749c-4ccf-9015-a396b0e7e1d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeeba8a5-4e67-4371-8f72-5362141ca4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1e4de0e-cc4e-4d64-b74a-08155b40bc6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71aeb444-08fc-4d50-9b53-336a78a8fdfd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f415fa0-61c7-45c2-b4f8-639e29ecd1ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d614890-9a03-4aa7-86dc-4673e9e72155"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b94817-f0cb-4958-b881-39124317e559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "048901cc-f496-46e3-985a-447a59d152d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "526d20cc-8eb7-4796-882c-7bb500bf0984",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a7faa12-b36a-4bc8-8874-f98a6b6c7acd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcdfeef6-db89-49c2-8aee-ee88c37f67e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a3484f-956a-4be0-8ca4-36c2a323a92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4c9c71f-1754-4248-8537-98d47486a800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775e6659-c9de-43f0-bd44-20c7f4f39781",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810c00a3-fc70-4060-a63a-e3e47fe8d0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d662e5f-9dcd-4626-a3e3-dec10cd1f16b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e17b86-e750-43a6-9885-7348f3fba82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "63e97b89-68c4-46fe-a2d3-6bb15fed0d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dcf69a-5bc0-4f8f-9521-d069f61c915c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd2d013-d652-4f89-8da4-8c6030cef9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69dcd65a-d86a-450c-9a39-46407d7c9a71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77f3d1f4-9791-4138-9e42-160443e85944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "83e6f100-43b3-4408-845d-91ea034cd4e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab709bbc-3241-45d3-b8fb-a10758761acf",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9d8119c-4cc6-498f-b5f3-ec26601b91b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0630097-90bd-411b-af72-c0c4ceb4deab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ddb6875-7d15-4515-a74b-26a30ddd0d65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f5cce29-0c3e-4596-bd94-852b554a663a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2acf6b38-bae1-4f76-920b-2f4aa034d23b",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757e3bd4-7d84-4756-808f-aaecdfd16cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4200edd-32e5-4227-9a03-511ff2dc4e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e28b59f2-2b56-4d3e-a504-6754dfa8f06e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abca877c-5720-46f4-bbdf-5e22c9120276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a9d54f6-f5c8-4a02-97dd-10241168937c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f9df4d5-d6dd-4fa1-8c15-1f38080b9115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfc5d09-5340-4d35-9d9f-c997a0693a65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "723c2668-b453-4f60-8105-f6660cb0a638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88260ba1-8c39-4d8d-8bc9-d4e2480ae5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0460f83-e78d-4eec-954a-c58b26fbfd13",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b563206f-c3b2-4d82-bd4b-8f87c388156b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e0fa01-c943-4dd0-8daf-61ecd9cf74cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f37548-254e-466b-b3f2-4bd75fbf573a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc38b92-fac5-4c63-8d80-544cabfa75c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8a65a48-f6cc-463e-9a58-bb672d29c163",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dbaa39f-df8c-4a7d-828c-10e165cc0835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd1ec639-7554-48d2-8c59-92e733785102"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02c581df-cf87-41ac-98ce-8a4b6da19fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "235082cf-90d4-421a-8fd5-d763ad132c56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0fb0de-5a0f-4377-816d-eddb034c9e59",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fee121f8-7d9c-4f77-bf6e-4ceefe40e377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c12cb64-8244-4674-9e26-661148a0578e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e18b972-9d3c-4c16-9bed-8b310fbcf91d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "70549b4c-2fbc-4f9f-a76f-6d9cb46c07ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fced9b-0f12-4ccf-ad04-622afc11b0cc",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3da058a-21cf-47df-9661-c02b79273d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c31ae5c-b6a0-4ba8-8d83-48e66141dcd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "280f6b33-dac0-4858-90bb-b5686ba95bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c3876f7c-5cfa-4a34-bf24-084ad2dbb191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "216dea7d-2cf1-489e-a5f7-b0af8b2932ed",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55b9b0d4-99b5-45ff-989e-6ceb02632f53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "010fa742-3746-4512-a5ee-fb9c5d42dc10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b2309e-8f93-485e-b995-768364118900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90422aca-1ea1-41d6-9663-0f86b003446a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88f27ef3-6c39-452a-afa8-347b9f8dd961",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945e8e05-c70f-4c3e-91df-4c726584c6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe445f0-db34-4e57-8a72-913cfaee993a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ee1f901-2971-4935-9285-76f909e49694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f9cbc9c4-0efb-4b1c-bb09-d20b1a3c1124"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f324009-9df9-4b4d-9321-3e41a01726dc",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7039fce-4b4e-4d34-9036-9bd7be339c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "801b9bd3-f222-4a35-935d-eac9a3973ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6c66aba-4e9c-4774-9c01-5ad93e0c00b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f06147fb-2fc0-4dfd-aca2-6a21ebbcef5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a1bbf4a-1e8f-4890-8286-0a6189213994",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "956924b5-858e-4cf6-a94c-9be47c930f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b85182db-a558-40bd-b423-3bb0ec7e3d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "434939ee-6b64-47d4-be72-df3b3ae1aa84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "16912c22-caa4-4259-a697-8ff4ac8cc3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b497f8-175a-4ed6-8487-1017bd5ad3ee",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f614013e-7145-4f4f-826d-98eed7e95aee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f03c818d-527e-4ad7-89c5-f5938194fdcb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c154dfa-60aa-4506-a44f-b547067f6b07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d7561d47-9de0-409d-b6ae-671ff1c724d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297f867d-9c1e-4162-8cb5-2518d9509c17",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc5b8d8-7b0b-481f-ad0e-efa255273583",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef756a84-89ca-4f95-84f8-998e6f4786e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfb6e385-a4e6-4e87-ac86-3ba47c100cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "108362c3-7dbd-4d31-8e34-5d0c9c37b5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f65bec5-b5ba-4377-bb47-052b35b4dbb8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f498a4b-0de7-4eb5-b74f-3d8e4b4aaeb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ed6b0d5-060c-4c2f-ac62-a838b86aaa84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeddcbd5-51d0-4dcb-b434-75d4ce243de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0df2e72f-7d2a-4ac3-b0cc-5c367ff73015"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a63b935-a7c4-4da9-83ef-0c8fbffb2382",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1343108-1f6b-49ef-8e24-5a123a090d40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c32f2b6a-ec0c-4da4-81ef-b91a490c2347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1a4ffa0-18ab-4e5b-b220-65fa81276f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6bea6c-7c6a-4ab9-8c11-d6a892ba7294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bec755-9f20-4c87-a646-a9e5816db196",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf32f63c-8341-46a2-9a3f-a184a1e85de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66443546-3df1-4f8f-aa53-01070f10b5fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ecd2c98-66fa-431e-910e-48d68d576778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec669f74-c0d7-48b3-9318-787f68e9dfa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fa3918-9c36-49b3-b8c6-95536cc4799f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22f5934b-aa5e-47bb-bd51-07f2eb237f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6452673c-948f-45e4-8f3f-89763638f66c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae73cb06-b7a2-4ffe-af2c-a38ce484983b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "77d75bb9-5599-4157-8ac7-f9d6e91a49ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5675110d-bc86-4ee0-bf0c-f3b7f7ac0432",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa82ab4e-b85f-4505-a5a0-3e794824199b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c664ba4-2d28-40af-bbdc-0ffddb326c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e566e8-bf91-4dcf-a9df-c1f1f426c913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "79bb67a4-b893-4e70-b507-597291c7a2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488ef871-edcd-485e-a53c-aed0dc8972e1",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2353517-10e3-4245-a3d9-517b3322816f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342cb763-5eca-47dc-af96-c5da663d7e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce983931-b890-40bc-8592-f111d0e38f05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5f45c5c-df28-481e-8630-0bf2a06f20f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e23d8dfa-49d7-4dbd-8d38-e36807df66cb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c1fe37-3e85-4203-9a63-304bf2693278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27bb728b-ed6a-4c23-99f1-d6961f458788"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ee31b83-1a46-4f45-a314-de382b4fdf85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dd365b6-4ddc-43e0-a1fb-fc47980b2888"
                        }
                      }
                    ]
                  },
                  {
                    "id": "393507a4-15fb-4936-8c92-9fdebf9e20c2",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c8371fd-8a88-4b8c-a6ba-f75b09841099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9a4ea52-c4dc-4d86-a93c-159603c4403a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f746a97-9ddf-4933-9264-0ff1520cee65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19fcba24-3880-4a5d-92b6-5a156a05250a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "541cd69e-8dc0-491f-a5c2-349a3f8dad2b",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "426c7b3a-8b0f-4b43-abe1-f0432796fa87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e0ee0d-47f4-46e1-9182-e8d4d7eb8aa2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5011148-9649-4f38-862f-f026bf5c9b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fc1238af-096a-45e4-af93-d8f0ef778c7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cac497b2-0067-4778-a0f8-1d20e88b74db",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5ad70f0-32d8-4557-a303-b691622f5212",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8abf33d-c283-48e4-841c-066d5a202f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b64a5c7d-d875-4c53-a5ab-f6b4bcb8778c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca88081c-5fa7-4ca5-a095-cdde8bce0182"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edbfc7e-12ba-4b2e-96d7-7b7a5376040b",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70f6fd51-d295-490c-9bbc-a5417421a74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31f81904-2ae5-45c6-9224-e42c6ebadf32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "531cb855-6437-4515-8200-0d5b38d5adc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b7510c68-9584-460c-ab8e-57222ba260e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d727aa-a9bb-4db9-b618-2d441d259d57",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c039bbc3-53f3-43c2-88e2-f8a723a0942c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf05a5b-2544-4ca5-b524-0ccd46a28eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f02ab4-1532-484f-8ee2-f20a135a691d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "99a1c823-3989-41f8-9472-e24d1af29c43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf2b5aa-9665-4749-b382-19c7be45390e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "293069f7-515c-45bd-b982-e3d0d81951ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3936dfc6-b7fa-4224-b80a-18d49124f673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8ab2ac0-5495-4ed8-8409-1d17b4298894",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ff9c0e9-94e7-4b1a-ad5d-49d25aaecc91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f27b198f-fb8d-422f-899a-39b9e94ea4d3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3c6642f-dc48-4809-a5fb-f054b8242d77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af61c067-3044-46ac-8a5f-5f63463ffc99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d1302a-222e-4969-9eae-3e97e6a57d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "526314a4-2350-4251-b32f-1a546c4f7c8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beecc451-1c8b-4af2-96f4-e0c189343e7c",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f0e9a67-a5fe-4f44-8db5-59391040e840",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1477f197-f09d-4d18-8e4e-a78c0928eb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8c74819-79ac-474d-8062-9995bc6e04d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1380ace0-2339-44ff-8fef-8ac0a405d396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5456a20f-6d4c-4790-8a60-77b8a0114aa6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97cd6f6a-1f08-4707-b384-25f101f7af5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "288b0f51-83fb-4958-9e95-a715859d4465"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60d5da4e-1acd-4579-b64f-e62c7a20ac6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef27a26e-4605-4c26-8389-7f240f3a6fd2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b14a1557-b05f-4077-8497-2ee1c25fb4c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a5a78596-a1cf-4476-807f-b2c84ebf6826",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "025be9fc-23fb-41df-adb1-7d76693fa6ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ff928a4-270e-4280-9dd3-e07d5f07bd23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f94eea7f-d5b2-46bc-b2ee-76ec995fcd9f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1be31939-e8bb-4b5f-b0bb-b6c8e8e63019"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2f1a67dd-9d71-4e2c-a857-833c7f86479a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "836190d9-96e8-4cd6-a37a-2b53e67118e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "19775e81-7fb4-456e-98f9-597bbe438033",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b7deca3-d498-40be-8dd7-3976f6b23ac9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e7184568-80ec-458f-a43e-86abb40d44b6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "32674111-f8c7-4f3b-84f7-fa936dbe6fb9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3d5cde67-ff5c-4ef6-908b-514529092232",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5b0c39f8-bcf3-4061-8e6a-7f3c3b22ce14"
                }
              }
            ]
          },
          {
            "id": "1e9a5ada-8521-42dc-931a-d766d2043cfe",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4ce4cceb-e03e-4044-8471-714a29efa460",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "4fb9dd17-4e4b-40b2-8a0a-c1ba7258eb04",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "656c3ce9-6f73-4d9c-92f2-222eb41849db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "f2c7abf9-6539-4c77-867e-6967e681affc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c1d6083-6219-408e-bb99-5cc2ffc225db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893edd4a-4f04-43df-8c60-166e62b288a4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "60c19684-7f6b-4875-8dee-ce6299a17723",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c9e26180-b478-4376-8dcf-b973365545af",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6e6825b8-0eb9-419c-85e8-a5be5b4cbcd9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bf3f4159-6ff6-4732-b75c-5f775f30e40f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8e8e361a-beab-4a2d-a035-31058471623f"
                    }
                  }
                ]
              },
              {
                "id": "e3e25a34-698d-4307-ac04-c726ec8a830e",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f38a0469-f907-46e5-846d-09ea4b73585a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "68a28a89-2f26-4537-a6ef-52dcdc5d50ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28a261eb-38ac-4044-81a9-71638b10e262",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "b4441204-ad58-4d20-9a17-b09207ecb999"
                    }
                  }
                ]
              },
              {
                "id": "7ef58a17-31b7-42ad-8f52-1f828e184135",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e925d200-ba3f-4545-b5fd-aeed50a157df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "12f0c3fc-2bcd-4af5-b57c-b3726e1bf8d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e2969699-1e1b-4482-a758-cff696c7b61d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "787bf370-c140-4458-b28d-34c51a7b165f"
                    }
                  }
                ]
              },
              {
                "id": "8beb2713-a7e1-48ea-bdaa-75b8885bced9",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3b28928f-195e-4910-8d67-1efc60c77d97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "754c909c-2921-49f7-a1e9-d8debaa77ec0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7be62ad0-3491-4793-9849-81c374dc0454",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "621ca510-d806-42af-8efb-133b2c05a011"
                    }
                  }
                ]
              },
              {
                "id": "b02d5006-60ad-40d0-ad17-d3755502b824",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bcbea38-a471-439e-8188-7b44ce2c385f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f59a9fc0-528d-4020-b1fa-620c8051b869"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6ff18c8e-90e6-4afb-ba0e-69fa694c0c20",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d822ceee-a99d-4d33-a831-eef871a2d1c6"
                    }
                  }
                ]
              },
              {
                "id": "4c45e50d-8d71-4b18-bfc6-36862e38f152",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fe54636-ec41-4802-98bd-7728f840a90d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "350ac300-40bf-4040-a6a8-23fee251d35b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "953087ed-1684-4c16-9ef0-ea0f50c6867d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4bcdea95-0060-4bc5-8db8-cf771c0ea610"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b13b11a6-a6f9-4052-aab6-a82dd09bed2e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eb10cf3e-ad3c-473c-9d4b-272331bfd2c1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e9f727fe-da24-4077-9c0b-d69e3b715885",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f35cdde6-e3bd-4556-9da0-e31fc9bbbff0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "cd688448-68c6-421e-9631-b43be77c8c9a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "27adb9a3-54c0-4803-a09e-b07ad55f0d3c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1d43dd39-9c77-4dd0-98f7-95f903f40ccb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea8fa3db-d76a-4478-a252-f045f0688f29"
            }
          }
        ]
      },
      {
        "id": "bf2d1e91-a8e8-484d-a37b-00a4ffcf69c9",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "95fedb0a-b65f-4b3c-a778-cfe1b81edb3d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd578bbd-8c08-401b-8bc8-38d23cee45a2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "82878293-70f0-4ce0-8f0b-d53d8bdedda8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14dc3728-2e2f-4b05-b846-f8de10d08520",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d20821-ef5c-44b2-9d4f-f04f1e42dcdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cba0a372-75a2-455f-a439-597ef2e7d733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d77220c6-fc5f-4cb0-b2df-4b8a6f240cbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b83c579f-3dfb-4e01-9dd7-655f86cc817f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b373d8d-86e2-409e-bffc-6162057f16a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c9a388a-81f7-45c2-80b1-2f297393bea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8001f00-7165-4c54-bdc9-a72c83b71e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "836ec702-08f5-4643-8d7b-7a19fd6656a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc5cea6-d536-405f-94f3-60e950b55f74",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89697892-f180-465a-ac9d-e3d01039a13d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96db8ee-d9e0-42a6-8dea-b78155bf92cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "babcfe5f-682c-439a-b999-72f9a7238a3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4c75ab-70e8-4b0c-a027-7ddde46297fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae12dcae-a460-4de9-a9ac-f8d487962d59",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "601dff65-6f77-40a6-8ff3-acbb93eddbab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43d13cba-3b6e-40f6-8023-fd3418af5b4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a3a749e-a356-4606-a16a-8ac181342173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a347c4de-2827-4ef7-a0cb-335733876e8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90abc89f-82ce-44fc-9e30-9503ed49df80",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "207dd322-6ff5-4763-8575-9f197cb39aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd8913f6-12e8-4ddb-aa1f-9d255d0d717b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2355d591-b036-4b7d-bee9-f0c9dabc96a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e08047d-49ed-4898-b0e0-91550a702a7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e690e33-1364-4350-a72c-b834db11e7ed",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0338222-3553-4606-a4c2-9b3d1a0f20d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b4fa522-6917-4d85-aeff-42aed9304f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f7aacbe-fa15-4140-b431-b3481214d8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09b772b6-0257-476c-84c7-39849607f71f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98ef124-e6af-48a4-804e-9fd45720beb3",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a20def-4d9e-4fc3-9477-ffc54ef2afae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d50c3758-939c-447e-9709-823f03c19100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e83c1dc-c447-44ea-b954-d280823debb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd21a7bd-3094-445a-9d7e-39340e37db8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c362db-e38d-45e5-93f2-018eb6a2d30d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39161d0e-8540-4165-9ccc-955de60874db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81687d2b-6636-4ae1-afff-ae763ed55888"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2820475-c66f-4964-a619-915a7d31c82f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0e29e576-b5ec-44e1-8dc5-d942160b1fc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1f4228a-ace5-4d10-bffa-91d92577967f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c04e7e-8c00-4070-9e08-5c596da9eed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a7294a-8479-42ac-b945-86cb8b01a144"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937eda46-3711-406d-8d29-bade1c851c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c79e7d7-6cb7-42da-829a-6c0289875e7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b0d225d-fb00-4b1a-bd5e-c8ac0bbb0c37",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7847cf41-20b6-4ca7-a67c-50c12544c002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6d0209b-fb00-4e01-922e-41d894a67e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3cbc98f-be55-488f-88c3-b99e656c09b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b88176d-931e-4b65-b294-864a765af203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a04c37b1-420f-4b82-bdb6-55755712c505",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a3835f-637b-47d0-919a-2b204e298bf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85be9430-0e29-44ed-af19-2e5a84f04f25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16010f7b-3ea0-4dd2-94a0-866a8ca3493b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4668da-eec0-4d6f-9bdb-fb0e14eb59e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d2b87f0-7fa5-49ec-b58c-ac69a68925d5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "295c12d2-72df-44bb-bacf-5cc623add9b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6902c584-be5d-4703-b470-80c87e026015"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4ffec3-364e-44ea-b4b4-f6d0b7507a6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "56477071-3c70-49f6-bf4d-20b6f33640b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "008a881a-2eba-403e-bb61-49efb916100e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdab3e13-3133-43ad-97db-db41675f5aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e52cfb-0251-461f-b7f0-c1fb4faef995"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f983cbf-8291-4f33-9447-e5a4810c260a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c006ff0-6849-4079-83f2-d71b5d663873"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617caf05-9d9d-48bc-80a5-9826b0c4f939",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4444f344-1ff7-42f5-b2d6-620e9021e0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c333fcd7-3321-49be-af58-e44fa8f30587"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fff6d96f-070a-4040-bebc-a1726ac7be14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "81c5aeb7-4242-4260-ba54-07f345d1ce2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf941dd6-4096-4f2c-8671-2ec7ede64dba",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "079f909f-9290-46a2-b7cb-aa69d373d13e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "180d1f8a-7a4c-496f-984c-e226f6adfe3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9320011e-6993-4efe-9221-e773d71a485b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cddbb06-16ab-42bc-9c7a-af66e1e583d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "027f71bf-808f-45f5-aeed-67cb7102804a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56940203-d2ee-4df0-b365-c5622b188b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ede1425-804b-42f9-9899-8297d2871899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1949cf52-97bb-4d5b-9123-f0408ac8c4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f515faf-d9a8-4e58-829e-d3fedb920a4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2e9655-70cf-4100-8439-1b51135525a0",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd3b4a97-9ec6-4549-8dfc-656b1faf95c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac27cb2f-a06e-4e92-bc95-324547b6d036"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb485a2-6046-45e4-951f-f4ca7fc698f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "e47e708b-dfee-459e-a005-18a395c3cc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b61cf3-c606-48b9-9763-fd5e1bee0a64",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d572b55-7339-4b58-bafe-1ce03818a522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efad6b31-0a78-4d5c-ac42-78d7deafaa42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841bfc55-e6fd-4573-92ae-b5ad07d2efaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6d85387-53ef-47a9-ba18-6988945a6c79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505b3d1b-7625-4445-a859-ff08ee257552",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65e03132-f62d-4fa7-b1a9-11e313345989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95d5462a-8692-41a9-9687-fbcf7db1dcf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae9d570-8b5e-42da-b303-f1a4c96579e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f259af4-0cac-48d7-9d73-b89d8f2e4799"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dff3dc3-0b0d-4158-919f-59bd1be9ada3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d223bc5-d9bd-4b08-a204-d07c17aa4a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "397af8ea-90e0-4d43-b2d2-d6789bd10847"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76ac226b-5ce9-42e5-9ab2-874b6e65402a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a261244-cc51-4882-a969-cc0ffa4d9e1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83b59a18-9a3a-451b-9f80-b233cc96c70e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97160f43-2dbc-45d0-a3fd-2a4f6be2007a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8e598e-68cf-4742-8c02-1afba78884ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a2333a-cae1-4466-a086-8a2588ce1aab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d57915e3-676e-453c-bdcb-95e9c6d9e7eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e191f69c-9e73-46f2-a4d6-b9a58f92be9c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dddd4f2-0036-49dd-9cbe-279ca1bf6e4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfbf3711-4b25-4a3a-9816-a0d8510f94da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fb96d6-70b1-4d5a-958f-319851974990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a8a5cac-4913-498f-8bba-2c305305f6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8537570-4f2f-4f67-baca-7475574226f5",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fba038cf-48ae-42c0-adeb-ff5b1c689a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca37289e-5452-4dc1-abe8-78b55b75907b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7366e316-fec4-44d6-9e0e-b7ed39081dba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1861aa6-968b-4a3a-9533-3193653a1f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c34de75-9e98-40e4-aa55-2ffb44c8dc71",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c008d2-c740-4a00-8115-2977f2b6893d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2e2f7ba-ca32-4269-be49-9cbdf78ae315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af9b3960-4f1e-4d5d-b413-e9ff73e846a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8dcb00e-c2ef-4463-99bb-fba55e5c3e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97549d81-5b12-4b12-b245-9af72d4ff9d5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758f10f9-02be-45f0-b2cc-62734242b115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8171cdc6-8f9d-42f4-b0e1-63953e1d1ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1fb437-ae3c-4aa5-b3fc-6746eb3b7dbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "156ec8dc-004e-427b-a908-f0b14a5ce3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6ba15a9-992b-4a95-aced-54a1655a7f24",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a47a800-fd92-4fa4-b400-d6b64c5117af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "599d141c-6e72-491c-8093-765759e41815"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13fbf97a-13ad-4ee3-9bf9-faeadbb93542",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b3fd40b-b125-43cc-9306-3b1a4e785d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5e29d4-9121-4e13-a32d-4f3611bd89af",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "215b534e-7759-4751-8a14-1198c9648f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b4d4793-0759-4c94-9c36-b2b46e8214cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb6a26f4-324c-4321-8ec0-0681e7bf47ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22b26186-e77d-4dca-9090-d68508afe51b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2591508a-085d-4027-8f2a-ba060f1cb995",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd3db98-43e0-4783-a61a-663b8c42534f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83a9c19b-98a1-4e84-9644-a92e2c9d5951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1de0a4d-6582-4e0c-a791-91323fc37d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "582b9d56-3b07-48f2-9e75-3bd5b98394d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e35a8dc6-8248-40ff-832d-836bb631d0eb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8a0532-895a-4dc7-ac8f-2b9b17db3527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5426aa4-ce6a-4bf6-af6d-f443ad683b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f950b2-929e-4692-80d3-82600cb54b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "985a8c99-2b84-4fa7-a116-693d0dbe3ff6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9b493ea-a986-4939-907d-9b8c7d0e3709",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f71dd8e-da7b-41c3-b462-69d465983a42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d3b8106-5ec6-4185-ad3f-e57374991192"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3ca5da-c903-4b8d-b317-b776883a023e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09e67be5-775b-4150-bdae-fa78cd0b4edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091b5ac6-62ea-4d56-9275-14027c6dc709",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cafe9a6-eb46-46ad-b725-8114aab5bcbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "251d2319-8515-4fe9-934e-355376e7b763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f68c2854-f8ba-415c-827b-533b01e7f1c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92305b3a-f501-42e6-bad5-6d0e0cdfe44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d75768d2-0c3f-4ae1-9317-07dc33245544",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66ea1c7f-d898-422d-8d78-715bf6f13edb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc216f9-1a59-4f65-8c9e-7cba12c5c2b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c578ebe-dd3b-46a7-8c02-a2f8e5f5ee6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "098e1752-20fe-4b3f-8235-a6ca4da0cd3d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "91b47e27-c46f-4f75-a552-cedd9e54092b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ab548ba-5c3b-481d-b9c7-d4395b064265",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45ad404a-2505-4071-acec-b9a994c078a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8ecd3133-2201-4990-847e-420006d665e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcafe59d-1bf5-4dd2-b7cc-eabbdc00cb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e36681a4-871c-423b-bee9-93c8bbced9c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f04e636d-4546-4ecd-8dc5-70558e49f837",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b77fec4-d2fd-4fa7-8fde-f1d5b3abc07a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2d5b026d-66dd-496d-8380-faf16d7c6e40",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdcb7a2a-294e-4dbf-892d-97299cf1560f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9751e5a8-3de8-4ffb-a5d3-8197822c6d33",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "84665c04-f94b-4ecc-989a-8e2f094795af"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0f2e9bd1-d9c5-4692-9702-2f15de1db010",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "01b1eaa3-ab5c-4208-9cf0-91a13a90c853"
            }
          }
        ]
      },
      {
        "id": "fb1e4623-798e-4d51-8561-4ea9f14b14a9",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "9736eb6b-0f70-4edf-8905-f1d1207a50d9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d5645e4b-1946-4f88-9a09-d283bc105a7c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "39e84657-4f13-49d3-a266-2cd545a467dd",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaa28b13-6b92-418c-a9db-e1f7b69af62a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846916cb-1da9-4523-823c-36785238cfc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c8291c-6eaf-4dc9-be37-5394c4479c75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "279548c2-98a0-4a3f-ad46-223d8935a811"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ba94bd3-1b57-4ede-951e-201f8437272b",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43195c7e-390f-45d8-8907-5b76ca74cfa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0357a3a1-fbc2-4006-ba19-7c972c693972"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7f3ac29-addb-423c-8861-2086737d3bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "977e48c8-9653-492b-aa40-6f92b988c239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49602e13-22c9-4679-a6bf-42b8aa0c8834",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "050e7ef0-bdf3-4a7b-9521-9c9d8f4b462e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff139772-30ee-4b9c-9a7f-ea3151220894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c58e575-df1f-425b-a1f7-95ded346e87f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3166945-e6dd-439e-85e0-22d12aedd279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed4bc17-9955-4ea8-a2ac-b159896fa882",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac98bd0a-20fc-455c-b9fd-60dd8aafacff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f14297cd-a8a9-40f2-bd02-44b7f6e5d220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "788118a8-5cca-4b42-80be-4274057af6df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d631127-1218-4512-bc6c-ddc69f609f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eebe191-b1fa-4ad2-9d5d-4e000d5c7532",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4d764ef-1c62-41b9-b30a-c9ed6132ae3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1884123e-63b9-48ef-85ed-a9088b2d97de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a22e412-d603-4fbd-b6e9-e66e237d972f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "eac7dae7-c327-4ee1-915c-6bf68632af8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65234457-f1c7-48c1-9398-2ef93b2adaeb",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14515697-a638-482d-bbc0-8bc2d880bd54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37578751-40c8-471a-b78d-909156cd8b29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72651c57-b0c2-431a-be58-bf2bad8bfa6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c8c029d8-ba92-49f0-b4a1-c1975614850f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbd9631-56b0-4516-894e-389cb96d0846",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c3cae6-5e86-46f5-b3ef-2d94ddb6296c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d188e1f-ea85-4ca3-88ef-85cedd6f79a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5731e63-0e38-48d0-b90b-6be68906c12b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "11609d7d-4aed-4f11-8eb9-1e85fd1751fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d391394-748f-4130-800e-245ff6f80be0",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b918daf5-68de-45c5-8ed2-181404488eb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67f1f391-84a5-4764-b624-51dbcc7150c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "360d039c-2809-417f-bcd6-e68ae87f41c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1fda2491-fd5d-4694-bf9d-dc8b1bb51b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced77b1c-067d-4772-84e7-2ffb76b76a6f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea41763-8d23-4bea-a35f-d2f997fd5f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec2f785-08c7-4993-951d-ddae4536d461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ac420c-6515-4c4d-aa2b-5161e878e727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b0f0285c-6139-4891-b420-7cbaafb11202"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2acf2c1-4d7b-4a29-9fd7-c9022a690497",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f608c444-2560-4ade-a67a-f4adf162053f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f765f98e-2ef1-4364-9fd3-aa01e46e69e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4a97762-d5ba-4fbf-856e-81ed73bf8a48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5cc02fe7-5394-449f-b76a-a956deb99d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e643da-a2a6-4ee2-b3bf-4b9f4b8c5a04",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3d7634-0837-47af-9943-4647e35ca31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1dd73b20-ff03-40b7-b35e-0b91c781b4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e13c06-6a85-44e4-8e55-85f3c324389e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c75fdd3b-772f-4e05-a0df-528ecddc7f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1eb9799-b82e-44c6-9e18-fb740574a19a",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "665d60a9-8122-4232-8a91-62ce7fe9e6c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80dbdf51-fcb1-4f8b-a2a0-aa771827b2e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb8be16d-bbb2-428f-b866-3cbc5fd9abcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3bde79f0-5688-44ee-8b53-e1b6e3d5a48f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "017d1291-b6e8-4006-a025-a7e523f6f80b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cbbc0df-d8f9-4fbe-b93f-6014486992ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5d73a83-b611-45fd-b88e-15d1ca08d67e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75032d5-049d-4654-a10e-fa6ec7e104ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c40efccc-b3a3-4254-8aec-6583e9312e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c75c67-06ff-4da7-a96b-6fa79976b3cd",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "edb9cb13-f781-420f-8692-56aa536511bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "292eae9b-fd14-4d10-9005-1047640976ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7c3707f-916e-4390-8fa6-e7318eb82f4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2447049f-2f2f-4d60-9af6-cb671ea70375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9077acc-7c45-4334-84eb-b7335aee2128",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c552b4d-860d-4c63-95cc-27d671b50b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa27616-6b66-454c-a811-b44a6234512b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14501c53-86b2-4c56-8188-a52a6d5b5afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a77b43a6-88a2-41d3-b317-ebba50642f85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "188d6d64-da1f-4d80-a52e-a61dc635a466",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e444e5-3848-468f-b278-e6fce79e98ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ba4193f-4784-4e05-af83-e89ff4088d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b4078d4-2c02-48f5-9ab8-76b9b2b35bc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb81bf24-8145-4625-a5af-ffe063766821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e6f587d-ce06-4fc5-b643-e753880c6d24",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a493a500-b5f3-44a8-a01b-ba2efef9b8da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527f46b7-328e-4e1c-b7fa-e041b0006f73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "970442d0-f7b5-4d94-8df9-4e8f20941d0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "2e202768-d732-430a-bc5f-482594a3aeb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc9a9ad7-22d4-44c9-a088-c5eea00a141a",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62cd228-e9e4-4b76-81c7-574962f253e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e59b9ac-e981-420a-b526-d6afcdc0efa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4379ee48-ab3c-4ab9-9974-6c3b64e8725c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f97af56-b766-4d0c-9d78-83f733dcac6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7b2bfd3-0030-427b-8a8d-df73e6cf4d91",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b85a9f42-ee28-4034-8436-0dc29540a476",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d7601bd-d493-4181-a990-2e81aa1fffb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53284e25-6201-42cd-b854-58e85c1d5e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0c36473-169d-47e5-96a4-cca5aadd60a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d9c9e5f-1ce4-4fac-a1e1-d9b76dbee81b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c170422-6549-442d-95f4-59d7067fa8c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b300e5a7-a21d-4167-9a79-5c4dad89d09e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59fb172-be57-4707-b048-8547b5d15fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aabd5612-eb3e-4899-997e-1c7e137050a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3759e2a7-a962-492b-a0ce-fbc570c45e6b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5491b928-9a85-43cd-88ed-984d4ffab346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee91676-efd3-4bfd-8eb5-aed28a07fa86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74545463-540e-4311-84a3-48f8cb614183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e2bc258f-4d35-4a75-8c99-ceeb023881ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "265b6f37-da92-446a-8428-958f0d318ecf",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af6e75e-cc8b-4c02-a85e-07e7d0aa499a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d0272c6-e8fa-4783-9ab0-14ef35a841d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25c9a0f6-da24-4f3a-a3ab-82f1c31cadbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc89d9aa-56aa-460a-97f5-bccb4a3c58c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2cb7b3a-ba8c-4941-8198-d0963aee81e2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d46b413-d6a2-4e70-8df5-8f1f299ec5a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99dc1ec7-50ea-4847-bfbb-67ad894b740d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba2dcca9-d0ed-414f-9a75-3fde9bad616d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98139cbe-b3e1-4fb8-8d31-6820d6be3954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f0be56-9e00-41aa-aa1c-eef92a276866",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6af672fc-e197-450c-9d3f-89db6a0717b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "527f775d-1d9c-4ca7-a77c-e25ef6c0860d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6beb0d0f-d190-4f82-b374-26b06ede6eec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c23e72b6-0527-4f7b-b044-7ab92afc00f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded10d97-65b7-4ef0-bb59-e731a78170bb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d821ad76-4ecf-4238-95a0-4f8586327319",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "421df1b8-4a64-4844-aa90-88c558f689fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "174427de-5026-4738-a73d-3e49dad38673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd9c454f-fb21-4ad5-890b-1a386a9bce92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e800b856-1331-474f-9adb-39ddc3cbb00d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94e36beb-a2e0-4d96-854f-f038d7579bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c203fd7d-2390-44bd-9768-35a72837aecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7681524-8466-48a3-a29d-1181729a3d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe3491e-9a17-4715-be25-018c79b6c99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aae1208-97c4-4103-b209-da1761fc593e",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7129ecde-f730-4220-8f30-e12b7216d82d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da8247f7-f35f-47e1-abff-fe632d123b3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93e1413c-bec8-4dc4-83b4-216f8664da9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f9b3007-0d2f-4e9f-8081-a33d1cfd8b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "289d19f1-7665-42f5-b590-37fae2cb80ab",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0687b3b8-034a-4489-a1f4-8280b8298cfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f2418c-461a-473b-a548-7f83dca67ab5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0eefc81-b836-4503-a034-35ad5c7eea35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "274bac90-8b34-49c5-9356-b184c063a6e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcad06f-dc80-4bff-b428-0ebd421bc7f6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f19db0-7bd6-4cf6-9c25-18e93795079f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c862040-d8ea-4293-86f7-fc74bd1a6278"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0bc50ce-c54d-4501-9057-9fc49ca2677b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6af1c7e7-35d9-46d4-8a8a-0c71262eaf97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faaf9467-fd03-42f9-98c7-e146b9125700",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7348bbf2-38c4-4262-8387-69f246e0449c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16bb6e3b-2a70-4899-b6ce-18e5d0b2fcb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cb7e0be-eff1-4d3e-b8b5-5b4f73686004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca3111f-99da-4d83-ba1f-73ca5d444049"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1ad90f-2f21-44c1-b095-67401458d636",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01a34575-e11d-49d7-af9e-67dbafcd61a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076be718-378a-4ed9-a33f-5bfab79674e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4abe32e-3828-4cf5-b034-556151d3886e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "06bdaafe-560a-4fee-853f-4556e96238c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6212a88-fb79-4094-9899-9bedaa583e97",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a06427-31c2-4349-8a9e-209442b6a2ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ce3be7-6d06-425c-b8c4-4f42d0a94daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1d6acc-4140-4ede-8964-df1ab739905a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a5367fa-6ff0-4bf6-8f63-30e5ffb27977"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1d2b732-aef3-4841-9aee-f7676f7d3d81",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bd4471d-511e-4ea4-95b7-1af59512f50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb735dd-1982-40f1-b9ae-5f79f5b95287"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75499afe-6ab6-449a-bb67-7262ef631619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3abaf83-1b6a-466b-b353-57bcf57a87ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c82f3f4-8992-4b59-986f-8c6c015d7529",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5617c3cd-d4b3-4640-bd1d-db7459043891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b2cba4c-2caf-4e5b-8885-bed4ef0e9c68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81866f3a-22db-4475-b42d-1466e8fdae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cedf744-0215-48c2-8a50-5da122a7f094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6fbbc3c-018c-4495-87c7-7d28b4f94ef4",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be392507-7169-4bb6-9b2b-bbec927e3d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7eab0419-93f2-494f-8283-1a6269aaaede"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "584b2abc-8e18-445e-b18c-b5c6b9693f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "da8f9944-0cd2-4f86-9825-1588b5da9690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12e97a79-1812-4d2d-87a2-8bf14d6574bb",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be82bbfe-3938-48c2-a340-2754c0a10b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78da81e0-b0a6-4103-a362-2221922e0e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b13e2bcd-8b1e-400f-996c-3c4b809207de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f7f8b8-638a-4f2c-8372-c4a6307e3ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b774321-a795-4b53-b140-95d1833e9e62",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae7ed74-3956-4e25-99ff-f4a94ea3492f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "200cef19-d463-4aab-aa6b-9fcb3656144e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79101845-3253-46df-aa77-3738f8882236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7572c9b-415e-44d5-8d08-46aa42b1204a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a148688b-bab3-4858-9c7a-3d160e778820",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "6b37dddb-e825-4c00-b222-5c2d738cc8d8",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c07666b-3146-4b02-9961-d33db28f12f3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "45d8036c-dc17-4b76-b65a-b0d20aa2f22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "966eefc1-59e4-4ed0-8e89-01210e3a8745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a279a941-b640-4b2d-8b21-c6ddb4807f12"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b68a35f-f439-47fb-82d6-9bd87cf384cb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c45bab00-ed54-44c3-b064-dd1d6790ab1f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7db90fbb-a7d4-4bc1-8767-fc24338143c4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c5d20b48-7184-419a-8b84-1d06414cce9e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "70a8f511-cfd8-47ae-941c-fbc882f9bfca",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7b0c8a02-9210-4e2a-903f-32734c952eb1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "33f8781c-d91a-431c-b508-ea96ea8863e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e0076742-04b4-4fbe-993b-6f170c881299"
            }
          }
        ]
      },
      {
        "id": "bb7a3621-11f5-4536-8fa5-1a71086c49e6",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "57d0b1bc-bf9f-4586-ba9c-c87b7084e222",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7474330a-63c4-4caa-af6a-266a3868207e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "610dd230-a53a-464f-b05c-7b40a6a62e8f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bfa2dc-0d47-4e33-a572-7646df9653cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e42d3f9-2abb-41b9-9a4c-00ed75cb601b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "337edfd9-1d80-49a7-887e-ab2652b83fe6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61529693-d9e3-45de-b2a6-b177dfaab2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc2be8ae-7116-470d-9b0b-ad47f5c3d5f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab340923-eec4-4adf-a9c4-bfc061020a9e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9bf8e66-9d85-4674-ba4b-3bc69d1d916a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41a4f8f4-5b5d-4ceb-9358-b1e7d320b95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef76dca9-d080-428e-a64f-536d509987c9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8145f9-9aa4-42da-b3f3-24bef624ee9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c640bce4-8649-4e42-bcc4-50c6f1a57042"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc79d5f-836b-4b78-b66d-68a8e4d30e56",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f11507df-2432-49e7-9528-4db512611dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba13a841-a621-421e-b296-4bf5dadeab9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb14697-0cbf-49d9-8fbc-245512fe78a6",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2c4903e-4591-4493-92b2-ce704d18e097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4abc2a5-cab6-4d2c-9866-f73047348aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cff9e9e-6918-4006-aacc-a8bdea4803c5",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64deac8d-4f26-4cb8-bea1-3058fe890329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc539835-94e3-4ab3-9482-4527c688d799"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d02bf560-e245-4ed5-a1a5-c7435e7707e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1455f5-9de0-4179-b3a4-462f0fe97e66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3ed6cd-8097-47b9-b9be-8fd097dc5f97",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4db0986d-f9c3-46a9-a23f-6cec71aa0748",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc36bbb2-258f-4c49-8d76-0c839294e179"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f239891-fa4a-459a-8119-3b9d61169284",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5f8d12-9610-4f49-92a3-308c29e7ffda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc57315f-f0bd-4516-affe-ff83ad250473",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "487bc6be-4b20-4120-a484-a975df889f1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c162a973-96e5-41ba-b644-bcb7cf4d1f1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc23907-61e5-4140-8c18-c0a25e1038d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44d2864f-bfba-4045-9828-122f0e41e717"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2a36b63-8abd-4a3e-ac05-86a08e5f8346",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032a8a22-7cbd-4f74-9307-01a7d694c5d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33709b8d-2ccc-491a-8dfc-b4b2cd39a269"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91a76bdf-a49c-4af4-8229-5e2da58e6609",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5ffe99-0aac-4abc-a4a1-4fe927094325"
                        }
                      }
                    ]
                  },
                  {
                    "id": "689ca744-d9eb-4625-9728-e48597b02c63",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de5d0b0-0dfa-49b0-8cc8-5cb8c5f7b101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e340579-8f77-4250-8d44-f4a12bd88dcc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce03887-596a-475a-997f-232a475822d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f700ba99-3090-4214-adb5-f3cadc3204a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa11d0e4-1f8b-458b-b938-0e06565dca1e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b260c6c2-701a-4667-be6c-5bad8539d3d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a151c58-549c-4d0e-b460-1a853f0b3e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6761a88a-83d5-4605-9416-b505e45af2d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d967d053-5907-4769-b381-affe6e311f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75138c4e-ba82-442e-9c0b-5898d46cd8f4",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7982a4-fa71-419c-bccb-5e63bab10ae5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8558ff57-1f53-49a3-95a0-aa80e1fa39f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1749ad-c77e-4087-b973-bf7301fd09d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54bf9827-6a15-4969-843a-12b7efedb1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca65865d-f253-418b-904f-e23b710c2314",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a224c2a-bdd9-42f9-953a-63305674a03b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "368977db-536c-4a7c-a2e1-c2164f492839"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9388ba0b-f230-413c-a82f-0e97a874f050",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bc23b92-2c5f-4098-857a-c0be6e71da03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6297ffee-bab0-4f20-8108-95de5099ab79",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13227407-4c0a-4fbd-ba85-3e2b3ba0d70e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "190a9852-c0dc-42bb-9248-a66840706042"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b44f18-7ccf-4f5d-86a2-2f0dd2e4e7fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51099bdc-e3cb-4a65-a9f8-aa046f37d40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a781ab9-222f-46a2-9e2f-35db9e63a5c2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f36847ff-e464-46cc-a315-1272a85afab6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3cf8491-2a43-4573-a8af-6556b889b9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c871200-7622-4fe3-9ce3-434a47c4f26d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5bd0e56-5827-40ee-b7a0-1a8f1bd66e18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76b6da32-6c21-4295-afee-932e9bb0972f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb14755d-edec-4abb-b6de-984fd8f4e908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd36e74-6d7d-4952-a8c2-b8e42a0b24bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b50613f-0bd0-4a5a-9344-b0c5ce279763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2df19044-44c3-49f6-beb6-4adb6323c705"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf115683-6cbe-4888-b13b-3430270d60bc",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74158c65-1070-40a3-8eea-f216577505bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c546e37e-c414-4e05-a69d-db7c81a5652e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "516e521b-8c39-40af-bbdb-7e19556c14be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47af432c-ddc3-4fa6-815d-ab3a69c20d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2968d07-f22b-4398-b90b-c58722bd5121",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d53b7616-ea3e-48f8-bcbb-da7018acc3e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0337cc3-de4d-4f7a-b12f-82121d0c06dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acf00347-5ca4-497a-9854-a2c6029f9c65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc549c3-d822-4973-9482-c59f555aa678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a26b8d9-8887-42a9-b2e7-726b46133697",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ad4cca7-f8bb-4afe-9a0c-d911ef4afd2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed3c753-d813-4eb3-b2ef-f16df19556e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "895f3c5b-459d-46f1-aebf-5b9cc549897a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2701d31d-4edf-4130-aef4-cbe63bf27b79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df838d17-a12c-46c5-bd5d-4d73b1441020",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e0d08eb-6be5-41e5-bd21-9a60633d468e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6589034c-ead8-4b38-a4ee-96cc9ce0307e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ab5f0a-ff7d-408f-9e78-f3f0b5cfee07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8465acfe-fb3f-466e-bcf6-e2eacd7173c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8fa852f-5bca-4b8e-859a-f5f419367967",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4025e3-baf0-48fa-8d26-c14bf0e3ba82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42a51663-abb7-4a31-933d-5ee75b60b22e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3560ae9-be8d-4aa0-97ab-1901639b08e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a461326-e217-4cbd-967d-fc80d7670342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359c6200-e7f2-4be6-88ae-14a7bc1dda49",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0373cfe5-6e2a-41b2-908c-ec8ef81917d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f1d355e-8635-483c-8010-fcb416363968"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2c7ab8-07a0-49a2-803d-14b25e955e6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a6b7da-220d-4e37-b250-7e3bba5fb5f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d7fab77-971b-43e2-8e25-6d471da39d7a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68aae48c-d4eb-44f8-a4c5-4e7073f89ce5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d73067fa-1de8-4645-bd56-595bdb8c7af4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d595cfaa-8c63-42ab-8833-afabc1adab23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da89fcc-c5b1-46a6-a7ad-db6ad3c3b17a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c0198d-880f-4f48-b122-d3e958973171",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40dc6c2f-563e-40d2-b9a8-932ed87547f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c12b31b-af50-4187-874e-a958552bc153"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08acc57-ec2b-4261-8dcc-c3f07b8ac5fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1a1591-4e02-4bec-a948-56ebd248f0b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fc4c4ea-b7bf-463c-a212-f145fe224723",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6b0f0a5-67b2-43e6-a743-87a0a211889d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a90608f1-1911-43a3-8ffa-b2d1b7e318c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fbef4eb-8012-4193-8e34-97848cc01881",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19b40dde-bee3-493e-b0b2-ee4aac9567e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4665f30-21cd-43f0-858d-d7d4b2eebf67",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "736451f6-dcc9-4dbe-b43c-ca3c6de44ddc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd2c13e5-a757-41dd-bdc4-b7b0ebc312ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d416194-1a21-4f5a-bf02-4d93f5c8177b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1c5d782-a298-4e22-88e4-31605ec5bd6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0067357-0436-40cd-aa58-2df2f01dc7a5",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e11f97-1a7c-4ee6-89a7-c1ddf3696c02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d74996-22b9-42cf-bec8-7a58c4ccd14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "646032d1-1456-41e0-a87e-833c02ec861e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93782630-d284-4d2e-8cb4-3e249d016afe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23327f95-806a-435a-9221-cb46da4f44ed",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3111dc26-51c1-4437-a79b-f4671f7ab1ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ef1258-335c-4b30-8df5-a49166235c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caac3c55-7ad7-4fb4-b99c-6847b4b801b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52e9f725-1848-43a6-994f-a2ea440eeb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29044ac1-ceae-43b2-8f11-0783d100a7bd",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29714e0f-af72-4c17-a527-4e31981996ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d3ff0ca-d357-4979-ab5a-0d4bafaae650"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e4b012d-7fb2-41bf-81ce-6f060a8915a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f01a69c6-47b1-4aae-8e57-630d0e3517d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2f3eddc-7f41-4c3a-b816-3c8db7f16d75",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f06665c-d332-44ac-93f3-8771d4cb7285",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13770e46-87ab-4a49-b054-5cec034541fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52ebfedb-7010-41b9-91ef-9dc0656f198e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "349e78ec-8d34-46f0-bf00-4cce8749b3d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88fc72f-c939-494c-b26b-18cfc2b6b5db",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4706beca-b974-4400-9b24-09c72d96cc88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "64b19034-9a4c-47e1-9391-b3c699ad5ef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c42aa2-0772-4ae0-8ef0-731e52306c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26757769-66ef-48f7-8897-a18acbadc394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd58dd1a-8ad7-4e00-9f55-fc2ecc1968fd",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f16d7be0-97ae-4c78-bbaf-6a933a665ab9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6418376-9eb0-426b-a897-e9be1cde1917"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e02d38-9848-4178-b02c-52610649ed4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3a8f36-199f-4e33-92d0-7bad502ca7c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb45c43c-1735-4547-9e73-97d1da164c27",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf710e8-b758-4b7d-a1f3-38c457eb7f88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d82d2cbf-b127-4915-abd0-37f2e2c9dea5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd782f9a-7652-4b12-b732-43a106a2db13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7f8c178-61b8-4854-86c5-9d0a94420ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57dd5159-506b-4be6-b13d-e4f05390bb4a",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964a8fb2-fdb3-4cc0-ae86-4b6b32a411c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2e5889a-080a-4d29-8954-df33a039fec1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0efa4b55-97be-4467-ad3b-606a6f3d2a85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f614681a-d75e-48f4-833f-9f8ed69f04c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc693eb-d43d-4137-9e89-63c4d1341d48",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48e64c74-4cf7-4249-92c7-2a7cbfcab3b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b445bdc-9f54-4f51-ab35-c2bdefd5c2c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c775306f-c9b1-479f-9978-ae6e8053dba2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40df9551-ec81-4386-849e-cd7509146531"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7741b88-672f-4dce-bf3a-cb1af65e5f43",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9495213f-4585-4ba3-b7f0-6f7593bd6802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "668d07f8-3e4b-48ef-a46a-e16463ac86ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b7bb59-f8cd-4fa4-9a3b-715515afd2a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3fe6ae9-06a1-4196-9552-3b737f90ab40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4d84e4-5fc8-4104-bf89-6556c3776bc3",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dee1d7f-8fa3-4a7e-a653-44e1bfff1b1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e6b0dfb-5863-49aa-8e08-827da6a851f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0ec633-9105-4261-bd13-68bbf7503ddd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ea8a7e0-cbae-46f0-8f6a-5000feb334a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d263575-2057-4192-adc0-7fd9de602599",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e47c92e4-6118-4ff0-8cd8-7fd9ee3f1466",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36402716-1b19-4df0-984a-bb32e47443ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cb860f1-58d7-4919-ae8d-f975b22ccf87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd8bd56-2da4-4f7c-a850-3357522a1ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ae437b3-30f0-4e92-9649-e26665cf1945",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4342394-5c1d-42db-b97e-dd26054bbe57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fa7daf9-d600-40d7-ae00-23257727487c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf38cf66-cd1e-4fc6-a3c5-964c0e358e99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575c4688-a41f-4467-b09f-bb2902a23a62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "386d0987-6c27-4a41-b178-4a551e5f4b54",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153817b5-f752-4722-ba23-e3bc9963ae84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "469548f1-0cf2-496a-9a88-40d51ed42dcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38111271-dc6c-4c30-8236-5021468aa1d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91eb3e64-f901-46f7-bdf1-8b112970a8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b238a2b6-d567-4b48-ba7b-b533d5f1875a",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65e6273e-ffdb-4f40-b94e-660e087d7190",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9d0c53-010e-4857-9593-40531d034c58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f1f48ba-9d06-47ed-a6b9-bf502967afc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a991384a-877c-4931-b065-e8d3814980ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5882ca9-a07a-40fa-8c67-75c3f1df37a9",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ecb0f95-53ab-4b57-a40e-8478c84b012a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ae33495-aa88-44c4-8602-1d4f8eb55599"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88132074-9285-4191-8215-6f0793c395c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac256d2-b284-4b5f-bca2-e88f06af2998"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5e2e8e-25bf-459a-85d5-a3564613e5eb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69cf518a-5e51-4985-b6d4-dfaa573fd746",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a5a275-bbf4-47f2-bd56-a7b2f6d73d21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc031e96-e1e9-43ed-a23a-6ed944321931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "557fa759-e3a9-42c6-8a1f-6b66dc02114e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4218e792-1ff0-482d-9a08-59824e1ad432",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e30da7e-f6d4-4a9c-b1d2-20cbbcaf1f07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5102f9c8-c8c7-4e58-bb42-5a92e498acdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd4c086-7ce7-4362-9572-1229611e2e3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e4b0f72-5897-4730-b074-988df9dd7187"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda2fe35-0287-409b-b1ef-182e7c302c1d",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56e34554-43f0-4de0-9c1e-a5196a16074c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "895ef635-8398-4415-a7f4-fe37ee93b15b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f35f45-1692-4a93-9bdc-551902968ff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57b9d9a-c3bd-48e8-a841-9432edfbcb09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adb061b7-5112-42cc-a0d7-68fbc454868d",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53776245-3855-45be-8195-3d6b81479093",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c29365a8-55f9-41a4-88e7-1eb92a097cf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94b11673-a703-4d32-929e-979db5132b72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6a45c59-445c-43cc-bae7-948bc6237aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12eed228-2c1b-4ca5-a4f6-9df9e081e4a6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5999d87-b59a-4649-af8e-cad6aedeb3c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9528ecaa-d68d-4a8c-bc6c-99b910756a6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c640cd94-ae87-4ef5-a0f9-f24083dcd8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6190d213-4516-4e5b-a51b-bb438d544eec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45337cce-a7e5-42e7-bb9c-a7bc02fd1b91",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "243a13cc-7ed4-4859-b6e6-f57c4937b0ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2cd4035-66f3-4ed8-84fd-85157b80e6ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74cbef86-8157-4118-a20e-0eee15416257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d7df6f1-65ae-48cf-803c-9b2204784497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee6b7b8-8e4c-459d-b5b3-0d5dec46cb59",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39fe8c1f-a7ec-40ae-a1e6-661c483e7889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08afcf86-a744-45bf-a2e2-8a08deb8e470"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9db4f83-08b7-4242-b816-42aa92557fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1f2954d-a360-4950-ac9c-e051a933e89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "001fa2aa-47ff-4a73-906e-65aaa55db127",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde2e740-1ddc-4a27-bbe9-22a3ae972a2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31320773-f27b-4e16-853e-d8392083474a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3586e0f9-0283-4b29-a384-53ec618d1953",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b12e9023-8efa-4267-89a5-0bf9d4e5cbfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb0b22e4-0dac-4a6f-9ea5-080f2c16448d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef783ee-a06b-4d8f-8516-3f6e013f1435",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a00ec9-a642-483d-992c-5f4c40627a9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a565f0b-7531-46be-a2cd-70895b9eef31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "978c9435-36f1-43af-a400-3831b7143f17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03861c96-4b11-465a-9b6c-4cd7af64ab81",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db1b8439-a558-4490-a6c5-9ec5a910a9ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2268825c-429b-4f98-9f3b-61834975fdae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a7f9c8b-f33b-4d1a-931e-8513866355d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c958333-9e06-41b4-ad0f-6887b1f6e104"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc0c045a-8577-4031-951b-c16857282793",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c132dd6-a051-43fe-92fd-dc82221944f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380a2fe5-0230-43e8-86d2-8033a44b2e8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40d56873-2e93-45d5-a0d2-cc58232d1f24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "822b0bb0-196c-434a-ad79-2dc49eb6d43b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff129a8-fe7e-4aef-b0f5-1d27ba0c565f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a81b0f-9be1-4b79-9f6a-c0ac663fbc02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02eba47e-ade8-4e2d-a1dc-6b546fff5e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3b2cabc-3a68-4277-9ebb-4e3065b30124",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21768c8d-21e5-42c6-ad68-7c1085338ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77d23789-6ba5-487b-aeac-7fce4b92513b",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a65a90d3-72fa-46c6-8f4d-67ae5156773a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c950350a-be5d-4e26-a9db-c2fce718c5aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baa79fd3-13d2-4fd9-803f-4e5daa0f9a73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60e97961-51e9-43b6-897c-5bb4c9df5a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a245785-6f9b-403a-aee4-567cd8ec3c1e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efeb871a-95c4-4347-9b83-57074ae704e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0b009a3-190a-458c-a8b5-04fa6b96c566"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79ce4791-98bb-431a-b0e8-6a2cbe78cf8d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81bd9360-0a4f-41df-b050-41b00eccf157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d37f91e-047c-4e40-9a72-94efc79fe9de",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22dd6b1-e22f-4686-a173-bae57bf2e965",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "281c6e4b-ae9d-4a23-b463-817b1bb4cf21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a65f36e-ec0c-4ea2-a10d-3fcf740e5c36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91bb01bd-5eff-40b8-9566-cb0d088e5c61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe71fe63-43b3-48fb-8275-0001f14665cf",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8918e429-5d48-4668-b551-a9b0b61bd15e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0825079-147e-4a73-a792-88b838faaaed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "934b228d-2e85-4d33-b6b7-08d764163938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3087f612-4440-4831-9109-d76972de11e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdf9a7f-7cb7-46e2-94c3-6f9c660de032",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13199c1c-c927-40c2-9c9f-c87755f559c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "925342fb-95ce-4b1b-8200-6b19c0ad3d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f233f430-de75-4d7a-ab82-06eee5a82b56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a98171d8-2b12-4041-84cb-0210b1b49db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac823e1-6eea-4a1a-8f8a-61a9e74dcc02",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "165271be-7af5-4bf4-a730-ed4182077c3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7459eb-3e19-4542-be5f-96b323731a7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3c4746-63f3-4988-b131-af66275415f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d187f51e-1f35-4f7c-a9ed-0dda808744ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c456751-8322-469b-9bc2-3f9b64cfbcc5",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fae522c-e493-44b5-8fc3-fdaf40461f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "149c5245-e612-4304-b6e6-8da3f9c2ec48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bddc5977-3405-42d8-9a60-d1d715f7a96a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd2e6d6-e4d4-4618-8b01-ef455da98157"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23ccefe8-7858-43d9-9daf-475bdaad84c6",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68410542-c868-4461-9961-08edefe29210",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92255eb-fee9-4de8-9e34-a626dd380e6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c688ae2-61fc-4ded-b9a6-7a45f74d87a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cab7355-0e46-407e-ab18-ac433ff74cae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed57160-a727-4414-a2ad-702172e0ffbe",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3007f7a-ed2e-4ec9-8945-8c587fe8b4a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4dfe476-a01f-4421-b0db-d06620aa51f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a352f3-d048-4cbd-9a2a-ec1cc76934f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1c5a556-f27f-4180-97be-b0d13fe57497"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97cc173-aa49-4c0d-becc-b5e82c3bd10c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51474844-6be0-4b7c-a814-eed6302ac06b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72e8167c-2b94-4eb4-88e1-704bb1434d68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6546437-15d1-4a9e-9034-1ab297ee5eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d80114b-d316-456f-af70-d8a8249f4f32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "776892f6-7dcb-4987-aa1a-3620ea607a4a",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79a5d8bf-81f9-4664-8584-fb6de4e20642",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e6c17e-f026-4ebf-b2b7-e9e8392f4455"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "396fa578-76c9-45e4-b7b6-724155fde61b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03460e93-a8ea-4bbf-885f-dea14da7e106"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4767b3-0bdd-4016-b28a-4561767a016e",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4f8c45-8177-4c0d-b014-5c0ced5bd042",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51f5d313-27ee-4612-ae5b-542bbdb168ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31cbf887-d166-47af-b363-493f8eb8951f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f719ad3b-053b-4fcd-9539-418f44bcf86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eadb4cc-b6e0-4c22-ac71-14d5bf7d636c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd1ace2a-68e6-459b-acc2-ca63d9125fa9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "484c289e-f5e3-489f-b9b3-bc7d58f6bf49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "241022f4-cdf1-4029-b5d3-b4a6df89220f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fff633a5-86a6-40f2-aeae-5d2f248244f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ffebb3-6b7b-4e01-8861-918532511219",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82335cd8-a962-42d5-af03-f230b01770f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4b7243c-9ce7-4e6e-a4b6-8c10e0853813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd6ef993-1901-4f82-b8ec-7c301d972bd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9380ec64-5d0e-4ae6-915b-2a308abf3795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5977e8c-a04d-4d79-8090-41d4dfa244c1",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5fb3f55-0a91-43c2-aa1b-35ca5e64a0b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "699280ad-41c8-4d58-960f-4d770dae8a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d08e599-12df-4ef6-b84a-e7e3adf73a46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c80fe548-167a-4aa7-ae74-375c80aae9fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "587f83be-6731-4d29-ba73-a9cb29cf1ad9",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c980cbd4-b93d-4611-b159-86bf97ab998c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71a60c18-ba95-4cbf-aaa4-bf6fb84866fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48b0d8a-f584-4aad-a023-6f97a18b16a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "670d6ec1-78f2-4baf-9998-390e37242eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f37fa89-c9a5-495f-b8f5-d7654142002c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69b8da25-f99b-4e4d-8382-2aa4db918fdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb058200-3042-4233-8f4a-37f024ec1d4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "768cf9d4-98c6-4c1e-a7b1-53e47b606d61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0ac1b62-1f46-466e-b7b1-813a10fce1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43a5765-346c-4ec8-8db0-132416f316ae",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663b0884-62ce-447b-bc73-e677e3e27eff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46fcde22-6da1-44e4-b6a3-98317e8b200c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d520612-3694-4229-9423-95f49c674e65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46f332d-4211-4aed-8af7-39997f9d29ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc418141-55c5-47e9-923f-cbbafe8090d4",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15fb4fed-e5f2-4181-ab2a-16c7d91b8d07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13b70ff2-94dc-475f-8a82-ec049572b137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f05358-0ea3-48c9-b768-139e0f670bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2e5d7a-9f90-4243-b9fe-39c1edfcd9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98727e6d-1b17-4608-af04-e407ff29259b",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b07ad29a-138c-44c0-9c74-57a3a7f719ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f4bd37-f950-45b2-8aeb-78697ffa8831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "276067bc-4caa-4d92-aee2-1ed8488c3caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c1edd0f-3ea5-472d-97b7-ba5ab548f586"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059c4fe2-be74-4212-bccf-8c660e0a0571",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d9cb848-366a-46b1-88e3-39aef4e224cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c84c1a3-69f3-4726-86cc-44d652d15d9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75acb023-2bfb-4118-8afd-a47d636a5add",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05daeda3-0d82-4357-bb81-49ecb6659edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee366ca-e21f-43ee-82e3-b88d83f33803",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bc8b12-c73c-42f1-86dd-41637c7b9da7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ca7ee5d-ac67-47dd-9538-bfbad79d4299"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c623bdb4-eaa4-4e54-9a3b-b320dabc02f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0f53a3f-490d-4a04-b656-3d0f7e0aecb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6cd954-690e-45d3-ad26-1dbaedb7562a",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39079e0-b682-487c-9937-82bbd91cf5ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b1b51c9-5d86-4933-8cf4-cf37b9221e68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b55fb0b-1345-4991-91b4-49061364c9ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f3b7566-0103-4642-bc9b-a94dcceaec0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "957c07f0-7abb-4d1a-a15c-a12f7dacaccc",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbf673b-bb62-4ccc-87be-198caef2ef3f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e294783a-a84d-4b97-83bd-4ae8e8174950"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06666a4-e883-486c-8e31-692e9aead2e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3754f4e8-2133-47b2-87be-96b70bf84549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d0190d6-51d6-42b2-9340-d44683b32aa7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ca37975-5ad0-443a-9c30-b4c406fa7026",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c6acf718-f827-40cc-86d1-c9167bee8130"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbdfd3fa-e270-44e3-bc49-bfada44cfd35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd1c93b-332c-45f8-8841-11fc0a60c42d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c48e81-32f2-46fd-93df-1799d367eff0",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016f0e31-deff-4fc3-a739-9563a502c8a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d34df50c-04c9-4291-b1d6-1f2c021f5a0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0faa0988-644f-4b49-b544-9367ac81eb5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6f6ccef-9aa2-44e7-a6d2-3fa28c92fc59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b254793f-f812-45b9-adb0-35888989da49",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b9e02e5-048d-4937-8fab-bdb512a49f0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "393984cc-acc0-42a2-aa8f-55d499e56ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62cce88-8936-43ef-ac05-6db9c2f512ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73de25c-65fe-4263-a9db-98b6bbe2168f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "651d0617-7460-413b-971f-d915b8201fd8",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72964c21-9a12-45e9-85a0-35ec33a1b8b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f38a8a1f-a0e3-4300-9540-fcc92a04b3ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be3f0ae5-6bd8-43eb-ad65-2030f103ac48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e46c5612-e769-4dfc-8f92-3c421c5c6fda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1666da57-c97e-48b2-8050-c4c792d3b55c",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fe14e72-5ed2-4b45-8cf8-4da93d06bd3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "297fbe6d-ec6d-4b21-9317-bc50c2e7bf73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "014ec512-ac64-4e69-93fd-c449fc582db3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51b060f0-c3f9-4fe6-93ca-d4dd5d82c501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab78206-c914-42d9-9c60-521b908d199b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594b7fbe-8dac-46e3-973b-c4bba847c7a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "872c25a0-4547-4635-9c81-c61a1314686c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2298d097-0a49-4cf5-9d7f-8e42a18f45a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0c8c418-3548-4493-9267-b59a8e5b133f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "459636dc-da5a-474c-b2a1-71a0aad29b57",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0976fe77-2f16-46cb-8038-db265fa13853",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5546d08-cd62-481e-bedd-fdb535d48597"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59757488-8f40-49bf-a2e0-a5ebe2bed88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89661e9c-cab7-497c-bb7d-73da9c2877a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cb6907e-a9d8-450a-abe3-342f2697a304",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d056e7b-3489-4909-a101-278a25722899",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a212237-515c-4e5d-a041-1c33521c30f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dda2fb2-6769-4312-a85a-536c45fcb22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "737d2f3f-8229-4aed-a68c-3916f0bcf965"
                        }
                      }
                    ]
                  },
                  {
                    "id": "366ae027-c649-4bb5-96ad-655f1e4328e4",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8eadaa-4a14-4b8a-be69-5d2ca3e56446",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "419b8a29-8beb-4136-a963-a3aa012201ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6638d14-42ba-442d-89f4-3ab6b83c4da6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e96be4a5-3fc0-4b5f-91ac-d920439619eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d761d8e1-0c94-4fe4-90e3-53a9d6b3f013",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41ea2a98-f498-4d5a-9f6e-55b40318f123",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94595e81-2a9e-4dab-9e84-76da00c6b5c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f83d091-8752-47cb-bd49-e718558d69d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "459d73c2-739a-4e51-aea9-992416ff7bef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd76c1a8-a717-4f7e-b549-2b6c3de8c11c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4cd4e5-f71e-4a84-8b5c-9512ab792195",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e294d9-e8ea-428e-b0fc-e4c0488a0d10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4229a3a-4c75-4739-8b27-acb55d02c154",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ead833e-5fe1-4c67-8ab2-8ac6bacd0a8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeb1b26d-4170-487f-b20a-3eb24d7e0a3c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c18cc2b-bdda-4278-a81f-46b7e2a9e5d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f433af4d-1973-405b-8f2b-392dfb02c07a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbfdf4a5-5c3d-452e-bcef-fdece012bcc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e687d445-b047-4732-a1d0-a161cce42d2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0efe1b5-968d-41d7-ab66-23eb7c9e8a0b",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0e2257-43be-4f93-af9e-ae067f18e516",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dbff17bc-5e07-40c4-87fa-fedd7bedbf8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "213834f6-b077-4cb9-8bc2-01112552dc64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5ae8114-52aa-456d-ac22-4f1223e1dcc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad6e6fa-5b97-4c77-9a22-06b69ecd7309",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1814a700-a5f5-49b1-9314-f3d1c35ebd03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a76b19d-9870-4099-b82c-311d0bb01cd8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "075a7806-0dbc-4ae4-8da5-5eb8f4f1810a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbdaff49-543b-421e-9438-71f5dd06f821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f735aabb-aedd-4436-b767-13bf152544d5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64df03c0-a8a4-48b0-a2be-6bb07011bf6c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1448af0c-dc7d-4dbe-bc4b-d6982e8aa73d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab82738-3195-4153-a384-5a02edcbb070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "107fe678-292a-40b8-968e-b4a7aff3ca95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6a11d42-a7a8-4f10-943a-e774e8dfeef4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70e36d61-edd8-4774-8224-74ac36e8a460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a97e36-d586-4bc1-98cf-05b3aeda6a16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89476664-6e5c-4600-9ab7-8f18b1a9bd80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26984293-977f-435e-a1e8-7a470879ad90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d27ad5-185c-4054-834b-d131a7a4c3d8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c708b2d5-18d5-4f75-a0d6-031652c4bc88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37f9dc00-69b1-4626-84c4-58fb0d99a01b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cc52be-6c19-4f2f-94dd-0a56675cb3b7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f895b8f7-3c91-4897-a601-b08c33a33c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "443684bb-1f24-4372-9f93-02c2d60d9b78",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b427cf8f-2a81-415f-878b-660da47b5b60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b768dcd8-176d-4a58-b508-c9989304a612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02d2d4ea-05fd-4dc0-ab90-57378a9f65cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56577d19-0a0a-4d6b-8ecf-ad9101235273"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e8f0ed5-43fa-4628-b1ef-bffa175223f3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4dd40dc3-e945-475d-b400-d5b96445d1e2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "08fb349d-9b78-4b0c-8779-b0cf24e366c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d20920fd-8853-4270-8c8d-446299cae2ba"
                    }
                  }
                ]
              },
              {
                "id": "2c6aa0d7-f8b4-4317-8b78-6fb885b9db13",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "971557c8-ef7d-4337-88cb-2544300ab329",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b901ab6e-aa4a-47f3-a02b-df646f902a39",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a8c1e664-fdb9-4776-88ff-3966b707641c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df19be92-4c64-4cf8-8f3c-3387bfd7357f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "230887ab-114f-4e18-b4d7-4b37db9c472a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5d151166-4080-427c-a1e9-7aed251d0a04",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "883d1e4d-ee85-4baf-9fd7-73738abc2516"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4773825a-57dc-4c6e-9743-41cbcd9f2176",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "20beb6bf-9fa0-4b64-9f6f-dfde8e6af180"
                    }
                  }
                ]
              },
              {
                "id": "0e0dd323-846b-4396-a7b9-b2b4f12574e8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "2cc361dd-0209-4e7c-bffe-5d51306d084f",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d3b3880-49f7-48da-8663-e7bb378fa81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "0c1c76b8-b956-43a2-b459-093528e36d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91f31f61-6b49-462b-a7fa-c79858520f8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b945d9b-7bae-4952-8132-f3bf7eed8d56"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6c527868-b569-40b0-9aca-037332cd9fef",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2909180b-e04b-4fe9-be40-848919c29044",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9bdaab26-7c12-4603-8263-9995eec52121",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "397c6c45-35d8-4add-8c86-9b5f945eb3b8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d04cd021-0a6a-420c-8cc3-1acd8d81d681",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e2d47c2d-6b95-4bc3-8450-deafb060e361"
                    }
                  }
                ]
              },
              {
                "id": "071c130d-f155-4ae6-8d13-1d865bfe10b7",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dbd1110a-77fc-470d-8123-61a525c7a623",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d7f6eade-d89e-4e97-a728-17fd614bc5f7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5962035f-4e0b-4ed1-a9b5-996265cb69fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bd5e11f8-19ba-4500-83e1-55bd50ee7201"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81e4cd78-5040-49e7-b954-e50610a0426d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "cf416b21-f2c9-4982-9493-0b95b5f47c72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a211fcf4-c2a6-401e-aea9-a1514d99f437",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b8cc12e-5e0c-4315-803b-c788df6da680"
            }
          }
        ]
      },
      {
        "id": "60a9cbd2-10b2-4f6b-b8c1-c279c40aa63a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "cc4b7aa4-9816-439f-960b-89ca8cfe54d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "33f309bc-4644-4fa5-bfbb-68a33c9f69df",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "42ac992a-4d88-456b-849d-c27c35968957",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb11151b-d6ec-4d96-9f09-c83f46694b31",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "702198a1-50ba-4147-81dd-576e97426034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2ace82-3718-4976-bc5b-cfc63c769e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dc3366a2-49ea-4233-abd0-92bf39a0aafe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22d93a97-5109-4254-bef0-5e165f86fb84",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "687fdb9c-7213-482c-8570-82a693f43752"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0c8b532-7e53-409d-b0bb-e089c5b0c64b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3129bbaa-0b45-4ca4-9212-0942779462a6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c6b515b-6003-4699-a67b-abd78710cc49",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "12091652-66bf-4cd9-8b74-fbc7046f014d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8dc8f446-90de-43a4-a5f4-acc4f96a1c51",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "87eb14a9-2bd8-4af8-85b8-68db31f549d2"
            }
          }
        ]
      },
      {
        "id": "45877881-428b-4f82-9617-ff1b463abcce",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "aa984192-0ae4-4be8-818e-f125ca1f22ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e094c86-f929-4af1-8e47-2c0d489b0d8f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52635706-3ed7-4652-a43e-fcaa8aeda7f8",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc14863b-566b-4607-abbe-05b87de09749",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9628a18f-2a6b-4d8f-93b3-72c861dd560b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fd8300-75b7-4ead-b55a-b458b0b12aa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e825f417-9ef1-4de5-85c4-564630738fd5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "78355923-3bec-4795-8806-7b0714b20425",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aadc45ec-4678-4cee-9ef3-0237c789a029"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "39c05cd7-768d-4d79-bf2e-24afb70840bc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9577cb6-0fee-4f6b-b634-a1a9ac7f25a4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e70f0d18-396f-42fc-b6a1-8e0b4098cf97",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6417d4df-1e4a-43be-93b8-9df3a4e617c9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "08b2a499-4b38-4b2b-a1c2-01298a811d94",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fecb296a-cc4b-4133-82de-ad8a1f515288"
            }
          }
        ]
      },
      {
        "id": "4bef381f-2e54-4171-8108-2e0cc74c05bc",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fdae802d-a4ee-4aa7-a662-bcf917a37228",
            "name": "Negative Testing",
            "item": [
              {
                "id": "918de71a-8263-4e5f-be93-d9a8ec5859d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d43f41a-6aa9-4695-a3f5-0afcc6daee76",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6be58218-03cb-45cb-ac88-edded9ac729d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0284be0f-ab12-491b-8999-71f247d941df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b91e02-c038-4217-af85-78beadbe2c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "949c72db-be2a-474d-bc0a-9893a9a172e5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ae548980-53df-4ce4-99ef-14c93f1c2486",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c1f936cc-ec8c-4ee2-9b9a-614c11940754"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d118f95-33ea-496e-84ae-7591a5da21f7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "edf6e4ea-54e2-485c-ba1e-c32fcb4c777d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "411f81bc-2743-4b0a-9d9e-f438e5f2e1a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cb74268f-e00f-4a8f-a2bf-b6094eb8737d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "163e109f-7a7a-4935-8b12-4352312c5901",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cb2e3f09-1ac4-465a-9a17-c5f85387b83b"
            }
          }
        ]
      },
      {
        "id": "d3964f0f-4636-4d36-96e6-c2c5c4bc0565",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "97b7bf93-c568-48a8-a7bd-5ae279073827",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab7f3db6-36e0-41a4-b6b8-22a33840cad7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "b8e7c24e-1c0f-4627-b60a-df8efe19d625",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c78de50-a67a-40da-84cf-eb561bbcd48a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22d262ed-1ff4-446a-8876-141377c32231",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 69.11578947368422,
      "responseMin": 9,
      "responseMax": 598,
      "responseSd": 79.43023373624338,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1707784470603,
      "completed": 1707784499658
    },
    "executions": [
      {
        "id": "74ae32bb-6cd6-4c01-8102-7bf3e87d2e35",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3ac58bd3-44df-4e4f-bfe6-c7326010332e",
          "httpRequestId": "19a7985e-66de-4ac8-a90d-4bb532ebc7e3"
        },
        "item": {
          "id": "74ae32bb-6cd6-4c01-8102-7bf3e87d2e35",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6122bac2-ff8b-4ec2-b51e-0ddf60f48487",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 0
        }
      },
      {
        "id": "e9c3fec4-fd66-4d11-8d33-b6ca4ed23106",
        "cursor": {
          "ref": "6dcaccdc-204f-44c9-846e-44fbdd48bdf4",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fb627c0e-f91a-4cef-8e6f-d291d3b5bb9e"
        },
        "item": {
          "id": "e9c3fec4-fd66-4d11-8d33-b6ca4ed23106",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b2d9ae90-d0c1-44dc-b26e-ff111412a5db",
          "status": "OK",
          "code": 200,
          "responseTime": 9,
          "responseSize": 0
        }
      },
      {
        "id": "620dc595-13b1-4d0a-9ba9-bf2a5e13da67",
        "cursor": {
          "ref": "d91ad245-c2d8-4946-a4da-0c5a720c52c1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6ce6d856-0756-43c7-8f50-aaf8830f0e81"
        },
        "item": {
          "id": "620dc595-13b1-4d0a-9ba9-bf2a5e13da67",
          "name": "did_json"
        },
        "response": {
          "id": "7218b22c-b33d-4a01-b351-a9e56bdac382",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d68158-b810-40e9-9f47-dd052c26ca6b",
        "cursor": {
          "ref": "f144eee4-79fb-41a0-8963-1a8f8149069b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e164fbdc-a19e-4fc3-8bc8-6d14a7e8b7c1"
        },
        "item": {
          "id": "78d68158-b810-40e9-9f47-dd052c26ca6b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e1686f28-2e47-4335-a3c7-aea2a127df11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d68158-b810-40e9-9f47-dd052c26ca6b",
        "cursor": {
          "ref": "f144eee4-79fb-41a0-8963-1a8f8149069b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e164fbdc-a19e-4fc3-8bc8-6d14a7e8b7c1"
        },
        "item": {
          "id": "78d68158-b810-40e9-9f47-dd052c26ca6b",
          "name": "did:invalid"
        },
        "response": {
          "id": "e1686f28-2e47-4335-a3c7-aea2a127df11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80d87bbe-c737-4333-82fa-60b4bb5771e3",
        "cursor": {
          "ref": "bacf714f-b493-45a5-9ffc-48d7d9c67092",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c196b609-7509-4d9d-98c5-16ca7f466e41"
        },
        "item": {
          "id": "80d87bbe-c737-4333-82fa-60b4bb5771e3",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1d2b4d3c-c8dc-4c08-aa2c-da44bcdeac7a",
          "status": "Not Found",
          "code": 404,
          "responseTime": 90,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e830f6d-d80d-432c-adcd-1b70a54c0aec",
        "cursor": {
          "ref": "1cf08978-70ba-4868-84e4-034dc5a4a1c7",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "b4a21248-915b-4b5b-9c6c-a71686ad4bab"
        },
        "item": {
          "id": "9e830f6d-d80d-432c-adcd-1b70a54c0aec",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "5c2d7ba7-b265-4107-98ca-4338c108c013",
          "status": "Not Found",
          "code": 404,
          "responseTime": 41,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8fec6fe-931d-44a3-ab09-871c296ff393",
        "cursor": {
          "ref": "f8fc5557-7da6-4fb9-8822-7fb98f59b1dd",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fa0f06f5-d71b-435c-bbb9-5ef1c18a98ce"
        },
        "item": {
          "id": "e8fec6fe-931d-44a3-ab09-871c296ff393",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e0378a4d-5c31-4c80-803d-9dfcf9fa7e25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea9a05b-f3d6-4fe1-9293-5568f636c335",
        "cursor": {
          "ref": "cf4416bc-6146-4d6c-b4e1-ec87c368d342",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "325a082b-d05e-4562-abd8-2680e709c009"
        },
        "item": {
          "id": "fea9a05b-f3d6-4fe1-9293-5568f636c335",
          "name": "identifiers"
        },
        "response": {
          "id": "4341d2b9-593f-4e14-9926-d5b1e5058a3b",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cd27513-e4bd-4f68-8378-c52948e6eb86",
        "cursor": {
          "ref": "7543a460-72ea-4461-837d-8f2b03de3bf8",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f67221a5-af14-4fed-98ec-b0aabdfd8f28"
        },
        "item": {
          "id": "8cd27513-e4bd-4f68-8378-c52948e6eb86",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "dffe2c96-df47-40cf-9af4-c1bc528ed1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcfa59e-ab63-46c9-b1b9-e800ca0edd87",
        "cursor": {
          "ref": "24cc23b8-e6e3-4040-b856-24ce915d352a",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "2b7e7a96-a923-465f-a7f1-5c27d9d0ecaa"
        },
        "item": {
          "id": "6bcfa59e-ab63-46c9-b1b9-e800ca0edd87",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "ee0c6538-8479-4165-88ae-cf2158e0c150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13624954-922f-4264-b409-90e6fea8e4bd",
        "cursor": {
          "ref": "6458f3c5-c07e-4791-a75b-17ea23a9107c",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2b07bb32-cbfd-4804-8585-dc6f4535f4fd"
        },
        "item": {
          "id": "13624954-922f-4264-b409-90e6fea8e4bd",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ea37cef9-482e-4259-8643-d3e9caab7b34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d485650-ec37-43a3-9cbe-2c0efa8a3def",
        "cursor": {
          "ref": "df202555-83d6-4659-84c1-336d889cd6ce",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "7a1d8999-e7a7-44f9-9949-4b7c08f45555"
        },
        "item": {
          "id": "1d485650-ec37-43a3-9cbe-2c0efa8a3def",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "a2ed1d8b-1b2a-444b-8046-3673fb3f16fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38557bb6-0ef7-4b10-86eb-272c51c84598",
        "cursor": {
          "ref": "2aa24a7d-b7b2-4c2d-b3d6-04056caf6344",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "308f274a-0cee-4615-bd98-fb01db0e1ea7"
        },
        "item": {
          "id": "38557bb6-0ef7-4b10-86eb-272c51c84598",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "36381b80-9bb9-42e5-b5c3-b7ce0a3dde8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f22f270-5dc2-4c1f-bbc2-e4760c8ebf8e",
        "cursor": {
          "ref": "0b24166b-12a6-420e-9dc7-65d05c3f2921",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5e0ece18-adfc-490c-b5e9-71440ecbdb5c"
        },
        "item": {
          "id": "3f22f270-5dc2-4c1f-bbc2-e4760c8ebf8e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "8b9ad765-f1a3-4b70-8dc9-18d4fa776d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d57c5eec-cca5-4ddd-8d7f-3d227753098d",
        "cursor": {
          "ref": "bcb768ab-9f58-488a-a0c0-b9b382bc1244",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d808fe54-f796-4123-81df-7ccdb8a2ff8d"
        },
        "item": {
          "id": "d57c5eec-cca5-4ddd-8d7f-3d227753098d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "7890f0a8-dc6e-459f-87b9-2975ca1d986c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978cc272-0e09-4e14-bae7-75f412ec7370",
        "cursor": {
          "ref": "b8540e75-e91e-44ec-a919-29eba559e707",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2246a8de-d8fb-464c-868e-64011fff36ac"
        },
        "item": {
          "id": "978cc272-0e09-4e14-bae7-75f412ec7370",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "53bae760-174a-4dee-8d9c-04b42a4aef2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "daa1a32d-9b00-40dd-8e58-61fc20ada454",
        "cursor": {
          "ref": "95282e4d-3fd2-4c44-8f86-8e7218426cc2",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "eb7bb7e4-6726-4ffc-bc79-b66211f3b5f4"
        },
        "item": {
          "id": "daa1a32d-9b00-40dd-8e58-61fc20ada454",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "112491b2-8a64-469f-8561-a2d2caf6d14f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c025146-3d1b-4735-80a3-1a0afe3c7b63",
        "cursor": {
          "ref": "a8fd4128-4175-48b3-8866-8ceec2b0edbe",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9a726258-cff7-4b4e-a7e2-1385f6e5450f"
        },
        "item": {
          "id": "6c025146-3d1b-4735-80a3-1a0afe3c7b63",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "7741937c-549e-49a3-bcf9-c9f0b589f33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efb174c-074e-46b0-8357-6d83f7204ed8",
        "cursor": {
          "ref": "39a60707-5268-479c-8b23-23c0ffc88383",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "2ba91905-ddd4-4f8c-b3cb-4f7f47f781b0"
        },
        "item": {
          "id": "4efb174c-074e-46b0-8357-6d83f7204ed8",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5da88ecc-f2d7-4097-91ff-1ec50e67f878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0ff6bc9-453b-49c7-a6c8-0fca2015d25a",
        "cursor": {
          "ref": "16e0476e-6da5-453c-92ea-66c5b7270e81",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "77f492af-f6a9-4883-8573-0a46d0933456"
        },
        "item": {
          "id": "f0ff6bc9-453b-49c7-a6c8-0fca2015d25a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "3cbf0152-6dfa-4462-a84e-99d54e03a8c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fd1945e-2f44-456d-9a79-1f6e5c8ecbdd",
        "cursor": {
          "ref": "639bf971-2ede-4cb0-a026-393743f013f9",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "2509b934-6e32-43b1-a268-85b1fae8c038"
        },
        "item": {
          "id": "7fd1945e-2f44-456d-9a79-1f6e5c8ecbdd",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a948efb4-1faf-4961-b6a1-f3c5102b00a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b62bb8d5-32c1-4539-b903-97660a2ad755",
        "cursor": {
          "ref": "068f44c6-0528-42bc-a7f9-93738d9ae762",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "38694316-c211-4765-b267-deda547c5ef1"
        },
        "item": {
          "id": "b62bb8d5-32c1-4539-b903-97660a2ad755",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4e67fc7f-1aab-4021-a663-03bb0b441bc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1e8dd20-7f4f-422d-8403-7a290fbe33ce",
        "cursor": {
          "ref": "f218ade5-ea9a-4163-9712-821883e9a28a",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "970bc2bd-df33-4244-9f76-a92890200942"
        },
        "item": {
          "id": "b1e8dd20-7f4f-422d-8403-7a290fbe33ce",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "f58ce481-c5a4-46ae-b89e-bda2c20cc418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7905f3-1230-4a05-8e73-bfd3c62bbf74",
        "cursor": {
          "ref": "479d36c6-3060-4cd5-bba6-b70f7d42b0de",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dd824c45-ed1a-4b2a-96c9-77a55247c0f9"
        },
        "item": {
          "id": "9e7905f3-1230-4a05-8e73-bfd3c62bbf74",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3ff9c6ca-1056-4286-b8ff-71eb6e15b95a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fb7288-5b6c-46f5-adbf-0476bcb865c4",
        "cursor": {
          "ref": "29f067cf-8fb6-40bb-b785-54d8a5e6ee27",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "5608fa13-6daa-4450-875c-64d6ac2dcc03"
        },
        "item": {
          "id": "b2fb7288-5b6c-46f5-adbf-0476bcb865c4",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "b585f197-81cf-4672-af08-52186f330727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02417ed6-10c2-4970-9f32-9d85f5aa6b55",
        "cursor": {
          "ref": "72ec4632-ebe2-4111-9e9c-6c32df342192",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f7dbc87f-aeb9-4e78-b862-1b4d89b68d0b"
        },
        "item": {
          "id": "02417ed6-10c2-4970-9f32-9d85f5aa6b55",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "54649a83-75a2-4415-bc1f-ed97a4041c1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3cc327c-8a8a-4e9e-bf81-480289644552",
        "cursor": {
          "ref": "f7d987ea-0e30-40ec-a3ef-978605c862d1",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ccb41e1b-a741-48c6-896e-2ec01776300d"
        },
        "item": {
          "id": "d3cc327c-8a8a-4e9e-bf81-480289644552",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "e15c4de4-4bc7-445b-a440-f9feffa3e774",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9410fd5-7a33-4d8f-b895-8aef2b4b0033",
        "cursor": {
          "ref": "24ed3a20-eeb0-4f78-a5fd-94b7d55825db",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "cbb5b817-acb7-4444-8f41-b4cfc2a76aa3"
        },
        "item": {
          "id": "e9410fd5-7a33-4d8f-b895-8aef2b4b0033",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "510440cf-d10f-42e2-9dbc-0a82a94485e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "242395b4-acb3-4637-b54f-a25fd8d61425",
        "cursor": {
          "ref": "bb4d162f-3512-4450-bb45-7f35fda632b3",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "b0136210-0a77-42f4-aa22-46bd817ebc7e"
        },
        "item": {
          "id": "242395b4-acb3-4637-b54f-a25fd8d61425",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4cfb5f4a-c77d-4665-bdd5-e57c851666c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35c7a432-b300-40aa-aada-2961e1b2fc0b",
        "cursor": {
          "ref": "95ed0d05-df5f-44da-a431-3815240e007c",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ddd6a695-c4b8-4ffd-886a-4b42418a04b8"
        },
        "item": {
          "id": "35c7a432-b300-40aa-aada-2961e1b2fc0b",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e7c35d80-c198-4d27-a3d9-c378b4e023d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1b8ebf4-a14b-4243-97ea-4037efe74bfa",
        "cursor": {
          "ref": "502c85d3-b046-4a7d-9a48-10a7f0695c4d",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bd22d767-86c6-4647-8ecd-b4f17d05816e"
        },
        "item": {
          "id": "d1b8ebf4-a14b-4243-97ea-4037efe74bfa",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4f7e1c6e-2994-4fce-91ee-89af1ffedd7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9248362-0f8c-4958-b52c-cf2193bd90dc",
        "cursor": {
          "ref": "1e6f50b4-2faa-4289-bd74-4a62ee28fbeb",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "7a604d90-7169-45da-937b-40c2ce60be7c"
        },
        "item": {
          "id": "d9248362-0f8c-4958-b52c-cf2193bd90dc",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2f40454e-9f11-466e-9495-8acfdc02bf8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d844515d-754e-41d5-b04e-feb3575017df",
        "cursor": {
          "ref": "08f69371-3f91-44fc-8240-1d10750f0feb",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "886c9b16-22bf-4c69-8b13-de1cd8a46c32"
        },
        "item": {
          "id": "d844515d-754e-41d5-b04e-feb3575017df",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5e074888-4599-41fa-9cc8-9fb065c7af2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efdbd11-33b9-4e73-88dc-55a54a6b9f81",
        "cursor": {
          "ref": "17c21cff-5296-4a6e-88b9-5549553ff0cd",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "0090e153-a390-4d39-a48d-1a97dc140881"
        },
        "item": {
          "id": "7efdbd11-33b9-4e73-88dc-55a54a6b9f81",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "dbc5a1ec-3f2e-4fe4-8189-2e86a753ac75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf9e42f2-ce75-48f5-bb34-42184ba1862b",
        "cursor": {
          "ref": "aa14050f-bfe0-400b-8110-89a02283e937",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9d2890dd-baa6-4fa2-bb2f-99ff0b80cd43"
        },
        "item": {
          "id": "bf9e42f2-ce75-48f5-bb34-42184ba1862b",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "11736c0f-a304-4320-b907-116bd78692e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86a73d5-3ab4-4402-9bc2-cf9e7af49b14",
        "cursor": {
          "ref": "d7d98f0f-46b9-4e17-a695-63e4a6a4ae6f",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "2965b4ff-996a-4bd1-9ec9-8e8a723a4361"
        },
        "item": {
          "id": "d86a73d5-3ab4-4402-9bc2-cf9e7af49b14",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0312315b-848c-49c0-883e-805356b177ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d424468-0833-4b43-8f76-da94c4b5ca85",
        "cursor": {
          "ref": "b20753ac-e007-4f9d-926d-b57f821b48b0",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "599882ee-b5da-4ef9-ad68-ff06c036c9f4"
        },
        "item": {
          "id": "5d424468-0833-4b43-8f76-da94c4b5ca85",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "f352989e-9f91-4c57-b09b-304dd3917397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64d980be-c35a-4183-9aff-86965d5b3e15",
        "cursor": {
          "ref": "a05c9321-3f10-4faf-8512-8ab88d4a778d",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e2d3722d-5696-451d-8925-33f68ddf2338"
        },
        "item": {
          "id": "64d980be-c35a-4183-9aff-86965d5b3e15",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "5ac00407-ed80-4813-8fbf-f3ba41651574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983bca37-8dc5-4c1e-af38-98def98282fd",
        "cursor": {
          "ref": "9baec98e-1efd-4de3-8c41-093692276f0c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "29321759-675c-4dd8-9e9c-4b4f479096ed"
        },
        "item": {
          "id": "983bca37-8dc5-4c1e-af38-98def98282fd",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2f3560ed-3870-4d6a-b7f5-d706c528afac",
          "status": "Created",
          "code": 201,
          "responseTime": 598,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "5aa76370-b61c-4f43-855d-1ae8f9e3638e",
        "cursor": {
          "ref": "427136ae-1e0f-4e50-a084-993b1c9a15b0",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "4cd09733-63a5-4d4a-a36a-0b3dec6a603a"
        },
        "item": {
          "id": "5aa76370-b61c-4f43-855d-1ae8f9e3638e",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b46120cf-d21a-4c1f-a628-b165beb0aacb",
          "status": "Created",
          "code": 201,
          "responseTime": 283,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "b947f8cb-8a63-4d55-a0d7-8310b7993a50",
        "cursor": {
          "ref": "9cc22af3-17e4-4459-8ec3-30acb247a196",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "95fc3508-9bbe-4975-acfc-521a7e43e783"
        },
        "item": {
          "id": "b947f8cb-8a63-4d55-a0d7-8310b7993a50",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "a6de296f-b179-4a39-8c69-aa9405831d07",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "6581a748-fda1-434c-b3d4-a278d9ab0728",
        "cursor": {
          "ref": "cba051ef-1ac9-4b5f-af83-f0c5c6012417",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e84f20f2-c2e3-46d1-a88a-a0f05b8ba9d1"
        },
        "item": {
          "id": "6581a748-fda1-434c-b3d4-a278d9ab0728",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "30f05cc9-bfd3-4029-b21e-d218c6192e42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f14ae5-f3a4-4e77-a124-354066533717",
        "cursor": {
          "ref": "7aeec39c-666e-465d-9a98-37075b792a93",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "af755624-1188-4705-a550-8da525128b30"
        },
        "item": {
          "id": "69f14ae5-f3a4-4e77-a124-354066533717",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "c9098ea8-2eb4-4106-b210-94b943ae36dd",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "8c766374-55d5-445f-a769-1b792a1aac45",
        "cursor": {
          "ref": "d2331a98-7a8b-4f57-9f43-4beb575038fb",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7675bf67-b87d-4518-aff8-a3fe0e4bc47c"
        },
        "item": {
          "id": "8c766374-55d5-445f-a769-1b792a1aac45",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c0de5323-6eb0-4221-ab1a-7ab3767efd0a",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "e336a924-feb2-48c6-b684-d0e570d0e237",
        "cursor": {
          "ref": "5b797d31-e341-4430-bb9d-9cd5ed44e699",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "c9985356-9085-4cf8-b4e0-951d7dc66b06"
        },
        "item": {
          "id": "e336a924-feb2-48c6-b684-d0e570d0e237",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "defce576-57e0-4895-bb78-78d5d74ae5f5",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "95129c84-2a90-4e6b-9870-7b78ff08cc20",
        "cursor": {
          "ref": "b71d7b32-6645-46e1-93c9-2d9cca149039",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "359f02dc-9772-4b7b-9e23-549b09c9833d"
        },
        "item": {
          "id": "95129c84-2a90-4e6b-9870-7b78ff08cc20",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "48b8f393-a312-4dcd-a006-f2cfd3e972e6",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "ae40983b-66e3-4736-a145-bbc675cec6e7",
        "cursor": {
          "ref": "a66c1ec3-5a68-43ad-937e-bc4c93ec2250",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "f747a1bd-97ed-41be-860f-7a1c56b4942f"
        },
        "item": {
          "id": "ae40983b-66e3-4736-a145-bbc675cec6e7",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "6cb3cbed-3e63-46f8-bb95-469c9711a8ed",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "7ea17074-1337-47de-b19e-c7a25dca4fa1",
        "cursor": {
          "ref": "7b0d68ab-f29b-462d-bcce-85efbadbc4ff",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a78ffe99-729d-43f5-afb0-f91488430e4f"
        },
        "item": {
          "id": "7ea17074-1337-47de-b19e-c7a25dca4fa1",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "24d1a136-3cae-4916-bcf7-b8317c41ad0c",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "406db1e2-1124-4fbd-bd77-39c0676cb02f",
        "cursor": {
          "ref": "6893413f-da45-4f0e-b439-4c369ea00682",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ea501677-b024-49a5-adf1-39b9f9353c99"
        },
        "item": {
          "id": "406db1e2-1124-4fbd-bd77-39c0676cb02f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "378a7b18-3b40-46e9-a201-ad299ba7b543",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "1fa7ae52-148c-40fb-9a0f-5b9dda64e688",
        "cursor": {
          "ref": "1480073b-511c-4b2a-aaaf-93e1f50cee22",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7b605343-cc0f-4e7b-bca8-ba5617265ede"
        },
        "item": {
          "id": "1fa7ae52-148c-40fb-9a0f-5b9dda64e688",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "ef830051-0be9-4687-9a83-439c5397b4db",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "bd01f743-24b8-4cc5-a8b7-289bca0d10e7",
        "cursor": {
          "ref": "8b359d16-668c-47b2-963d-03166d648e54",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "48301a53-2b39-4ef2-ad9e-9580eeda4323"
        },
        "item": {
          "id": "bd01f743-24b8-4cc5-a8b7-289bca0d10e7",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "89a8798e-d421-4338-a1e0-0dea0d8c7368",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "f819a05a-0256-4d9f-898b-790c7c698db9",
        "cursor": {
          "ref": "0d8ab303-2e2d-4633-a846-4fcf35043435",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "464ed8ff-ca5d-4d8b-a8da-275407a427e0"
        },
        "item": {
          "id": "f819a05a-0256-4d9f-898b-790c7c698db9",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "28763848-517a-48fa-a8fa-bed37c96c4e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b814e0cf-d7ba-4f1b-bdf9-c6335a93327d",
        "cursor": {
          "ref": "874edd2f-e5a6-40b8-9161-39722ba2c767",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "08f8e853-3f34-40e4-a06c-61f8e449ed06"
        },
        "item": {
          "id": "b814e0cf-d7ba-4f1b-bdf9-c6335a93327d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "57e811e5-5578-4ff7-b1cf-ab1bbe903331",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9755c8b4-af16-423f-8d18-32d84426aace",
        "cursor": {
          "ref": "de62cd96-f533-41cd-a6c9-900b6bcb3438",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a5689cd9-62b2-4ae6-978a-a90d5384f0a3"
        },
        "item": {
          "id": "9755c8b4-af16-423f-8d18-32d84426aace",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e508c44b-a75b-4562-b113-371ca2ba4d3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10af3c87-eb63-46e0-b198-643b58ec57a9",
        "cursor": {
          "ref": "2ccb1dd5-993e-48d3-9815-afc88c1d7b19",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c1671227-1695-4b13-b9ea-d81c2c660213"
        },
        "item": {
          "id": "10af3c87-eb63-46e0-b198-643b58ec57a9",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8e7bbdbb-5e99-4200-9df2-0cb4933a1e04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65849d7e-d44f-4ccd-bafc-51b0a58241cb",
        "cursor": {
          "ref": "308e4cde-e16f-4235-ad85-dbfd87a593ff",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "a3e4d146-3efe-4fff-acda-4b5ed09f1838"
        },
        "item": {
          "id": "65849d7e-d44f-4ccd-bafc-51b0a58241cb",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "b2d1bc42-c275-40df-9c2e-25941fa6684c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55dedb99-112f-419b-9faa-54dbcbeb43c9",
        "cursor": {
          "ref": "8724ae8f-380c-4f19-b52f-62c6c26239f3",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "e573318c-356c-4dba-8bb9-bf85445c9d34"
        },
        "item": {
          "id": "55dedb99-112f-419b-9faa-54dbcbeb43c9",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0e56cc30-2372-43bb-a5de-f67afce97f18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b06f3f-5d2d-4550-8ff6-c156eb7109bf",
        "cursor": {
          "ref": "560809f4-06e0-4dc7-a437-995ceff56ed7",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "17ea4a4e-5984-425b-9b18-19be63f40e03"
        },
        "item": {
          "id": "e3b06f3f-5d2d-4550-8ff6-c156eb7109bf",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "77b7b002-dcf1-4312-9709-7b485ddb6e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a74e93c-4ab9-4ba5-82ee-c86755d965e4",
        "cursor": {
          "ref": "e119e959-43ac-4f9f-9636-4f2a049b1583",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "55ad2948-c9a0-46d3-9dc8-472fa5c9cec5"
        },
        "item": {
          "id": "6a74e93c-4ab9-4ba5-82ee-c86755d965e4",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "77c839c9-2483-4263-9914-c6379c070277",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94ff14b-02b7-4f4e-ac88-58946ba6da98",
        "cursor": {
          "ref": "f3b9b27e-8f9b-4217-ba57-d251c47fa695",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "1ed686c8-71f4-4cbf-98c4-5faf2204a71a"
        },
        "item": {
          "id": "f94ff14b-02b7-4f4e-ac88-58946ba6da98",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "23f75e4b-1031-4695-a6bb-ada4bfc16633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a189f291-9596-4c5c-9950-7e4c49f1bc0d",
        "cursor": {
          "ref": "dd126012-51b8-4613-a811-e47fc405105d",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7d60338f-2c84-4f0d-b14d-810523a9c6ad"
        },
        "item": {
          "id": "a189f291-9596-4c5c-9950-7e4c49f1bc0d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "82f607fd-0009-42af-9d55-ae5a0dee8713",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a83c93b7-f052-455a-8dad-e78b9148b184",
        "cursor": {
          "ref": "5b56bfe7-6b37-460d-a2c5-ed4807fe8157",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "b509ef08-944a-452c-94d5-cb9ce5ba782a"
        },
        "item": {
          "id": "a83c93b7-f052-455a-8dad-e78b9148b184",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1441df36-8428-43a7-ba94-6e9f78caa8af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea706fa4-615d-42ef-8c41-b0e238ded738",
        "cursor": {
          "ref": "28b5e46e-e8c7-42ea-a949-1df7409f822e",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "deb5b910-8bff-4a23-87f1-ba2a0320c23c"
        },
        "item": {
          "id": "ea706fa4-615d-42ef-8c41-b0e238ded738",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f9e7f912-e3a2-4b53-b1dc-f471a7fcff3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b08f6a17-70a7-48d3-a792-8985c1288a64",
        "cursor": {
          "ref": "5362d0be-02d0-4054-9941-39d90bfcd189",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "25144106-3235-4d1c-bcb6-a59f491c117e"
        },
        "item": {
          "id": "b08f6a17-70a7-48d3-a792-8985c1288a64",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "25d60b1b-dda7-4323-852a-a495e73ba30d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4d6e32-1e42-41bf-b434-71c45d94efbe",
        "cursor": {
          "ref": "99ea3012-5321-405d-a2f9-b4ee9628e144",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "871be426-dd61-4f3a-a0fb-f8332af7d3e5"
        },
        "item": {
          "id": "9c4d6e32-1e42-41bf-b434-71c45d94efbe",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d62c5c82-e4b2-425e-a68c-96fd3996050f",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "9154ee76-3232-4e9f-b584-cb85dc56218f",
        "cursor": {
          "ref": "68edbe90-f05e-4719-a99f-7e5f118f62e0",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "84ca100c-b7d7-4061-a539-0c97b757e944"
        },
        "item": {
          "id": "9154ee76-3232-4e9f-b584-cb85dc56218f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "38442308-dfeb-424c-afb7-1bdf7ffd44c7",
          "status": "Created",
          "code": 201,
          "responseTime": 465,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "7e22ba21-9c09-4f40-86df-5a2cff4dc407",
        "cursor": {
          "ref": "9dd76dc7-7219-4c46-a960-507001170ed0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "8373e276-048e-4a41-8f0e-51b1297a9c5e"
        },
        "item": {
          "id": "7e22ba21-9c09-4f40-86df-5a2cff4dc407",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "89728683-4f01-47ea-817c-57bc52cbbca9",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "71aeb444-08fc-4d50-9b53-336a78a8fdfd",
        "cursor": {
          "ref": "5c05e811-1c89-4e8f-8798-0b1a4fe44fd8",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "bb80d4d1-7891-4c74-af81-a96f95688054"
        },
        "item": {
          "id": "71aeb444-08fc-4d50-9b53-336a78a8fdfd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "b9eacfd0-c125-4c1f-afe3-18dd7ce6dbfb",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "526d20cc-8eb7-4796-882c-7bb500bf0984",
        "cursor": {
          "ref": "124b4e18-bc3a-4cef-bbcf-fd6c18fa200e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f4b8b0e6-d1ee-40b2-aba3-485724f222b9"
        },
        "item": {
          "id": "526d20cc-8eb7-4796-882c-7bb500bf0984",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fe0e15b5-528f-418e-ad3a-7a23c8cf69b3",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "775e6659-c9de-43f0-bd44-20c7f4f39781",
        "cursor": {
          "ref": "f8514a92-1e2f-4da4-9367-f569f2f0d9df",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "2f96deb7-9fd7-44a7-8f0c-a7869c57836c"
        },
        "item": {
          "id": "775e6659-c9de-43f0-bd44-20c7f4f39781",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "6d228e4c-a4c8-4158-ae20-121be2e43da5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dcf69a-5bc0-4f8f-9521-d069f61c915c",
        "cursor": {
          "ref": "b6a4ea93-50db-4e18-a233-25f596ef3d58",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "9670a22e-cf03-40ca-a5be-34ad13ac560b"
        },
        "item": {
          "id": "37dcf69a-5bc0-4f8f-9521-d069f61c915c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "81577c2d-802f-4cc8-ac16-0620ed106c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab709bbc-3241-45d3-b8fb-a10758761acf",
        "cursor": {
          "ref": "1765bcdd-3e29-45d6-8945-848787310126",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "78f3f436-467e-42f1-a594-0a0055647298"
        },
        "item": {
          "id": "ab709bbc-3241-45d3-b8fb-a10758761acf",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3e2d8370-f6ee-4e82-8878-e1f478e0afc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2acf6b38-bae1-4f76-920b-2f4aa034d23b",
        "cursor": {
          "ref": "6ea752ec-1705-40f8-8f71-c42e2a31eab2",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7526aadc-547b-4102-9b2b-78bbe565a441"
        },
        "item": {
          "id": "2acf6b38-bae1-4f76-920b-2f4aa034d23b",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ed10e4d4-19f4-496a-a0d8-b3fd141f81f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a9d54f6-f5c8-4a02-97dd-10241168937c",
        "cursor": {
          "ref": "e7a7f492-bff5-4b00-b5f5-434900b6a9dd",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "a7c54055-a304-44f2-9884-1e99275f7710"
        },
        "item": {
          "id": "4a9d54f6-f5c8-4a02-97dd-10241168937c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "a8a25709-db8d-4f97-ad32-e208b1aadeee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0460f83-e78d-4eec-954a-c58b26fbfd13",
        "cursor": {
          "ref": "90591805-e00d-4d90-bdd9-1aeb67ec9b17",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "9beb9025-3c68-4104-9021-76e71abf09ee"
        },
        "item": {
          "id": "d0460f83-e78d-4eec-954a-c58b26fbfd13",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "882eb8e3-2454-4d8e-810b-dcbefdcdb8d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8a65a48-f6cc-463e-9a58-bb672d29c163",
        "cursor": {
          "ref": "c7c71688-09cf-465b-8f89-0c919e283034",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c2196cc2-b0e2-493f-9962-1719c1c9f210"
        },
        "item": {
          "id": "c8a65a48-f6cc-463e-9a58-bb672d29c163",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dcfeadb6-e572-4a35-971c-07e6bb8eccdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0fb0de-5a0f-4377-816d-eddb034c9e59",
        "cursor": {
          "ref": "d5d4c6ba-ded6-442d-be08-83eb190f128f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "17fe3efe-946e-41bc-b771-bea3422c6a3f"
        },
        "item": {
          "id": "3b0fb0de-5a0f-4377-816d-eddb034c9e59",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "17513ba7-f8d9-45bf-8991-3f6e0d1b4d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8fced9b-0f12-4ccf-ad04-622afc11b0cc",
        "cursor": {
          "ref": "21569ee3-dbac-494c-831a-9d7df7ed6bd9",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "87418f13-fb7d-4589-91aa-00d476c6130e"
        },
        "item": {
          "id": "d8fced9b-0f12-4ccf-ad04-622afc11b0cc",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "aec194ef-4565-4184-b020-467cdf82ed6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "216dea7d-2cf1-489e-a5f7-b0af8b2932ed",
        "cursor": {
          "ref": "8b239f1d-b869-40aa-a79d-cc932293d05c",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fe7d95e7-36e5-4a77-8d9c-cbe18086a95c"
        },
        "item": {
          "id": "216dea7d-2cf1-489e-a5f7-b0af8b2932ed",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "828acdd6-128f-4869-a44d-5fe79426a5cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88f27ef3-6c39-452a-afa8-347b9f8dd961",
        "cursor": {
          "ref": "75a40821-0534-4ee2-b15d-64495da5c817",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "9c7cf49b-6811-4aa1-b3a1-c84565993153"
        },
        "item": {
          "id": "88f27ef3-6c39-452a-afa8-347b9f8dd961",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "13289c6c-ea70-49f8-8624-aaf313a8a243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f324009-9df9-4b4d-9321-3e41a01726dc",
        "cursor": {
          "ref": "027ebbf6-7b24-4ba7-aaa6-0cd55e3b3df3",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "5357865a-1150-437a-87b2-d39c1b40cdbf"
        },
        "item": {
          "id": "8f324009-9df9-4b4d-9321-3e41a01726dc",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "adfe6df8-4e40-4df3-90c1-5f0afa4bf84c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a1bbf4a-1e8f-4890-8286-0a6189213994",
        "cursor": {
          "ref": "76e20987-5a0e-474b-9852-94d4cb8cfe1d",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "62bc31f7-422d-450f-a7cf-725defe4cf0f"
        },
        "item": {
          "id": "9a1bbf4a-1e8f-4890-8286-0a6189213994",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5fc9edb3-5e92-41e2-be11-82d3eec87615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b497f8-175a-4ed6-8487-1017bd5ad3ee",
        "cursor": {
          "ref": "a1d6cc5a-01b5-4d37-87f7-a1495d77b4ea",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "705d1e11-1c08-405d-b46d-5230a3a9eb76"
        },
        "item": {
          "id": "69b497f8-175a-4ed6-8487-1017bd5ad3ee",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f4bf45cb-3144-4c90-a057-82d13d60bbb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297f867d-9c1e-4162-8cb5-2518d9509c17",
        "cursor": {
          "ref": "7ae18674-7668-4cf9-84a0-feb97c8da61b",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c21d4ed8-6c23-4a37-8e0e-57ccdfecfab6"
        },
        "item": {
          "id": "297f867d-9c1e-4162-8cb5-2518d9509c17",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9d474e38-0a1c-4f5f-86ab-2cb6b9360a1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f65bec5-b5ba-4377-bb47-052b35b4dbb8",
        "cursor": {
          "ref": "86aaef9e-f561-463c-b1b0-ab566d048019",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "a3d7b4d7-9030-4861-8786-5d3e20b18fc8"
        },
        "item": {
          "id": "5f65bec5-b5ba-4377-bb47-052b35b4dbb8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8d665865-5206-4d68-9ac3-413fe2b2287a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a63b935-a7c4-4da9-83ef-0c8fbffb2382",
        "cursor": {
          "ref": "abcf1a12-5443-4c3a-a248-8083749b1c18",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "3d9d26f1-e7f3-4e9f-ad77-56b8798702aa"
        },
        "item": {
          "id": "8a63b935-a7c4-4da9-83ef-0c8fbffb2382",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2cc3d246-fe48-4d36-9968-9142fdfcf92d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bec755-9f20-4c87-a646-a9e5816db196",
        "cursor": {
          "ref": "4fde308c-d5f5-4155-be7d-1dcd971c2a9e",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "3704d44c-b84e-4c9f-bdfd-2ad65df223ab"
        },
        "item": {
          "id": "b8bec755-9f20-4c87-a646-a9e5816db196",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "f0747bbf-2bd0-4b3b-99e5-4f94f6a32065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26fa3918-9c36-49b3-b8c6-95536cc4799f",
        "cursor": {
          "ref": "667bfe83-ef36-422a-81d4-2d90d9e774dd",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "9244120f-9e85-45ae-a4c5-d4f89b7cfbed"
        },
        "item": {
          "id": "26fa3918-9c36-49b3-b8c6-95536cc4799f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9b105965-43d3-4023-9c8a-8c360497182b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5675110d-bc86-4ee0-bf0c-f3b7f7ac0432",
        "cursor": {
          "ref": "662a0364-ba65-4c67-a6e7-cf1f13c0962a",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "e7751a05-6556-471c-a22d-3e0b819064c2"
        },
        "item": {
          "id": "5675110d-bc86-4ee0-bf0c-f3b7f7ac0432",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "ca4f2ad1-30a3-4827-b5ae-3a6b71d1261b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488ef871-edcd-485e-a53c-aed0dc8972e1",
        "cursor": {
          "ref": "37434ab4-cd0b-4768-a952-a2e3dbb41daa",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0c25a61e-8339-43c4-a899-d037546dac09"
        },
        "item": {
          "id": "488ef871-edcd-485e-a53c-aed0dc8972e1",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "de8fddd5-e4b8-40fa-afa6-dbceaee5b9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e23d8dfa-49d7-4dbd-8d38-e36807df66cb",
        "cursor": {
          "ref": "2bcb71b1-a2b7-4130-a5f1-80e5acc396bf",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "91bc6171-eb50-4b4a-abd1-388ab45f7829"
        },
        "item": {
          "id": "e23d8dfa-49d7-4dbd-8d38-e36807df66cb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "d1bebafb-089e-4285-8b05-50252072c7df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "393507a4-15fb-4936-8c92-9fdebf9e20c2",
        "cursor": {
          "ref": "2ee50c0d-573f-4731-bc83-40b62a1269d1",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "565cdafc-bff5-4da4-828d-261d26693353"
        },
        "item": {
          "id": "393507a4-15fb-4936-8c92-9fdebf9e20c2",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "38de0e00-d2df-42ac-9641-db926f23195d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "541cd69e-8dc0-491f-a5c2-349a3f8dad2b",
        "cursor": {
          "ref": "f0d30043-830e-49b1-a9e9-7056a5228d0a",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "29273bb4-7686-4092-b4dd-8b01cb5a6f51"
        },
        "item": {
          "id": "541cd69e-8dc0-491f-a5c2-349a3f8dad2b",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d9d4de10-4ad9-4a83-943b-e79a3f6394f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cac497b2-0067-4778-a0f8-1d20e88b74db",
        "cursor": {
          "ref": "b4ed45b0-8131-45ce-a172-972d995f6880",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "104ef5a8-5141-4ba8-b678-0874fec300b1"
        },
        "item": {
          "id": "cac497b2-0067-4778-a0f8-1d20e88b74db",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4344db46-6052-431a-8498-aaff2ad26b40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2edbfc7e-12ba-4b2e-96d7-7b7a5376040b",
        "cursor": {
          "ref": "aec57405-bec8-4e79-bb85-36c3691a8299",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "5a67f6b0-2940-4ca2-ac3b-bdc43ab045ca"
        },
        "item": {
          "id": "2edbfc7e-12ba-4b2e-96d7-7b7a5376040b",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "ecf42306-4e36-4ac0-b155-0b2dc5baef5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d727aa-a9bb-4db9-b618-2d441d259d57",
        "cursor": {
          "ref": "9bc91805-558f-4c00-b95a-d967cdd2127a",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ae1517d5-1859-4849-84c0-cd8a882a526d"
        },
        "item": {
          "id": "c7d727aa-a9bb-4db9-b618-2d441d259d57",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ca3c90ce-7155-414c-a44a-184ae3ec839f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf2b5aa-9665-4749-b382-19c7be45390e",
        "cursor": {
          "ref": "d8604805-fd4b-47c2-ab3a-08586e234c1c",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1ea4ab4a-63a9-447e-9500-fbbc1130976e"
        },
        "item": {
          "id": "fcf2b5aa-9665-4749-b382-19c7be45390e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a7c19d54-482d-4718-9cc8-b5a24a2f654c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f27b198f-fb8d-422f-899a-39b9e94ea4d3",
        "cursor": {
          "ref": "c2c280a8-d891-405f-a050-2cf67806036c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4ef49b70-4a74-44ed-bb60-2593c271317e"
        },
        "item": {
          "id": "f27b198f-fb8d-422f-899a-39b9e94ea4d3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "7a6719ce-ffef-42f8-92c7-eebfc387c2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beecc451-1c8b-4af2-96f4-e0c189343e7c",
        "cursor": {
          "ref": "e1e12b43-da29-4c4d-bfe1-015234388285",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "7eeb8095-9300-4fff-a932-b3b9a814bca3"
        },
        "item": {
          "id": "beecc451-1c8b-4af2-96f4-e0c189343e7c",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "6b1dca4b-62d5-4389-9d88-1ca733560e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5456a20f-6d4c-4790-8a60-77b8a0114aa6",
        "cursor": {
          "ref": "a7973783-0be5-488c-b288-837fb1938060",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "93c782d5-e3fa-4f8c-87e4-e14949705894"
        },
        "item": {
          "id": "5456a20f-6d4c-4790-8a60-77b8a0114aa6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f8a7d0fd-0952-4043-ab3b-ee8bcd81c343",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a78596-a1cf-4476-807f-b2c84ebf6826",
        "cursor": {
          "ref": "d8a00af2-598d-4666-a0a7-fc1151521979",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "66044851-5ef1-4c8c-994b-30ff940f0e04"
        },
        "item": {
          "id": "a5a78596-a1cf-4476-807f-b2c84ebf6826",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1292e5fe-226e-4d94-833e-31fc48920922",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 22,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fb9dd17-4e4b-40b2-8a0a-c1ba7258eb04",
        "cursor": {
          "ref": "05a26c90-da0a-4a72-a942-7e62aad2eede",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5f6ba626-0acd-469d-aaa0-fdaea4c9a842"
        },
        "item": {
          "id": "4fb9dd17-4e4b-40b2-8a0a-c1ba7258eb04",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "60aa4c8d-103a-4862-9776-b6e502244356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "60c19684-7f6b-4875-8dee-ce6299a17723",
        "cursor": {
          "ref": "6b5c2704-94c4-4219-bb01-3cece9849281",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3f8db18f-d1d2-4c6b-936c-f78961da7abe"
        },
        "item": {
          "id": "60c19684-7f6b-4875-8dee-ce6299a17723",
          "name": "credentials_issue"
        },
        "response": {
          "id": "74979db0-b69f-44b4-9bb9-c39f68d2ae46",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e25a34-698d-4307-ac04-c726ec8a830e",
        "cursor": {
          "ref": "4d4fcd1a-cd2b-42ac-9249-790c94e6d7c2",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "0df8a838-b514-400f-aa5a-a3d93ac806fa"
        },
        "item": {
          "id": "e3e25a34-698d-4307-ac04-c726ec8a830e",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "35317396-15cc-4255-b48a-1dc703a15dca",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef58a17-31b7-42ad-8f52-1f828e184135",
        "cursor": {
          "ref": "28877f3e-f0be-4a29-a63c-eb5fd4ea2194",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e56afa53-f412-4846-9115-2306261ce0b1"
        },
        "item": {
          "id": "7ef58a17-31b7-42ad-8f52-1f828e184135",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "739b2095-8d79-4031-9908-a02de6dbe815",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8beb2713-a7e1-48ea-bdaa-75b8885bced9",
        "cursor": {
          "ref": "6e555ce2-796d-4bfe-b060-7de1474d779d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f64d9bb0-98a5-44be-aa8a-8be0c4c4ea44"
        },
        "item": {
          "id": "8beb2713-a7e1-48ea-bdaa-75b8885bced9",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9ae92544-f8c9-4716-80e1-a755123e03ff",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b02d5006-60ad-40d0-ad17-d3755502b824",
        "cursor": {
          "ref": "408dba8a-4752-4145-b506-2d757ac3b9a6",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8d025607-8aea-4bbe-9ad3-cb7286a1e40d"
        },
        "item": {
          "id": "b02d5006-60ad-40d0-ad17-d3755502b824",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a9db488d-44f4-436d-b43d-d27275c208fb",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-13T00:34:44.927Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-13T00:34:44.927Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4c45e50d-8d71-4b18-bfc6-36862e38f152",
        "cursor": {
          "ref": "5da67a40-8077-4472-a597-324e71de9a41",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "57804612-66bb-4b2d-975e-9c7d534dee73"
        },
        "item": {
          "id": "4c45e50d-8d71-4b18-bfc6-36862e38f152",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "51bf1649-fc17-48a5-9c22-538ade35b88f",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82878293-70f0-4ce0-8f0b-d53d8bdedda8",
        "cursor": {
          "ref": "0d3ecf3e-4f8e-4a8c-a6a9-e40aa105079b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "20118cce-fbdd-4a8d-a3ec-3e7cfbe308d9"
        },
        "item": {
          "id": "82878293-70f0-4ce0-8f0b-d53d8bdedda8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "841c4b6d-4f83-45d6-9956-8a1257ae48f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b83c579f-3dfb-4e01-9dd7-655f86cc817f",
        "cursor": {
          "ref": "3b6e99fa-5574-4955-9f04-17cc1261345d",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "3b380780-9ce6-4dbd-9d84-1baddd040b76"
        },
        "item": {
          "id": "b83c579f-3dfb-4e01-9dd7-655f86cc817f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "eae4ef30-6df9-4e94-a4e6-fe9749a0eff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc5cea6-d536-405f-94f3-60e950b55f74",
        "cursor": {
          "ref": "943e2146-e4a7-4d5a-abae-7b1985ee94e8",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5b387f52-b27d-4aae-ad91-89b397f59ddb"
        },
        "item": {
          "id": "1dc5cea6-d536-405f-94f3-60e950b55f74",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "55a19575-a35f-4033-8cee-3bf496f2d334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae12dcae-a460-4de9-a9ac-f8d487962d59",
        "cursor": {
          "ref": "a5d0578c-d66a-419b-9418-07a49a56d52c",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "64016e6d-63d1-41f4-88c1-b11262b521bb"
        },
        "item": {
          "id": "ae12dcae-a460-4de9-a9ac-f8d487962d59",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e1eacc91-6de2-42ea-86fa-8ffdfd5f7816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90abc89f-82ce-44fc-9e30-9503ed49df80",
        "cursor": {
          "ref": "bc38c7f2-92cd-4082-b009-cf4e0b2a028b",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "3af79f23-d192-42a7-816d-7a156642b1ea"
        },
        "item": {
          "id": "90abc89f-82ce-44fc-9e30-9503ed49df80",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "acdc57b0-affe-4001-9fa5-1a21cdcba5e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e690e33-1364-4350-a72c-b834db11e7ed",
        "cursor": {
          "ref": "b5e1b164-5db8-4cb1-b0cb-28f65fb59c9f",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "efddc28e-6c41-41a2-9208-01b7ef9b6bc5"
        },
        "item": {
          "id": "9e690e33-1364-4350-a72c-b834db11e7ed",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "278bca88-fe49-48e6-a905-67c9fa4c57bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98ef124-e6af-48a4-804e-9fd45720beb3",
        "cursor": {
          "ref": "6d556e09-99fa-4c88-9d91-f2ebf98267db",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2bef4ff5-0eeb-4b0e-992e-8a4891aaa004"
        },
        "item": {
          "id": "c98ef124-e6af-48a4-804e-9fd45720beb3",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "2edcf045-346c-43ff-b3a1-a34b947cf3db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c362db-e38d-45e5-93f2-018eb6a2d30d",
        "cursor": {
          "ref": "3598fd7e-8564-4b7f-8d64-8b986def777e",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3458dce2-4563-46cf-8242-aaa7c9e835f3"
        },
        "item": {
          "id": "95c362db-e38d-45e5-93f2-018eb6a2d30d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "14dc8126-1210-47f0-895c-c869c6121272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1f4228a-ace5-4d10-bffa-91d92577967f",
        "cursor": {
          "ref": "f74ec86d-f64b-4e79-aec9-6bf21877ea67",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "6338a821-8b00-4c13-9e78-627a74648f31"
        },
        "item": {
          "id": "a1f4228a-ace5-4d10-bffa-91d92577967f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "c29b6734-685a-4220-bb40-35382b7c1d17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b0d225d-fb00-4b1a-bd5e-c8ac0bbb0c37",
        "cursor": {
          "ref": "30b068ae-9c54-4bc2-91b2-0335c6b5040c",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5d3b234c-c786-4788-a2a2-f1ed59e0f4e8"
        },
        "item": {
          "id": "3b0d225d-fb00-4b1a-bd5e-c8ac0bbb0c37",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6a2d1d94-0055-4e53-a3f8-acb4404d0b71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a04c37b1-420f-4b82-bdb6-55755712c505",
        "cursor": {
          "ref": "85f69d4c-14c9-4fc0-944c-1b36faa8691b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "3446287e-19f5-4a67-8230-13511c2732ae"
        },
        "item": {
          "id": "a04c37b1-420f-4b82-bdb6-55755712c505",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "db88884c-7cfc-4430-a29e-065cbaee7f9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d2b87f0-7fa5-49ec-b58c-ac69a68925d5",
        "cursor": {
          "ref": "649de03f-7a97-4c2e-b184-04e2897bc09d",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "fe3d904d-1d5d-4ddb-8760-2d3e911c5f99"
        },
        "item": {
          "id": "4d2b87f0-7fa5-49ec-b58c-ac69a68925d5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "4535c51a-c1fa-45da-9605-49f8586f4241",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "008a881a-2eba-403e-bb61-49efb916100e",
        "cursor": {
          "ref": "5f66b8a2-f808-4060-8e06-c102bfdbd0b3",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "38d3a366-9b49-4038-91c4-560b1ba4982a"
        },
        "item": {
          "id": "008a881a-2eba-403e-bb61-49efb916100e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "1a1a7bcd-854f-4b7a-9254-c2ef8fa1ae17",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 151,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "617caf05-9d9d-48bc-80a5-9826b0c4f939",
        "cursor": {
          "ref": "f62d4229-8270-4054-bcbc-c58fed9006a5",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "8e6df577-acbb-4def-b154-e8269ea48129"
        },
        "item": {
          "id": "617caf05-9d9d-48bc-80a5-9826b0c4f939",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7e469108-fab4-483e-92ef-d20baa775eb8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 109,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "bf941dd6-4096-4f2c-8671-2ec7ede64dba",
        "cursor": {
          "ref": "a1adfdbf-2e07-4080-95a7-e7545b364f47",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9175418c-6e7d-45f5-b10a-3467f138a787"
        },
        "item": {
          "id": "bf941dd6-4096-4f2c-8671-2ec7ede64dba",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "ab17b4ac-9223-44c0-9195-f2684bea3e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "027f71bf-808f-45f5-aeed-67cb7102804a",
        "cursor": {
          "ref": "607b89ae-fc97-4f55-8657-7ccb56fb445a",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "9fb1bef4-7d61-4be2-92f7-dd02d575e81f"
        },
        "item": {
          "id": "027f71bf-808f-45f5-aeed-67cb7102804a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "3bdd5729-ee37-4717-9793-1091db0b2e44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2e9655-70cf-4100-8439-1b51135525a0",
        "cursor": {
          "ref": "cfbb1e33-abac-412c-aca5-dad55408e6cf",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "cd14098e-19b5-4c44-ae44-7b3488d96462"
        },
        "item": {
          "id": "6a2e9655-70cf-4100-8439-1b51135525a0",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d06dc40c-587f-40d2-bc97-05815956a5c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69b61cf3-c606-48b9-9763-fd5e1bee0a64",
        "cursor": {
          "ref": "bfbe56f3-75b0-4fbf-87c2-95bfdc1d9c02",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "dcf2477a-7967-4dce-9d3b-d85d5e620818"
        },
        "item": {
          "id": "69b61cf3-c606-48b9-9763-fd5e1bee0a64",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d92be350-a83a-4287-bd88-0cc0bbabd7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505b3d1b-7625-4445-a859-ff08ee257552",
        "cursor": {
          "ref": "bdb1b8b0-b20d-469d-bbf0-dbda1aa139ab",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "ae31da28-2f32-4ead-ad46-4517ec1dd6d7"
        },
        "item": {
          "id": "505b3d1b-7625-4445-a859-ff08ee257552",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "fa9cc493-ee92-4eae-bcbc-aaa23f864347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dff3dc3-0b0d-4158-919f-59bd1be9ada3",
        "cursor": {
          "ref": "90689d38-2aab-4e8b-8b70-2120057414fb",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "5164225d-6e3c-4abf-bd59-4861634c50ec"
        },
        "item": {
          "id": "6dff3dc3-0b0d-4158-919f-59bd1be9ada3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "99afeed6-b8d5-4c6c-8b6a-de34c5522aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83b59a18-9a3a-451b-9f80-b233cc96c70e",
        "cursor": {
          "ref": "7137cd73-2494-4ee7-a21b-21ae49d39f7c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "3694c2f6-a201-4d2c-9492-84c69e4d8c47"
        },
        "item": {
          "id": "83b59a18-9a3a-451b-9f80-b233cc96c70e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f694de87-b5d7-42a9-95a7-f3ca17179710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e191f69c-9e73-46f2-a4d6-b9a58f92be9c",
        "cursor": {
          "ref": "05f7ed38-17db-41d7-ad9b-572ff5999603",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "feea8d75-5ea9-4daa-bfcd-1a1cd75dfe10"
        },
        "item": {
          "id": "e191f69c-9e73-46f2-a4d6-b9a58f92be9c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "94ddf171-4aec-4309-a873-03c48133a35b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8537570-4f2f-4f67-baca-7475574226f5",
        "cursor": {
          "ref": "fc903174-f358-45e5-b284-91525bde2cce",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "4675127e-43fc-49c0-839a-2a476893ba0a"
        },
        "item": {
          "id": "e8537570-4f2f-4f67-baca-7475574226f5",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "551e0ab4-88f5-48fe-9b66-a817f29d492f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c34de75-9e98-40e4-aa55-2ffb44c8dc71",
        "cursor": {
          "ref": "3c837fc6-73ce-441f-9a38-c67b1e5d85d6",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4c5f2f10-d8c7-4dae-b2d1-15140098127b"
        },
        "item": {
          "id": "3c34de75-9e98-40e4-aa55-2ffb44c8dc71",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "888f159c-7528-4270-beb4-faae195f8572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97549d81-5b12-4b12-b245-9af72d4ff9d5",
        "cursor": {
          "ref": "a6245a17-2b0e-4eef-a8ff-f32dd2f64835",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4a2dc260-4303-4b49-a88e-1490b2983787"
        },
        "item": {
          "id": "97549d81-5b12-4b12-b245-9af72d4ff9d5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ba5bedfe-2b18-4bb6-9273-9ce7b840826c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6ba15a9-992b-4a95-aced-54a1655a7f24",
        "cursor": {
          "ref": "373456dc-1104-49e8-b75d-69a4695d9d3e",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "afb5ed80-8d1a-440f-be76-f4ea3f165716"
        },
        "item": {
          "id": "b6ba15a9-992b-4a95-aced-54a1655a7f24",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "d2aa1ada-c65c-464d-b99a-98289dc098c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5e29d4-9121-4e13-a32d-4f3611bd89af",
        "cursor": {
          "ref": "e01f816f-144d-4627-8bb4-39167d33ce21",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "3206864a-b3a1-4733-8be0-207f95c88051"
        },
        "item": {
          "id": "5d5e29d4-9121-4e13-a32d-4f3611bd89af",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9d0721cb-d0da-4a8a-b225-85b80323d74f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2591508a-085d-4027-8f2a-ba060f1cb995",
        "cursor": {
          "ref": "44ed5ceb-7927-422f-a78f-5c015e689163",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "cb274be4-b575-4bcb-87d7-b06f5c05bd25"
        },
        "item": {
          "id": "2591508a-085d-4027-8f2a-ba060f1cb995",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5b7b60c6-40a4-49e0-91ad-6f27410a2307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e35a8dc6-8248-40ff-832d-836bb631d0eb",
        "cursor": {
          "ref": "13ffff5e-8c1d-45e8-96bf-559d31c628ed",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "00859324-92dd-4721-8549-e4dfadb672a1"
        },
        "item": {
          "id": "e35a8dc6-8248-40ff-832d-836bb631d0eb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "ee19bcb2-d818-49f8-8567-534042b4b7a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9b493ea-a986-4939-907d-9b8c7d0e3709",
        "cursor": {
          "ref": "c525cf5d-634d-40c9-afce-54b4bc5cb150",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "93193831-3c46-446f-a4cd-04dcf66bd4d9"
        },
        "item": {
          "id": "a9b493ea-a986-4939-907d-9b8c7d0e3709",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "5b446d2e-61a2-418a-88c7-996baa15c250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091b5ac6-62ea-4d56-9275-14027c6dc709",
        "cursor": {
          "ref": "90da3111-7d34-41b5-8102-cf8a141d5fa3",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "c1d044be-a457-43d2-a55d-f82877eac8a7"
        },
        "item": {
          "id": "091b5ac6-62ea-4d56-9275-14027c6dc709",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "08621bfc-b6d7-4f48-add4-d5cb192020be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d75768d2-0c3f-4ae1-9317-07dc33245544",
        "cursor": {
          "ref": "0d71d0a4-b0cd-4137-abfa-0031066793e2",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7b457d2e-8d62-48bf-8303-7342418d53e0"
        },
        "item": {
          "id": "d75768d2-0c3f-4ae1-9317-07dc33245544",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "28ea8ddd-4224-4584-a9c9-f8a99bd8cee9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 87,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "7ab548ba-5c3b-481d-b9c7-d4395b064265",
        "cursor": {
          "ref": "3832bf86-cc27-4915-b495-cc1e4c2d0723",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "47ef25b4-d517-4627-a701-2c1c77e371db"
        },
        "item": {
          "id": "7ab548ba-5c3b-481d-b9c7-d4395b064265",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "f071f34b-17c6-4cb7-9d15-b30ba4deb926",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39e84657-4f13-49d3-a266-2cd545a467dd",
        "cursor": {
          "ref": "98489c55-1f6a-4774-ba05-1a8f4617270e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "d86bb2cf-dd69-4462-8a56-fe9a72c88d11"
        },
        "item": {
          "id": "39e84657-4f13-49d3-a266-2cd545a467dd",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "14c114f7-3f31-42cd-9c9c-081f503af7b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ba94bd3-1b57-4ede-951e-201f8437272b",
        "cursor": {
          "ref": "700ac497-0f5c-4ef0-a38a-e0f2649916b9",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "4f6cdf5d-f2ab-4a79-b33b-9667ccce7fdf"
        },
        "item": {
          "id": "3ba94bd3-1b57-4ede-951e-201f8437272b",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b671acb8-a92f-4a1e-82a0-2eed9b6a7ab8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49602e13-22c9-4679-a6bf-42b8aa0c8834",
        "cursor": {
          "ref": "14e62fe3-449b-4adb-a717-2d00bf25a5ac",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5409dcc4-3819-45d1-93ea-359800251e78"
        },
        "item": {
          "id": "49602e13-22c9-4679-a6bf-42b8aa0c8834",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "b1ebc0e5-ceb3-4cd5-8cee-d2708f8a6b4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed4bc17-9955-4ea8-a2ac-b159896fa882",
        "cursor": {
          "ref": "24f21664-cbe1-49fc-9c74-d209c348a0ad",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4b179519-8b35-4130-a0af-f2d5b50cdaaf"
        },
        "item": {
          "id": "7ed4bc17-9955-4ea8-a2ac-b159896fa882",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "147c085a-c93c-4a90-9079-d3e967cc8a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eebe191-b1fa-4ad2-9d5d-4e000d5c7532",
        "cursor": {
          "ref": "b97fa128-8849-4796-bea0-29cc60696ee3",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "f72252f5-7780-4e2e-8c59-ded01054bddb"
        },
        "item": {
          "id": "1eebe191-b1fa-4ad2-9d5d-4e000d5c7532",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "55b161d0-0cfd-477b-9694-e32216045fab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65234457-f1c7-48c1-9398-2ef93b2adaeb",
        "cursor": {
          "ref": "1cb94a49-c6d2-49d5-aa75-775cd5f8083f",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "66ba0378-f393-4e8a-9cc6-58eeafbfeb0f"
        },
        "item": {
          "id": "65234457-f1c7-48c1-9398-2ef93b2adaeb",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5d233601-1af4-4462-97e6-055482baea9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbd9631-56b0-4516-894e-389cb96d0846",
        "cursor": {
          "ref": "060a9dc1-08e6-4bfd-be8f-84a66835f940",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "fa234ce0-4dd7-47de-a29a-a70e0210233b"
        },
        "item": {
          "id": "8bbd9631-56b0-4516-894e-389cb96d0846",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f4227b82-0562-4cc7-a889-3d581116bdb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d391394-748f-4130-800e-245ff6f80be0",
        "cursor": {
          "ref": "2dba0742-6b1a-43bf-b2f9-94732407378f",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6a4e486d-5765-4a78-a21d-ad47232b2fab"
        },
        "item": {
          "id": "1d391394-748f-4130-800e-245ff6f80be0",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "4db257cf-b5c5-4275-812c-49540dd2e01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced77b1c-067d-4772-84e7-2ffb76b76a6f",
        "cursor": {
          "ref": "17b1b3af-ec58-4de0-9574-094941415106",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "9c93de46-989c-4c25-8777-ac0d3d608fcb"
        },
        "item": {
          "id": "ced77b1c-067d-4772-84e7-2ffb76b76a6f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "50069981-73b5-474e-9006-ae9d6cdaec1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2acf2c1-4d7b-4a29-9fd7-c9022a690497",
        "cursor": {
          "ref": "457a7472-536f-495e-9825-2367e90ad03e",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "2622abc8-052a-4de0-ad2d-774df497bde5"
        },
        "item": {
          "id": "c2acf2c1-4d7b-4a29-9fd7-c9022a690497",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "e9b7531b-84b8-4091-86c7-4bfac1d23545",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e643da-a2a6-4ee2-b3bf-4b9f4b8c5a04",
        "cursor": {
          "ref": "3401f425-6b22-4c13-a218-1d4ed12340ed",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9cdef163-0d61-4938-b9fd-d0990252f426"
        },
        "item": {
          "id": "b4e643da-a2a6-4ee2-b3bf-4b9f4b8c5a04",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6a3c8fca-050e-48fb-b7e7-aaebabc267e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1eb9799-b82e-44c6-9e18-fb740574a19a",
        "cursor": {
          "ref": "7f305ca2-737c-49e5-9253-523a00fb7cb3",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "96b6d5b5-7890-465e-b05b-afe309d70bd4"
        },
        "item": {
          "id": "c1eb9799-b82e-44c6-9e18-fb740574a19a",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9653978d-bee8-4783-bb0c-a236b554e783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "017d1291-b6e8-4006-a025-a7e523f6f80b",
        "cursor": {
          "ref": "ff5b2e59-e36f-4d61-814d-d3b38d4c6c9b",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "975afa31-e266-434f-b609-f920ab4528a2"
        },
        "item": {
          "id": "017d1291-b6e8-4006-a025-a7e523f6f80b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "05601e8e-6768-4682-a378-981be96baef0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c75c67-06ff-4da7-a96b-6fa79976b3cd",
        "cursor": {
          "ref": "e87fdb1d-379a-4bab-88e6-0777a5aa9184",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "bc3fb4f1-7f16-4cfe-98bc-0ac1d2c07d95"
        },
        "item": {
          "id": "f0c75c67-06ff-4da7-a96b-6fa79976b3cd",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "204d6a1c-94a9-465b-90d7-19f65551380d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 86,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "f9077acc-7c45-4334-84eb-b7335aee2128",
        "cursor": {
          "ref": "f00ef658-47e2-4c9b-9b5f-d37072f117c6",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "e237978e-5e14-4fc6-8b23-5fca3973fc1c"
        },
        "item": {
          "id": "f9077acc-7c45-4334-84eb-b7335aee2128",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "73e1f842-c7e1-46ff-a66e-bb748a506f0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "188d6d64-da1f-4d80-a52e-a61dc635a466",
        "cursor": {
          "ref": "8f4bff01-fa08-430c-a4f4-f5a7ef1664b6",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "803bbf82-e92a-46ef-94dc-a1145f0bc744"
        },
        "item": {
          "id": "188d6d64-da1f-4d80-a52e-a61dc635a466",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "16da49c8-53c0-4329-b9ba-4c6f92d7a9f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e6f587d-ce06-4fc5-b643-e753880c6d24",
        "cursor": {
          "ref": "211f6c22-74ed-4173-82fb-f297970a01af",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "39b14e13-84aa-474a-8233-b4c473f19b4a"
        },
        "item": {
          "id": "5e6f587d-ce06-4fc5-b643-e753880c6d24",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "6f0ab0ff-e294-4d5a-950f-120a220d8a0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9a9ad7-22d4-44c9-a088-c5eea00a141a",
        "cursor": {
          "ref": "a152b407-13cd-49a6-a0c5-ffe65f45ba66",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8848d78e-8915-43e0-8d98-a075d007ac8e"
        },
        "item": {
          "id": "dc9a9ad7-22d4-44c9-a088-c5eea00a141a",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "0d3848b2-250e-4e56-bd56-dc2584ef3055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7b2bfd3-0030-427b-8a8d-df73e6cf4d91",
        "cursor": {
          "ref": "6935ec9a-8a48-4a2f-9b3c-6544fbf7c558",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "6a51e5eb-795d-41a3-b8e2-b539b76cc533"
        },
        "item": {
          "id": "d7b2bfd3-0030-427b-8a8d-df73e6cf4d91",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "52ee67d5-cfaa-4ad6-9f7b-d133826d0028",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d9c9e5f-1ce4-4fac-a1e1-d9b76dbee81b",
        "cursor": {
          "ref": "1406c357-c78d-45e5-b5f4-8a10dad7b51a",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7e424510-cb1a-4f2c-aba0-7687e41877ca"
        },
        "item": {
          "id": "9d9c9e5f-1ce4-4fac-a1e1-d9b76dbee81b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "752e6ebd-9661-4b1d-befb-21897bdc67bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3759e2a7-a962-492b-a0ce-fbc570c45e6b",
        "cursor": {
          "ref": "07a43974-7a7c-4f2b-8389-18a669227ddb",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "ece1caab-b34e-4a5a-8c32-b0ddc35b60c2"
        },
        "item": {
          "id": "3759e2a7-a962-492b-a0ce-fbc570c45e6b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "ea894984-f916-4635-9854-504ed706a039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "265b6f37-da92-446a-8428-958f0d318ecf",
        "cursor": {
          "ref": "b9406726-7f48-4fc5-bd8e-cd901708dbc3",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "5e97601d-d618-4452-8b5d-86b5c82f482a"
        },
        "item": {
          "id": "265b6f37-da92-446a-8428-958f0d318ecf",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "5564e10d-8b0a-44d2-9fa2-7c5c88fe8128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2cb7b3a-ba8c-4941-8198-d0963aee81e2",
        "cursor": {
          "ref": "08a6cdd3-4986-4215-8baa-bb43424e307f",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bb498b96-1c85-4668-ae5c-0f1b5d536a98"
        },
        "item": {
          "id": "c2cb7b3a-ba8c-4941-8198-d0963aee81e2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d7f5f69c-e989-48b9-8ecc-83e3a9e86d94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f0be56-9e00-41aa-aa1c-eef92a276866",
        "cursor": {
          "ref": "e918a0ee-e4cd-4087-9b79-122d71b1ea25",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "541f352e-5787-4df2-ade7-33573b602146"
        },
        "item": {
          "id": "a6f0be56-9e00-41aa-aa1c-eef92a276866",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9fd9d4f5-2e4c-497d-8c32-2d9c060b1371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded10d97-65b7-4ef0-bb59-e731a78170bb",
        "cursor": {
          "ref": "2ec3ca04-ddd6-48f8-b722-c5d3bfccb036",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e7562ff7-b7f8-4938-b18c-12c28745f4a9"
        },
        "item": {
          "id": "ded10d97-65b7-4ef0-bb59-e731a78170bb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b83f4ca7-a37e-45ae-827c-3b56bc6a3f43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e800b856-1331-474f-9adb-39ddc3cbb00d",
        "cursor": {
          "ref": "c25e0a8b-29a2-46f9-931f-ec3589691a4f",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b19e1dd2-306f-45a2-8c56-2bf56e7f4c23"
        },
        "item": {
          "id": "e800b856-1331-474f-9adb-39ddc3cbb00d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8f700b54-524e-4e2f-a28e-d004a3ad0c71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8aae1208-97c4-4103-b209-da1761fc593e",
        "cursor": {
          "ref": "5fcf6283-36cc-4e98-b9a6-541e97b31e77",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "a9e556c4-8a2c-47a5-9b17-af30678b024f"
        },
        "item": {
          "id": "8aae1208-97c4-4103-b209-da1761fc593e",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a3750617-e0f3-40c3-bd0e-5c47b7f18865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "289d19f1-7665-42f5-b590-37fae2cb80ab",
        "cursor": {
          "ref": "978d3a48-de38-45a6-acbb-89f249372487",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "92a98afb-a29c-4938-8da6-c42926e7a5d8"
        },
        "item": {
          "id": "289d19f1-7665-42f5-b590-37fae2cb80ab",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a072d747-8822-4c17-988c-02b535ff489d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcad06f-dc80-4bff-b428-0ebd421bc7f6",
        "cursor": {
          "ref": "0d585a4f-b400-4645-a956-6e46b9dc2c2f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "8b3e01a1-89ca-4d90-8c2e-72c05f537005"
        },
        "item": {
          "id": "0bcad06f-dc80-4bff-b428-0ebd421bc7f6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d05e28eb-d859-4b19-a176-5cc7378c5f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaf9467-fd03-42f9-98c7-e146b9125700",
        "cursor": {
          "ref": "4d19b28d-0e8d-4a42-b690-f88a8448e3ed",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "ce137df2-3d32-4a4b-9b51-e132656df0e0"
        },
        "item": {
          "id": "faaf9467-fd03-42f9-98c7-e146b9125700",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ead01472-d202-4abb-876d-3cddec0535bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1ad90f-2f21-44c1-b095-67401458d636",
        "cursor": {
          "ref": "21577a19-8923-47eb-ba9c-d6df60e200ff",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "e485a1ce-25df-4b4b-afd1-2b22403e97c4"
        },
        "item": {
          "id": "7a1ad90f-2f21-44c1-b095-67401458d636",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "0f2b8507-d4e1-4896-84f6-b1d95dee6884",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6212a88-fb79-4094-9899-9bedaa583e97",
        "cursor": {
          "ref": "c761811b-5ccb-440c-b0a9-5a0e821d9699",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "667b6d1c-0cb5-4eb0-bdec-e9871e7dd22b"
        },
        "item": {
          "id": "f6212a88-fb79-4094-9899-9bedaa583e97",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0cd56331-1213-4024-a103-75e00efd963d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1d2b732-aef3-4841-9aee-f7676f7d3d81",
        "cursor": {
          "ref": "dcba3002-bf6b-48f0-a64e-9c552ec8ab83",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "b52d4386-c77d-45a4-83b1-c1ea551d360e"
        },
        "item": {
          "id": "a1d2b732-aef3-4841-9aee-f7676f7d3d81",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "340dcb83-3273-4e29-a214-63be9e9b7317",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c82f3f4-8992-4b59-986f-8c6c015d7529",
        "cursor": {
          "ref": "426e9af7-7f7e-426a-ac00-53dc300a8653",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "86ab34b4-bd33-488b-844f-b8202b3de7ed"
        },
        "item": {
          "id": "7c82f3f4-8992-4b59-986f-8c6c015d7529",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "c0d25ef6-7c6e-4c0b-8158-c4eefdb47463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fbbc3c-018c-4495-87c7-7d28b4f94ef4",
        "cursor": {
          "ref": "fa1c4b17-8a9e-487b-8134-a64eada729bc",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "dd10ea17-4b02-477f-a345-46f3802576b4"
        },
        "item": {
          "id": "d6fbbc3c-018c-4495-87c7-7d28b4f94ef4",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e67923de-2dd5-4ce7-a465-a541e25d4069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12e97a79-1812-4d2d-87a2-8bf14d6574bb",
        "cursor": {
          "ref": "3b8fad1b-6a87-44ad-9881-faee24029c3d",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "27ee4991-9023-4a8c-8008-82bb317fa0d4"
        },
        "item": {
          "id": "12e97a79-1812-4d2d-87a2-8bf14d6574bb",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "3d5151ff-ce2a-4cfc-a911-019c6d44092b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b774321-a795-4b53-b140-95d1833e9e62",
        "cursor": {
          "ref": "2994b06b-4924-4b9e-b2ad-255e14cc61a5",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "fa89efdb-d9ef-4ae2-aa22-a999ca61be19"
        },
        "item": {
          "id": "6b774321-a795-4b53-b140-95d1833e9e62",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7894a505-9d76-4f6f-96bd-1bacf634562d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b37dddb-e825-4c00-b222-5c2d738cc8d8",
        "cursor": {
          "ref": "63ef446d-7f7a-43b1-8d6b-e495102d686a",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "779eea75-3876-4453-8985-47e70d24807f"
        },
        "item": {
          "id": "6b37dddb-e825-4c00-b222-5c2d738cc8d8",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b7fe3ec9-61f0-411a-8b81-6030c79edb41",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "610dd230-a53a-464f-b05c-7b40a6a62e8f",
        "cursor": {
          "ref": "29ab3077-77c9-4a48-a7ff-b91f9d821c86",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "542be0a6-bba5-4ed7-87a3-1ad1d23dcd4e"
        },
        "item": {
          "id": "610dd230-a53a-464f-b05c-7b40a6a62e8f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "152fe2e6-cf24-4ee6-8be7-b089340587d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "337edfd9-1d80-49a7-887e-ab2652b83fe6",
        "cursor": {
          "ref": "6bafb7dd-6957-4246-9679-1ee127323e69",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "2531acff-af82-46c6-b2e7-7f4361aa7786"
        },
        "item": {
          "id": "337edfd9-1d80-49a7-887e-ab2652b83fe6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "232772f5-7670-4e34-9b1f-5c415076d4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab340923-eec4-4adf-a9c4-bfc061020a9e",
        "cursor": {
          "ref": "d21244d1-b036-47eb-b10a-21f575b93efd",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "48bc8ab5-d609-401a-a487-5f86bccd1289"
        },
        "item": {
          "id": "ab340923-eec4-4adf-a9c4-bfc061020a9e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "67c8bab9-52cc-40c5-81d1-dd05fdea802c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef76dca9-d080-428e-a64f-536d509987c9",
        "cursor": {
          "ref": "e78a71dc-d070-45c0-b9a1-91bfc5c290b0",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "13ab22c6-5eea-4862-829a-8e51ef9b9383"
        },
        "item": {
          "id": "ef76dca9-d080-428e-a64f-536d509987c9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "45ee21eb-6cd3-47f2-a70e-5fb54d955581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc79d5f-836b-4b78-b66d-68a8e4d30e56",
        "cursor": {
          "ref": "12f1a39c-f955-45c1-9887-a09cab6a3fc8",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "b97b93e3-feb3-4d47-a162-0064b38f418c"
        },
        "item": {
          "id": "6cc79d5f-836b-4b78-b66d-68a8e4d30e56",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "ca0e34b0-523f-4588-b069-e375e5717292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb14697-0cbf-49d9-8fbc-245512fe78a6",
        "cursor": {
          "ref": "c31b68ec-5a30-4d1d-a793-49114c25194e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "28f6def4-0c9e-455a-a403-9f55674197f7"
        },
        "item": {
          "id": "3cb14697-0cbf-49d9-8fbc-245512fe78a6",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "103764ad-da0d-4568-a9a9-c3cd5729563d",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "0cff9e9e-6918-4006-aacc-a8bdea4803c5",
        "cursor": {
          "ref": "fa7fe477-88b5-457c-927e-9d8445fe5d40",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2044066e-fa53-4035-be10-71b07c864e4d"
        },
        "item": {
          "id": "0cff9e9e-6918-4006-aacc-a8bdea4803c5",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "342945f1-27dd-4ee3-8f92-2a7fd8d0c2e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3ed6cd-8097-47b9-b9be-8fd097dc5f97",
        "cursor": {
          "ref": "4e2809c2-6874-47e5-8e48-0e9da2607a6d",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "01151efa-733a-4dc6-8d39-42ed80b7a675"
        },
        "item": {
          "id": "ac3ed6cd-8097-47b9-b9be-8fd097dc5f97",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4a6dfa57-7fe3-4c82-b03c-163a1f415bc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc57315f-f0bd-4516-affe-ff83ad250473",
        "cursor": {
          "ref": "00da5915-84a4-4b92-bae2-7d401b18d7ca",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "c565a03b-3abd-4a23-8499-39de32dd0ed2"
        },
        "item": {
          "id": "dc57315f-f0bd-4516-affe-ff83ad250473",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "abda47cc-1e77-423c-801b-fb38cc8aa184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2a36b63-8abd-4a3e-ac05-86a08e5f8346",
        "cursor": {
          "ref": "1c5e0179-f9be-445a-ae5c-d0acfaf3b69f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a92bbfb7-0eab-4fe6-ab80-a81d895f22bb"
        },
        "item": {
          "id": "d2a36b63-8abd-4a3e-ac05-86a08e5f8346",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "10a0e44b-e595-407f-b2d8-c115b2fa1786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "689ca744-d9eb-4625-9728-e48597b02c63",
        "cursor": {
          "ref": "18b5b053-1127-42e5-af79-660be3f410c7",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2295eb03-8a5e-4cf0-90c2-5143e674afc3"
        },
        "item": {
          "id": "689ca744-d9eb-4625-9728-e48597b02c63",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "69865dfd-8504-4c01-8768-bef5a17da2e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa11d0e4-1f8b-458b-b938-0e06565dca1e",
        "cursor": {
          "ref": "6463083f-b7e7-497e-88be-280193a7a715",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "53fa139b-be1d-45cf-83e5-5923546fc1f9"
        },
        "item": {
          "id": "aa11d0e4-1f8b-458b-b938-0e06565dca1e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "2082c791-3408-4f81-a262-64695e6906c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75138c4e-ba82-442e-9c0b-5898d46cd8f4",
        "cursor": {
          "ref": "549b47e6-593f-43c9-b446-0faaec1023d7",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "aba25aa0-5e96-416b-a209-7397bb4a9e74"
        },
        "item": {
          "id": "75138c4e-ba82-442e-9c0b-5898d46cd8f4",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "ea06d88d-af1f-4c76-ab19-c14e62369f49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca65865d-f253-418b-904f-e23b710c2314",
        "cursor": {
          "ref": "b71c6cee-ab06-4fcb-b6b1-5716157378c8",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "8484baf1-b419-4f33-b09f-c6c78495368b"
        },
        "item": {
          "id": "ca65865d-f253-418b-904f-e23b710c2314",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bb3250d4-0e54-441b-a744-8445b07f5044",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6297ffee-bab0-4f20-8108-95de5099ab79",
        "cursor": {
          "ref": "5305c97c-0373-4536-bef5-6e68158be2d4",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7d81366e-1d25-49cf-a5f0-ece725c42842"
        },
        "item": {
          "id": "6297ffee-bab0-4f20-8108-95de5099ab79",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "9c82d755-3e11-42d5-8f67-019df1367ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a781ab9-222f-46a2-9e2f-35db9e63a5c2",
        "cursor": {
          "ref": "b05db38e-ee2e-4e14-84c9-37a35fbed2ce",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "cc6a245e-b117-462c-8cbe-ccbeac2837bd"
        },
        "item": {
          "id": "9a781ab9-222f-46a2-9e2f-35db9e63a5c2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0ef8a2f1-1e42-46c4-820f-21569380d4e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76b6da32-6c21-4295-afee-932e9bb0972f",
        "cursor": {
          "ref": "4387102a-136e-4380-a693-0cbd8e270d86",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "eeff3b61-9af0-46f2-a194-73ebf5018128"
        },
        "item": {
          "id": "76b6da32-6c21-4295-afee-932e9bb0972f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "fa17952d-4d01-4f4f-8d63-55491220fc4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf115683-6cbe-4888-b13b-3430270d60bc",
        "cursor": {
          "ref": "f567e30b-83b0-49d0-812a-faedec436473",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2c4512e6-c3a3-4790-b71e-67b6907b212d"
        },
        "item": {
          "id": "bf115683-6cbe-4888-b13b-3430270d60bc",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "cbdc61f5-7a93-4de1-af30-c70fb04942b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2968d07-f22b-4398-b90b-c58722bd5121",
        "cursor": {
          "ref": "da1cd676-f1ff-4b13-a067-18790b655a49",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "420b0cda-2a84-420f-a2dc-bcdb7abaa7b5"
        },
        "item": {
          "id": "c2968d07-f22b-4398-b90b-c58722bd5121",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6bc34407-2d11-41b3-bdcd-381eb8dd3ae2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a26b8d9-8887-42a9-b2e7-726b46133697",
        "cursor": {
          "ref": "8217c317-021d-49c1-b630-168900cff7b7",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5096be59-daa7-4b1c-99c7-c182b268b41e"
        },
        "item": {
          "id": "7a26b8d9-8887-42a9-b2e7-726b46133697",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "75e34d32-06eb-47ea-9b13-c72bfa0cdc75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df838d17-a12c-46c5-bd5d-4d73b1441020",
        "cursor": {
          "ref": "6e822d0f-124e-4e96-95bb-a94b91fb0e90",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "226d07ee-0523-4744-9021-96f821f26d6c"
        },
        "item": {
          "id": "df838d17-a12c-46c5-bd5d-4d73b1441020",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "aa4226c3-29dd-4b3a-b43f-19e2e9498fa4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8fa852f-5bca-4b8e-859a-f5f419367967",
        "cursor": {
          "ref": "8fb49183-e6a0-4f5b-a457-65470aac9e45",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "717d169e-5774-4d11-a5ac-ed350b4bd4e9"
        },
        "item": {
          "id": "d8fa852f-5bca-4b8e-859a-f5f419367967",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ca4e6149-87d6-4ae6-ba89-bca18916ab34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359c6200-e7f2-4be6-88ae-14a7bc1dda49",
        "cursor": {
          "ref": "23615320-e456-485f-b8d6-c80591107bf2",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "cf4371d4-e83d-4d44-9c00-b6016f2b10d6"
        },
        "item": {
          "id": "359c6200-e7f2-4be6-88ae-14a7bc1dda49",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b9bcd49e-696a-4094-8432-bacdfccad66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d7fab77-971b-43e2-8e25-6d471da39d7a",
        "cursor": {
          "ref": "07bc0d30-a11f-4023-af77-43451f80beb1",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "43bccb19-cf4e-4f09-a05a-28147bea643a"
        },
        "item": {
          "id": "7d7fab77-971b-43e2-8e25-6d471da39d7a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "fc6cd8d5-084a-4745-981d-9540d048411e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c0198d-880f-4f48-b122-d3e958973171",
        "cursor": {
          "ref": "31b2f80a-4862-497c-9f3c-ae286bd85641",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "23f58650-9b83-4a74-9f6a-36a77d6741c9"
        },
        "item": {
          "id": "04c0198d-880f-4f48-b122-d3e958973171",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "9554a773-17d0-4240-9b94-f72b92d3f66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fc4c4ea-b7bf-463c-a212-f145fe224723",
        "cursor": {
          "ref": "836ac300-ff3c-4a34-890d-8d798af4efc1",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "e812d359-4926-4004-a9fb-34b03bd4fd6e"
        },
        "item": {
          "id": "5fc4c4ea-b7bf-463c-a212-f145fe224723",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "653c867f-26a7-4bcb-a506-83cca9de32c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4665f30-21cd-43f0-858d-d7d4b2eebf67",
        "cursor": {
          "ref": "e5f90532-71cb-479f-aac3-04de51043bb2",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "a06cfff8-ab9d-426c-97f5-96f40a99cd9a"
        },
        "item": {
          "id": "a4665f30-21cd-43f0-858d-d7d4b2eebf67",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "04c266df-83b6-47c0-974b-c68881082bbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0067357-0436-40cd-aa58-2df2f01dc7a5",
        "cursor": {
          "ref": "29eaef3b-ab0b-4fb2-9eb9-9139d179210d",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "55a0e90d-882a-42d2-b473-8146a07a6181"
        },
        "item": {
          "id": "f0067357-0436-40cd-aa58-2df2f01dc7a5",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "83864fec-7b55-4000-b505-034e622881de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23327f95-806a-435a-9221-cb46da4f44ed",
        "cursor": {
          "ref": "aaa577a0-cd5d-4601-92fa-a3dc4117c9be",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "665a40d1-d798-45d1-a6a9-cfa4150bfde5"
        },
        "item": {
          "id": "23327f95-806a-435a-9221-cb46da4f44ed",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "264964df-c479-4cff-ba87-e7a340c3bb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29044ac1-ceae-43b2-8f11-0783d100a7bd",
        "cursor": {
          "ref": "9c143153-f99d-4c65-9369-69c42a610abb",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "4069afc6-f6e0-4b51-92c1-b0e9cb377e5d"
        },
        "item": {
          "id": "29044ac1-ceae-43b2-8f11-0783d100a7bd",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c241a9c9-546e-4368-8945-a0e8cd1f0e15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2f3eddc-7f41-4c3a-b816-3c8db7f16d75",
        "cursor": {
          "ref": "dd4a827b-669c-467d-86c3-af91abf0c584",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a8d68420-c182-493a-bd9e-472e4a68bdea"
        },
        "item": {
          "id": "b2f3eddc-7f41-4c3a-b816-3c8db7f16d75",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8f0441ba-dda8-456f-98c5-15b9f257bc74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88fc72f-c939-494c-b26b-18cfc2b6b5db",
        "cursor": {
          "ref": "4aa58852-d5cd-4452-9085-a4599adfa7a9",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "1ca0d0c7-c11b-47d0-b439-0c6ae6fb951a"
        },
        "item": {
          "id": "c88fc72f-c939-494c-b26b-18cfc2b6b5db",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "1288b04b-a2f0-4c18-89fc-c29af394c738",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd58dd1a-8ad7-4e00-9f55-fc2ecc1968fd",
        "cursor": {
          "ref": "fef0d25b-83bf-4ca5-be2f-2fdc4c1d40bc",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "121ed497-314b-4a75-98b5-320649153bff"
        },
        "item": {
          "id": "fd58dd1a-8ad7-4e00-9f55-fc2ecc1968fd",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "04e8d319-e2b3-45e1-895a-aa2a6a4dfbd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb45c43c-1735-4547-9e73-97d1da164c27",
        "cursor": {
          "ref": "54b0fe70-565c-4ccc-9f88-a095cfff4ee2",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "b0aa475b-88c7-4a08-95d9-24e95c20fee7"
        },
        "item": {
          "id": "bb45c43c-1735-4547-9e73-97d1da164c27",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "98c4755e-2cc8-4ba6-8f03-014a93a94f4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57dd5159-506b-4be6-b13d-e4f05390bb4a",
        "cursor": {
          "ref": "f0342cfb-8821-4aa9-b71b-0ede95642eb1",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "fec227f2-580b-4c6a-8769-6796e56b4302"
        },
        "item": {
          "id": "57dd5159-506b-4be6-b13d-e4f05390bb4a",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "9720cbec-f363-465e-86cb-0f0615d50f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc693eb-d43d-4137-9e89-63c4d1341d48",
        "cursor": {
          "ref": "3d5262d3-b4ed-416f-9fac-d3eb606df9c1",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c2e82515-8411-4943-9813-b4e1f283bd97"
        },
        "item": {
          "id": "fdc693eb-d43d-4137-9e89-63c4d1341d48",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "630173f0-bc40-4b39-a256-decbd2552c19",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "f7741b88-672f-4dce-bf3a-cb1af65e5f43",
        "cursor": {
          "ref": "452c1471-aa2d-4f5a-a53d-82504bc662c2",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c5ad7479-1567-4415-9ae9-58608746d16f"
        },
        "item": {
          "id": "f7741b88-672f-4dce-bf3a-cb1af65e5f43",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "3d302de1-8526-48c9-b8a4-839d00758f5f",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cc4d84e4-5fc8-4104-bf89-6556c3776bc3",
        "cursor": {
          "ref": "64f1f6eb-0e46-4e94-8c4a-1f24409aef6a",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "061090d2-d87e-45ac-a7db-5186d5afaaed"
        },
        "item": {
          "id": "cc4d84e4-5fc8-4104-bf89-6556c3776bc3",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "3e9a1ee3-f9f0-45a6-92a9-5dd67d986b62",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9d263575-2057-4192-adc0-7fd9de602599",
        "cursor": {
          "ref": "26a36b3d-2589-4ec9-adc3-60cb8abfacd3",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ba293a37-3395-4dba-a1ca-90cd76b712c1"
        },
        "item": {
          "id": "9d263575-2057-4192-adc0-7fd9de602599",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "86e3190b-8c9e-4a1d-9887-312289a46e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ae437b3-30f0-4e92-9649-e26665cf1945",
        "cursor": {
          "ref": "6c49f30f-8d06-4533-9b4a-9ee9014b5105",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "55449b5d-dd33-4733-aa7a-fbcb76db99b8"
        },
        "item": {
          "id": "1ae437b3-30f0-4e92-9649-e26665cf1945",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fdaf8dfb-4f13-4fac-ba4d-5ee94cc6b79e",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "386d0987-6c27-4a41-b178-4a551e5f4b54",
        "cursor": {
          "ref": "5e3efadf-12a6-4fb9-b8f3-f9d156f5089d",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b8fab598-a4cd-4680-a416-f33c19f0bf76"
        },
        "item": {
          "id": "386d0987-6c27-4a41-b178-4a551e5f4b54",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bb37fe66-cddc-4f1f-9c31-7f8b81b247fb",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "b238a2b6-d567-4b48-ba7b-b533d5f1875a",
        "cursor": {
          "ref": "71249629-5fd0-44eb-a40e-0805e80b08d7",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "f316f6a3-2e9e-4274-8f9c-a05069ce8b49"
        },
        "item": {
          "id": "b238a2b6-d567-4b48-ba7b-b533d5f1875a",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "4d335e06-0033-4f2e-985d-15de4c3358c5",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "c5882ca9-a07a-40fa-8c67-75c3f1df37a9",
        "cursor": {
          "ref": "5772649c-b91c-4a2f-99c1-5d9f55401f7e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e9dac9d9-5d12-4f71-a459-a269807bae13"
        },
        "item": {
          "id": "c5882ca9-a07a-40fa-8c67-75c3f1df37a9",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "b6366696-8580-4405-ae3b-c9a675f366ed",
          "status": "OK",
          "code": 200,
          "responseTime": 135,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "0b5e2e8e-25bf-459a-85d5-a3564613e5eb",
        "cursor": {
          "ref": "58f99103-82af-402c-992b-b4f1e321d2f1",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "480aa6a7-062e-4fd1-b071-94ff0bb26ba9"
        },
        "item": {
          "id": "0b5e2e8e-25bf-459a-85d5-a3564613e5eb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2ef14276-f0af-4a42-8fc1-1bdf0298e78a",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "4218e792-1ff0-482d-9a08-59824e1ad432",
        "cursor": {
          "ref": "8b04a8c7-c93e-411e-b905-b6438cac0b5f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4e96e027-0366-423b-aade-8c28ac14ae6e"
        },
        "item": {
          "id": "4218e792-1ff0-482d-9a08-59824e1ad432",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "13e1ef87-0aaa-41bf-85bf-3e3b784139b4",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "eda2fe35-0287-409b-b1ef-182e7c302c1d",
        "cursor": {
          "ref": "669815a7-3549-4b8c-ae46-86580d96d875",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "85c6e247-044d-455f-8eb5-921a0985e806"
        },
        "item": {
          "id": "eda2fe35-0287-409b-b1ef-182e7c302c1d",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "ed53b26b-5c6a-4238-8f83-64aeda7ba412",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adb061b7-5112-42cc-a0d7-68fbc454868d",
        "cursor": {
          "ref": "2540f6e3-b50f-4e22-9db4-187d17c9ed66",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "6023b9a7-3640-4c84-85ba-87f5d450fd55"
        },
        "item": {
          "id": "adb061b7-5112-42cc-a0d7-68fbc454868d",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c876c114-cd22-4ce3-8d89-17eee62b52a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12eed228-2c1b-4ca5-a4f6-9df9e081e4a6",
        "cursor": {
          "ref": "3d04677d-9540-4e51-bc6a-bc0df31cef8e",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c42e0bcb-902e-4e17-aa50-009174ed99eb"
        },
        "item": {
          "id": "12eed228-2c1b-4ca5-a4f6-9df9e081e4a6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "5c9559de-cbe3-42b9-b70f-c3dd092c347a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45337cce-a7e5-42e7-bb9c-a7bc02fd1b91",
        "cursor": {
          "ref": "47cbb419-dd25-4b5b-ad32-099ca88d272f",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "45af90ea-2af2-4246-b518-6dc2ffcb5f61"
        },
        "item": {
          "id": "45337cce-a7e5-42e7-bb9c-a7bc02fd1b91",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "84db941d-1041-4357-8d34-3b5a1d1b06e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee6b7b8-8e4c-459d-b5b3-0d5dec46cb59",
        "cursor": {
          "ref": "2a79dcea-36fa-4c72-96f0-936b7863e150",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "85cbfee6-7fc4-4df8-90ea-2040c804d0f9"
        },
        "item": {
          "id": "5ee6b7b8-8e4c-459d-b5b3-0d5dec46cb59",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "83355084-8109-4352-99f8-509dc6c8fd69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "001fa2aa-47ff-4a73-906e-65aaa55db127",
        "cursor": {
          "ref": "3d7822b7-18d0-4eec-b3a0-b5d58a0a624e",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cc9117b0-8a12-4344-a6b7-d76281c7fb62"
        },
        "item": {
          "id": "001fa2aa-47ff-4a73-906e-65aaa55db127",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "cac33b24-ac46-40b4-9077-829068387941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb0b22e4-0dac-4a6f-9ea5-080f2c16448d",
        "cursor": {
          "ref": "f20147e1-7167-4ee5-bea0-41c1ca7efa8e",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "94b42b31-7187-4051-acab-c4420ddb38ef"
        },
        "item": {
          "id": "cb0b22e4-0dac-4a6f-9ea5-080f2c16448d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "41fb3110-a231-4237-b5b4-3551da3891cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03861c96-4b11-465a-9b6c-4cd7af64ab81",
        "cursor": {
          "ref": "b119e040-0678-4ba8-a3de-a31f9d37c171",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "fa88f76f-100a-4453-afcb-c9dae1fb0e33"
        },
        "item": {
          "id": "03861c96-4b11-465a-9b6c-4cd7af64ab81",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9e279369-dc95-4d27-a5d8-ca9582efcc2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc0c045a-8577-4031-951b-c16857282793",
        "cursor": {
          "ref": "8140106a-df6c-46da-b72f-601cada8610b",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "30873adb-f528-46d3-8443-be98464c211c"
        },
        "item": {
          "id": "fc0c045a-8577-4031-951b-c16857282793",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "8d0425d7-1c96-4530-b127-3394680f57e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff129a8-fe7e-4aef-b0f5-1d27ba0c565f",
        "cursor": {
          "ref": "8dc70e6d-463f-4daa-b62d-4196abb008c7",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "53a843cc-0131-43d4-bb6a-9859aa6a0e0b"
        },
        "item": {
          "id": "bff129a8-fe7e-4aef-b0f5-1d27ba0c565f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6a04791d-c4a0-49dc-b69b-c110b675cd80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77d23789-6ba5-487b-aeac-7fce4b92513b",
        "cursor": {
          "ref": "e2ed1d1c-6fff-43fd-b733-000cbd24784a",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "0d4ac03a-2172-4c36-9f0f-8bd83e9d4aab"
        },
        "item": {
          "id": "77d23789-6ba5-487b-aeac-7fce4b92513b",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "cca5d301-a97a-42ec-9757-6d2c944c0d53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a245785-6f9b-403a-aee4-567cd8ec3c1e",
        "cursor": {
          "ref": "c3097e61-e4ea-4114-9b39-cfcc9ddf36ef",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "65f81195-0890-485d-9f73-f6a6b36d423b"
        },
        "item": {
          "id": "5a245785-6f9b-403a-aee4-567cd8ec3c1e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "87840f62-2499-43ca-ba2d-115fabd908f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d37f91e-047c-4e40-9a72-94efc79fe9de",
        "cursor": {
          "ref": "1c07491f-fa64-4c40-8cbf-4744b5220dc9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "926fd551-3937-4548-8ceb-d3c846139742"
        },
        "item": {
          "id": "7d37f91e-047c-4e40-9a72-94efc79fe9de",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "afb2c331-ce60-466f-8a10-9e26a982b962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe71fe63-43b3-48fb-8275-0001f14665cf",
        "cursor": {
          "ref": "2401268e-e676-4bf8-a814-e01bca561e55",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "69eb9528-6ff1-4137-8858-c300a3656532"
        },
        "item": {
          "id": "fe71fe63-43b3-48fb-8275-0001f14665cf",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "fb6d3b1d-2b98-48f5-93aa-e5f03aa541ea",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "0bdf9a7f-7cb7-46e2-94c3-6f9c660de032",
        "cursor": {
          "ref": "cde4c515-a7be-4945-a120-ef8f878eb2ed",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "7268a7c0-c8ff-43cb-8233-b1f4d1ade802"
        },
        "item": {
          "id": "0bdf9a7f-7cb7-46e2-94c3-6f9c660de032",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "c0c5ee82-dc31-4f8a-b78c-2d57bba0a07c",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "2ac823e1-6eea-4a1a-8f8a-61a9e74dcc02",
        "cursor": {
          "ref": "3dba48f3-f32e-49c1-852b-7644260bef86",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "c93f7631-d3c2-4e34-b2fa-3cc6ee2e1e4e"
        },
        "item": {
          "id": "2ac823e1-6eea-4a1a-8f8a-61a9e74dcc02",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "871c3fa9-10de-4d26-b84c-c40a648d193e",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "3c456751-8322-469b-9bc2-3f9b64cfbcc5",
        "cursor": {
          "ref": "5f24a7a6-f580-4d95-b0eb-8d83ee516e63",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "98925752-66e6-4295-95fd-b362c86f3ffe"
        },
        "item": {
          "id": "3c456751-8322-469b-9bc2-3f9b64cfbcc5",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "801ae025-1634-4fde-93e9-045c9acc7c71",
          "status": "OK",
          "code": 200,
          "responseTime": 127,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "23ccefe8-7858-43d9-9daf-475bdaad84c6",
        "cursor": {
          "ref": "5d6450ab-6c32-4c88-9098-f3913a94265a",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6fa4ad6c-0f40-4a69-805f-4828157cbabf"
        },
        "item": {
          "id": "23ccefe8-7858-43d9-9daf-475bdaad84c6",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5653a134-c6c6-4a46-b47d-6eb6a16d3533",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "0ed57160-a727-4414-a2ad-702172e0ffbe",
        "cursor": {
          "ref": "a7035109-04fb-4373-9b05-1df89372eaaa",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "80528234-f5b5-428c-a758-c503731a2874"
        },
        "item": {
          "id": "0ed57160-a727-4414-a2ad-702172e0ffbe",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "dab1b24c-7d92-49bd-b20a-61c6db6f077f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97cc173-aa49-4c0d-becc-b5e82c3bd10c",
        "cursor": {
          "ref": "ba4eab98-895e-4dac-b928-837cf31ce7fd",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "587bf8fd-5f3b-4c69-a116-9db82f7d6aa7"
        },
        "item": {
          "id": "f97cc173-aa49-4c0d-becc-b5e82c3bd10c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "47ebad96-e3f7-4514-99b4-c8f3d31c88d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "776892f6-7dcb-4987-aa1a-3620ea607a4a",
        "cursor": {
          "ref": "adc418b1-a67d-4106-9025-90f3dcc0a740",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5a45903d-27ef-4c17-9ce4-54c96437aad2"
        },
        "item": {
          "id": "776892f6-7dcb-4987-aa1a-3620ea607a4a",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "32556cf7-474e-4572-a62f-1dce399f7888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4767b3-0bdd-4016-b28a-4561767a016e",
        "cursor": {
          "ref": "6e78c3a6-4148-4ca3-b915-048e7e003993",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ca7ac407-cfd5-4b40-806a-f6c58372dcac"
        },
        "item": {
          "id": "cb4767b3-0bdd-4016-b28a-4561767a016e",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3d897f36-9b18-4efa-bdcc-4c62bd2f71d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eadb4cc-b6e0-4c22-ac71-14d5bf7d636c",
        "cursor": {
          "ref": "d4bdd67f-105c-4c70-88da-a09b2e207f60",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "0b3f2b64-8b7e-4a2f-900f-c7f94a318824"
        },
        "item": {
          "id": "7eadb4cc-b6e0-4c22-ac71-14d5bf7d636c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ab8b524a-c0f9-456d-bf40-39ed61065d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ffebb3-6b7b-4e01-8861-918532511219",
        "cursor": {
          "ref": "b07cb18f-41af-4a00-80c0-ebaeeab6d436",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "8857c2e5-1bc2-44e1-bfb2-a2e578fca992"
        },
        "item": {
          "id": "45ffebb3-6b7b-4e01-8861-918532511219",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b8b42d22-fba5-441f-b376-32cb7baf8026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5977e8c-a04d-4d79-8090-41d4dfa244c1",
        "cursor": {
          "ref": "817ababa-1c78-4a98-bfd3-f06b28137cba",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "52f79c61-ebaa-46ac-b6b8-4635bdd92ef5"
        },
        "item": {
          "id": "c5977e8c-a04d-4d79-8090-41d4dfa244c1",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "30112874-c20e-46fe-bcc2-85520a735455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "587f83be-6731-4d29-ba73-a9cb29cf1ad9",
        "cursor": {
          "ref": "df8be6a2-322a-4c0e-8c1e-639ae50b227d",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c2223d2f-fde7-4988-ba8f-a65b6619de52"
        },
        "item": {
          "id": "587f83be-6731-4d29-ba73-a9cb29cf1ad9",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "6d21041a-d6d1-406f-acb6-958114d14d2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f37fa89-c9a5-495f-b8f5-d7654142002c",
        "cursor": {
          "ref": "a966b936-759f-42f2-bf40-6315cb3feff0",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "e4c83e5c-72e3-4d17-a1f2-939c16ee6446"
        },
        "item": {
          "id": "4f37fa89-c9a5-495f-b8f5-d7654142002c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a757293d-96cd-4836-9c2f-9706d9afa2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43a5765-346c-4ec8-8db0-132416f316ae",
        "cursor": {
          "ref": "522fedf7-7cf8-40ee-87b1-b9ced91f3788",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "e21098be-25c1-4fbd-b3dc-4383e7771099"
        },
        "item": {
          "id": "a43a5765-346c-4ec8-8db0-132416f316ae",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "51d1fc06-c47a-4079-a343-5cdbbac9ca4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc418141-55c5-47e9-923f-cbbafe8090d4",
        "cursor": {
          "ref": "e0142782-0a56-4f70-9ca6-a016fe7c6868",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "6cc1871c-5e4c-49a7-99c7-813fede5a7c3"
        },
        "item": {
          "id": "cc418141-55c5-47e9-923f-cbbafe8090d4",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e3b4cdac-fbf1-4088-9974-54105982a77b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98727e6d-1b17-4608-af04-e407ff29259b",
        "cursor": {
          "ref": "29d0a095-07e3-405e-84cd-c017a38cf921",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "43b2505e-2e0e-4f34-8c2a-4fe6c81845f5"
        },
        "item": {
          "id": "98727e6d-1b17-4608-af04-e407ff29259b",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c054134c-2ae1-4569-ade4-5c5ff3daac6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "059c4fe2-be74-4212-bccf-8c660e0a0571",
        "cursor": {
          "ref": "39368fdf-78c3-42a9-b9a3-fc20b8a83afd",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "aede6419-a84a-4f6a-8649-b5e4e0cdffc4"
        },
        "item": {
          "id": "059c4fe2-be74-4212-bccf-8c660e0a0571",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "7296e526-8921-44ab-a91d-cc1587faeb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee366ca-e21f-43ee-82e3-b88d83f33803",
        "cursor": {
          "ref": "ee2714ea-8b1b-4a6f-8b7b-41254170053a",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "d8bf0c92-c08b-42a8-a600-5e93382fcdc0"
        },
        "item": {
          "id": "0ee366ca-e21f-43ee-82e3-b88d83f33803",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "198b37b0-2b17-4825-9dc9-1128e352f342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e6cd954-690e-45d3-ad26-1dbaedb7562a",
        "cursor": {
          "ref": "5a5e001e-848f-4246-a1e2-2f23155091c4",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "3cb89bc8-a967-46d4-a22e-2424e0abc3df"
        },
        "item": {
          "id": "7e6cd954-690e-45d3-ad26-1dbaedb7562a",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "821e9d15-88c4-4288-8492-4637f95f3446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "957c07f0-7abb-4d1a-a15c-a12f7dacaccc",
        "cursor": {
          "ref": "7581c83c-da77-4d2b-8a58-f99b7bf82b31",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "d133652e-1666-4759-afaf-e543fca3c95a"
        },
        "item": {
          "id": "957c07f0-7abb-4d1a-a15c-a12f7dacaccc",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "27728ac2-91b7-4257-93e7-24467021a8fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d0190d6-51d6-42b2-9340-d44683b32aa7",
        "cursor": {
          "ref": "6350889b-f15e-48b1-a42b-6c6420483213",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f41a5f67-c0e2-41ae-af5f-01b59b4d3953"
        },
        "item": {
          "id": "9d0190d6-51d6-42b2-9340-d44683b32aa7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e876443c-0f2c-47b0-a1c1-f9b4ff5a5c91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c48e81-32f2-46fd-93df-1799d367eff0",
        "cursor": {
          "ref": "345efe6d-b7db-40d5-b610-e5e8112bc6b2",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "9819c5c3-1f15-4221-8a66-f833f770c4c4"
        },
        "item": {
          "id": "32c48e81-32f2-46fd-93df-1799d367eff0",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "7769755d-68ef-4f1a-b16f-d70462adc826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b254793f-f812-45b9-adb0-35888989da49",
        "cursor": {
          "ref": "497816e4-161c-40f1-b256-6120387a1bab",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "f1c6fef5-87a8-42b0-b9ad-d81c83be8f9c"
        },
        "item": {
          "id": "b254793f-f812-45b9-adb0-35888989da49",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "e67e0084-7288-4f8f-8856-87a32ea3b99e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "651d0617-7460-413b-971f-d915b8201fd8",
        "cursor": {
          "ref": "56df79b6-1ebc-421c-825a-d03c84c8a71b",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "007baa54-c37e-4921-b430-e6cc201bb584"
        },
        "item": {
          "id": "651d0617-7460-413b-971f-d915b8201fd8",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5f11f668-d3fe-4d94-ba40-19ad5acb0418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1666da57-c97e-48b2-8050-c4c792d3b55c",
        "cursor": {
          "ref": "7f6625c1-7e2e-4fb3-83cc-f9bd17ce9711",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4bede34f-9129-4717-a277-f444a1c39371"
        },
        "item": {
          "id": "1666da57-c97e-48b2-8050-c4c792d3b55c",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "effda91e-7d56-45ec-a134-db20e90e7294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab78206-c914-42d9-9c60-521b908d199b",
        "cursor": {
          "ref": "d55d98c9-a46e-4e91-9597-c097ae4322bd",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "a092e89a-2168-44ba-a09e-ade8e0650d86"
        },
        "item": {
          "id": "aab78206-c914-42d9-9c60-521b908d199b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "fba5cb13-0095-4089-8b63-dc8c20aa54a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "459636dc-da5a-474c-b2a1-71a0aad29b57",
        "cursor": {
          "ref": "5cf4fe64-d0aa-441d-95d2-2bffde47f112",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1a265a17-414a-493f-9675-1736501d56bf"
        },
        "item": {
          "id": "459636dc-da5a-474c-b2a1-71a0aad29b57",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "8188fc70-913c-48ab-80d6-2f0b04bf5cca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cb6907e-a9d8-450a-abe3-342f2697a304",
        "cursor": {
          "ref": "7f9a5df3-b60e-4c7e-a44e-f5a8f083ab0f",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "98f19576-2d3c-4471-9bc4-60408901476f"
        },
        "item": {
          "id": "3cb6907e-a9d8-450a-abe3-342f2697a304",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "42f1f29c-4c14-40f2-832b-f12dcf650612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "366ae027-c649-4bb5-96ad-655f1e4328e4",
        "cursor": {
          "ref": "69299094-ec9e-4173-a41d-83246601328a",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3a8a0f36-69c8-4a34-9b91-7875f731414a"
        },
        "item": {
          "id": "366ae027-c649-4bb5-96ad-655f1e4328e4",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "015400b4-a404-413e-b549-1f73745649e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d761d8e1-0c94-4fe4-90e3-53a9d6b3f013",
        "cursor": {
          "ref": "b65db942-af4e-4c5b-97c2-cbfbe06f8da8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "c2f5cd98-458e-4494-a6e6-650bdf029416"
        },
        "item": {
          "id": "d761d8e1-0c94-4fe4-90e3-53a9d6b3f013",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f633c0ec-5ecb-4284-a481-e925b18bdc77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd76c1a8-a717-4f7e-b549-2b6c3de8c11c",
        "cursor": {
          "ref": "757b4400-953a-40d5-815e-93976e06232d",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "61b87f11-1cee-42d6-9193-5fd830672d99"
        },
        "item": {
          "id": "bd76c1a8-a717-4f7e-b549-2b6c3de8c11c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fefcde32-e021-4cb7-a153-054fe7a7957f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb1b26d-4170-487f-b20a-3eb24d7e0a3c",
        "cursor": {
          "ref": "acde1199-307e-49a6-a959-dbd802401732",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "71de39c8-58ef-4e19-b57a-0c02532629e1"
        },
        "item": {
          "id": "eeb1b26d-4170-487f-b20a-3eb24d7e0a3c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "13ed81a3-a324-49bd-a7fa-d039123ba31a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0efe1b5-968d-41d7-ab66-23eb7c9e8a0b",
        "cursor": {
          "ref": "9309d424-c017-4e2d-91fb-22c09a6df898",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "16826ca2-2d23-44c9-a8f4-a62ab6f4c5a5"
        },
        "item": {
          "id": "c0efe1b5-968d-41d7-ab66-23eb7c9e8a0b",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "5b2829b3-0421-4f60-bf83-a45afb2196fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad6e6fa-5b97-4c77-9a22-06b69ecd7309",
        "cursor": {
          "ref": "37c21b64-3689-49f2-bb87-2c0f29c96d06",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "13b1c1a4-2703-4de9-b5f3-8995ad3b3db9"
        },
        "item": {
          "id": "cad6e6fa-5b97-4c77-9a22-06b69ecd7309",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "4399f31f-d3d3-43cf-b943-205d538e2784",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f735aabb-aedd-4436-b767-13bf152544d5",
        "cursor": {
          "ref": "d907e4cf-0f45-4e68-8aca-4a667433b9b8",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "d8677580-f3b8-400a-8cb0-dbe8dd5d5bfc"
        },
        "item": {
          "id": "f735aabb-aedd-4436-b767-13bf152544d5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6a83624f-02dc-4640-8bdc-d1549dbadbec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6a11d42-a7a8-4f10-943a-e774e8dfeef4",
        "cursor": {
          "ref": "3b6616ec-2e86-4ec3-82c3-f22bab8779b0",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "f0fbb79e-0405-4bc8-aec1-bd97a1ca76b8"
        },
        "item": {
          "id": "e6a11d42-a7a8-4f10-943a-e774e8dfeef4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9a33adf6-2bd8-4750-9f42-7dc5b598cbba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54d27ad5-185c-4054-834b-d131a7a4c3d8",
        "cursor": {
          "ref": "9aeba94f-690a-47e1-bd65-3bae6202440b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "4f4ffdcd-d0d2-47ba-ae1c-94577ab969f0"
        },
        "item": {
          "id": "54d27ad5-185c-4054-834b-d131a7a4c3d8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b3c03e5b-eb7d-4917-882d-99ea33377d2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "443684bb-1f24-4372-9f93-02c2d60d9b78",
        "cursor": {
          "ref": "655fd837-228a-45a0-ad89-3f737325f07b",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "78df95d3-dbf3-41af-9b1c-4ea3c8d1b309"
        },
        "item": {
          "id": "443684bb-1f24-4372-9f93-02c2d60d9b78",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "de1cfc2a-5e6d-49be-8825-3af68a80e756",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "971557c8-ef7d-4337-88cb-2544300ab329",
        "cursor": {
          "ref": "e9e6d1dd-19b1-4dd9-be1f-fdd168b2ccab",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "6784352f-d3d3-4ba5-b9c2-63d59a2a5a34"
        },
        "item": {
          "id": "971557c8-ef7d-4337-88cb-2544300ab329",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "0e5d781d-c633-45e2-b2eb-64a1fededd8f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc361dd-0209-4e7c-bffe-5d51306d084f",
        "cursor": {
          "ref": "f0dd1772-a3ab-45bf-87f7-bc7863529f5b",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "fb8c2618-e941-4892-a6d1-81e587c08ec2"
        },
        "item": {
          "id": "2cc361dd-0209-4e7c-bffe-5d51306d084f",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "9aa580de-6ee1-4b91-86ab-0282dee6e848",
          "status": "OK",
          "code": 200,
          "responseTime": 173,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2909180b-e04b-4fe9-be40-848919c29044",
        "cursor": {
          "ref": "1b968aba-fcc7-444f-ac91-f965a1371926",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6871f696-33bf-42eb-bab7-f36bd00a1f43"
        },
        "item": {
          "id": "2909180b-e04b-4fe9-be40-848919c29044",
          "name": "credentials_verify"
        },
        "response": {
          "id": "6f6aa17c-7a1d-4d89-908f-4de623211f69",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "071c130d-f155-4ae6-8d13-1d865bfe10b7",
        "cursor": {
          "ref": "cd442de6-9c09-497d-aff0-57d77ec8ac9e",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d94ffce5-27f6-43b1-901a-ba9190a7c14c"
        },
        "item": {
          "id": "071c130d-f155-4ae6-8d13-1d865bfe10b7",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f865712f-3c1f-4da6-8897-2e14ee4c7bcb",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ac992a-4d88-456b-849d-c27c35968957",
        "cursor": {
          "ref": "6183c17d-778a-4dba-a645-5a2c74204984",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9f0a7e87-b79c-41f1-84b8-44c187e26646"
        },
        "item": {
          "id": "42ac992a-4d88-456b-849d-c27c35968957",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2c912802-33a7-4ce7-a527-8a95ac1d9e6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ac992a-4d88-456b-849d-c27c35968957",
        "cursor": {
          "ref": "6183c17d-778a-4dba-a645-5a2c74204984",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "9f0a7e87-b79c-41f1-84b8-44c187e26646"
        },
        "item": {
          "id": "42ac992a-4d88-456b-849d-c27c35968957",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "2c912802-33a7-4ce7-a527-8a95ac1d9e6b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52635706-3ed7-4652-a43e-fcaa8aeda7f8",
        "cursor": {
          "ref": "aa531df4-0759-4c15-b3e9-36ad284e6317",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "2e7a5147-4613-4335-ac43-ce2ad832108e"
        },
        "item": {
          "id": "52635706-3ed7-4652-a43e-fcaa8aeda7f8",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7b0d7975-950f-49c0-9ba8-012e13d472ad",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d43f41a-6aa9-4695-a3f5-0afcc6daee76",
        "cursor": {
          "ref": "2c23611a-cfbd-4163-a2ca-7c66365c103e",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "f049ab4e-1d72-4caf-864f-8a3b73193b64"
        },
        "item": {
          "id": "2d43f41a-6aa9-4695-a3f5-0afcc6daee76",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "311fa994-fe6a-456f-a55a-b0a989060c75",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}