{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "70c1d180-1627-438d-91ac-fb4b0045630a",
        "name": "Clear Cache",
        "item": [
          {
            "id": "36625b3e-1359-44a8-a3d6-ef506bf02fcc",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "15790085-8645-4794-938d-3152c051a8c8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ef5d882b-c062-4385-99ec-400b4cf40731"
                }
              }
            ]
          },
          {
            "id": "e34b9d40-9eb8-4373-9e68-c6b5f80f12b0",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "21047587-548f-4bc9-a5d4-3de96c5f85e5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5fa84ccd-138d-4a21-88f5-48e934f11812"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "7c60c2a8-ecc8-40b1-a28b-ebbe6c42189d",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5c714640-23f6-4c15-9ca5-d8181106084e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "93988f5b-b15d-4f6f-9164-c3be49f8de90",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8b63074-1a79-458e-91cb-145f78285ccf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "944c3cbb-8071-4a40-8184-256a5251e486"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "288a1cac-243c-4f5f-8e80-4650c156c87b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7792388-68f6-4f0b-8261-8d573219e4f2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f81b9939-88a4-4f85-a3fe-c39f9b304a93",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "90128e8f-3370-4d90-b703-4287cf881860"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fea029fa-1a6c-4888-846d-f41c604b174a",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c2d00aaf-4444-478a-ac40-c3f967af693d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dba8679c-4f26-4885-a70d-b05b1ca09767",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4dd10f36-c957-4c10-b345-461afc1fa812"
            }
          }
        ]
      },
      {
        "id": "d7570355-133b-4271-9180-61c5493a02be",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "4e884651-68f3-45a5-ad41-fbdde8c8a75f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2bd51ce2-da86-474c-9db2-df2841bcb54e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8809f8b1-115c-4524-84fb-7a8715c7da6c",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2191d9b-24a0-4620-9b4b-d1f772752e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e83de466-1ac0-4bd2-9822-bb5e1bc7c055"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50d76a2d-6c24-42f7-9841-52435b771fdb",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26ab8bce-b54f-4b99-af9a-e5a2ad2958c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e3b2ba8f-ab5d-48bf-a729-c0391fe68ef0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d14a69e-37d5-4a53-bbea-68f099c41396",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d12cc52c-f241-4be1-b8dc-282f85c2b6ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb5fc2c9-69e3-4286-80a0-8db2e8b788c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d4d633c8-7b1d-4262-a084-174aaf308288",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "785197ae-dced-4c93-b9ad-a344c68e0732",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dce944f-036d-4136-8fd4-52f975127102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4e485c5b-4049-43fa-9d2f-a62671d150b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d58d4f07-cb24-4209-8cc4-02677cbc7246",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91fc2d00-f5e0-48ec-b0ff-b9aba9c509c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b0c8de-2435-4dea-bbb8-9e01eca32353",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb47edd-2264-4448-8514-63d275cc80cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04938e0a-692e-4dfc-88de-07f2ddd0736a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deee8191-dfe8-44ee-970a-8d7ec1214820",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "d505e408-da61-43cc-bb80-07baafd4328a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b5f80fe4-b877-4ff2-bf82-d7ea4b37dfe5",
            "name": "Positive Testing",
            "item": [
              {
                "id": "68cb866b-9af2-4b0c-a519-39e1bc1b8bf0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e0fd1869-161f-4533-b0c9-4486a6b598df",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "432f0859-4ade-4ac4-afcb-1b5b9feb63ac"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "50864f02-d6f9-41b1-bbe3-9c25b2d645b6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "252d94aa-5285-4ac9-89f7-2646d070ea0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "51eb36ce-9e86-4471-9678-9ae622bf9691",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a3ad7273-7fb9-48ee-aade-5eae688b0520"
            }
          }
        ]
      },
      {
        "id": "b8b574f8-2bc0-4356-9ded-59599680bc38",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "9f972f69-e005-4126-89fe-db776ed662bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8812999e-72ec-4f80-b538-2b250eea7639",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "eadc842b-bb60-455f-8ffc-73b0c1b49aea",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2bddfd4-3aa4-4c19-bd6f-bee8a715d8d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4c41f84-ff87-45e1-af2e-99aa1c2770b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b89262f-d008-4e3a-a01a-76cae4b14d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29fcf192-c8b7-4920-bb8c-5b270b73a081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f55ab5bf-6d85-429e-99b2-bb8e23774d0a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2819c753-dedd-4020-88fd-050105c734d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b345e5f3-ffda-4c0e-b95d-ee5b2863fdb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468bfd2c-6e9f-48d2-bf38-a035f526f174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7bfcac0-b349-4bb6-9f6b-40f2aac3b2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17e2b26-4c83-4bfe-b7af-6d1c6fd5b7bf",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2668d23f-9e74-450f-aae0-5017156c1917",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf6a04b-7ce4-4f71-b7c2-f25d207d803b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec1c5356-3f42-470d-aeab-44b58cd9c3b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3bf30652-de25-415d-9eeb-a66d5cf09a72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6e08ece-5335-4788-bfa9-30c09ba57ee3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "422dfc30-d397-4344-9311-1e7b3bb7e7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fad2dc3-7a3f-451b-a66f-182d54b4ff81"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07a85411-f2d5-4e3d-9bee-9a331bee4c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "179252bd-6df6-4c67-87f1-3b790cd2435e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "540faf34-db9f-4101-adf7-560b008695bf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e423615-bf14-4e74-b6be-feaab10897ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ab2d45-d8b5-44df-8415-2dc6dadfcc6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ad7515a-b7e3-41a2-9a56-88b6e3648399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b28c4bf-d950-417f-a899-46fe27eb814e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35db37c9-be49-4902-9bda-2f435080ab54",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43e9843b-4a07-437c-a456-856352f36e8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf5fcdb-89d0-4837-a05b-e30885c4b395"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b114989-4454-46b9-a1bf-96f1f802c3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "23274dff-e3ca-455a-a04a-f9ab81cd92b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23eab752-58e7-4684-b524-85b449211bb2",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d8c758b-cb29-4c27-b835-ae0ab4b9b507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b53f23c2-3d08-42c1-8362-c0ee79eb442f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42471b3d-9519-4adb-ace5-d7fb445bd777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d18a23a2-21cc-425e-867b-d42205cd4137"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df22a9b1-5477-4906-823e-4e0294e5c573",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22bc1225-ddc1-4537-a257-8652dff67443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be84a52e-dbd0-4870-be81-4b6cbb947e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da9e410-d7af-479b-aeb4-90865a967795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "75b03fb4-c988-4d36-8497-818d13102e37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e036d08-7654-42d4-a09c-6e85689a4cb8",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a04df2b-4503-41f3-b6b2-75c885f1e8f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54180c46-bcdd-4a82-8d9a-9f1475edfc44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa91efb3-a029-446d-9883-2992ddba0abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac210817-195c-4606-9e35-5f13eb472e0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9f87e0e-2226-4b28-8d62-537249658238",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5c47fe-e15d-4edc-a5de-3491efbab3c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f062351-de0f-43ae-94b0-9169d19d2bf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6233a7-21bc-459e-8f37-c515118fe140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08f9dcb2-54da-49ff-83f6-09a84f92c732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908e3583-36bd-4132-8443-a893a4651562",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4541af77-bbbe-4baa-9a76-d6b22c2935f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7814632-3ae4-4b6a-8eec-4fa10c273ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9585e2f-4742-417c-a01e-0c7ff16a36b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9aec0818-1d22-4a5e-8c87-b8f146775986"
                        }
                      }
                    ]
                  },
                  {
                    "id": "467fda89-f8f0-4e1b-9e80-4499e81a4b58",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b298b3-2b15-4aa9-b146-9461f0dc024a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b2d3cf8-4e86-4902-a02f-8ea526222410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cd1251f-fc0b-463d-932c-242b0ec5cb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ea641860-f881-4d57-ad9e-e99b5b10569a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25802ae0-c935-40f6-b690-42b6b89177b5",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb66fb7-72df-4517-b7e4-37410eb45b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f756a1a-a9eb-4262-882d-15f183b9f463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00caef41-12bd-41d2-8971-a693d058fc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "127f9cd6-1cf1-4e57-a5a6-e6ff41722131"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0131729f-7d21-470c-b7d8-78f9869363a5",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dff4a14-cfc8-43ac-8605-ab2ff3ce81e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b215642-4e6e-41ca-a799-8e88207bf226"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59b6766-4203-47fb-8994-0284f7fd7129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7a03ea44-38e4-489a-b6ac-2700a3565cb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ffcebcc-a4b0-43e3-84e4-2617751b333b",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdee5533-863c-4444-8b8a-0facfcf8d1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d22f2e19-e04c-4403-a1c0-84506680c7b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d24677-ea93-4e72-80b4-8722b0743ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6257753c-ea4f-4a01-af07-600b2f9553ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f29c92e-2566-4811-8f24-c53ffa3221a8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "390f78dd-fb62-41a7-b9e0-d223a1235ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687f741f-d8b5-4747-98ea-714ca86ba9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b8307a5-cd7c-411f-a93d-e1df8190a02a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9093d79d-f398-430a-9dcb-91fc0cdb9064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3040dca3-fecb-4272-8ee4-70284038cfde",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277e9037-c58c-40d2-ad5a-8291b78aafe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "204eec16-47e1-42c5-a389-28639dfdf23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b21ddee-3242-40e6-b390-0fec67438ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6afc076b-b8b3-4e0f-b512-914d472690c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea2312f-0484-4e57-a284-3a95fb32c652",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c997e29f-5e25-4c26-b9ad-4e320ca3eee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4cada13-8f19-4a3e-9e93-475bc59530f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8072d770-9d5f-4060-bb0b-212e5bca2334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e16d1a0-2972-4840-b784-4b5679d4159e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eb8e355-0278-4ae2-92fc-d571368105b3",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5335db6a-6b0c-487f-b7b7-1f76f74876e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fa3a598-0379-4d8d-b550-61ec832acd83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80f9a25-73e9-4dd3-bc30-9eb6ad8c3307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "19b78144-e483-489a-a45c-a2a2ff026b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6167fd23-a971-4646-a27d-fca33cba8d9d",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b8f296d-796c-4cb1-ab79-aacb0a1dca79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ed12f18-2e16-4f91-9ca8-52c82a7f285b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34064c59-0a3a-41d5-bb1f-14bed1c5c064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9af1b23-ff7c-48cd-bab0-2bceb6973f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55145659-eafa-4414-a084-f97c5678deec",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca182cae-8af2-40ff-812c-0659ea6d3a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b489723-17ae-422f-ba5f-bf34e95339f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d140119-8abe-4f61-b9c3-9db291c7e004",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "07dd9d3f-bd4a-49a9-86bb-f8c041a15113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "316c9f3b-ba84-4c12-87c7-65e3fd8eae3e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd053bd-566a-4182-91dd-a89275dfffef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6cc7ef-a7ec-4af3-a1ca-db7b80e7b019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3412dae8-0b2e-425d-990d-4d5bd7d46d79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7111f5-c98c-4a99-9def-efa5e1ae559a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db4eedb-cd04-497a-971b-3c281c4317f1",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ea44b26-f649-4e13-91a7-557c7c7412a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d24a1627-e2a7-4ed4-b2b3-12a4c5520069"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b3ff462-0043-44a8-ba87-e8eea78823cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "92806d17-1ceb-4e6a-8d0c-f5c62a1ed5c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "859af0b0-5175-47ae-ab32-48b615ac1b86",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42cc243d-e2ec-4e24-8ee9-42165ed7ef02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c3c6376-6757-493f-929f-74efbce3dd1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "887ccbf1-bcc8-40f1-b2b5-89aaed967a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ede66047-2682-4622-be2a-887173348aaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1442409-7346-40d1-abf9-1645184f58fc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aab5cd6-0983-4f63-a141-cb78558f3d18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "908f6a24-f3f1-4a47-aac6-148684eda756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21dad169-a9b8-45af-b905-4dbe445ae0b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53baf087-e358-45e6-8caa-181f87acaf20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5323a2e1-f472-4b2e-b7d5-2d30dd6e3321",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ed45989-a468-486a-9127-576353f354a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8feb4590-8a98-45f4-ae3e-2a3c7f875ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6876dbb-af8c-435e-a0d9-34e70206bb37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c940d249-0dab-40d4-bc4b-7a734ddde54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b434d1fe-6787-4b25-9ca2-fe26c0847fa4",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90970a9c-b0aa-413e-9334-7762b3ccb74d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47aa9b9c-83b5-4169-9562-7e10697c741c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7874dc77-4eb8-4d5c-943e-2a09953ce383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cf81a2a8-ede9-4181-ab1b-6849259210cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae25ed7c-3613-44d3-b7ed-bea390797cd5",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03adc9f4-201f-49f0-a2ec-1abdaac426f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38a7f1f0-551f-4ce7-9266-f5292f22ed4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7110e27c-19a6-4ab1-9087-68566068ab3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dbd3108-211f-48e0-84e6-6caf98ff39fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aef2dfc1-4ee7-4fa9-be88-3b0a89050389",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05652bd6-8e74-4b5e-81fc-a845cec63bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "621c10a2-5045-420d-b3bb-0d5d14112306"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbd8fc9-2f15-43aa-aee3-3258f5e339c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d075d99-4d7d-4364-af2e-54be0859b9e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc624b23-fdcd-4680-8bf0-213af14718e8",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74aaa48f-c21d-46e6-9acf-c353df310d29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816e44ed-00ce-49eb-af48-887cc4bfb980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06e0d591-895b-41f4-ac9e-96d8dffa1cb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "65d1e65c-1ac0-4d1c-b273-c764c8a47166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11951065-ba1e-4ee8-9b53-ac0713907a37",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d36029-97aa-4cec-9d44-65f25cd433e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c11be207-e6f7-413e-9371-e853d1bd4792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016d4cbe-3f3a-47aa-a0c7-ef57b6b62747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dd088c6-22ca-47b4-bc9e-40f57a42956c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b99599b0-1bd4-49aa-bacf-bf9ec22b92e5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1d3e52-a5a5-4c2c-aa3f-b09e500373da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4e7ca04-97b2-47e4-81bc-3b42c21a04a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c1fbc17-0f69-4aec-8348-c0feb39e8406",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e72a8ed-7ef1-416a-a784-ad1757610173"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bd4d23-769c-4d61-a3dd-04b4556ef3c6",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c92363a-6701-4ff4-9b9b-3dc60c448e7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "daf601dd-b2ae-4890-9fab-8ecb3ebedfe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1f99992-cd2c-4d17-b50d-c733f9663fa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2c0f2d-e737-4646-b918-29f4ffb8bdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7833e735-c77b-425f-a9b5-e795b8110e1c",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b854f17-482c-464c-afff-d20d7594b5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbba803-9af9-4ec0-98a0-076f2409df50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4ac5ae-f292-41fe-ad2e-f207214470e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17de699b-fb03-4f0f-b46d-6ed0728d8fcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b70d426b-410d-4535-92e9-4058134f0b0c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d2a6d5b-9222-4741-a39e-5d864e9eb2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b24400ee-c5df-4979-8c70-d25703165ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b779f31e-4545-4b9c-800c-f51f433177cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6c092c9b-623b-4187-89dc-21e68452771a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f46e7e1-85a9-4492-8f5b-e2b5ed2ad798",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3950847-6b5a-408d-8e92-5e934d5c6a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd47dbae-69d7-4169-82e6-e1249a49e7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0498c987-48cc-4d02-80c5-c7628c65bea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "045e0819-ceb2-47e5-bcfa-6cb34a35f695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c186fb-4be3-4cda-801e-a8c46bf7887a",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9bab3c9-dcc0-4559-b6ef-9c015afaaddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bcefb0e-99ac-4994-859c-2878f9688fbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d3e3ecc-9935-4d4c-b26a-7bf53b91d32d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "997b16a5-dce1-42b7-9949-275871019071"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dbfb689-5413-4ea7-a12d-2619a7fe38ea",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18ee7951-cb31-40fb-af4f-d3be7026c084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ce0d18f-b411-4d78-af42-22d96fc55bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d97641a-2541-4316-84e7-8381bb83578b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5af00832-b694-44a0-9436-d1c8b754075e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7c63a6-ee08-450f-9703-27cd37b37529",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c63478-bf2f-4a36-947c-56eb274a76a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2a69f9d-e3c9-4806-bfb7-b682fc7d0ce2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fae06257-06df-4750-a403-c3a737dc028f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3ecfce43-dfeb-4f97-898b-278a11565f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c313ce68-3ead-4b7e-9fc4-fd2987b48868",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3462de04-2e61-45ec-b68a-8fb7a0bac4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79927c98-c0ed-41ad-a403-bd6cd3068c73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3c78845-286e-44b6-985f-891c31e27127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "27316202-d966-4443-b56e-f9b129c81207"
                        }
                      }
                    ]
                  },
                  {
                    "id": "779edcd6-23b6-444d-b2cd-0c2950cae7ea",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "167a9361-ef26-468f-95be-002c4a0f3ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c99dfe8-26d4-4d25-afe5-a4726f94ab6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5deeac86-9583-43f5-84db-165afaadac9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5efdad8c-f1e8-41ef-b7a1-8595c7d23e73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d5d4d61-e022-4e13-b508-02c1f4731571",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca8d450-248c-4f8b-bf99-0151316bb1e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "401de9b1-b9d1-4456-96fa-5f3992e87719"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a326d3e9-8956-440f-a021-401472aac6bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "b83cd1e2-b9ac-4451-81df-450308c31dba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0184bc6f-3341-40ed-ac87-ffe92aebd3ce",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f870d4f8-655e-4d26-83e2-0fb1d98e9733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "324f2edc-590a-4eb3-bdc4-30e82fe44c95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7346b306-9ef7-4d22-a077-c0a75e8273d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "fae1e690-7c8b-45cc-b418-c7d7556ae189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "408a5b32-e048-485e-bacb-c5d999d0401f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bb3e23-e3cd-47f7-8d0b-cf9b3373ca09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3d7db10-ce17-43ec-8fda-0e7f2b045e11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b62817f-c14f-410e-aa54-14923b6ac1a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "08280e38-f6fa-4642-b8cb-1ddf42ad831e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7baef9e-6ab3-4b7c-9229-f2258387c5b0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2be7260-b369-4c3b-8be3-7d417d3209a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90444d78-87dd-4a21-ab01-a169759653c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2cbea12-53ef-4fc3-89da-33f7e0f2a753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a3e9ea6-f480-4568-a4f9-1c66f613c82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106a08b8-6f12-451d-8a81-2f78514e536b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0317b0-b46c-4286-9006-946de99d1fc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef973ea-3574-402e-8a3a-73528af7fa69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "787a5a2b-a9e4-4df3-bc31-1d1532775880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6fc72b1-2e3d-47cb-b104-26a6f6566f54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca033826-c83c-4211-9bba-7a0968221cca",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52bd77e-0497-4c44-ac64-3e84b16acefa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166f1412-4114-4772-8523-87350208b80f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c429c089-542d-4187-b2d2-55a80dac9fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b2c8c63-ab0c-455e-b7f0-c3566657d479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc5ba914-5bc5-4c09-b9ca-3dc556f3c191",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fed2cc5-dcbc-4f88-a13c-59088b7cd04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb34d01d-2403-4871-9942-84cda39f9045"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2556f2f-98de-4174-a21a-2777248166e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b30bc4-121b-4753-96ea-40c54c7289e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6f1f792-ab50-492a-8b49-f3abc1312675",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c467890-2692-43ab-b726-8f3b5f11aa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42da4650-0a37-4bd1-9c30-fb9c94a09234"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56858c3d-e4d4-4706-be73-8ceeda9e52f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca3900ac-f312-4166-9654-1ec190b1e5fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccfb1553-4b88-4246-90ba-93f442afacae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d02cb38-aa9e-47ff-983e-36b91ce14915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df1a18f5-e035-4822-b6ae-0c8249897fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23e3bddd-039e-4ee1-a324-37a2198edfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fe7b8bd4-1e16-4f5f-82d7-df3c505d6ebb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dde76ba-c4b8-446b-854a-673ff8ffdf36",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "884fe089-59af-4cf8-bdd4-c8acb6bb6fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "709556c8-1783-4c48-be13-907e15c0d0ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a14a16-08a2-43a4-94b7-a7003e4ce00f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "db2b9f21-c97b-4abb-9e4c-58fdfe6366d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "577b68dd-5c8d-404b-8abd-b081257c80ba",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b70adb8e-717d-4c8a-93e5-07d7680953bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c403ea49-267c-4620-b6a4-0f97b938bba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44cb8e94-7f58-43ed-93d9-c8d86c9e43ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed537b18-684a-4143-ae9b-aabb82b445bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48bb4708-2ba3-498d-8a75-f6bcc2600577",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52d26da7-7ffc-4cdb-8842-af2bb4c009f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e079f6-a26a-410e-a58f-575eaa1757ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af8130d-b244-4625-baca-893404363ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e099444-19a2-4135-b187-cef445b70ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d83fdfb-ddaf-4b85-bdce-348de91a152e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68f4b38-4827-4c7c-81b7-62df23095a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e4919a8-af48-4bf5-8a00-4ec7c08aa034"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b31c77a-c085-4676-9cd8-3b6e4aded329",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6aaaa5-f399-4d83-9794-6e6e422477cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1123c7-995a-4ca3-aae1-af43770c8827",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c54a6fd-1834-4168-9566-e2b92f82b155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b69c6cc9-8312-4c36-9339-b7896ad5b62b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88d06271-961b-44c0-a0d6-7274b204a523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "39fda214-a69d-4326-adac-acfbe5efa6c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cba9fc-7055-46cd-adac-e24ab557ed5b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c373e67-580f-433f-9bc7-f95d0da0610b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "683c228d-743e-40cf-b999-6df652844e95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47f96e33-2b84-4405-a934-6dd3c0eab0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "8b31d43e-436e-452a-82c3-2d7d1869a056"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42711103-99e2-40e2-bc39-088c856cac76",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d3d591d-a9be-4ab7-ab8e-791503afee59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5863c1-1097-481f-890d-bb63c49ea8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b354a872-63ca-466b-8c68-d7e0f5c5688b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9991dd4d-369d-42fa-a548-094017934df4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4120d7c5-70b7-4e4c-8916-311ae4f5e1b7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24912c6-f271-4356-9be2-5eab97d2f88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7018dfbe-147e-4741-9c6a-366b39cbcadc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40648b9d-413c-4032-ba13-cf5e816174c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "566e2b2b-bf6a-4470-90ab-b068f2252a65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab1e026-f7b8-47c0-9026-362f6d508e3f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81104c0-fbc6-41e2-9f15-8928dff29cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcf5f989-6d90-4434-b349-8e42e458d0db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9349d262-c3c5-4baa-884c-fe2674ee06f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "83acf82d-8605-48f7-ba90-63a7762d92ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9186e8ce-dbca-4618-bdc9-1ea08430e040",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df1b12e-34c0-4279-b7b7-151deb343de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69f128dc-1e8a-4203-9cbb-5cee40ea3f6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f688f616-bede-43f1-9ec0-e0299894f26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a2893495-fa4c-4900-a344-3070ab7823a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9cb9b3-5a5a-4e21-b526-17ecbd381a5e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a2f9f71-5d6e-4d3d-846f-6331b2e9430c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "930699c4-5772-4a80-b923-494af4de2e2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31310541-ae38-4d8f-a059-d3e7abd30f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "875f1ca5-6567-443a-9480-1dfd1c1194c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89e01a60-5b80-462f-9e1d-68d737279243",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e8b8eb-799c-41b9-97dc-75859bb7e9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0faa356a-0252-496c-a7de-41fe4dd173ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec4f35cc-15fa-4cc4-9ec8-f7751ab8e161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea955fa2-4eb7-42f1-8f13-c287a2333be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e40358-2a05-4f75-ae68-607e7e0fa560",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ceb81e-a247-40b9-b926-c027cfebb14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2666c7aa-5c25-4759-997f-f75f417e83d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9a7cb3a-248f-4f8a-8ec3-0c834ea8786c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b3f69de-0a4a-412f-944d-07b73ce927f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6808e0-1126-4175-8fee-e9be6df75c6e",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64598146-bb84-4c90-90e7-1f43b87bc857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce6216d9-964f-4b37-bdbd-efce13fdc181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ebb5e7-e7cd-48dc-b47a-d81808ac8abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "29bfe06c-0cd2-4236-ba49-4dd20b00227d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8e20024-3a1f-4d00-b3c6-1b1b1ca1c388",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af1eee00-1efd-4f39-a3d3-3d0dbede0b6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c4a236-ab17-47df-bb92-fd1bb41e89b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "833a78d4-e187-4a14-8b58-f084cee0bbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a4927446-0d24-4d5b-90f1-ad3dc097e06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106dfeab-3ca6-4dd4-ade4-bfc94700fa85",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00b56e1-02d3-4c2d-b5f1-2d237a91c745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da33c1d2-e2c8-407d-9735-d3bc1b533984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f86b3e-8694-476c-81a8-8e7e63164435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "105c139d-667a-4549-bc3b-01c32a521898"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d1f02d-67e4-4a9b-b5e3-4e7c792bc638",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b18661-631d-4dd3-b868-fb71627dd16a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd8d71f6-c4a0-449e-abc1-70f7ad48109e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a5d9ac6-9b54-4f76-9c95-86384e7fdbc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b142b0fd-8796-4fc9-973e-2926e2957613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32163587-1899-4383-929c-8d33af3e1806",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf65e80-1260-43d7-be8a-134bddf858dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114b3143-e9c3-47b2-953d-9bf1a2bed470"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d52bb23b-339a-4822-971e-884a86a854e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cd4702d-6f1b-4bbc-b12d-6dcc14526a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada2310b-f644-4636-9e12-19a90aa0d467",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32598ea2-fedc-4e9c-b387-b7d83b5baf82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e444bf-a119-428a-90a8-ec74e35fcd37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfdffbb-8642-4be5-8414-7ffa432ef04d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "85dbd7fc-9407-4837-80d9-97bdee23813e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc94d163-9ce1-4ff5-a1d1-ff0d79f24a19",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48cfaa48-1bba-4157-b931-383a480c2d96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a04e0c8-8188-4a1b-9ebe-1275e4600433"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ecc630-71b6-46ea-be0e-ad921f1ddb53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ca5b8d7f-5281-4c9a-9325-cc6b3f84901e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52f2db86-2326-4b07-b4fc-680a271c3468",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee4f74d-8a2e-4171-b4ca-acbe27912af1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed09796-741a-49ce-866e-bd600d346364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937c5a9a-003d-479b-ae5f-d054c2b71d32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d107de2-345f-48f4-bf83-08bf79bd9c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d846033-923f-42f1-8a3c-da5c7147a88f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9673ce8-549e-490e-afd3-c40817c66fb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5882ae46-1bd4-4b30-8af8-a347923a16c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a4a0a1-efb8-4f7f-b864-844d8bdb482f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6f509324-24fd-4185-a0e1-4115687ee805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d1c44db-61d8-4b19-9908-f262867cbfb3",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d3f1bf5-0f4c-43b6-b61b-e63af1acc537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b91d04a-97c1-4525-b919-9eb6aacb9a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48004658-187c-4c2e-9ea3-53b4ea70a869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5b719b58-ae61-4a1b-b06b-11cdf05bfdc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69706786-65fa-48f2-95ed-b6384d36d100",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f8bc4a-3388-4788-afc6-692032de3838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b45da80-a8e2-4bd6-8c46-693ea14b9e6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db20ebb-ffd1-490d-818f-b4176cac4e5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4a1ac26b-9f13-471c-a251-ca9ae0758f0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c907458-aa77-4a8b-b7e1-067eee0e1169",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70bd9c8-07e5-4165-87cf-25c7a2fc04f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f0695d7-31c3-45e1-9d56-23e1ff04c6d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "163526ac-193a-4912-8d3a-ff2cd60de994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "df2c6916-78fa-49a8-b52d-ea16a1702f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a8e561-1824-4235-a682-a70b73bf6935",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67493d28-26a1-4af7-83ec-0eda6bcd8e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65a85106-abf8-43a4-880a-e1fb19897f74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dcc257-7cd1-4b4c-9709-7e60f419e439",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ac571c-2446-47d3-87ec-2ec90bf02424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "721f53fe-f77a-4cd1-b174-3b3582bc240c",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c9fad3b-112b-47df-ada2-e66bab520147",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2fa5bf5-952a-4f71-9042-d65b27d383d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00f220f-3af2-411d-82f2-5bc494430cc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "652cd13e-d60a-4ad2-bcbd-0b08e00bb7a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac2ea72b-5a64-4114-a0c0-cc5b12c84aa2",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5c1ba4-52bb-464a-b2b0-adbae43868e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c79546e-59a2-47b0-b9b7-0c44655b6907"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d510f00-33a4-4699-94e3-b6143fc1becb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc88ba65-48b8-46de-9c71-a3ebc0212c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6dd9295-1224-461a-8693-861dadbf534c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a27f8f2-6f7b-4b7f-9f3c-ac8a8b795292",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f29db30-23a5-43e0-a5e9-15ee0c6fdb5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b915b986-4422-4746-b007-750c199777ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "97537f65-98a4-484b-9bc6-d280c11d518c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f21dda-6958-487d-a348-1509bb44854c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eea238b-09d0-463f-a17d-1a3a4de3a719",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f5fadd-ec29-480c-93ff-81c15b73cdf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4bfea8b-6276-4a39-a80b-fc48d7ffee94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "efd673ec-86f1-4c7a-ab52-062143008297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d45a24b5-1c4d-43df-ae67-463db16aecf1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62ef66d-2856-409d-a6e4-4db4697681b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504a53fc-f048-4d74-9edd-4c8863e4ba99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a71c10f-cef2-4f21-abca-1d8499e52d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4fd6be1-068b-4e64-b6d1-6030bda383f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b33f40-2351-433c-8b6b-6d8a9ff0f862",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44539bf5-ba74-421b-ac8b-9200aa3403ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4de10be3-69e4-4ed0-9951-d2127618dc4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9646f2f-86a6-41d2-88df-bc6b4a025d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b96bd20-478e-4899-a5f9-b575f5b4f1f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07c623ef-5eea-4049-a608-de5119f60f88",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75820a8a-e4a5-4f07-a9fb-3c20d5598809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "467671f3-0e7a-4340-9c82-9a2ba2cfd022"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be6c4afe-a549-4678-8cec-58c923a8d32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb334699-957a-4937-b1d8-32b425db63cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfe70c88-09f4-473a-94f7-c44bb4a39cb5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ed3d4bd-a692-43d4-b4b5-97347caad7fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8fc3f1-bf63-4429-91a7-a463fa4de5ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04925578-0719-4686-aeb0-7030d48f338e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2d0197a-5235-49cd-b02b-3ddc1ca09f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "311b6b23-d924-445a-9fcf-26b127bfe4a5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f02763d-c009-4547-b3e7-9e458c00f0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "488043e8-fe67-4b53-856a-a56643107432"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840f621a-c026-4031-baa0-797a2fc4718e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "283af2c8-957c-4d5e-893c-fc272aef8720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5066ce66-f7c4-4525-bce4-271990737d0e",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db11c5d-f26b-46e1-a747-a32f13fcdc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef1f980c-095d-4f14-83fd-0f7c5e147b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70455c98-3c6b-44a2-bd96-64e398ec5566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "33971ebc-005c-4af0-a1e2-b64b23bdcc3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e9bd06b-f352-4ec9-b69b-bae2cb10a757",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9d2503-5d1a-4b51-b382-08e64e5dc517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63ab3c6a-3ce2-4e90-bb2f-5164ae67d68d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4567293a-0634-4bc5-a2fe-7d8754c8b3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6aaa44-64ad-42ba-945f-5cecc6bda1b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0169fb2b-6dbc-4622-9960-f7ec7c04277a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "978630a3-bd19-482a-9813-8c890eaa88a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7f5ae73-30ad-4959-be30-2cbe204e9916"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d28e54-abe7-4226-aa14-39d1abb60e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "41d1d3bd-86db-4a56-aa4d-52cea7e7d836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a857258d-e01b-43a0-adfc-2bb587b4ed03",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a1243cb-72be-48d8-962a-d05a6fe022d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88518c56-26cb-4817-967f-441894a52809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66669bf2-eab2-442c-b497-bf74234194a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "700d0a7e-f7e9-4571-a6c9-e56294ab3802"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8af0b8ea-8974-43c7-ae5d-67a0078c0e30",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fc6bf0-3ef3-45d5-8a00-83e6d11788c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f27f9e-f322-458a-85c4-2ac10bbb6a7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d060ada7-fae7-4497-80e0-4e76a46263d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c3a0ffba-44e7-4bd8-9d29-e3d3df8039ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52664461-1f7c-4931-a82d-20f3009b3f40",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89fd3e89-2b08-4680-98ce-4e40a19b61e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6677f223-67ed-4839-aa89-226f4fb9db33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8d9e3ae-53b3-4147-ac94-151264f5c4a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e515cda-1a69-49fa-a317-893ca08a01fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f2896b-ac45-4f9e-98db-154e40793f15",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a053f3e9-c040-4c24-8d9b-72480e2984d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8a30e8f4-cfc3-4463-b686-1eed2330cd75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2c28452-1a7b-476f-ae0b-18af5ed0d7c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "352555bc-16de-4492-a001-180618238a68"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2f4fcdd7-c15e-4225-a475-539db7327ce2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4c084bb-df8e-4ad6-af87-84a8dc72e6c1",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da6fcb51-30d3-4152-bda6-0d55e3472cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e80a6b49-4c3d-4ecc-a28c-b73c49be84a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8210c3-8e2b-4351-b3f6-2bc7c00d1816",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53777cac-5fe8-45ba-b5b5-c16435977a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80256183-1f72-491a-8d22-90a3eaddab99",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3486ee7d-502e-4711-95f8-5cb9c9b0e3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "653a0391-d9e3-4f53-bd61-03d4d0180272"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08a9df16-1283-4020-a0db-9da53eefa45b",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8f5620c-c22c-48a1-bec9-194b197224dd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26ba3007-5b94-479c-ab41-bceeef93f698",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79df535e-1611-403c-8926-66a222a48ca4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eb89f17e-f38b-4f25-8579-0178af25ec64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e09e938-8287-4c8c-9dec-adb2170cb1ef"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "292fab6d-3b03-4f0b-bc79-48ba0e2b4497",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "28e9abd5-6d86-4a62-a280-8bd4acb8201e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "4e380a4d-0956-47f7-a7ee-1b8594b43003",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e42fba33-44b0-4064-b355-5e6dc671e21e"
                }
              }
            ]
          },
          {
            "id": "77e6979e-4802-4985-8265-61891d913940",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ccaab7ea-2b85-4aeb-a313-b137bef9ef62",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9982e46-f753-48f7-a43b-8c5a0073a0e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f717ad1d-bd4f-4d00-8806-7bfebaa74cfc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "76c6e0b9-7198-4718-aafe-ea916ae7dcae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0844e47f-dc58-4402-8283-9931dff5ac0b"
                    }
                  }
                ]
              },
              {
                "id": "6301f1ff-1667-4b8e-9137-6c2e084f24a1",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30312585-94ab-4a49-a13a-a7341e82141e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "620c8cba-a3d3-4e25-9947-32d4eb4f120e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fe198786-5f86-4c55-86f3-47bf7313ecad",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ee6989c1-d17d-401b-a4f8-48bebfe7a0f5"
                    }
                  }
                ]
              },
              {
                "id": "83974ce1-31d2-4f8a-bd2c-7ccbf36a21d1",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "599ba233-1158-47ba-89b5-63f5c90e0946",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "62bfe479-9509-4316-b884-f5d3d62e670d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8d97e139-a923-4327-9a79-df62c83e0235",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "4fe61516-bfdf-4a23-a2a9-eb4b4b012d17"
                    }
                  }
                ]
              },
              {
                "id": "85dc15e6-3034-423b-b9f1-11f200ee9ba2",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fdcc4a90-b1f6-43f8-b0a1-290b34b5a139",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9a3e89ba-995c-414d-b927-73ecd8758527"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "538c4685-2a68-4e75-944e-a6ce5c0af047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "fcacb2c7-25cb-41ab-8a75-ccc6d5346a7a"
                    }
                  }
                ]
              },
              {
                "id": "8307a5d1-929b-4a3b-a821-df92ab19b989",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8b3c8b4f-32d8-480d-bdc4-1a09d7cee9cc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "651fccca-dff5-4e33-b2a5-71377bd746e8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "aa663b0c-f863-44e3-994f-c88c9e628cf4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6334b5b8-70da-46bc-b408-ccf548397739"
                    }
                  }
                ]
              },
              {
                "id": "751b2ab6-4b66-4349-9da0-10d0e4967d45",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5f6eea69-5b4a-4895-9dbb-7ea22542c205",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e00823c9-e4ef-46e6-a728-0400440c0851"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c212a177-8d3e-428b-a4ec-dec9b513ba84",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8d7acd19-c10b-4e91-aca2-875526afd4b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f1185793-6e52-40c1-9b8f-a35c207e3db8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b5cd48d-64f0-4747-8391-932eb8d64c46"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "45ac08c3-69ab-4e8c-9012-bb2fe3b64b00",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bddbde5c-a79e-45a9-ba3c-8fc560ce3be1"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b0f6b799-db56-4e68-8089-26832b258419",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "358a03f3-8032-4e1f-91c8-10b9ecf3780a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fe5f98ab-3c83-4690-8e61-179b199fe9ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2fe81183-3082-4a21-9589-1ba68fd89e33"
            }
          }
        ]
      },
      {
        "id": "1c635837-e423-4053-b00e-4c38b39702bb",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "295d0bec-4956-4198-8dc7-7b2ede333f71",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1a4e6408-10e7-453e-927d-b0b74bd1954f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8c6efeb9-b23c-4e7a-893a-b5b1a8ec6aa8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f53a98-aeed-4b3c-986b-a7f831d9b0d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14af0121-1a87-40c1-ab86-b00a5122b857"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "874cecd7-89a5-4b72-b050-df2fee2b1ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9cac8dc-1ae8-4bff-9300-3405624348b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46affb94-3444-4656-a88e-7ba41553c1ee",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59adbe75-27d1-4bdc-abb8-355a84548316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21aeff2-6982-4692-866a-7b77a840c411"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064397fd-3551-4b74-bfa6-1a143d363801",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc675626-ee6c-44ae-b597-cd4839c8cc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fedb3d3-3d19-486d-ab16-21896af086a0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25728294-e691-44f7-8075-0b5d27b11336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e254407e-b629-4ad2-af97-0cfc08a4eafc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9773489-b6f3-4bbf-81ce-9d158abd40fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca16db0-aad9-4b2e-b7a3-2d4c1ea5474f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd74faff-318d-42b9-a051-7a205d8132ee",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd4b2dc0-3df7-4925-a5ff-c62ff1880e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cffaddd-be13-4745-b131-003e5ca17064"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0596ca5a-51d5-4a9a-810f-3475cede5496",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27294e54-6c68-49b4-b72d-fe17ba69e6a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed8dd8a-ff87-49e6-bf43-4461b4975b63",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53b16d83-8588-40ab-ac50-521cafcfc12a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55369944-47eb-456b-a7ff-ab944db12920"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e54e43d-d4fc-4bc7-8924-7e5bc199962a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7e6dd75c-1b01-44d6-a6eb-3edf59db0534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f1b5de3-0dde-4f18-900a-caecab479978",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4928e45-1f7d-4cc6-8ac7-c58b937ccd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfdcd74-a3ee-4819-bb08-9b3f1f9d1bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "186c424b-44cb-4abf-bff0-1496e4ef2707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8e660ca-0ab1-418a-8b07-8a5833e93e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de1dc1b-b80f-4616-b517-870d0df0e563",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ca51b74-4244-4cba-adaf-45dad8c7b070",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0200d9e-b2d3-49aa-ad3a-3e9bab9c551d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc27135-6d7c-4e5a-ab75-e31911b97383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "394964c5-1520-42d3-b97c-cd56b8be5a49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "012ecd56-d91b-4400-abb8-9ce0e48bcfce",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76a48818-5c31-467e-ba93-3cec75dadc0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c202215-92a2-4870-980e-6df9dc6fd99e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7856afd-d8c8-4d18-b54a-66ec47207c13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6cea80a-ee0b-4006-9de5-432c2e026f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dee91bd-42c3-4f36-ae6d-a902ec8daa97",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9879911b-8403-40b7-bee2-706b97c5f4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a83e3c-bcdb-4903-b2e2-bab95643bdd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6469188a-2fad-4982-862b-58cb748e45b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d9749ac-ee07-4481-8348-9640be5e6004"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6871a8cd-d7f9-493f-bc74-c609d57369e5",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ffcaf2-ff85-4120-9d72-b8d6c729775e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9175650c-2aa1-4c86-bcde-06c1698ec20e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf71846c-059b-442e-ae8b-2ffd58f67499",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "89cde445-e33c-47cb-9ba7-858dff1c3bf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51c0d2b5-a2a3-45cf-850c-d184e9a0e41e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a71cf2d-29bc-44ae-96e4-7a1c40317aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3cedd1a-ca1c-4fe3-bf37-488bb19eb44d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2516ca-7b5e-4f02-8826-da36b2ea6b8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "77ec5e18-f908-45fc-96b8-fb9eb93f6adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac166480-696b-4f6a-9140-f8bcd2e9feb3",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a81a2f-3bb9-42bf-a176-c8dd94989d95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9866fa60-f2b6-49c3-84f2-3b0e27343bad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a658cb34-8b46-416f-bff2-41f5d20c563b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "75a37a72-4a1f-42ef-9d9f-498b20a43e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "686bad49-7c0c-475f-a25e-a2bbd5481ac9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76485878-b243-420e-9ef7-5b33805a627d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9320267f-ab34-4d35-a5b6-50dde62c4c92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c7a98ce-b3b6-46be-b3c3-56d90d5f82a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "15405e7a-654a-4f76-879c-f55dcd915831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3b9075-3232-4729-bb04-a92acfce4058",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc91c664-d709-41c0-945d-2154a743520a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c75f7cc-db6e-4b63-8205-c0c4ddef9817"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a642d0b6-3463-4e95-8a6c-3051e377e96e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "23615c7a-9e15-452d-9e46-70a5431c3b47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c811fb3-63b9-45ef-946b-7d5be86685f0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccd7fc3-3a36-40d4-b6f4-12ad1616ce85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbd87628-f9ca-427a-b8ad-962b827dee71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01983ac1-3236-4df1-9cce-2c0f4dff4776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e856316-7fa2-4017-bec0-f5484efad8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb37c1a7-6b81-4b1a-a3ff-a250406fb529",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c202ad1a-1362-40a9-b7bc-e7ca294c7e90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34a86db3-553b-4d0b-8159-a178f96b25fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f02e9040-9776-4124-b258-177fe622c688",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab1cfd45-af3c-4c4e-8c72-652a3d7dfd8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c206911-f766-4596-af96-c8f47b4998e4",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8b84ae-3a78-4abc-973f-97684483878b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bbd6266-f83f-4820-8f8e-2c02aaf531a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18a1d9b9-22ba-4463-adf8-dc7aca161c95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6827e969-7830-485d-b827-f8f98aceec95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cf566c4-7f8c-41f6-ab54-6822d5b6035b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb417c7-17bf-4989-bbb9-538eab564bda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d59ffd0e-782d-4203-9319-dc77df2f67d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7cd552c-d9cf-41b3-a572-41c830aeec2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "036a728e-4c59-4961-b08a-33a747d67253"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eed1376-5426-46ca-8831-db22a43e6d8f",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d95d06-2c44-4992-9e4d-e8dff8192d85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0e70a8-777e-47ba-932c-0ca2561dd2e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6682a9d2-c8f2-4f50-809c-cbcaf1f4df93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d47aa9f-093f-4062-ad25-54756d6fb24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6171552-9b79-4d87-9e15-64e020ec25e1",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7213f356-90f4-4a7a-ba03-cce105a1c39a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ac5f30a-a1f2-4f79-99b3-d03883e9392e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541c203d-2ae2-485b-b292-d04f74e7ae08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "520d839e-4129-4e36-b2f6-8efe4066284d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b56bc7b-b03a-4fa6-97fa-9c61023c136d",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c8551b-b732-4948-a03c-5881064b52fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dca8f1f4-80f4-4255-bcdd-1b32bf612408"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedb3dcb-cf3b-456d-802b-1971591b45af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "577f83aa-35bd-43c2-9761-9436068fc906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "432f3627-30c8-4c07-8a79-90e222187700",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6668a2-93f9-4974-9c54-39efef221f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c0df02c-ee87-463c-9023-45cfa82f714a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f7c346-86bd-4ef9-9d3b-ba910692b817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32aaf4d1-8090-4d11-b25c-4a3c52e1f39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d00ceb-8033-4581-a2cd-12408f7504be",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81f9947-cd5a-4709-92cb-a9e4992ed26b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9355d1de-e9f8-472a-ad27-9ec10d2a9c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92a513e6-d215-4a49-8aee-2a071dd22511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23ae1f6-1ab9-4a87-8d7f-dc722ee81d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a03ba08-a988-4821-88b8-fbd53d1100c8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2893c4da-3148-4a84-9955-dcc38f2a25c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857617cf-8cf1-49d4-8316-ece64519ad84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2ad78b-2709-4019-9483-c9d25a9511b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c3372e3-e48e-4c68-9d45-fe672f41b708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92ba37c6-1e4e-4434-9f01-c774443a70bf",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc4c14cd-f989-4ea0-898b-d73d9793b658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2893ac59-b847-462e-bffe-d14e21135991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a361046-5154-4eef-943a-d1099560229b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "398ad036-29e6-4ce5-a42e-a7352a3954d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076a228c-af0b-4b4f-b0f3-815e9cea1103",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e059139-557f-4de6-960c-0cdbc4a26cbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "651e5834-cc3d-4373-828a-49bb8398db5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ae19135-a1f2-44e4-8938-a051cd84a7c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c25e8a1-55d9-4c0e-9c06-aa403cfdcea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56b7aa8-2ddc-405e-9f04-aed71f5aad15",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4af6a814-c987-4b3e-99b4-75bce6066594",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba20e6fd-c2f1-4132-9123-1132221c5949"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1109fd2-9d40-4d3c-bcf6-273d5f0bf0e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "063e8112-6391-4631-973d-b7cd92d46e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73745cb3-716d-490c-b83f-50c97b65684d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9786100-8cfa-407c-afc3-3eaadb400e81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ae613a6-6745-4fae-b5ae-e0d37a7ff7db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ccb7ece-3e74-40a6-ab89-6d9ee8e5711e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2419360e-b4cf-4061-ac61-efa4e57a5e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9e81b16-4efd-4912-81e4-b2ccb85ed083",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf5eb99d-4152-4b2b-bd74-ab2def0d193f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a09713-88d6-4173-b20e-5a0bb69c1844"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38e93655-be8c-4669-9272-6eef3e2fe09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4742473d-10ea-4898-a22e-ff2f430e4606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77df065e-fb9f-403a-bb01-98c60371ac23",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3ad60b-e783-4b58-b662-5bd5ca178067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d21779-f99e-4cfa-9866-9fd42c12c9e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8931838b-d4a0-485b-b829-4d532243f084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a94060-5e5e-4dfa-bbbf-f24099b95a30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4a588f0-31ac-4b08-8bcc-48274ed76033",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7270a7-bf49-4a70-9b0e-21a3b6a71849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5408b2b6-2745-44c2-97a1-8f7049c89de9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2051bb5d-6026-4560-af8a-96dcce4d2c81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2389c83-9154-45eb-aad9-5b5714043f18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c046c01-18d3-4ead-bd39-9809536ad424",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3b912f8-3fc4-4e65-8fed-ebee8cbb0bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a7a1db7-9f5b-46a0-8290-01cadf81c313"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad49fc5-f78c-4252-82f8-f4d3db195697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "843b7c0d-7f93-49a9-b1b8-6371639f34b6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cb1ac944-8eb2-4dd7-8501-0c0f9f6d28ac",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7295a102-7fc9-494e-a13c-002597322821",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c6e1e6-e914-4fab-b6c0-793b4c904d51",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "84d43a5a-77ea-40ba-bab4-f1f8b3d66ea4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f36ba844-8502-42ce-a3d2-2133cc9eae4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "04c8e888-d923-47b2-a22e-d443f1c57f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b704f40e-fdf3-4114-8f2b-27802821e42f",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70c7dd1-1f72-4012-99a6-ec2b063ca5a4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3189f3fa-e12f-46ea-8a0d-68f31aee3365"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12eda847-e4bd-47f9-9bec-7de0bb750b5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b5b471b7-82a5-4edf-8215-0cefbac76580"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dc4aebd-6fd7-4a03-9d2b-644cd79a3d19",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b6ba1a9-6496-4afc-a86c-8aaad5ac13c7"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "dae2e2d1-9ccd-49cb-b017-013b6d3aa47e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "381474df-b16b-48ad-b0b2-44c234c2c580"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1e89c45-81dc-488f-aa16-8a88afc63c55",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "32f0bcbf-2b07-4fd2-acf2-eb58c90ffa51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f878ee59-e86e-4af6-8d99-cc7bbac6ab6b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "855fc62d-eb79-48f0-8baf-b58516c883c4"
            }
          }
        ]
      },
      {
        "id": "9b4c2ac2-65d5-445c-8a06-2865b169984b",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "94da2e80-7870-4dc5-a72e-e744cea092d1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "29481492-ed74-4681-9630-21076a619495",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "470a61b8-7ea9-416b-a480-c52c358d0021",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b72a07f-5229-4d37-9d71-e457f9e2c056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19c5356c-76bd-4ecf-ad9b-51eefaeea7c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec37177-75a9-49e3-848c-b9aafdc3ec98",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b87cea4-c653-4232-b851-7cf98f53ae4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13679205-5f38-4579-bbbb-4dec702e8265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfca4fb3-733c-4fc1-8f63-beef552f245e",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af1cba9-b300-4fb4-a0e5-9de8b7322737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec3d1644-05a0-496a-a7f2-05d2bb5c311e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a967e958-d5cc-4d09-8c28-655e6b170338",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05620ba0-f25f-4349-a6ca-c4ab921eb461",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a80e05e-5beb-47e2-8d9f-89473f629345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "457923dd-75bb-44e2-92a5-5ba2b99bf9c3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9836c47e-e336-4b41-ad43-f2c63ebb8003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8f4560-6f9c-4796-964a-2a0063ed231d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a830c72e-7e11-4606-86ef-31bcc36ed40f",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e542b9f2-1130-4a8f-ab31-b203001cd498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bee2890d-1f96-4708-aa6d-57079056e75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7443ed1-fc66-44e9-a71f-2155bb0870b2",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55f5f2a5-e204-4549-8a46-05e9de42f266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51887627-f4eb-4f08-9530-4b4b37c2ba5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58b8e480-d94b-4e79-9f2f-19dd7e539cb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d19e279-6563-480b-9de0-c8a3080c16d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d8bf92-1808-4ab1-90aa-b295dbe66aef",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e19aa686-53ae-4d21-9d27-ed75caf09469",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "027b7c72-da2c-48c9-8223-164c751d05ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81704dc-d044-4814-99aa-7f0aceb4638d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3546c57f-3093-4035-aef9-c063845148a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2ee2eb-3ecd-49ff-98a8-395bf156e295",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b38be27-32fd-4d34-8304-09f1bf67fdc5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92c4cd62-ddb1-4da8-9526-205b5f521722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f87613fe-4806-427c-92c6-2394e1a5d028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0f57556-24a0-41f2-9edd-e313a1b9d3f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1353629-2000-40d0-8f6d-a73078113c00",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d89377-c605-4721-aeab-ad5e5da33969",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ba68ad6-d497-4097-9794-90e7ec4f0fdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7db086-2904-404f-8333-1cb9f4d4f0d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25137362-c16c-4003-8d43-e604300cb57b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b5a97ac-aca1-49c1-9154-b055f7aa8e69",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0570d91-de63-4eb2-a1eb-9c2864d02a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7e3f746-6a12-4b85-8c80-db4025744420"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef96116-ebf0-4b56-a723-bd3cccc2731a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32cd7247-ec29-4a36-a8fc-fd9357dd5c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13772ae8-e67d-4b4e-bded-d069f4fe5000",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2ee205c-5f04-45c7-bad6-0733b9dc2830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09b2d42-1767-4ac7-bf9f-aa7932f5780f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e7b01d-0a8b-4981-962e-2fbdfb0c82b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63cc9ad7-5f88-43e1-9eb3-6671a21a330a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2333cbf7-f846-4ec6-a3de-e0cc17344c38",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88bdbd7d-ab55-4580-9d0d-e568aa56c9d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1faf1fc-5bda-4dd1-976f-f9a46b14251b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e6ef4b-d071-42ba-826b-76cf68e9374a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772f4a5e-b9be-42fa-9e23-9cd381c586b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75f1fa86-70d2-431f-9d70-52f35ccf6981",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab8f913-cf8d-43f4-8226-0ac867276a8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4649492-e8ac-49e4-b5dc-32d7cefd145d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1c7a69d-b474-442b-aea9-bc860049a62f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69a01962-a64a-435b-b936-3e70ec1d59f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d62193-5fec-4abe-baab-b63e545366ed",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a1b665-1107-4376-973f-efb6da04a0fa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5fb74144-1946-4cf5-97c3-a7f74086283e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6626316a-fc56-477a-a38d-e1ff7271a538",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "443dd3b4-3279-40d3-ab6f-a14b4d8d2133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7526275-b08e-41d1-89cc-bf1d09459856",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd686269-da31-4d65-ab48-7fdea2c81619",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27db06e1-c30f-46db-9691-ebdf1a48408e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e41bb8-436d-4dca-9b21-9a9484dc6ac2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b0d3176-aea1-4158-9219-60e2dae89c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ccaa2c-27ac-4323-9ad6-68436af30a92",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94099357-246c-4a05-881e-96280ed0088b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7a2cf8-781d-4b94-99f3-0b905a79ee38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a638ab9f-3c5f-48b2-b608-4e5714bdd205",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c87d166-784e-4fd1-9f53-c69773d5cb4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5c5fca2-aaaa-4d40-85db-4103c30c4c1c",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae24e674-7f90-4a52-9987-37db6cf8ec60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968fb899-6923-41f6-ba93-bbe88c5565b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20a97230-d117-46d8-90b5-1c2efcbcc689",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7c4b040-4553-477f-a5fb-bdff882c477f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9273c6c-898f-49ac-b48a-652a07d2cf3f",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a21269d-5e69-4b22-b3f4-ba232afb6c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c2cf3c7-ef99-4b1f-aa70-3d89f409e9c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51215cb8-a7a3-4623-8bc4-582e7d97f89b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2975ae85-993d-418a-b206-ebafca264a78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46d71ff-fc04-45d7-8e90-4dfc6b27cf6e",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d471797-b69f-4bd1-9af9-3e3ff982a1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "389e981d-8ad9-4395-8c9a-09c04f336f25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee048336-2240-472f-a199-691ca743c983",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46ff5958-d23d-418c-982c-c8bae770b40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "995fbc53-3103-4331-b855-36b296bc574a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3779d2-98ed-4a83-95c1-d4fe4bc5b1a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1720a8cd-a33b-446b-ba8f-8a2fbdd14bcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2eb8c2-5e3a-4dca-9945-ee3757c7ded9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2d268a7-e6df-4221-b18c-14f636536edb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6598e18d-1ddf-4eee-a0cb-98be7ba0b561",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdeb82e9-e86b-4f4e-9d8f-e245e9628e36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcc46c1f-0cbb-4fca-adb1-9e1a81fa983d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddd78f1c-a6d0-4588-9549-16ef25ec5b79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a19502e-8369-481b-9496-3927dfed171e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec72026-2a42-4279-94f7-22d84d903747",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d1f62e-8fda-4f45-b4e3-8b025f67bb89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4be7ded6-f50b-496c-a01a-efbec8c656d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0a107c8-ef07-42af-8e96-5244f38c8580",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a63eec1-d188-4bf6-a1c2-9dfd40b328d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9fc5bfc-8179-44e4-8179-c64b1926fa60",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0338dcab-bf17-42a4-89aa-cf9f4b60581d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8854df8a-76d9-456e-88b4-87754eac45dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05044ed-2a83-425a-a7e4-c3a8b59c9475",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce0564b-d34a-414a-bae6-877ba0689ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a7fd27f-fe2a-4eae-9801-4df00c60b385",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0f85da-41a7-4191-b394-dc90337c0bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba3d8886-fa60-4759-9ea3-56d354a211b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5eef10-9dc7-471d-9ff8-720045b0325d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ce2861-23ce-4b84-b23c-fe76f9190f6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c05da55-dd91-4fa7-ba73-9b6e4b620e66",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb23a819-1f41-47d2-9621-3d0e27462c60",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65afef73-90d7-4a79-82f4-5b0d3d942490"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b7b7a7e-b664-4c9c-a4a1-e51b01f86097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f899ea2d-f2b9-4ea6-998d-09ee96aa3e5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ef9732-f9f5-4e1f-b403-dcf02bb62894",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2acfc77-4a76-450d-b0eb-23049ecd9f0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8b9321a-2e7d-4609-b702-c8250484f60d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da478fd-bebf-47da-bda9-baa5449d45f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f910f140-4f4c-43c6-8d7d-528c3202b20c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c3bc67d-fa8c-44b6-ae42-f52a7829c1e0",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a71f36-4084-4611-9ec0-5bbc095057cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4259362c-7fd9-4baf-a984-e68add0eb9c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90963590-d294-43a4-a684-014dca5c7d7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f806c39-d556-4895-945d-a229e02cdd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78756e26-581b-40d0-8ed6-68cd9c6d1ef7",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a8fbaf-dd4e-4ccf-8292-608a837590ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41a1bf14-8129-4d35-8f6a-7f795100398b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a0460b7-6681-4441-8cda-ee76acc9a836",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0926d0ea-a7c8-4040-8b0c-1ea6ed4588f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "725d23be-07e6-4f1d-b6e4-a81f150f18a4",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa48ed00-dca7-4f2a-bd19-63e72443e6ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc611b43-aa31-428f-94a0-e6b1bf80371b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aabdc1ca-a603-424c-89cb-b2c38566fb2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c3ff7e-4250-4d06-8b7c-4c9c84d09c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ed4f37-93af-44cf-9491-abe5901fd90f",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068f7c12-a467-400c-81e6-886c16e7a959",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a93b1a3-f3bb-4c3f-8b78-ba94d3e615d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efa68285-f9d9-48cd-b9dd-7d389888b312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fceac91-cf76-4d28-93ec-77aab9266c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4e017e7-f569-4a43-89f0-5d4cdaf19e93",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "663994f6-fd18-45f2-ab94-298b5f10c4a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b835f593-0ff2-4971-a49c-3f5baf451459"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d83c42-12f3-406c-ad82-27942f6cf8fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65c9f582-f4c0-456e-be38-7304738b3972"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd182990-c216-45af-b8fe-fe815c72822f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0f43b07-b964-4560-bbd9-99a1821fb9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82fa93de-0bee-4f65-a846-eeb66d9bd14b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dee9f08-a1ea-44c1-965f-3f2be1a928e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6da7966a-d038-4edc-9ec2-35c48a50e821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8492a7af-2c37-43b6-96a9-c36a272f90be",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd5190f-b56f-4ba0-bc11-fa581b3bd315",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "215ccdb2-66f3-42e6-aade-b7e163937fc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5622760b-5ca3-4654-92da-c06a3659c608",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "818f7c16-01d2-4aae-b5d0-318e9320d8e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55a29410-e70f-4c2c-98a1-d3a1e23cfb48",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8333bc-cbaa-481f-bc89-262b7e23a85a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34ceb2f-9d55-4fd1-a6de-9bee020cbf85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "564f1594-a850-4db3-889a-7bf21091b7b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3f935bf-b45b-4723-a6d8-d1519fe022c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a775d719-c690-4777-a4ae-ed8fb256313a",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "365ec462-3b1f-4c14-88fa-ae7a56efe5a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "079bd860-960c-4bb0-953b-144458cbb273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e952329b-dd90-4cc9-9805-4ab323a7f2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cb9dce9-6417-4f99-916a-8d511f75d14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5cce17-b812-4b66-afc6-858348e25181",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "948152cd-44be-4d17-ad09-2aa7a631b610",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9062b63-aa5f-48af-93b8-c9637b830da5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c033bb7-d8db-4785-926f-9bd4c9200fb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f45397-3bb5-49e0-b0c5-4e4e8aba45c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f46176-0f72-4264-8877-8eaf75a8c963",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "894cf139-0b1e-4fcb-a555-f303799ccbeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6b88475-6754-4f87-adb2-20d96870df2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ede425d1-b9fe-4468-bb14-f4efb1692a74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1ada01e-1b78-4d07-bd30-29809a3a3af0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef78432b-5b53-4d7d-b137-54da7ba3502c",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd202ca9-8091-41a5-b611-41e45440392c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e1ce505-83af-40e6-a09b-45b283e6574c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37eb22ca-c362-49f0-9e22-105ea21ee958",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3bffa90-30fc-4308-96a2-25c3b6b213ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4255d060-9d66-4499-8a9b-779112401213",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4330382-24cc-4f2c-998f-528538d46a7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "513e617a-f323-4711-a48a-db46cb01a38c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c65f1a6-797d-4614-8a50-e28606729d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "273f24c9-4a54-48d1-8754-e4e096bcf93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95beaa13-f0fe-467b-96a8-3f8d81ca6790",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d05ca1c-4860-44e2-aa2d-5a4eefc7d56b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78bfa972-8665-4b97-a48b-edd0122f3866"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f06d9a-d10e-4ee8-ba76-91471e1f3e53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f91b1cf9-6a1e-407c-ad11-cb0a02642c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0aabd5-0601-4435-925c-6e00400a480d",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0173b330-e079-4fd8-9cc0-a54001118ea7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adc72b80-42cd-4aa0-b70c-4881a5bfefc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa677d5-bb11-44d4-9dba-c88a906cc3bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a16c67b1-d3ba-4fae-8a19-3e85d71d70b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5abeb320-c98a-4ace-8afe-66feea8cc470",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28e3db15-7fdc-4ade-ad20-3a6df1b75325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1440ec6-a3e7-4352-a981-2c7e09318e85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73f8c32-6bc3-4348-8f71-fe62f97d416f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afefee80-57dc-43f5-9ee4-75c108a438d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2082e54c-273f-4f94-98f2-1c819d0611be",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd47dc77-530d-419e-9e8d-bc447748e622",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88d06465-d539-4f4d-9b40-3f982c9971c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b594810d-30a2-4e43-83b2-830ce573e587",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3bcd33a-0c04-42e1-a5e5-b15ece8fb17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b53893-365d-42e8-98ce-2c35ac6d618b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd8e585-3b21-477c-b11d-4524fc5f6e55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e3f3401-dce7-4557-8335-133124196261"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d84b18a-b9cd-4616-bc57-d4e41da6c9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9f85f2d-d4bf-4892-b4be-687fdcbb8959"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20e77205-a744-4d1f-a222-18af96234475",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "250e7232-2742-493e-9baa-9b60b791602f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6d06729-bd5b-49b2-90a2-c8fb197b4273"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c53bb77-f63f-461a-ade8-4c81f8a1d185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8958ac59-17b2-4bb7-8a35-9c5e21040e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b620c1d-963e-4aa0-8a8f-697f2a4e77c7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf5d0f09-3e31-4199-9cd6-644a705b48b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "542e423a-950c-46eb-9f0d-7eb496b01869"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35da159-3192-4df9-81cb-1aa2fcbc6462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cae79084-b1f5-4ef0-b5be-6d37787b022c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af4057f-a743-4d76-95db-aff017a0d2ee",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee98474a-4d6b-4002-abc9-83c3a7d60d0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b00b22d5-3bd5-4488-af5e-0d3e53802f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "971df3d4-8e58-4eb2-acfb-b82fc3e8cc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36971a9e-4433-4171-b17d-eb7d90fadeaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af045d47-17d5-4371-a078-281c34b54a9a",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebe1011-1c9d-4bef-96a0-ef6f4fac5e98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af826dee-5e69-48aa-b66e-4f4cda86d8e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3d07d1-ce7c-469c-9758-e42a6fff40f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49b9be6a-ffe7-455f-a9cc-b631a586b228"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c463ab8-af6f-4acb-9fc4-ed2f5a6b0d58",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdd41ebe-263b-4a76-8554-a184c042eb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bfdfb20-64d7-4844-93e9-b0dac8a2f801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec74f492-f006-4a2c-97fe-1b4d65284bc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4ecb5e6-c673-4cc1-af5b-52bf17982842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93a306c2-34ce-47e2-995e-ff33e4e71c5c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10222222-2fe1-4e07-ae18-31ec84086ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ba38136-53c7-49ca-9fb8-b540b5ddf9f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e316ed-71e9-4512-a695-dbcc1d1bb886",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c6289f8-30e6-443d-b989-5309bc292714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a6e584-7347-4989-b9fb-1450d6b347b9",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99252357-2ffb-4b6f-84d1-fd830ed2b7dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bb45433-b768-464a-a52e-5a3d4b68a576"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0151458e-8cff-4678-91bd-efdf087075c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20078b18-622d-45c1-a3c3-345d37f84e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61cd224-a6c0-4b9e-b87f-856bc7f09df8",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f9f9280-67ca-4a6d-9cc8-295f67ae57f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037f1a5d-5e38-44bd-92be-a61e46238be5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc063362-c8e4-4a96-ad35-09b2a17f8bc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c15aa7e2-3a73-48a8-8ab8-4e6e57438bda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b032af79-d66a-44bb-9f17-65e18acfdc9a",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4059596-edbf-4588-bc96-dedb3336acdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871251fb-83a0-4037-9427-6e68b9c54dea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f92f2c7-7732-4b1b-995e-f82e408b9bd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7f3edac-94e6-4784-ab60-36eddfcdbea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b07a84d1-2ccd-467c-9391-3b114d23466f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db84598e-78a3-4b6a-8908-bd639fe997a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23bd7277-170a-4d0d-807e-8287c8f7d9a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5141b754-064c-47f5-959b-977a7000a581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c78c22b-8ce6-452d-8164-25e16a187e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43d9323-a11b-4a9e-82c7-614aa61eb253",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab21615-61c4-4823-86d4-950fd7f43325",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "777201bc-4448-4e12-a7c0-dd68dcf8922d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbde515d-af27-43d2-b4bd-d1feb7f13161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce3260c5-27b5-4f75-a177-751ecb5b4451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a466eae-35dc-496c-8faf-6d1149139563",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1522b201-436b-4fa2-9c69-245efe00f88d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0e2bd40-a303-45fd-9dcb-e9ef60867722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e076fe4c-81fb-48fa-989e-d642ff349762",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70cebaaa-c583-4f8d-a3d1-e5dff12b9212"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d4d82b-7e63-4fad-99a4-c0e6953d275c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c493160-d7cd-452a-a0a2-b2129b7839b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd6d210-ef96-4d0d-9ee5-d8b58847e623"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9818f6fa-4cb1-4fc4-82fe-cd23011b1340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2700cd77-5f00-47f5-8438-0f0541c2c4a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63e05414-6070-42bd-bc9f-e3a7ee859cca",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "116bdb16-a912-40f3-9c5f-c4a4d0091b81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e829edf-5498-429a-a217-7a1807178ed3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8082aa-139c-4217-bb86-798a4ac9e45d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01eab6c8-9dc0-41bf-b7cc-b80da71767ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de1ef5a-fa4a-40be-9fe8-365a2f192d29",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30245b5b-62a9-4a84-8fb8-d80c7a6c1655",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eab43a2-03f2-48e3-957c-abf894ad58a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf994bfe-7c68-4705-b18a-ad8d5c63c990",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d20e9f7-9aca-4942-a39f-006503f6c707"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc2a6ab-3245-4e18-b719-92a65453e051",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "231f1d2f-89c5-44bc-ae03-636556333248",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36a4e29e-7691-45d1-a30b-c2ab07d02517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f7a9d8-8fe7-4c3b-8883-b9882adca499",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90b51e29-0eda-440c-a5be-48b978aea5c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec3c53c-390b-40a4-8eb2-1b59a26689e6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34bacfd2-27ef-4de2-a8a5-d2ae75cfd09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90424413-d84d-4f6a-855d-5c2d749fac5c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8fffb85-0484-4c82-87d5-663942301eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "169cf923-86a8-493c-9e51-76303e3a248a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7587948-2e7b-466f-8bd3-810c93de1c3f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daa81499-634b-4f6b-89b4-42d562d858b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d0b7b64-4fd9-4b9d-aac0-f610eaf88a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "082d6254-65e0-4335-b3b0-2bd331ca2428",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2acad96b-3007-43dc-a971-7343907df543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "557ce221-7e2b-49bc-a851-7aed720b9a36",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46fb32a-4117-4c70-bb6f-e5589ef429e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65652509-2a67-4853-8d4b-fbf2f4eb7219"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ccfb0f7-c311-4e21-b6d6-dc920da228a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e009c7b-c0a4-41f2-b3e0-80afc4512302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa1083c3-1f85-402b-8d0d-ba5e2bbf5de6",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a5c87f-ad35-48be-aad1-a5928da950ee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb05e885-1663-4aae-91b1-8086de520f49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b60545-eb30-4eb3-bcd4-c3ef7f48df20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c120de68-08d0-409a-9b1b-3264eaa752dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68ed31da-b8bf-488e-ab04-3b28a419dd4e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69ed30af-4ff6-4478-892b-483448dbbb27",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9e1a764-4814-43da-81e5-483d336f32cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db6e7fa-bead-45a6-aaed-5bd8fc4e1f19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b0b5806-3793-444e-af7f-0ab2656bfec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397ea521-bd7e-4ce4-a219-90e5ad5a191f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7530667-d78e-4e1c-a0df-636673416fbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2668d9b0-6947-4886-9043-bae27b2eb5f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf45bbc7-156a-49f7-b1ef-5330de967ca7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "208d7e83-2b6d-47a0-8e14-78537f224199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1728c6db-25d0-4589-b488-4f36b054e6c2",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0f3222c-cab6-4ea5-8ee1-5fb5613d09e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "769d3a74-d2b9-46ec-bd4e-f82062fbf12c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7caf432c-2cff-45b6-aee9-69c8316db6cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb5cc759-9f49-4422-81df-8b6528376566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f171091-dd73-4f5f-8f61-8353b2bb9b8c",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee14a519-1de1-4abe-aa3d-8f3fca8ef2ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "543d1298-be10-4ec0-8339-767a77e72307"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e9b8e7-5993-41a2-8861-6aa47b3a2674",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdca0afc-c0f8-4dc0-8fe8-5705dba77efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c0906cd-5c32-4c51-b715-df10dd16dfb8",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e6bdd82-d48e-416f-b425-ebc032ce5455",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f40d9893-fc94-41f8-b092-8de946a1eccd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7979b83-9758-4317-9b7b-95bdf02b8d23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8955c23-0dcd-4c45-9c67-522e88f72e38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "beae4c03-5eb1-406d-be53-19959651a26b",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e1114c-b6a4-4928-882b-1fa89031191a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22c56c49-f158-42ac-be75-cca139b14bdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4d953e1-886d-4197-9d52-4b7398e4f7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca33f62c-9936-42fb-b92c-3cef3c8a8b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e453db8-bd36-4eff-8a8d-240ced8e5523",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b1ccc7-d47f-493c-b828-18d036d622c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da31b6fe-5bcb-436c-b19a-d9ca09de7a71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e124546d-5bfb-486a-a865-3f360c3ee8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51d66a65-b5a1-49f8-8ea6-08180cd952c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb69214-286f-4c8a-b7c1-1341cca2e2a1",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5409ef-55a5-4396-9f31-c5c15c917b43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86641241-1591-4539-b452-8df3b5982d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6720cda1-0675-42c5-a2b3-88c55d5d7c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f660f3cf-cc9d-41a5-8fb7-28b7ccd88534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6987a805-9834-4405-a23a-a16907765d09",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aedd8359-5190-4750-b99b-a9b3078a4e05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e7c304-a7d7-435f-ae29-ed305b881bfc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfa67b5-3718-42fe-9139-2079217ffb12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f906ae-c4c6-48a4-b364-8fac8238f347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db66ce1-0054-43e2-92ba-31d35b98ff4f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b15c74-add4-4cd0-9907-c0c055036f32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "45831f26-e3e8-4791-9f88-dc498a6c8575"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbff9e2-260f-448e-afe0-3a10b0084158",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e12ddd0-9f24-466b-9d15-0617681f617b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce656c77-a2d4-4d08-b13f-1c82b3fd9396",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bbfc2d-34a5-46f3-8b5a-461ae57f7402",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48f61f93-389a-4252-9859-f2c4994f4f33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6ef2cc2-0707-4a90-9ce7-f544a7247650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dd7bda-aece-4a6c-b9f4-433967b9e1f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26652a3c-21a0-4df5-b916-5fef78758432",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6a3fb9-00f0-49a8-88e0-485013abfda5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b41faa3e-6b90-4380-bf2b-ee6c1b67c707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf6bf09d-be5c-4e4c-bfa1-2b5481b7bb16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "250ed712-a035-4501-964a-dd8384590d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86f29e1-8911-4c51-9013-a672ffcd3dd5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26798ea2-3dd4-4451-b534-69c852077345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e64f234c-01dd-4940-9d98-ff9d8f815488"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed7eb949-d007-4de1-af56-babca9d3faf9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc4864af-1821-4761-a9a2-3812957b3409"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f37e5c6-af86-4a31-a1b6-2d7d4edbf7b7",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fea3a90-b442-4117-af05-d5df93998954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "58cc040e-8683-4bf9-92fa-e6872d657137"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5976e3e7-8bf8-4bd1-9425-7f09ee4680b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21342e88-cea0-453c-b14a-3a4572ecd3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86691162-296d-4f71-9286-ccd32683deb7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "156f03e0-0ae1-4a13-9e65-1c9b9bd62f35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e41d38e-a978-42c3-9906-dd2a49ff5499"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "889d9439-7a7f-40c7-8667-85c441653526",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2358ade9-60c5-4279-a306-e840cd75ff98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90eadabb-298b-4636-8959-d8a7c4e0c1b9",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22381ade-7ec5-4bb8-a566-f9fdfc2ddcdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "897a340a-e02b-4ebe-a49e-6023261c5aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5fb89a-7cab-4088-9070-617a5f1c0f37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72d17cc0-00aa-41e2-bcc2-6940d707b3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f8368e-ecab-49cb-b95c-baece28ae6b9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e91b756-1b5d-44c9-a46c-ce7b417c844b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "653f9a24-fe36-4c7d-bb94-8032d9317f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e534b969-4d44-4633-bb26-a0a824e75332",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c47acacb-698a-4cb4-bc1d-5af784494fe2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd18f61-684c-4006-a6df-cdb9815c687d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f97441-3bd4-4f27-8e1e-7d3ea928d1a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08a64b71-1aff-49bf-b53c-367d99b7862d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17ff67f-52ce-4085-b032-c13199967fe9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a351660b-aaa5-4a58-92b5-1f6b66e1ca9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5da7af-8be7-4b75-8d95-b370bd0580e7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fb193f2-60ac-4a92-952b-b97304c792cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8006b53-4c89-47e9-bcfe-9fcb042a10dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11fcd8a7-e8ba-4f84-af1c-92bbe9329e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "472c06be-0518-495a-ae4a-24f8039fa831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6c5861-eea7-4534-ac43-7ae8c00f5360",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e677fd7-5e17-4e97-988f-f30d7035095b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ad6672-1cc0-4b2c-98b4-4c5e75bbd6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "281ce2af-72c2-4c8a-8a83-04289d56b206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d11a7246-abfe-433c-91f8-1a3df81b0048"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12031749-8e59-44af-8cfd-07bd0871a936",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c88b8bb2-f68d-415a-8f22-36d5ca6121e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18d35008-5dce-44b9-8fed-36e3f0760e52"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69466a3-0444-4f1f-b32d-afc4f3b80ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6149ab35-86d6-47ed-a5cb-ea2b03a57385"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35591c20-31d9-4c65-ad73-9089859ac571",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9eb54d6-99ee-44ff-a57a-c62e7e8d79cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00b93ef0-7a99-40a7-a0d2-d0519e326728"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a206b122-28f1-44ff-b674-d3f7c767986c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f226dde-0784-4008-a49f-16c1c6c2a3ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6a8b86-08b3-4958-8caf-1c7dc11e9e7c",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b631cc56-d01f-4b32-8292-5af9e47ec377",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2cc18a99-b454-4102-99fa-77898b9ab786"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20de026f-62d2-4028-86d2-06da62b4d4ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddcab24d-503d-47b5-a480-366ba38885c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910662fd-5529-4232-a4f9-aa48239243da",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a172e8d2-ffdc-4723-ae34-15f12173d29a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cad485c-f819-45bc-8765-d6e33834b73c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5bab3a0-c5c7-4e75-986d-eb736673b57d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d129b198-2d44-4bd8-a8a1-f7bea4ee04df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e1f3d8d-cfa3-48a0-94a7-3edd51db9378",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e59c47f3-02e4-4b80-8871-846ecaa770b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "021de870-0000-4da9-becc-8423b92ee605"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26298de5-bb05-4a4a-ae6a-6ebdf973d163",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "254dfbc4-1001-479a-83c9-a8fa77283859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cb92ec-34e0-424a-918c-2705eac2bcb4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09389a89-0aeb-49d9-8eb0-d8a842c3698d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "644c7624-2ffe-4e1b-b7af-b76bdaf6461d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7472c1b5-dd8e-4673-b16e-d5ae359ba5ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72aa7cf-3015-4d97-9323-07d2da550994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f342ce64-808e-49e1-82ac-12e1c49d09da",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84cf528-0265-41d4-9c69-f9dae0267618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ec34eb-9543-4aa9-ab64-6bbc7c4562f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86858c7-21dd-4b08-b11f-e98f122ff445",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d3ed243-4619-44b1-aff4-5b5a384d4b1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e10da662-0d68-4ed9-8bf0-a0c08e991c88",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b805ea99-225a-488d-bb4f-3a70f05215f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "281da50f-3e2a-4f78-8b69-52552d752425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "767cb50e-c733-42e4-aa4e-e2fea18f4656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3b1cecc-c387-47fe-a0e4-0dea0453992d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2ac6707-448d-4839-97b2-8d26c61bd577",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fd9ae7a-fe75-4227-b3a6-321ef8dd2d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eab8794d-e7df-4fb1-aaee-ce335758276f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ede89e-d86d-4c24-9992-1d53c3ffdd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11b172c4-7c67-4212-8561-230b8f0110a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73a1eac7-8df4-4f98-8785-076f9ae0db5b",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f1e432-49e6-49a1-802b-383c6a1a93ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cf6ca3b-4900-4e7d-9615-08135d5c6535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33d6c4f2-71bb-4e80-9aa1-d2d1eb612c51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4652bda0-8df8-4d74-a41f-c478d6541e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb4835a9-b2e0-4103-8bd6-fcdf0343c9b8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64037c77-9d92-4d3a-aab8-2b0b22612fcf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc4082ac-a9c5-437e-a355-d5da650e1e93"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1729ef38-2b7a-4ec4-ba2c-29b63e109c97",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "118c2673-c866-4162-9715-cde6f880faf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310f9fef-c9c9-40d8-9a22-fc5bfd6a7f7c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32bc4a8d-26b2-4995-8556-199603c1613e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e29e7a8-2d48-4f79-87ef-be12388a4217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8875062f-3366-4fee-bcea-37958dd4da6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "139bdffd-a814-474e-89d4-8be53127b9b4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b286b70d-3700-49a7-93f1-7b6067f9a296",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c81eb35a-55d9-4d5d-9d54-8fc656eee13b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed908e6b-f3ba-4454-87b9-b0541e0e3ee5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7d544155-7714-45a2-8c4b-d22b99be822f"
                    }
                  }
                ]
              },
              {
                "id": "8ed8fbdb-1875-4c92-8563-2c124cde0abd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7db86602-9485-42ca-8f87-2b39a44f1179",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a23d1e-cf0f-459d-93c3-d9e6c462cfd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "94b38980-d72b-473d-9421-f47a8f648ea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e3df92-be95-4f80-b1ae-e97213c4ce28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ca9361a4-b9b1-4848-ab27-fda285f1d51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881de704-af09-4761-9857-daa08bd1e67c",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "630a16ca-b917-4861-9105-b78653c91fe4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f1cb15bf-6e6c-483d-9bd3-2a92d72577db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1def4f0-9edd-4ae2-95ac-1b6f480aba5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3022ed7b-ad67-4f4f-b520-c3b101a301a4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bbb238bb-c1eb-4dcc-b208-05d5e5b82808",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33aa3d3c-98b2-417e-b130-589e2ce99276"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5074c555-bd3d-43c2-838f-35cfa8893005",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "61c0f0b8-4581-4b5a-8c50-7f856b292ca4"
                    }
                  }
                ]
              },
              {
                "id": "50c21331-a13d-4c4e-a828-6e06f3677740",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7301b0d6-2f73-4aba-a63f-16e499397c23",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f6e6c2-b6b5-4833-8eb1-455b53026b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "eb721272-519c-4d33-b9db-ea41f92db145"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d15b9d2-61d4-4a7a-98c7-daf27f531aff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d963470-688f-46b8-a76d-e013194734d4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bcf86c2d-ffd4-4d66-a537-10a209d61328",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f355bc20-6d1c-4316-bf6b-a12f3fa07169",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "76f815e5-0c21-43f1-bad5-36ee37700f0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "3f0e1ba6-3e04-449d-bf46-6684b0cb2acc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2daed23a-0add-4c8e-9556-05e470c93e0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1cb22c12-2e5d-4cb9-9595-45e526744853"
                    }
                  }
                ]
              },
              {
                "id": "9fb5629c-252c-4bdb-84f8-fccae3980d23",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9810479-6778-459b-9435-32e3cfc6d60d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "5502730d-22d2-4f70-950e-fb58e11bdc3d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7345ef9f-9f25-4b8d-a742-bd8249fac1d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "349ed06f-98f7-4dcc-8cdf-21a2cf023cef"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5672eda-79c2-48ab-891e-889d827651ee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6e15331d-7900-4526-81b1-6ecfd9dcd1f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4bbd1dc5-39fb-4596-a2be-be28426e53fa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "10bd2695-146a-4aad-969d-6f09840f53a2"
            }
          }
        ]
      },
      {
        "id": "e06af42a-9c07-469f-bf09-9894b45b4880",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "44624656-836f-4550-af64-33cfa10c3853",
            "name": "Negative Testing",
            "item": [
              {
                "id": "762977eb-0300-4189-aa27-6ff52a510060",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cfd76c85-a8e1-4d2e-8013-7e8c2f9f4b6e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "750b5385-238d-46b6-a71e-301f6b93b9fe",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "8dad75af-9417-477d-8e1e-328ba75aea60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ff84c8-c965-45a0-8bc9-f3089494839a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "42561f64-18c9-4233-ada2-994c267dcf92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "287b469e-b82c-4b89-8183-f77d0d18f108",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4de52d77-fe3c-4e5c-96e9-232cf42049d3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "82ac7d87-30a1-494d-b882-68097f81a43b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "267f2408-da5b-42c0-a108-9d19dee428fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6c36667b-07ea-4d02-a4b3-e434da8b40b5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2462552-aadc-42d2-8f68-aed4771a0fec",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "27c3aa79-9f2f-4218-8d83-cd104dc5a3b1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86408454-d330-4521-be43-0425503216ff",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "054e1f89-9650-489a-acde-33add25c8225"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d7a98dcf-fd88-4789-9537-597fa33c2e35",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2cfd7e73-a16e-41fa-87b1-8c8ce7ef1ba9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d0523fe-cfcb-460d-9470-0625ebbc17a0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9fee5c12-0c9a-4a7b-b083-993f67f6e2ae"
            }
          }
        ]
      },
      {
        "id": "45c94d23-b9b1-4703-8e9f-f7013c99df62",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3e557eee-8f86-4e4e-a420-b1d09420c0bd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d58e8bd6-b6ae-40c5-b921-8c4d2e78aa57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2887729f-f52c-472b-83a6-55862f992f15",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac91a711-54d6-441e-8fd2-1cdc949698c4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "591066e9-3da9-4c0d-a660-ec1dda87618c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "436ea1a0-296d-4287-a69d-fddcf6e25c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "083eecde-48b1-455c-858b-690cc370e1f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9caba916-9d40-481b-9787-acf7444e744d",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbb5f20c-3bc5-4743-a124-f921220ca607",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3121c3a1-f1b1-4e59-b2cb-dbc07823465f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec45d364-ceda-4a78-89ad-c3908c1177b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7840eabe-bddb-4982-bd0d-f7f0ac709fea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "67cf4bfa-1e4a-414d-ba18-6b6c19707eda",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4fe7ed67-2919-4367-9151-6476258e0a65"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "454f26d0-fc44-4ac4-940d-6db5b2be2e72",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4754b4b9-94ea-4869-a706-5830b2e8af3c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d64759f0-14fe-484b-961d-ec91bdf80f66",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bfea9770-9dc0-426b-8d14-f5236573138b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f41743c-3538-464c-8354-f87b320479f7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "032de1e1-5e9b-40e8-b181-75e2117d158e"
            }
          }
        ]
      },
      {
        "id": "d2b3372f-1d1c-4c95-970e-32c6d1093936",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "5093cc40-f61f-4431-b5b5-b2d9ddbf9286",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dc1c685c-8687-4cd5-aa43-d5d28705fdfb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8bef94dc-ff05-4da2-8365-c3944bd07b2c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8246f476-81cc-44c2-ab4c-7d803093825b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c3926c4a-8fa5-49be-9a0b-341dff4aa6fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1e17a6-cd36-4b49-8339-5d6131fc72b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "869e4b75-dbc7-48d0-9c75-2374d2d42078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d0f858-36bc-4789-ab4b-60e1b1bee6c2",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53f5393-a471-43fc-9385-213c5be70ac8",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e382d264-b309-4c05-9734-0e31d37f76d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6292f6ec-c696-4612-a2c7-44b6c15981bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2d2d1683-45da-4276-a857-32b6f0d760ed"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f485ca1d-d2d1-43fa-8843-7a7c301cea17",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d2a6807-b300-4752-8d27-e1dc231e9530"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d884419-5763-41d7-862d-8cdef14c5163",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "676dbebf-41b0-4497-acb0-7ea1ec9bcee4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2c794db8-c55a-44c7-8de4-d48c2bad8457",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f3c687de-67d0-4f7e-8ef3-7fb9626075e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "594b38d0-faa1-4553-8b5d-71f9acf52b4e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "794fb58d-fac2-44f3-bee3-c6c3c0285c10"
            }
          }
        ]
      },
      {
        "id": "80dc80c2-e24d-4098-aebb-2cbccf761e82",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2422c278-2a13-4e73-a1d4-a72717a8f061",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "10776d15-62f8-4294-9760-a351fd174763",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "cde8e781-5cc7-4341-925c-4d30855bca4f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "386b6e5c-ccbf-444a-97ae-d3a03ceb5a84",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d72e73aa-1e4b-44de-a5ba-9c1f9b49e8bc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 387.83461538461535,
      "responseMin": 21,
      "responseMax": 30638,
      "responseSd": 1998.4520778000453,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1684629625450,
      "completed": 1684629737046
    },
    "executions": [
      {
        "id": "36625b3e-1359-44a8-a3d6-ef506bf02fcc",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9d331349-abc8-4563-8b5c-3b26eea2e6d1",
          "httpRequestId": "bec96e13-8c0c-4f4d-b345-3624b9dd58a1"
        },
        "item": {
          "id": "36625b3e-1359-44a8-a3d6-ef506bf02fcc",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "6f0a009d-befa-4f48-bf3b-eeb0ea686c4f",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 0
        }
      },
      {
        "id": "e34b9d40-9eb8-4373-9e68-c6b5f80f12b0",
        "cursor": {
          "ref": "d3bd8470-15c4-4a74-b43b-62b93d277001",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "689d1b66-0799-4481-bee9-d3dd0c176675"
        },
        "item": {
          "id": "e34b9d40-9eb8-4373-9e68-c6b5f80f12b0",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "67162e41-4a95-4e09-8cf7-c606fd970cbb",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "93988f5b-b15d-4f6f-9164-c3be49f8de90",
        "cursor": {
          "ref": "83c0d4d5-eff9-4fbc-a62e-66b702a8ba4b",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "442d2b0d-185b-4aaa-92ff-69bf6430bd87"
        },
        "item": {
          "id": "93988f5b-b15d-4f6f-9164-c3be49f8de90",
          "name": "did_json"
        },
        "response": {
          "id": "391531b7-34e7-464b-b7e7-f9f6caf47989",
          "status": "OK",
          "code": 200,
          "responseTime": 563,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8809f8b1-115c-4524-84fb-7a8715c7da6c",
        "cursor": {
          "ref": "c3647cc3-bc00-456d-bd99-7034f6934775",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "061f91e0-861f-4b24-8450-ba36099aa88a"
        },
        "item": {
          "id": "8809f8b1-115c-4524-84fb-7a8715c7da6c",
          "name": "did:invalid"
        },
        "response": {
          "id": "cdb0561e-fbed-418a-843e-d5f246f892d7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 940,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "8809f8b1-115c-4524-84fb-7a8715c7da6c",
        "cursor": {
          "ref": "c3647cc3-bc00-456d-bd99-7034f6934775",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "061f91e0-861f-4b24-8450-ba36099aa88a"
        },
        "item": {
          "id": "8809f8b1-115c-4524-84fb-7a8715c7da6c",
          "name": "did:invalid"
        },
        "response": {
          "id": "cdb0561e-fbed-418a-843e-d5f246f892d7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 940,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "50d76a2d-6c24-42f7-9841-52435b771fdb",
        "cursor": {
          "ref": "98d72a9c-16f6-4c90-9dd9-ddcf09b47a44",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "502eff9f-5717-4dfe-ad9f-7b368245d91a"
        },
        "item": {
          "id": "50d76a2d-6c24-42f7-9841-52435b771fdb",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2ce5955d-9908-465f-9e11-cb532458ff58",
          "status": "Not Found",
          "code": 404,
          "responseTime": 65,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d14a69e-37d5-4a53-bbea-68f099c41396",
        "cursor": {
          "ref": "2004f890-ec6c-4af0-a6e4-6e48a6b26684",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cf1020fd-3edc-41b8-a710-6397b1fc6d4b"
        },
        "item": {
          "id": "1d14a69e-37d5-4a53-bbea-68f099c41396",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "485255dc-4cf5-4688-afdd-7a5afc0ae0eb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "785197ae-dced-4c93-b9ad-a344c68e0732",
        "cursor": {
          "ref": "5797883b-5d51-4023-b956-c3ecc0221c77",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7a16845c-bd49-49a8-b6bc-40073a83be9e"
        },
        "item": {
          "id": "785197ae-dced-4c93-b9ad-a344c68e0732",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "ffdbbcb0-0c59-438d-8f19-fdee7e587e9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "d9b0c8de-2435-4dea-bbb8-9e01eca32353",
        "cursor": {
          "ref": "07f099a3-a285-4ebd-a8c3-3e231efcd10f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86770d72-d015-429e-b55b-cb3f1bfd1868"
        },
        "item": {
          "id": "d9b0c8de-2435-4dea-bbb8-9e01eca32353",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "933488d3-0b27-4b92-8789-46b01a8e733f",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "d9b0c8de-2435-4dea-bbb8-9e01eca32353",
        "cursor": {
          "ref": "07f099a3-a285-4ebd-a8c3-3e231efcd10f",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86770d72-d015-429e-b55b-cb3f1bfd1868"
        },
        "item": {
          "id": "d9b0c8de-2435-4dea-bbb8-9e01eca32353",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "933488d3-0b27-4b92-8789-46b01a8e733f",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "68cb866b-9af2-4b0c-a519-39e1bc1b8bf0",
        "cursor": {
          "ref": "073ece2b-3c0b-4a9f-934f-2dd385258f96",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "eefcc2da-6214-4802-8171-1be6771bcafe"
        },
        "item": {
          "id": "68cb866b-9af2-4b0c-a519-39e1bc1b8bf0",
          "name": "identifiers"
        },
        "response": {
          "id": "f8d6fd36-ca43-4907-8e13-291fcc893dff",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadc842b-bb60-455f-8ffc-73b0c1b49aea",
        "cursor": {
          "ref": "888dcf8b-1e52-4538-b68f-e98525a08b2c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5d4da084-f355-47f5-a782-3e3705f0ce2f"
        },
        "item": {
          "id": "eadc842b-bb60-455f-8ffc-73b0c1b49aea",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1c7cfe47-9dd0-4de8-8ce3-b480ff9f838a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eadc842b-bb60-455f-8ffc-73b0c1b49aea",
        "cursor": {
          "ref": "888dcf8b-1e52-4538-b68f-e98525a08b2c",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5d4da084-f355-47f5-a782-3e3705f0ce2f"
        },
        "item": {
          "id": "eadc842b-bb60-455f-8ffc-73b0c1b49aea",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1c7cfe47-9dd0-4de8-8ce3-b480ff9f838a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f55ab5bf-6d85-429e-99b2-bb8e23774d0a",
        "cursor": {
          "ref": "916bfe95-6271-441a-b377-f1b931f332b1",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "37dfef47-ea3f-4f36-9c58-19c56d2f52ca"
        },
        "item": {
          "id": "f55ab5bf-6d85-429e-99b2-bb8e23774d0a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "88975030-c506-41bc-96eb-d09d08674941",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17e2b26-4c83-4bfe-b7af-6d1c6fd5b7bf",
        "cursor": {
          "ref": "633322b5-e76f-49de-aaa6-363b2c452935",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c86925b5-b679-4d53-af15-b55049643d4c"
        },
        "item": {
          "id": "b17e2b26-4c83-4bfe-b7af-6d1c6fd5b7bf",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "23fc8da2-6b3d-43d3-b076-8b11548c0f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6e08ece-5335-4788-bfa9-30c09ba57ee3",
        "cursor": {
          "ref": "b60958aa-91a9-4fbb-ac0a-a11a02851b10",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "74b953ce-ef04-49f4-b1ac-5bca13898929"
        },
        "item": {
          "id": "f6e08ece-5335-4788-bfa9-30c09ba57ee3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b2bfe685-1b15-4b5e-94b1-c586f72f80be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "540faf34-db9f-4101-adf7-560b008695bf",
        "cursor": {
          "ref": "86e05612-a65f-4d94-a0ec-11db5d79f056",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "ce387e1e-966e-47b5-b6a9-5932a1859683"
        },
        "item": {
          "id": "540faf34-db9f-4101-adf7-560b008695bf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "ce79e527-1bd6-4fd4-850d-3905dc19cab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35db37c9-be49-4902-9bda-2f435080ab54",
        "cursor": {
          "ref": "675351f5-021f-40e3-b8e3-0f2d9bf0125d",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "eb8b948f-a49b-4d44-b37d-ae4dafde7314"
        },
        "item": {
          "id": "35db37c9-be49-4902-9bda-2f435080ab54",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a0f30b38-46f2-4b60-9a4e-3ea80d82ed17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23eab752-58e7-4684-b524-85b449211bb2",
        "cursor": {
          "ref": "f7186596-bf37-4881-8d49-6d9dd3067337",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7ee73644-910d-4bba-b1ba-a89172045cc3"
        },
        "item": {
          "id": "23eab752-58e7-4684-b524-85b449211bb2",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ad0706e4-c61c-4d23-a691-b412d2ead6e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df22a9b1-5477-4906-823e-4e0294e5c573",
        "cursor": {
          "ref": "c4a26737-d9b0-4da3-a8f4-cee49ba147b1",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "9b58f8f7-ea83-4415-9cc4-8eb232f23b88"
        },
        "item": {
          "id": "df22a9b1-5477-4906-823e-4e0294e5c573",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "ae85e229-a143-405e-819e-89f3069698d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e036d08-7654-42d4-a09c-6e85689a4cb8",
        "cursor": {
          "ref": "9bc3fe09-a997-45fd-9467-55cc403dd25e",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "36d0e978-f2c0-4775-a3d9-0436b2ee6b5e"
        },
        "item": {
          "id": "9e036d08-7654-42d4-a09c-6e85689a4cb8",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "32602183-acca-4e74-bb86-e98d0fa9031b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f87e0e-2226-4b28-8d62-537249658238",
        "cursor": {
          "ref": "4691ff25-d8cf-47f3-beb6-b9336cf81be5",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f1d3f8a0-f2a0-4451-bb4e-4fd0ea2af359"
        },
        "item": {
          "id": "f9f87e0e-2226-4b28-8d62-537249658238",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "6c5930ec-87bb-4fc5-bd88-1597415e0f01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908e3583-36bd-4132-8443-a893a4651562",
        "cursor": {
          "ref": "d4cdd53e-1be4-4170-b19d-ae0e6a868b00",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "b6e2834b-cca8-4999-bbb5-b9d1d868458a"
        },
        "item": {
          "id": "908e3583-36bd-4132-8443-a893a4651562",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "ba4ecfec-ed0d-4bc0-9a50-cb2b1dd2a513",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "467fda89-f8f0-4e1b-9e80-4499e81a4b58",
        "cursor": {
          "ref": "880c8284-aa1f-4a99-8a41-9d4a6451c5bb",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3f3b8df3-c1a3-4486-bd91-3c12471634fc"
        },
        "item": {
          "id": "467fda89-f8f0-4e1b-9e80-4499e81a4b58",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "f6c3ee9e-c56b-4611-bb00-ea419ffa9a22",
          "status": "Created",
          "code": 201,
          "responseTime": 1875,
          "responseSize": 981
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "25802ae0-c935-40f6-b690-42b6b89177b5",
        "cursor": {
          "ref": "c0496dfd-ac9e-4c39-b1af-ebc5952b2992",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c682ec2e-d71d-4f6a-bc52-e9a26ed0f8db"
        },
        "item": {
          "id": "25802ae0-c935-40f6-b690-42b6b89177b5",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "af0c2d62-ae0f-4e14-9389-2869d7ea8ec2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0131729f-7d21-470c-b7d8-78f9869363a5",
        "cursor": {
          "ref": "0b9dcf80-d7f1-4e66-bbad-3433178325e6",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "24ab2a98-5267-4c3e-8060-1edd8cd0cf41"
        },
        "item": {
          "id": "0131729f-7d21-470c-b7d8-78f9869363a5",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "036d8044-f859-4f6b-9329-32701f1878ba",
          "status": "Created",
          "code": 201,
          "responseTime": 30638,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "1ffcebcc-a4b0-43e3-84e4-2617751b333b",
        "cursor": {
          "ref": "53b1e5fb-05f9-4cbe-bcac-28aa2c0a23e1",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9aabf263-03ac-4a40-bb7e-c49730e5b8b8"
        },
        "item": {
          "id": "1ffcebcc-a4b0-43e3-84e4-2617751b333b",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7af97bfc-809f-46ab-85a0-7b8deae3ce0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f29c92e-2566-4811-8f24-c53ffa3221a8",
        "cursor": {
          "ref": "b075a759-13f9-4b19-8d75-4d471efa1e0d",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0c377752-76df-4d03-b311-d8e55304649a"
        },
        "item": {
          "id": "9f29c92e-2566-4811-8f24-c53ffa3221a8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3b400d0f-48ac-4bb8-b501-344a902681a8",
          "status": "Created",
          "code": 201,
          "responseTime": 5091,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "3040dca3-fecb-4272-8ee4-70284038cfde",
        "cursor": {
          "ref": "db530cf9-fd12-4fa1-8b29-0e223cc04942",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "664f48ab-598b-4003-8aa1-62244f7a530c"
        },
        "item": {
          "id": "3040dca3-fecb-4272-8ee4-70284038cfde",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5c9fe24c-b613-41d4-906d-03366aef0d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aea2312f-0484-4e57-a284-3a95fb32c652",
        "cursor": {
          "ref": "374392e4-fbe4-405b-add0-3c5dc13ab7b5",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "50aa1f8d-cc4a-40d5-87e4-62f50694a9c5"
        },
        "item": {
          "id": "aea2312f-0484-4e57-a284-3a95fb32c652",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f27a97ae-ba09-46a6-9c68-5930d5fae8f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eb8e355-0278-4ae2-92fc-d571368105b3",
        "cursor": {
          "ref": "937fdc6a-8b84-4676-8aaa-bd3363926823",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "393a6c25-edae-49a3-8a4f-305954c6e7cc"
        },
        "item": {
          "id": "0eb8e355-0278-4ae2-92fc-d571368105b3",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a2986286-7c27-44ef-9507-dd9f6b7f0b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6167fd23-a971-4646-a27d-fca33cba8d9d",
        "cursor": {
          "ref": "24b72423-37ae-4b10-844d-9a35996f08fe",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3dddc1c7-ef4c-4d5c-a4cc-d3adbb76fea6"
        },
        "item": {
          "id": "6167fd23-a971-4646-a27d-fca33cba8d9d",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "33ee6788-271f-43c8-91ac-f09a626b3f26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 146,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55145659-eafa-4414-a084-f97c5678deec",
        "cursor": {
          "ref": "22a0eb35-f0b3-4222-9b8f-785a5494191a",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "b413616f-8b5c-47c5-b3f2-9ca67ee81331"
        },
        "item": {
          "id": "55145659-eafa-4414-a084-f97c5678deec",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "a07a2c4a-4e02-431d-8e9d-d3b3782ef2ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "316c9f3b-ba84-4c12-87c7-65e3fd8eae3e",
        "cursor": {
          "ref": "a5183499-5dbf-4928-93fb-0009448fb913",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "bf36a4a7-bc94-4f5d-822a-cfc6c4b0e677"
        },
        "item": {
          "id": "316c9f3b-ba84-4c12-87c7-65e3fd8eae3e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "fe9f6115-13b5-490f-a80c-bfa965247912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db4eedb-cd04-497a-971b-3c281c4317f1",
        "cursor": {
          "ref": "0beca2a4-ed2d-4ff1-9d6d-eba091d4174c",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "3eacd806-a9f4-44e3-ac47-a1ccfca134f5"
        },
        "item": {
          "id": "4db4eedb-cd04-497a-971b-3c281c4317f1",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "aac0a875-9554-4739-a544-ac9049811718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859af0b0-5175-47ae-ab32-48b615ac1b86",
        "cursor": {
          "ref": "e780badc-cbe3-427d-aefd-c180ba454493",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6a112a7d-b121-4cd5-93e9-eb1027e6b773"
        },
        "item": {
          "id": "859af0b0-5175-47ae-ab32-48b615ac1b86",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "09ed92ae-f002-4410-ae26-7490503174b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1442409-7346-40d1-abf9-1645184f58fc",
        "cursor": {
          "ref": "7d71e01b-7695-4002-abd6-f4833739dd38",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "140ad452-688e-4a0e-a4be-f01516f4faef"
        },
        "item": {
          "id": "f1442409-7346-40d1-abf9-1645184f58fc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e112d722-d844-4ba7-a317-88d61b3977fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5323a2e1-f472-4b2e-b7d5-2d30dd6e3321",
        "cursor": {
          "ref": "4559c5a7-80a5-495f-a120-10a7aaf19267",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "8e1b5ebc-9a1a-47a0-8361-55b5bb100945"
        },
        "item": {
          "id": "5323a2e1-f472-4b2e-b7d5-2d30dd6e3321",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "0c9f0f26-f1bb-4866-8a62-1fed9d580636",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b434d1fe-6787-4b25-9ca2-fe26c0847fa4",
        "cursor": {
          "ref": "36517521-7d63-4f12-9c12-9fe368fc16e9",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "39e6f120-4138-409d-9c72-856b8d647a05"
        },
        "item": {
          "id": "b434d1fe-6787-4b25-9ca2-fe26c0847fa4",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d5801a4c-014f-4aa8-ab31-dec15ad8ce69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae25ed7c-3613-44d3-b7ed-bea390797cd5",
        "cursor": {
          "ref": "fe5c6b45-5309-46d6-819a-85427635b6d7",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "db829104-a5bb-4dad-a7da-3e9155e2a517"
        },
        "item": {
          "id": "ae25ed7c-3613-44d3-b7ed-bea390797cd5",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "81269dd7-ac6d-4865-96ac-85c1d2ea9a28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aef2dfc1-4ee7-4fa9-be88-3b0a89050389",
        "cursor": {
          "ref": "5e84b045-c158-4daa-868f-4d663b2fcb4b",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f6c75a87-842b-49d6-8ec0-145a1c24e0ac"
        },
        "item": {
          "id": "aef2dfc1-4ee7-4fa9-be88-3b0a89050389",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "af75fad6-1969-4ba5-b825-d71a56b8d582",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc624b23-fdcd-4680-8bf0-213af14718e8",
        "cursor": {
          "ref": "f76795fa-66dc-4d9c-ad56-3444abe66e5b",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f8b719dd-5d8c-4576-b7ab-6ad47a5be2a4"
        },
        "item": {
          "id": "dc624b23-fdcd-4680-8bf0-213af14718e8",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "617a719f-9441-42a8-82ab-4a00fd0e390e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11951065-ba1e-4ee8-9b53-ac0713907a37",
        "cursor": {
          "ref": "07d21f3a-676a-4387-9e69-fc52c720999d",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "be3bdff0-5b04-482e-a786-7dd251ab14d7"
        },
        "item": {
          "id": "11951065-ba1e-4ee8-9b53-ac0713907a37",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "cacafa40-89a9-4bcb-a58b-34bd2b1ab476",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b99599b0-1bd4-49aa-bacf-bf9ec22b92e5",
        "cursor": {
          "ref": "afaddd16-bbea-41f2-adee-5a07347d70ac",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "c4233472-f86e-4b76-8ff0-512f46536768"
        },
        "item": {
          "id": "b99599b0-1bd4-49aa-bacf-bf9ec22b92e5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "f42daa31-317a-4806-bc69-a393bdd00d6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bd4d23-769c-4d61-a3dd-04b4556ef3c6",
        "cursor": {
          "ref": "19587c98-9c71-41b1-89e9-026c447b2541",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2b79f6dc-9abb-4fd8-a45d-f4c26d158a6e"
        },
        "item": {
          "id": "26bd4d23-769c-4d61-a3dd-04b4556ef3c6",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ed448b5b-2528-4bbb-b97d-80e6f28d6843",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7833e735-c77b-425f-a9b5-e795b8110e1c",
        "cursor": {
          "ref": "ba0cfdd1-328d-48be-b182-8be67dbe95ab",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5b1290ba-9a0b-4f02-9ef5-8ce1a5fc28c0"
        },
        "item": {
          "id": "7833e735-c77b-425f-a9b5-e795b8110e1c",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "62b68dd8-77f1-4c04-83b3-61f5738cdd74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b70d426b-410d-4535-92e9-4058134f0b0c",
        "cursor": {
          "ref": "463a3b20-2c21-4115-8d84-c377d7d345ba",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "312fc6c7-0361-4963-bef5-bfdef923b1da"
        },
        "item": {
          "id": "b70d426b-410d-4535-92e9-4058134f0b0c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "cc4b705f-6d16-41c6-8c69-7f9a0a8e4f78",
          "status": "Created",
          "code": 201,
          "responseTime": 2187,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2f46e7e1-85a9-4492-8f5b-e2b5ed2ad798",
        "cursor": {
          "ref": "ea9ff924-f6c6-47c3-9bdd-ace74de8077c",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "184816a6-5f15-4ccb-ba58-8804738f0c93"
        },
        "item": {
          "id": "2f46e7e1-85a9-4492-8f5b-e2b5ed2ad798",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b16a6a35-174d-4718-a0d2-eea90fcd5709",
          "status": "Created",
          "code": 201,
          "responseTime": 2454,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "b5c186fb-4be3-4cda-801e-a8c46bf7887a",
        "cursor": {
          "ref": "9ef02746-288f-425d-a5b7-fa7bcb0371b8",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0f4ce42e-909f-4fab-8b49-b1144817121b"
        },
        "item": {
          "id": "b5c186fb-4be3-4cda-801e-a8c46bf7887a",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "fb477935-643b-4d2c-9915-faaeeb99072a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dbfb689-5413-4ea7-a12d-2619a7fe38ea",
        "cursor": {
          "ref": "6c87f2f0-abfd-4257-83d9-00b242fead58",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "cfa510bd-00c3-40c5-a5ec-ef020902d0b1"
        },
        "item": {
          "id": "7dbfb689-5413-4ea7-a12d-2619a7fe38ea",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c34f74b5-3d38-4c58-8ace-21aa371e0d83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7c63a6-ee08-450f-9703-27cd37b37529",
        "cursor": {
          "ref": "d79c645c-f6b1-4437-8e85-59872b218f6a",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "da5ebca6-877e-4200-8297-76db35964cd9"
        },
        "item": {
          "id": "5a7c63a6-ee08-450f-9703-27cd37b37529",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e6c9e624-5bb6-43b7-9629-945d53fa1278",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c313ce68-3ead-4b7e-9fc4-fd2987b48868",
        "cursor": {
          "ref": "77ac77cb-73a7-429f-bbd1-a780553b2dfc",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "02251419-90d4-420f-bc55-eeac7cba5dd6"
        },
        "item": {
          "id": "c313ce68-3ead-4b7e-9fc4-fd2987b48868",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "bfad0e73-fd98-4aa1-a438-1fc3a98ad029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "779edcd6-23b6-444d-b2cd-0c2950cae7ea",
        "cursor": {
          "ref": "80a3809a-44ae-44b0-a14a-a193ba26df4d",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "c8024b8a-2796-47c1-8540-b532ab92586c"
        },
        "item": {
          "id": "779edcd6-23b6-444d-b2cd-0c2950cae7ea",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "c8fadfa2-67f2-425c-a68b-b06f65e4bfd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d5d4d61-e022-4e13-b508-02c1f4731571",
        "cursor": {
          "ref": "b82fbfbd-a033-498f-b0f5-8de4fb2953b8",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "4d8c8edb-5937-4e10-9611-5a5f6063437b"
        },
        "item": {
          "id": "5d5d4d61-e022-4e13-b508-02c1f4731571",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a4ea58f7-a997-450a-a83a-7d1f6be42444",
          "status": "Created",
          "code": 201,
          "responseTime": 1912,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0184bc6f-3341-40ed-ac87-ffe92aebd3ce",
        "cursor": {
          "ref": "61043b9f-a92a-4786-a7c5-579fcdade1a5",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "a719bfa2-2be2-4519-99f7-ac604da8b0e6"
        },
        "item": {
          "id": "0184bc6f-3341-40ed-ac87-ffe92aebd3ce",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "f3cd409d-5159-4b5b-84ba-913cb4a48b9c",
          "status": "Created",
          "code": 201,
          "responseTime": 2509,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "408a5b32-e048-485e-bacb-c5d999d0401f",
        "cursor": {
          "ref": "b00d0209-da8c-43d0-b8c4-d0882e70156a",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "e826eb82-672c-4cab-b899-13e8841609a5"
        },
        "item": {
          "id": "408a5b32-e048-485e-bacb-c5d999d0401f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e758fa56-c779-4a15-9666-49229bd32952",
          "status": "Created",
          "code": 201,
          "responseTime": 2270,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "a7baef9e-6ab3-4b7c-9229-f2258387c5b0",
        "cursor": {
          "ref": "e8d75601-bf6d-413a-82b4-22f480fa8078",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "76174820-cca3-47f2-a6dc-0a37f474d4bc"
        },
        "item": {
          "id": "a7baef9e-6ab3-4b7c-9229-f2258387c5b0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e6eff4f5-95e7-43a5-9895-171442403019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 134,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106a08b8-6f12-451d-8a81-2f78514e536b",
        "cursor": {
          "ref": "53b5c536-c316-465a-a632-b3073b19c77c",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "556ecaf3-d7e5-4503-825d-7e16cc8a47e5"
        },
        "item": {
          "id": "106a08b8-6f12-451d-8a81-2f78514e536b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "73cf14bb-ae42-4606-9273-2a6ac6f9020c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca033826-c83c-4211-9bba-7a0968221cca",
        "cursor": {
          "ref": "ef816ab7-ad3d-482f-99a1-7075dfa3856a",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "64594563-29ee-431c-bd72-7bea4ebc1a78"
        },
        "item": {
          "id": "ca033826-c83c-4211-9bba-7a0968221cca",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "12db3de6-ead1-4f96-bfc1-99e37f9230d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc5ba914-5bc5-4c09-b9ca-3dc556f3c191",
        "cursor": {
          "ref": "29bdcfc1-eebf-4213-b8d1-7c5f4898d66b",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "6b624602-c34e-4297-9801-85cde52e1ebe"
        },
        "item": {
          "id": "cc5ba914-5bc5-4c09-b9ca-3dc556f3c191",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1ccc329f-7ec9-4306-be59-268f78fcb8e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6f1f792-ab50-492a-8b49-f3abc1312675",
        "cursor": {
          "ref": "97c5824a-e58c-43cc-8f19-89dd9290dc7e",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "3906dab6-b428-43de-b6e8-40af14f753bb"
        },
        "item": {
          "id": "d6f1f792-ab50-492a-8b49-f3abc1312675",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "15bfdd5a-1f8f-47c1-af13-e91ca96d59ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccfb1553-4b88-4246-90ba-93f442afacae",
        "cursor": {
          "ref": "c6434037-0baa-4add-8c0b-921995cecc78",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "872d7422-e156-4625-aaa9-d8f238d16cce"
        },
        "item": {
          "id": "ccfb1553-4b88-4246-90ba-93f442afacae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "0a2599e0-51e8-49ea-b97b-65ba0164dcb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dde76ba-c4b8-446b-854a-673ff8ffdf36",
        "cursor": {
          "ref": "2a962f01-a1c5-4b55-a27f-785f06e6d9e4",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "e28e790e-4002-4cb2-8293-b970d058e881"
        },
        "item": {
          "id": "1dde76ba-c4b8-446b-854a-673ff8ffdf36",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1da96dff-b12f-463f-bbbf-b972353bf1ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "577b68dd-5c8d-404b-8abd-b081257c80ba",
        "cursor": {
          "ref": "8272b072-73c8-460c-9473-8b1d47c80685",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6f80e0f5-fe50-4324-a275-1cb7ecdd758f"
        },
        "item": {
          "id": "577b68dd-5c8d-404b-8abd-b081257c80ba",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "f104d02e-03d1-4bdc-b879-7c9244791014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48bb4708-2ba3-498d-8a75-f6bcc2600577",
        "cursor": {
          "ref": "a188ca26-8267-450e-8322-d5790c4e7854",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2a3f1623-c841-47d8-ba60-3d2fdbec07e0"
        },
        "item": {
          "id": "48bb4708-2ba3-498d-8a75-f6bcc2600577",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "04a9bc0b-03f0-43d2-b789-495e880fb2d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d83fdfb-ddaf-4b85-bdce-348de91a152e",
        "cursor": {
          "ref": "b4303196-70dd-4a7d-a0c0-dca5a5f4aefe",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b67671d1-0965-4079-b8a9-11ed21297662"
        },
        "item": {
          "id": "8d83fdfb-ddaf-4b85-bdce-348de91a152e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0bd87e11-9053-4334-92bc-5e7e83405f1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 118,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1123c7-995a-4ca3-aae1-af43770c8827",
        "cursor": {
          "ref": "b7fe5769-dfe3-49e7-a864-4818f0e7665f",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "ac89df73-834f-4f7f-a315-cf58ce646d63"
        },
        "item": {
          "id": "fc1123c7-995a-4ca3-aae1-af43770c8827",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "729d197b-7d7c-464a-b233-bdce88b18e98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16cba9fc-7055-46cd-adac-e24ab557ed5b",
        "cursor": {
          "ref": "2be24d5b-1ab7-4c61-bb61-b8e1a1516780",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "5100476d-246f-453f-a527-b873b2b38a41"
        },
        "item": {
          "id": "16cba9fc-7055-46cd-adac-e24ab557ed5b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "141d8b4d-ab41-45cd-a28f-3066690cb5ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42711103-99e2-40e2-bc39-088c856cac76",
        "cursor": {
          "ref": "5aab725d-7c82-4e23-b0f5-95a55580b3d7",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d70c0b6e-ddd3-4bf1-81ba-77896be8178b"
        },
        "item": {
          "id": "42711103-99e2-40e2-bc39-088c856cac76",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5903184d-82a3-4f01-95ba-bab89c1e6501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4120d7c5-70b7-4e4c-8916-311ae4f5e1b7",
        "cursor": {
          "ref": "578c3442-7558-4b92-9ef8-e8f7487123a1",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "969f90f9-683f-4f59-af66-9b78367368f6"
        },
        "item": {
          "id": "4120d7c5-70b7-4e4c-8916-311ae4f5e1b7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "551b5189-9135-42e1-b57a-162cbe0a3896",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab1e026-f7b8-47c0-9026-362f6d508e3f",
        "cursor": {
          "ref": "a3ef5eb7-63e8-4a2c-9767-cca18dca0b08",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "7ce31e02-4bf9-4b66-9090-c5d2a3a2e294"
        },
        "item": {
          "id": "dab1e026-f7b8-47c0-9026-362f6d508e3f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "59d90af1-037f-4da4-a32a-bcc7104e8b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 143,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9186e8ce-dbca-4618-bdc9-1ea08430e040",
        "cursor": {
          "ref": "c16dc3d6-487e-43fe-b955-39e85827278e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "cd1bfdc9-5b0c-42fe-a494-31996faa51b6"
        },
        "item": {
          "id": "9186e8ce-dbca-4618-bdc9-1ea08430e040",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "0a6a7758-99cb-48c6-9d7b-52b31255213b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9cb9b3-5a5a-4e21-b526-17ecbd381a5e",
        "cursor": {
          "ref": "ea9227f8-38cf-4634-ae68-85bfb8512e2a",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "a09e56da-2d97-47c3-a94d-c4ec0e0528ed"
        },
        "item": {
          "id": "7e9cb9b3-5a5a-4e21-b526-17ecbd381a5e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "2a5cf667-7884-4bd4-a025-57b3ecfd0b7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89e01a60-5b80-462f-9e1d-68d737279243",
        "cursor": {
          "ref": "3c7ff948-1005-44bc-aa79-250a8b952463",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "297bbcdd-a516-43c2-9274-23d5e9c848cd"
        },
        "item": {
          "id": "89e01a60-5b80-462f-9e1d-68d737279243",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8adf9a11-a28c-4af1-b2d7-b552500b2e98",
          "status": "Created",
          "code": 201,
          "responseTime": 2218,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "88e40358-2a05-4f75-ae68-607e7e0fa560",
        "cursor": {
          "ref": "80ff7e89-17f8-4710-a00a-4e4e8c5d9f4c",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "4f153cf6-07a0-48a0-924c-8dc37fc1a578"
        },
        "item": {
          "id": "88e40358-2a05-4f75-ae68-607e7e0fa560",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "3d9682bf-c94c-4534-8af5-973fb328f783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 988,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6808e0-1126-4175-8fee-e9be6df75c6e",
        "cursor": {
          "ref": "1191a1e3-d89f-4023-9e58-523efae2b76e",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cee29d91-5b60-4530-bf53-85ed1e93ecfd"
        },
        "item": {
          "id": "eb6808e0-1126-4175-8fee-e9be6df75c6e",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "2da2edf1-6558-4ab4-ac1e-705eac61d3cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8e20024-3a1f-4d00-b3c6-1b1b1ca1c388",
        "cursor": {
          "ref": "de1fd381-2bd0-4781-8d2d-cee55396545e",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "4d6d7d85-61bf-45b2-86fd-14283067c378"
        },
        "item": {
          "id": "c8e20024-3a1f-4d00-b3c6-1b1b1ca1c388",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "7f1ac2a4-09f4-4089-87e6-05ee961986d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106dfeab-3ca6-4dd4-ade4-bfc94700fa85",
        "cursor": {
          "ref": "563170d2-e5cc-4523-b311-a6f6c16dce80",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "23aa9f2e-ee83-459d-b296-c1bf4883025f"
        },
        "item": {
          "id": "106dfeab-3ca6-4dd4-ade4-bfc94700fa85",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "36400fab-31ce-4dc4-9f58-0257432f444c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1d1f02d-67e4-4a9b-b5e3-4e7c792bc638",
        "cursor": {
          "ref": "ccf26246-bf28-4652-8190-ddc74c36a8e0",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "90772231-568e-4100-8b24-9e5cd7c6a63c"
        },
        "item": {
          "id": "f1d1f02d-67e4-4a9b-b5e3-4e7c792bc638",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3a41d4a4-fbba-4819-b5aa-9327ebc4bf3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32163587-1899-4383-929c-8d33af3e1806",
        "cursor": {
          "ref": "6e4cbbcd-9811-4531-9de8-a813376b49a6",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1f894fe6-adb5-4e2f-b09d-838ab75dddba"
        },
        "item": {
          "id": "32163587-1899-4383-929c-8d33af3e1806",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "ce955c51-0d55-42e8-be7e-bb1aaa103a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada2310b-f644-4636-9e12-19a90aa0d467",
        "cursor": {
          "ref": "489b86a8-e0e8-402a-89bc-f04d09cd8af5",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "866db660-f0ff-40a5-bcee-0d33be1b0a15"
        },
        "item": {
          "id": "ada2310b-f644-4636-9e12-19a90aa0d467",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5b9c6a10-fd08-4250-91fa-3aed625fb1ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc94d163-9ce1-4ff5-a1d1-ff0d79f24a19",
        "cursor": {
          "ref": "660cdcda-ecb7-4851-a4bb-40a352e99868",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e53b869d-4f3c-42d2-8ac1-ff7d392fd5c5"
        },
        "item": {
          "id": "dc94d163-9ce1-4ff5-a1d1-ff0d79f24a19",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "4e1c9b30-20aa-4e10-9873-75479d2c0e14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52f2db86-2326-4b07-b4fc-680a271c3468",
        "cursor": {
          "ref": "165ba603-e3e3-4b79-9fa7-8168f30a5f8d",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b0dec5c2-af59-4c2a-8e9b-13d80a4eb8e1"
        },
        "item": {
          "id": "52f2db86-2326-4b07-b4fc-680a271c3468",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "c2991bb6-7cc3-430b-b473-770411c94d35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d846033-923f-42f1-8a3c-da5c7147a88f",
        "cursor": {
          "ref": "45a6b56a-88fd-455a-ba10-affdac21db4b",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3d5438f4-4502-49a0-9c5d-f28ae7767c5f"
        },
        "item": {
          "id": "4d846033-923f-42f1-8a3c-da5c7147a88f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "75a1af1d-b721-4c2d-9b29-7008ae05bccb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d1c44db-61d8-4b19-9908-f262867cbfb3",
        "cursor": {
          "ref": "8bb0f9bd-f6c3-453f-9c0c-f9e8eefa9a08",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "e944f6aa-1477-47af-bc2e-e0fa2547190d"
        },
        "item": {
          "id": "8d1c44db-61d8-4b19-9908-f262867cbfb3",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e93e6d50-0a96-42e9-8f83-6e5e634fee64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69706786-65fa-48f2-95ed-b6384d36d100",
        "cursor": {
          "ref": "0204af51-77ef-4abe-ba58-ddf7d971181a",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "86798cb0-22a0-4318-9320-76b036fe9e4e"
        },
        "item": {
          "id": "69706786-65fa-48f2-95ed-b6384d36d100",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "65798e99-c15d-4fbb-8bde-3f0a08a01f0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c907458-aa77-4a8b-b7e1-067eee0e1169",
        "cursor": {
          "ref": "f8a90af2-7c01-400d-86eb-94cc098a08f6",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b1ade5fe-b43a-4a5f-8aef-7ac435f338b5"
        },
        "item": {
          "id": "9c907458-aa77-4a8b-b7e1-067eee0e1169",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "9264f38d-227c-4bf5-890d-3ebc2333edf6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a8e561-1824-4235-a682-a70b73bf6935",
        "cursor": {
          "ref": "e5bb9cbb-33fa-4a62-ba9b-28de0ee85659",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "1388647c-aa21-42d2-94c4-f018df651985"
        },
        "item": {
          "id": "f4a8e561-1824-4235-a682-a70b73bf6935",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "7bcccbe4-4024-4a1c-ad60-2a1b00147c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "721f53fe-f77a-4cd1-b174-3b3582bc240c",
        "cursor": {
          "ref": "347c9e03-a06e-43ab-be23-b164eb8f7a9b",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "b1feabb7-cc1b-4533-bdb5-7263038730a7"
        },
        "item": {
          "id": "721f53fe-f77a-4cd1-b174-3b3582bc240c",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8e9165a6-13bf-4ad7-9eaa-1535123dc521",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac2ea72b-5a64-4114-a0c0-cc5b12c84aa2",
        "cursor": {
          "ref": "ab42c826-af38-437e-a7ef-76ef20ef935f",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7b6c744a-26ba-4a86-ad0c-d2c3caad03ec"
        },
        "item": {
          "id": "ac2ea72b-5a64-4114-a0c0-cc5b12c84aa2",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "506def3b-53e7-47a8-8f9d-a06bc2668c8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6dd9295-1224-461a-8693-861dadbf534c",
        "cursor": {
          "ref": "ac256241-d520-40c4-9dde-c338728275b1",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "68ac387b-509c-4a02-8185-8f67f106bdf5"
        },
        "item": {
          "id": "b6dd9295-1224-461a-8693-861dadbf534c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "c23c60a6-85c8-4359-b6ed-d5e19bf4ffa7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9f21dda-6958-487d-a348-1509bb44854c",
        "cursor": {
          "ref": "e76d7c07-d54f-44fe-9d99-082aee09e599",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a5ef7541-74d5-4181-b5fe-014d1b03804a"
        },
        "item": {
          "id": "b9f21dda-6958-487d-a348-1509bb44854c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "7fe1b500-d021-4f55-b19b-cdcc5b8d1b64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d45a24b5-1c4d-43df-ae67-463db16aecf1",
        "cursor": {
          "ref": "2ffe19e3-8763-4cc5-a57c-5c06fa678357",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "757cc17f-e357-40f9-82be-dbc3fec83674"
        },
        "item": {
          "id": "d45a24b5-1c4d-43df-ae67-463db16aecf1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "943af295-8106-49b3-82ab-3de4c688a1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b33f40-2351-433c-8b6b-6d8a9ff0f862",
        "cursor": {
          "ref": "b1a1d09b-3c9a-4ea9-84cb-6c5ae65d68ad",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "0f3b1dd8-7672-4eb7-aa14-7c8d908f0a27"
        },
        "item": {
          "id": "c8b33f40-2351-433c-8b6b-6d8a9ff0f862",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4bf447f7-7dc9-4302-9e37-9909d4ff6d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07c623ef-5eea-4049-a608-de5119f60f88",
        "cursor": {
          "ref": "4ef52581-04fc-4ee5-9f40-f7e2292881db",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "74adc2c5-1c11-467b-8aa3-358daa0b80fc"
        },
        "item": {
          "id": "07c623ef-5eea-4049-a608-de5119f60f88",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6ac323a8-5093-4568-aee9-a0890f75d16e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfe70c88-09f4-473a-94f7-c44bb4a39cb5",
        "cursor": {
          "ref": "1f14db26-fffc-4adc-8071-7e7584e80d1e",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a759f9a4-91af-40d3-9a8e-2dce89a125e9"
        },
        "item": {
          "id": "cfe70c88-09f4-473a-94f7-c44bb4a39cb5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d10b5c44-3143-40a2-8938-4f83b519c8ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "311b6b23-d924-445a-9fcf-26b127bfe4a5",
        "cursor": {
          "ref": "955c7cd7-8c87-42de-b43d-f2562c31ec8c",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "def2088e-4572-4f3c-829c-6811607646ae"
        },
        "item": {
          "id": "311b6b23-d924-445a-9fcf-26b127bfe4a5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "aea78955-cc27-4fb2-ad26-dc819be105c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5066ce66-f7c4-4525-bce4-271990737d0e",
        "cursor": {
          "ref": "ffc5b3a1-8086-4267-90a5-6cbab5a7641e",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7e2cb8d0-1db1-4b17-9707-97c920129938"
        },
        "item": {
          "id": "5066ce66-f7c4-4525-bce4-271990737d0e",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "79c361c0-5e8e-4dea-a48b-262952f8b86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e9bd06b-f352-4ec9-b69b-bae2cb10a757",
        "cursor": {
          "ref": "f289e30d-a3ee-470f-a393-243237c23726",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "064d4148-ca31-41c6-a003-749734bfc274"
        },
        "item": {
          "id": "0e9bd06b-f352-4ec9-b69b-bae2cb10a757",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "38665c74-a8bd-4137-88fa-571c242bab99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0169fb2b-6dbc-4622-9960-f7ec7c04277a",
        "cursor": {
          "ref": "09714553-4a9f-4c35-8cf7-257909e1814d",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "40fad062-2053-4881-9ebf-5c41521bf4f1"
        },
        "item": {
          "id": "0169fb2b-6dbc-4622-9960-f7ec7c04277a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7cb5faf1-ecea-4326-9eda-5b31601ebc5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 126,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a857258d-e01b-43a0-adfc-2bb587b4ed03",
        "cursor": {
          "ref": "e6872e83-3b18-4c13-90cf-c5ab0a43a1e1",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8817162c-f295-4770-bf56-1a51c2750a49"
        },
        "item": {
          "id": "a857258d-e01b-43a0-adfc-2bb587b4ed03",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "5740ba65-7d21-4e45-9773-1c7fe8b7027c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8af0b8ea-8974-43c7-ae5d-67a0078c0e30",
        "cursor": {
          "ref": "9658c222-6410-4a16-a6df-aa6c31ad5241",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "134f8439-4cc2-4d3b-b243-519e10a5be2a"
        },
        "item": {
          "id": "8af0b8ea-8974-43c7-ae5d-67a0078c0e30",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "c4fffcdc-ac8f-4d8c-8baf-5850ba1e370c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52664461-1f7c-4931-a82d-20f3009b3f40",
        "cursor": {
          "ref": "d61ecb25-ee7c-4c89-abc7-a9b04db46ab8",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "035f5397-bba3-44be-8d41-2722e2540875"
        },
        "item": {
          "id": "52664461-1f7c-4931-a82d-20f3009b3f40",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d2c8127c-dc16-457e-b567-aa3b4d9f6088",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f2896b-ac45-4f9e-98db-154e40793f15",
        "cursor": {
          "ref": "82a75f01-34ba-41b2-b789-338ea93fd821",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "8d0986f6-9656-4b89-8513-331a97450523"
        },
        "item": {
          "id": "63f2896b-ac45-4f9e-98db-154e40793f15",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "332fb9e0-0652-4baa-aac2-757927859349",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c084bb-df8e-4ad6-af87-84a8dc72e6c1",
        "cursor": {
          "ref": "d76f877f-d128-4669-91dd-b3d9b8f873f2",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "8f674c19-4ffb-43e7-b214-056420a142ea"
        },
        "item": {
          "id": "d4c084bb-df8e-4ad6-af87-84a8dc72e6c1",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "50251012-2f1b-437e-8fad-5228fdb6651a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "80256183-1f72-491a-8d22-90a3eaddab99",
        "cursor": {
          "ref": "43934388-30bf-4bc3-931e-b999315ea19c",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "f7d69f5d-e5bb-46e5-afad-2883b974cfdc"
        },
        "item": {
          "id": "80256183-1f72-491a-8d22-90a3eaddab99",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "368850f1-d473-4ee9-a565-33b98ba6531a",
          "status": "Created",
          "code": 201,
          "responseTime": 2065,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "ccaab7ea-2b85-4aeb-a313-b137bef9ef62",
        "cursor": {
          "ref": "a83b735b-bb4c-4800-ae7e-218bca395186",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8288cf13-c98d-461d-b8f1-aa52219737c7"
        },
        "item": {
          "id": "ccaab7ea-2b85-4aeb-a313-b137bef9ef62",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d151ca0e-ebb7-4afc-8430-28dbaf404b8c",
          "status": "Created",
          "code": 201,
          "responseTime": 2228,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "6301f1ff-1667-4b8e-9137-6c2e084f24a1",
        "cursor": {
          "ref": "7878d547-ed4b-4625-87f5-bd34a5473821",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "6f062ad2-9739-4388-9ddf-4f558dff646f"
        },
        "item": {
          "id": "6301f1ff-1667-4b8e-9137-6c2e084f24a1",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "1dc4022d-a0c3-4c9a-b822-a1374e94ad98",
          "status": "Created",
          "code": 201,
          "responseTime": 2292,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "83974ce1-31d2-4f8a-bd2c-7ccbf36a21d1",
        "cursor": {
          "ref": "c4726d6d-3168-40e8-a83e-65c030cce109",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f30ad8cf-9965-4f8a-b95a-bd443d26eace"
        },
        "item": {
          "id": "83974ce1-31d2-4f8a-bd2c-7ccbf36a21d1",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "f4e899d6-0c94-40dc-8693-8d9d9bfb2f14",
          "status": "Created",
          "code": 201,
          "responseTime": 2376,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "85dc15e6-3034-423b-b9f1-11f200ee9ba2",
        "cursor": {
          "ref": "3cd0581a-fa69-40d8-abd0-1f8ec96e0155",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "7448847e-cc1f-434e-9452-df7bb86a40d7"
        },
        "item": {
          "id": "85dc15e6-3034-423b-b9f1-11f200ee9ba2",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e00ea347-7147-442e-86c0-113d38df1df5",
          "status": "Created",
          "code": 201,
          "responseTime": 2291,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8307a5d1-929b-4a3b-a821-df92ab19b989",
        "cursor": {
          "ref": "f418d3ad-2beb-434c-b274-9e3057ed23f5",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "8309d3c2-ae13-4ff1-91d1-8d6dfe7bba21"
        },
        "item": {
          "id": "8307a5d1-929b-4a3b-a821-df92ab19b989",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "aced7488-6d0f-4826-943c-6ca0f23ba5f1",
          "status": "Created",
          "code": 201,
          "responseTime": 2393,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-05-21T00:41:46Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-05-21T00:41:46Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "751b2ab6-4b66-4349-9da0-10d0e4967d45",
        "cursor": {
          "ref": "b83503e7-3f88-4550-b655-a3820f6ea748",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "07187aba-f7e5-4b8a-a54d-3cd88464b7af"
        },
        "item": {
          "id": "751b2ab6-4b66-4349-9da0-10d0e4967d45",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "6af6d064-af5c-4c8b-b7a5-f525e72be658",
          "status": "Created",
          "code": 201,
          "responseTime": 2316,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6efeb9-b23c-4e7a-893a-b5b1a8ec6aa8",
        "cursor": {
          "ref": "1aca01b2-92f2-4594-a20f-45e895c72d26",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4a303684-c106-4d6e-a954-bba73bb2ea54"
        },
        "item": {
          "id": "8c6efeb9-b23c-4e7a-893a-b5b1a8ec6aa8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "212d2c87-983d-4f9e-9c01-f9d4771ec298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c6efeb9-b23c-4e7a-893a-b5b1a8ec6aa8",
        "cursor": {
          "ref": "1aca01b2-92f2-4594-a20f-45e895c72d26",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4a303684-c106-4d6e-a954-bba73bb2ea54"
        },
        "item": {
          "id": "8c6efeb9-b23c-4e7a-893a-b5b1a8ec6aa8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "212d2c87-983d-4f9e-9c01-f9d4771ec298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 138,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46affb94-3444-4656-a88e-7ba41553c1ee",
        "cursor": {
          "ref": "7aed0a8b-32ac-4c4e-882e-a7ebde8525c9",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "357c9e3a-d14b-4fab-a74d-2cfa6e053c62"
        },
        "item": {
          "id": "46affb94-3444-4656-a88e-7ba41553c1ee",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f80d5e13-4146-4195-b091-de7284e164d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fedb3d3-3d19-486d-ab16-21896af086a0",
        "cursor": {
          "ref": "5e446a04-8c25-4cf2-9158-83a1f5845a1b",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2af3a216-e449-42e4-a13b-d65bfc73b50f"
        },
        "item": {
          "id": "4fedb3d3-3d19-486d-ab16-21896af086a0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "43801598-219b-4da7-853a-4f64ee3774af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd74faff-318d-42b9-a051-7a205d8132ee",
        "cursor": {
          "ref": "8ee043b0-3df4-4c05-b7d8-11546944b6fa",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "835b8ce9-ea1d-4edc-8321-8fb37af880b1"
        },
        "item": {
          "id": "bd74faff-318d-42b9-a051-7a205d8132ee",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "46237a22-8573-4a43-b2a3-6612ba4655c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed8dd8a-ff87-49e6-bf43-4461b4975b63",
        "cursor": {
          "ref": "889ebff7-44ea-4be0-9c63-c0392a1d4e87",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "efac95b6-6d83-4d63-ad88-310dd2fecdf5"
        },
        "item": {
          "id": "0ed8dd8a-ff87-49e6-bf43-4461b4975b63",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a6897c3c-2bd9-4d3f-8eb2-354bd96ff203",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f1b5de3-0dde-4f18-900a-caecab479978",
        "cursor": {
          "ref": "e31b1266-ddeb-4049-9244-0e6deef82539",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "b5a64577-cb44-4609-ba93-6e97c5339eaa"
        },
        "item": {
          "id": "2f1b5de3-0dde-4f18-900a-caecab479978",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f4e3392c-034a-4560-804b-9370dbc585f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de1dc1b-b80f-4616-b517-870d0df0e563",
        "cursor": {
          "ref": "1aaeae4b-a7ef-4e5b-b153-1c57f122c1b9",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "3f217532-7a7e-4e22-a496-d12e68da67dc"
        },
        "item": {
          "id": "3de1dc1b-b80f-4616-b517-870d0df0e563",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e1b8ea2b-9b88-4d08-8199-d1f2f51bf65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "012ecd56-d91b-4400-abb8-9ce0e48bcfce",
        "cursor": {
          "ref": "63506ee0-b5f3-4e1a-8cec-bdfefa65082e",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0e2d07ad-32d2-4c36-9c6b-5a2d31bc986a"
        },
        "item": {
          "id": "012ecd56-d91b-4400-abb8-9ce0e48bcfce",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "f204e675-e14b-4ded-a7ec-673bf77c47f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dee91bd-42c3-4f36-ae6d-a902ec8daa97",
        "cursor": {
          "ref": "e67cca11-cade-444e-b7d5-27eeb3e75e70",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "5f4f8f16-e58d-44ea-a1d5-a974cc9a32a4"
        },
        "item": {
          "id": "5dee91bd-42c3-4f36-ae6d-a902ec8daa97",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d311ce49-b98c-41b6-a0fd-9e18b1dcd92c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6871a8cd-d7f9-493f-bc74-c609d57369e5",
        "cursor": {
          "ref": "6dedabf9-7339-4198-b1a9-908552c6ad6e",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "d436d8a9-dcb9-4863-898c-45dc0bf75060"
        },
        "item": {
          "id": "6871a8cd-d7f9-493f-bc74-c609d57369e5",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a79f2871-c54b-4acb-bc0c-4a78f992c762",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51c0d2b5-a2a3-45cf-850c-d184e9a0e41e",
        "cursor": {
          "ref": "32a51db9-b903-406b-9cf7-3bca783d0573",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "521a47ad-5d1b-4682-8df9-8cd9c87aee76"
        },
        "item": {
          "id": "51c0d2b5-a2a3-45cf-850c-d184e9a0e41e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e9f6b6e0-e729-4a53-a503-65879b4af17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac166480-696b-4f6a-9140-f8bcd2e9feb3",
        "cursor": {
          "ref": "af9ec37a-9a3d-4326-984b-05b2d586ef2b",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "955324e7-b407-49da-a702-64447a502b1e"
        },
        "item": {
          "id": "ac166480-696b-4f6a-9140-f8bcd2e9feb3",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "ce85ac96-98d0-4bd5-a8f5-78d44f061a6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "686bad49-7c0c-475f-a25e-a2bbd5481ac9",
        "cursor": {
          "ref": "cb9099c7-5faf-41f5-8cd2-e334dc182ac0",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "35004f72-3971-4924-b2f4-5be4e8ac1e1f"
        },
        "item": {
          "id": "686bad49-7c0c-475f-a25e-a2bbd5481ac9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "014c9c22-9e06-4eb2-a2e6-302a0aa8311b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 201,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3b9075-3232-4729-bb04-a92acfce4058",
        "cursor": {
          "ref": "851a8d8b-ca48-453d-bb70-582db3c1b2b3",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "6f1463ab-18d3-4166-9a83-cc4552434f48"
        },
        "item": {
          "id": "ee3b9075-3232-4729-bb04-a92acfce4058",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9c11e927-568d-4ff9-a1bb-03bfe220a010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c811fb3-63b9-45ef-946b-7d5be86685f0",
        "cursor": {
          "ref": "baf162db-22f3-43c5-989d-64432c06354b",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4d28fa2e-5b3b-4de6-85dd-cebd1222e35d"
        },
        "item": {
          "id": "7c811fb3-63b9-45ef-946b-7d5be86685f0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "2407926e-7cca-47da-a992-c70d4c3d7791",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb37c1a7-6b81-4b1a-a3ff-a250406fb529",
        "cursor": {
          "ref": "95666312-f8cb-4429-a649-c75300692750",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c44a17b7-2869-4715-a96d-d8f224c9f609"
        },
        "item": {
          "id": "cb37c1a7-6b81-4b1a-a3ff-a250406fb529",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "02f461cc-53f0-4a1a-8247-f54e4165a34e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c206911-f766-4596-af96-c8f47b4998e4",
        "cursor": {
          "ref": "fe309af6-0729-47e9-93cf-736b38a7296e",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "2cc49c17-1b62-41b0-aa56-8184e848f63e"
        },
        "item": {
          "id": "6c206911-f766-4596-af96-c8f47b4998e4",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b1f9ae38-d869-411a-8ba7-2ed5c0a041ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cf566c4-7f8c-41f6-ab54-6822d5b6035b",
        "cursor": {
          "ref": "b24db172-0329-48f2-a35e-2298bdaa062f",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "fe9e531c-5b10-46d7-aba9-a96f5066f4cc"
        },
        "item": {
          "id": "4cf566c4-7f8c-41f6-ab54-6822d5b6035b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ffaddd03-853a-43d7-9547-87a80cabe444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8eed1376-5426-46ca-8831-db22a43e6d8f",
        "cursor": {
          "ref": "2ef79065-263f-45b0-b3fd-f93af42905f7",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "65ee3ba6-226b-45cc-9630-b5d697e0cd28"
        },
        "item": {
          "id": "8eed1376-5426-46ca-8831-db22a43e6d8f",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "a4a4baef-0d51-4c8d-86f7-0fb1e69f5393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6171552-9b79-4d87-9e15-64e020ec25e1",
        "cursor": {
          "ref": "c4a6b1fe-80a0-4afc-acf5-644510702bb9",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "68a3fef7-2529-4e77-a132-deee72217b74"
        },
        "item": {
          "id": "e6171552-9b79-4d87-9e15-64e020ec25e1",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "50b2180f-ed06-41dd-83aa-a1b95a990698",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b56bc7b-b03a-4fa6-97fa-9c61023c136d",
        "cursor": {
          "ref": "93daa799-59f7-4da8-bd7d-1af180e8bf18",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ab86d11c-597a-4104-9446-9df10e28e0c5"
        },
        "item": {
          "id": "4b56bc7b-b03a-4fa6-97fa-9c61023c136d",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cb118c1e-4b9f-4055-8a1d-cf26833f37f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 198,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "432f3627-30c8-4c07-8a79-90e222187700",
        "cursor": {
          "ref": "86c4cdd4-27aa-41f8-a42f-033ab73b3ad0",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a29ccc5d-c1b2-402c-a932-d8af421cec5b"
        },
        "item": {
          "id": "432f3627-30c8-4c07-8a79-90e222187700",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "80865187-dabe-4b17-a7df-387aca050014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d00ceb-8033-4581-a2cd-12408f7504be",
        "cursor": {
          "ref": "86be1448-8a70-4b4d-8ab4-70641164ad03",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "74efd712-e06b-471e-bcd5-53f0c03785f7"
        },
        "item": {
          "id": "c0d00ceb-8033-4581-a2cd-12408f7504be",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b1a1d122-1328-46f4-8f5d-59b6d0575f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a03ba08-a988-4821-88b8-fbd53d1100c8",
        "cursor": {
          "ref": "f97595b4-484a-4cdb-a4a4-ff7d1654535d",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8606811f-9baa-4979-9930-dfa5886d8725"
        },
        "item": {
          "id": "2a03ba08-a988-4821-88b8-fbd53d1100c8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "17dc2b5a-31c1-40da-bae4-7686081d3b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92ba37c6-1e4e-4434-9f01-c774443a70bf",
        "cursor": {
          "ref": "e648cafd-6663-43b1-a04f-2420a19cb3f4",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "46821477-39db-4838-b82f-20e0616250e4"
        },
        "item": {
          "id": "92ba37c6-1e4e-4434-9f01-c774443a70bf",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9ddf5603-140d-44f3-a441-17317f8f01f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076a228c-af0b-4b4f-b0f3-815e9cea1103",
        "cursor": {
          "ref": "78f2bfbc-c9aa-48b5-a226-7456e9ba11d6",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "73a1c330-8152-417a-adcb-951c67ed75fc"
        },
        "item": {
          "id": "076a228c-af0b-4b4f-b0f3-815e9cea1103",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "37e2c4c4-2d18-4c77-b4f7-3b6753c2a802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e56b7aa8-2ddc-405e-9f04-aed71f5aad15",
        "cursor": {
          "ref": "bbe6e29a-4718-4bf1-8ed9-b3ecef9fa34d",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "86e6341c-88ed-47e9-b598-44f7b5cb1bcf"
        },
        "item": {
          "id": "e56b7aa8-2ddc-405e-9f04-aed71f5aad15",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8e40b4d1-78e3-4dc1-abcb-982c0fb42f7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73745cb3-716d-490c-b83f-50c97b65684d",
        "cursor": {
          "ref": "7e08639d-6ced-4202-8397-682c39498e73",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "3d656a1a-00a4-472f-873a-ca5773c6d9d7"
        },
        "item": {
          "id": "73745cb3-716d-490c-b83f-50c97b65684d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "d8af095f-68ba-4b97-9aea-b2d18da6bfef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9e81b16-4efd-4912-81e4-b2ccb85ed083",
        "cursor": {
          "ref": "1fed643e-8c2f-4784-97cf-1a8943d47e77",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "10bbe714-b424-4550-9cfe-229cf4596102"
        },
        "item": {
          "id": "e9e81b16-4efd-4912-81e4-b2ccb85ed083",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b2efaca4-a121-4e95-85bf-453974ff61d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77df065e-fb9f-403a-bb01-98c60371ac23",
        "cursor": {
          "ref": "8546afc1-cbfb-41e8-9c27-90f4fa406fbd",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f65c4bd2-db58-4798-a29a-3b50fbb6224f"
        },
        "item": {
          "id": "77df065e-fb9f-403a-bb01-98c60371ac23",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1e3727aa-70e3-400c-b5f8-4484fd53f09c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4a588f0-31ac-4b08-8bcc-48274ed76033",
        "cursor": {
          "ref": "88c42d6a-fd30-4ad1-a2ff-aa52b2fd5a5c",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "51dc529b-5a29-41a1-b5fb-0f101aaedb5f"
        },
        "item": {
          "id": "e4a588f0-31ac-4b08-8bcc-48274ed76033",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "85c5552d-62e9-4a34-a024-e40c42dafc31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 107,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c046c01-18d3-4ead-bd39-9809536ad424",
        "cursor": {
          "ref": "87d0e40a-ed76-4653-a6de-c86474452343",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "cd49eb82-2a37-4949-bb96-67ae5a8a4321"
        },
        "item": {
          "id": "5c046c01-18d3-4ead-bd39-9809536ad424",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "d66b9ca5-bef0-48a1-800a-d4bdc8ae3c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7295a102-7fc9-494e-a13c-002597322821",
        "cursor": {
          "ref": "a10aebe2-28be-447d-b610-184d8fcf364d",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "15f1f2d2-89f5-4df8-928a-ad30d6d7460b"
        },
        "item": {
          "id": "7295a102-7fc9-494e-a13c-002597322821",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ae4338b1-b308-4ed2-a41a-fc5f1659067e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "b704f40e-fdf3-4114-8f2b-27802821e42f",
        "cursor": {
          "ref": "fae53355-4a11-4405-ab69-b2d7d1ce65d2",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "908102d6-4ece-4542-b2a8-f2724add149f"
        },
        "item": {
          "id": "b704f40e-fdf3-4114-8f2b-27802821e42f",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "26345575-e949-4fd8-9308-f062afdeca24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "470a61b8-7ea9-416b-a480-c52c358d0021",
        "cursor": {
          "ref": "b94673a7-69c5-4b71-a6ba-e9dfb28efd93",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5e5e25d4-34dc-4db6-b8b6-6e592c072686"
        },
        "item": {
          "id": "470a61b8-7ea9-416b-a480-c52c358d0021",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d998f3f3-e2b1-454e-b8a5-5f312057c407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "470a61b8-7ea9-416b-a480-c52c358d0021",
        "cursor": {
          "ref": "b94673a7-69c5-4b71-a6ba-e9dfb28efd93",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5e5e25d4-34dc-4db6-b8b6-6e592c072686"
        },
        "item": {
          "id": "470a61b8-7ea9-416b-a480-c52c358d0021",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "d998f3f3-e2b1-454e-b8a5-5f312057c407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ec37177-75a9-49e3-848c-b9aafdc3ec98",
        "cursor": {
          "ref": "29133be4-32ea-4852-8295-5abdab691c20",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a72586b3-785a-4395-9cf3-dec4509422a8"
        },
        "item": {
          "id": "9ec37177-75a9-49e3-848c-b9aafdc3ec98",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "95b1d76e-b35e-4f2b-b0a7-6fe8853f0599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfca4fb3-733c-4fc1-8f63-beef552f245e",
        "cursor": {
          "ref": "602090e4-659e-4c5c-9256-7ddde0a1f5b0",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "78a1719a-ddcb-4ad7-a2e2-e8466eabd7a8"
        },
        "item": {
          "id": "dfca4fb3-733c-4fc1-8f63-beef552f245e",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "97f4d8c6-cf04-41c8-805a-4f5197bd40e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a967e958-d5cc-4d09-8c28-655e6b170338",
        "cursor": {
          "ref": "8a03d296-4edf-497d-a442-4265da1dfa39",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "32457dea-dc1a-49a2-80a2-f62e5a45e719"
        },
        "item": {
          "id": "a967e958-d5cc-4d09-8c28-655e6b170338",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e2b7d5dd-c745-49a2-8008-95dfbb7c64f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "457923dd-75bb-44e2-92a5-5ba2b99bf9c3",
        "cursor": {
          "ref": "98353f1a-8f3f-47ce-9d14-0c12c9831156",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bb98cd2c-cc2e-402f-8b61-c85fe5e2b4d1"
        },
        "item": {
          "id": "457923dd-75bb-44e2-92a5-5ba2b99bf9c3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "3e60f3cf-97f8-4e55-bd12-e4b1c364a914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a830c72e-7e11-4606-86ef-31bcc36ed40f",
        "cursor": {
          "ref": "4cb50ed6-c7b8-433d-8d9d-a9ada4fa7d31",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d773f8cd-9afc-408b-9844-be81a8927fc7"
        },
        "item": {
          "id": "a830c72e-7e11-4606-86ef-31bcc36ed40f",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f89c0030-aa4c-4cfc-bc8c-efcb8c1e6d58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7443ed1-fc66-44e9-a71f-2155bb0870b2",
        "cursor": {
          "ref": "3a853589-8b80-4655-a1c2-9ff7d11a9a49",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "688c7945-6474-4cb9-a692-19a7002e7eea"
        },
        "item": {
          "id": "a7443ed1-fc66-44e9-a71f-2155bb0870b2",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "74f78842-2ff7-4ba6-a696-caf05ff10558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d8bf92-1808-4ab1-90aa-b295dbe66aef",
        "cursor": {
          "ref": "ff96b8f3-9157-4534-9149-aef62f1a4dcf",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a5aec957-9463-4465-8695-d7543a47e52f"
        },
        "item": {
          "id": "11d8bf92-1808-4ab1-90aa-b295dbe66aef",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ca49b5b0-a8cd-44ff-804f-49efefe4e40c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2ee2eb-3ecd-49ff-98a8-395bf156e295",
        "cursor": {
          "ref": "cd2ec2a6-8857-4b08-99de-ac341c3993a2",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "849f2190-5070-4e1f-8e18-f657f1b3c975"
        },
        "item": {
          "id": "2f2ee2eb-3ecd-49ff-98a8-395bf156e295",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d411a74b-0067-449d-ae30-85c0afac37db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1353629-2000-40d0-8f6d-a73078113c00",
        "cursor": {
          "ref": "ff35497a-d15d-4e8a-8e32-1615a37cc9f4",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0f825617-d5e6-4f2d-ae31-212145031ade"
        },
        "item": {
          "id": "b1353629-2000-40d0-8f6d-a73078113c00",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "c4014982-9fcb-4a41-abca-2a583b524fbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b5a97ac-aca1-49c1-9154-b055f7aa8e69",
        "cursor": {
          "ref": "81974530-ca6d-44f9-a986-e46e132b3990",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "facc8734-76d2-46ae-ac0c-504181ca7784"
        },
        "item": {
          "id": "0b5a97ac-aca1-49c1-9154-b055f7aa8e69",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c362c004-2b60-46bd-a8e2-87aa670e9e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13772ae8-e67d-4b4e-bded-d069f4fe5000",
        "cursor": {
          "ref": "02a9bc9d-f053-422f-bfdf-7930fc1a651b",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "614b152f-62fc-4d11-b289-e59bc6889ef5"
        },
        "item": {
          "id": "13772ae8-e67d-4b4e-bded-d069f4fe5000",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "315fcbf8-4634-46dc-831c-6adbbf6a4983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2333cbf7-f846-4ec6-a3de-e0cc17344c38",
        "cursor": {
          "ref": "498fb6fe-e9b6-432c-9e6e-92c7b5294fe3",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "235c2955-b0f5-4378-bcaf-9da6ae36a7d5"
        },
        "item": {
          "id": "2333cbf7-f846-4ec6-a3de-e0cc17344c38",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "958182f6-e5ad-4149-9577-447c33441163",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 139,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75f1fa86-70d2-431f-9d70-52f35ccf6981",
        "cursor": {
          "ref": "a14541d5-b7fb-437a-be86-c4eeedad8eb3",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "47743b28-87e6-47ea-8a4a-408f1ce4c422"
        },
        "item": {
          "id": "75f1fa86-70d2-431f-9d70-52f35ccf6981",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "a684f1e3-7ef9-4ace-9c64-fc4f5be35e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d62193-5fec-4abe-baab-b63e545366ed",
        "cursor": {
          "ref": "80cf766a-5b2d-4f34-835e-6198bf70df54",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c3e14ec6-8e88-4873-abca-271df6fe4af0"
        },
        "item": {
          "id": "75d62193-5fec-4abe-baab-b63e545366ed",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "e32d3398-01bf-4f77-b46c-2a29110bfa54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7526275-b08e-41d1-89cc-bf1d09459856",
        "cursor": {
          "ref": "5347d5c8-08e1-474a-852a-bfb2857832ef",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "f0361c56-9420-4411-96aa-f5fe70c3f58b"
        },
        "item": {
          "id": "e7526275-b08e-41d1-89cc-bf1d09459856",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2653d8ea-061a-4ae3-928e-9e1b9b41bf5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ccaa2c-27ac-4323-9ad6-68436af30a92",
        "cursor": {
          "ref": "c048b0de-e094-4df1-848e-2032bdf69cd7",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "74beebdb-a44e-43bd-bca5-2190d11f123d"
        },
        "item": {
          "id": "14ccaa2c-27ac-4323-9ad6-68436af30a92",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "79b5f3ef-7c1f-40c9-9a3e-f087bcc18f8a",
          "status": "OK",
          "code": 200,
          "responseTime": 206,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "b5c5fca2-aaaa-4d40-85db-4103c30c4c1c",
        "cursor": {
          "ref": "9606ca87-95af-46dd-a29a-43e4a1c4a04b",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c5da610c-2034-4b5f-9fcb-fb70778cb27b"
        },
        "item": {
          "id": "b5c5fca2-aaaa-4d40-85db-4103c30c4c1c",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bd666f88-edb4-420c-ac58-fc3997e6403e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9273c6c-898f-49ac-b48a-652a07d2cf3f",
        "cursor": {
          "ref": "a89520ef-0104-4ace-bf56-a1db4a83cc0f",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "c520d152-a85b-4ad1-80a0-36aec7f77beb"
        },
        "item": {
          "id": "a9273c6c-898f-49ac-b48a-652a07d2cf3f",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "21c194b6-0bb5-4638-9d37-c24195480739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46d71ff-fc04-45d7-8e90-4dfc6b27cf6e",
        "cursor": {
          "ref": "45140316-bdbb-422b-9d3f-1a71564f0e9d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "0d60206f-5660-4a91-889f-1606bb64b006"
        },
        "item": {
          "id": "a46d71ff-fc04-45d7-8e90-4dfc6b27cf6e",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "cba34d83-2ced-4ed6-b5df-822a691b0ad2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "995fbc53-3103-4331-b855-36b296bc574a",
        "cursor": {
          "ref": "caaa3026-b349-4d7a-bca3-09ff266a66ed",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "7ef2a060-ca5f-4181-9034-7166fc847592"
        },
        "item": {
          "id": "995fbc53-3103-4331-b855-36b296bc574a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c941ca81-4e0d-4904-8e1e-201542315069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6598e18d-1ddf-4eee-a0cb-98be7ba0b561",
        "cursor": {
          "ref": "3c5a450e-2b5c-4365-920c-55a2794d57a6",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "cdae999a-be1f-4c5f-ab98-5b215321fe37"
        },
        "item": {
          "id": "6598e18d-1ddf-4eee-a0cb-98be7ba0b561",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "92a4ac70-01b5-4668-83ce-d9f4bf70f900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec72026-2a42-4279-94f7-22d84d903747",
        "cursor": {
          "ref": "a6e17702-2eb9-4122-b759-3c15bcdbf00d",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "43e6d695-ed8f-404b-807a-6c5b0c2bce89"
        },
        "item": {
          "id": "eec72026-2a42-4279-94f7-22d84d903747",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "f51bd8eb-7ef7-4e9b-9cc0-8112393b7770",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9fc5bfc-8179-44e4-8179-c64b1926fa60",
        "cursor": {
          "ref": "b2f84a3d-bb80-4ecf-8826-59d27544517e",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "858d540b-bde1-457b-9650-70b64c823946"
        },
        "item": {
          "id": "b9fc5bfc-8179-44e4-8179-c64b1926fa60",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "16ae5eec-8d5c-4871-bb24-607c0b677dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a7fd27f-fe2a-4eae-9801-4df00c60b385",
        "cursor": {
          "ref": "0fef3d84-6383-4421-8fab-e2e4302720b8",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6c9ab0be-c201-4719-aeaf-06e2a1933f4f"
        },
        "item": {
          "id": "0a7fd27f-fe2a-4eae-9801-4df00c60b385",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7596693e-bf76-4d5c-9627-8949b33648bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c05da55-dd91-4fa7-ba73-9b6e4b620e66",
        "cursor": {
          "ref": "9f59f775-e158-4c8f-b78a-2f9bf90c8058",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5466cacd-3d64-4dc9-baff-b78e9bfcacbb"
        },
        "item": {
          "id": "1c05da55-dd91-4fa7-ba73-9b6e4b620e66",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "69310698-1e34-4ce3-b80b-b7e76e73c362",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ef9732-f9f5-4e1f-b403-dcf02bb62894",
        "cursor": {
          "ref": "e338257b-f6fd-400f-995d-f46ce3078791",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1ccadd96-baf7-44a3-b0e3-ac22a6422d5f"
        },
        "item": {
          "id": "11ef9732-f9f5-4e1f-b403-dcf02bb62894",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e62c8585-b7b4-411a-b799-7324c3604a82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c3bc67d-fa8c-44b6-ae42-f52a7829c1e0",
        "cursor": {
          "ref": "f3e5c0d3-7df5-41c2-a997-26e4f4bba49d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "3b8fcb26-ac78-4f6c-adc4-a80256e19fb5"
        },
        "item": {
          "id": "9c3bc67d-fa8c-44b6-ae42-f52a7829c1e0",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "681b3480-88ec-45f3-bfb9-ea4c997277c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78756e26-581b-40d0-8ed6-68cd9c6d1ef7",
        "cursor": {
          "ref": "4282383c-3e24-49a8-9553-f9a1bb66722d",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "878ac1c0-7596-4032-a15b-04c2bc3d8fab"
        },
        "item": {
          "id": "78756e26-581b-40d0-8ed6-68cd9c6d1ef7",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2c0bf143-9b57-4838-8717-1d7663a3f82b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "725d23be-07e6-4f1d-b6e4-a81f150f18a4",
        "cursor": {
          "ref": "32ecb26e-fcae-4200-9f3f-2d7002ae91a1",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "65a6456c-80d1-4486-b75e-bc27a3cb089c"
        },
        "item": {
          "id": "725d23be-07e6-4f1d-b6e4-a81f150f18a4",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "85351157-af39-4a54-bbe2-0e3d395b2a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ed4f37-93af-44cf-9491-abe5901fd90f",
        "cursor": {
          "ref": "7a08320b-1957-4bee-9d81-536788f4cdbf",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "736f713d-6b76-4cee-a69a-a696da4bb75e"
        },
        "item": {
          "id": "d6ed4f37-93af-44cf-9491-abe5901fd90f",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1de6e0d6-b946-4c10-b31d-5d741f6cd55e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4e017e7-f569-4a43-89f0-5d4cdaf19e93",
        "cursor": {
          "ref": "5546588d-79b0-4b41-9e97-74410623d541",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "68bf9a4d-56fe-4e99-93fa-b72568d5b822"
        },
        "item": {
          "id": "d4e017e7-f569-4a43-89f0-5d4cdaf19e93",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "5e902810-db31-4b9c-964c-b3f04da435b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd182990-c216-45af-b8fe-fe815c72822f",
        "cursor": {
          "ref": "8f5b4675-f1db-4fb8-94c2-0d85b2f6be4d",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "f0a5e427-c17f-49dc-958b-4663afe554b4"
        },
        "item": {
          "id": "bd182990-c216-45af-b8fe-fe815c72822f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ef56f34c-8e57-4457-bbc3-3fb311d019aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8492a7af-2c37-43b6-96a9-c36a272f90be",
        "cursor": {
          "ref": "62387daa-76e7-4eec-b190-3c2de1bd7e14",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "d1e2dc19-eec1-4481-87d0-973dc0ea4458"
        },
        "item": {
          "id": "8492a7af-2c37-43b6-96a9-c36a272f90be",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "023f5a8f-38b8-4ee2-9216-231504034b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55a29410-e70f-4c2c-98a1-d3a1e23cfb48",
        "cursor": {
          "ref": "7e34ed67-54c7-43d8-9206-eac0bb48bdd3",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "eb4501b0-95e4-4464-bba7-6aef5e140684"
        },
        "item": {
          "id": "55a29410-e70f-4c2c-98a1-d3a1e23cfb48",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "e8c5f758-2ecd-4797-88e5-f42378baea47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a775d719-c690-4777-a4ae-ed8fb256313a",
        "cursor": {
          "ref": "aab4c8af-a978-4e81-96e4-7dc0f28e4416",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "70c0a25c-d609-4535-88f7-787819c682bb"
        },
        "item": {
          "id": "a775d719-c690-4777-a4ae-ed8fb256313a",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "0a8d9e54-9335-452a-8da0-d3b3254b876f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5cce17-b812-4b66-afc6-858348e25181",
        "cursor": {
          "ref": "fed2a8bb-b9a8-42e3-8577-727c4106fdee",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "d95a0b86-1ec9-4767-ae04-2958bdb54659"
        },
        "item": {
          "id": "0e5cce17-b812-4b66-afc6-858348e25181",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "13057758-6b4c-46e7-aac3-8c2aecc79982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f46176-0f72-4264-8877-8eaf75a8c963",
        "cursor": {
          "ref": "401fbdde-94cc-4aa6-b17a-ff40ad3c4530",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b2a98b8b-0cec-43ec-b4c6-8ac19d5039b1"
        },
        "item": {
          "id": "23f46176-0f72-4264-8877-8eaf75a8c963",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0115fa99-e318-4b0e-93d2-362212a05d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef78432b-5b53-4d7d-b137-54da7ba3502c",
        "cursor": {
          "ref": "a4953355-116d-444b-af7b-fe2a1edbf9bc",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "9778f233-20b9-4505-a48b-ca8f0ca00ae2"
        },
        "item": {
          "id": "ef78432b-5b53-4d7d-b137-54da7ba3502c",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e3f59f7f-04ff-49c8-b734-6cc4485ce321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4255d060-9d66-4499-8a9b-779112401213",
        "cursor": {
          "ref": "6eec4f1f-c3cb-4001-8b70-8c2062d6838e",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "20e86059-f076-40a0-a6b2-afe2ba6560eb"
        },
        "item": {
          "id": "4255d060-9d66-4499-8a9b-779112401213",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "881d01bd-1151-4378-a5b7-f6f1af753ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95beaa13-f0fe-467b-96a8-3f8d81ca6790",
        "cursor": {
          "ref": "0c6cec92-fdef-4ed8-9051-de3866521d85",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a506e2bc-dc5d-4728-ae42-c94a7511862b"
        },
        "item": {
          "id": "95beaa13-f0fe-467b-96a8-3f8d81ca6790",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "91da1dbb-8d61-4fc9-9cfb-9902b9146c3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0aabd5-0601-4435-925c-6e00400a480d",
        "cursor": {
          "ref": "f5054cc3-4ec5-43aa-9db9-50879babbefc",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "f0257736-b747-4e17-8382-b9e2583aa0cc"
        },
        "item": {
          "id": "fd0aabd5-0601-4435-925c-6e00400a480d",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "60521dcf-1ebd-420c-a969-c2fcb1277488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5abeb320-c98a-4ace-8afe-66feea8cc470",
        "cursor": {
          "ref": "c1c5ae10-75c5-4c90-add3-c37393fa9f2b",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d687a149-760e-42af-8b80-542316ffaed5"
        },
        "item": {
          "id": "5abeb320-c98a-4ace-8afe-66feea8cc470",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "813a5ad6-5f5c-476e-b50b-9ea8e06f5c54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2082e54c-273f-4f94-98f2-1c819d0611be",
        "cursor": {
          "ref": "53759ca0-caeb-4bd7-badb-ca9d14717fbf",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "89cf1b4b-a86d-4c6b-9490-04b7a35e5040"
        },
        "item": {
          "id": "2082e54c-273f-4f94-98f2-1c819d0611be",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "0e26b08b-c846-4f64-96d4-912aef425d42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 190,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b53893-365d-42e8-98ce-2c35ac6d618b",
        "cursor": {
          "ref": "7e9166ac-715c-4178-917e-20da0cd71e4e",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "86031f46-2294-498b-a11c-1c53ba5332f7"
        },
        "item": {
          "id": "66b53893-365d-42e8-98ce-2c35ac6d618b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "092a0236-3172-4bb1-8f9d-31abae5489da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20e77205-a744-4d1f-a222-18af96234475",
        "cursor": {
          "ref": "443a7e23-a680-422d-81f0-eccf0367363d",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "e44315c7-f1c2-45fb-9571-4825817253cf"
        },
        "item": {
          "id": "20e77205-a744-4d1f-a222-18af96234475",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "fe2b5710-3a98-4cb3-ac2a-385cb00f4079",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b620c1d-963e-4aa0-8a8f-697f2a4e77c7",
        "cursor": {
          "ref": "f6766336-e902-4e7e-97ce-ca0a3b47bcf5",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a03771ab-3cae-4e88-af9f-dc6c4d745fd7"
        },
        "item": {
          "id": "3b620c1d-963e-4aa0-8a8f-697f2a4e77c7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "16ff1344-d785-4333-b092-30e349bbd8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af4057f-a743-4d76-95db-aff017a0d2ee",
        "cursor": {
          "ref": "aa2d7696-1f6e-4bc1-98b9-2932e6b7c472",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6fdced9c-4be6-4ff1-9e86-d3beed381a03"
        },
        "item": {
          "id": "6af4057f-a743-4d76-95db-aff017a0d2ee",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "63d75819-a821-4b02-adfc-130fbc6b1e16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af045d47-17d5-4371-a078-281c34b54a9a",
        "cursor": {
          "ref": "85745913-6397-441c-ae4e-a8c3672c0aa7",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6ebcf6cf-e4fc-4336-8963-11ea0a305bbe"
        },
        "item": {
          "id": "af045d47-17d5-4371-a078-281c34b54a9a",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "82ef2f5b-0810-4c10-909c-028e36063065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c463ab8-af6f-4acb-9fc4-ed2f5a6b0d58",
        "cursor": {
          "ref": "75a704de-63d9-4475-b138-de29a04ace87",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "04eb778f-2456-4323-97f5-debd93474816"
        },
        "item": {
          "id": "9c463ab8-af6f-4acb-9fc4-ed2f5a6b0d58",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "7ea05a0d-2da5-44b0-8df5-755749474c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93a306c2-34ce-47e2-995e-ff33e4e71c5c",
        "cursor": {
          "ref": "9586752c-2d58-4a52-980a-6704bf1d2542",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "7d547ac1-39d5-4055-9973-43eefbe2ee7f"
        },
        "item": {
          "id": "93a306c2-34ce-47e2-995e-ff33e4e71c5c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "60f86a5e-e1a3-4652-9e7e-86476b70bbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a6e584-7347-4989-b9fb-1450d6b347b9",
        "cursor": {
          "ref": "5bdd8ec0-7246-42a0-aa51-6d6cba6b0e24",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "bd320d7e-41ac-473d-a2d9-b9735c69dfa4"
        },
        "item": {
          "id": "01a6e584-7347-4989-b9fb-1450d6b347b9",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2640a7a6-57d1-4be9-b323-3111c4f231c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61cd224-a6c0-4b9e-b87f-856bc7f09df8",
        "cursor": {
          "ref": "b528be8a-ba28-458a-98dd-293b6942c931",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f91ac22d-f980-4122-bec2-c0b9cbd76530"
        },
        "item": {
          "id": "c61cd224-a6c0-4b9e-b87f-856bc7f09df8",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "1315d0d2-fcf2-4495-a03e-34e4ffdc6e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b032af79-d66a-44bb-9f17-65e18acfdc9a",
        "cursor": {
          "ref": "ceeac0ec-d079-49d0-83b0-d44de5e5bb54",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "b87cc11e-c031-4ebe-bc3e-f9042032939a"
        },
        "item": {
          "id": "b032af79-d66a-44bb-9f17-65e18acfdc9a",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "7bb43d4a-e97f-47f1-8c2f-739a740357e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b07a84d1-2ccd-467c-9391-3b114d23466f",
        "cursor": {
          "ref": "e897b007-cac2-43c2-815c-1cd3fdfadde3",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "994abec5-2de2-46a3-88b9-2c9976e83324"
        },
        "item": {
          "id": "b07a84d1-2ccd-467c-9391-3b114d23466f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "3d715141-e1dc-4809-b60a-fc7423c5113b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43d9323-a11b-4a9e-82c7-614aa61eb253",
        "cursor": {
          "ref": "7c180821-dd10-41c0-9218-afea8e75f400",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c68fc54b-1a0e-4d75-98bd-a9552a0c901b"
        },
        "item": {
          "id": "a43d9323-a11b-4a9e-82c7-614aa61eb253",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "06e00ffd-214d-49e6-a1ae-59bd9d5086bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a466eae-35dc-496c-8faf-6d1149139563",
        "cursor": {
          "ref": "24c48c91-3cc8-4233-a7ed-ff923461a947",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "66cbbb87-002d-4056-b2d5-302a8ace6958"
        },
        "item": {
          "id": "2a466eae-35dc-496c-8faf-6d1149139563",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "62aa8cc9-ad57-437f-8ed1-7770b4ef89e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d4d82b-7e63-4fad-99a4-c0e6953d275c",
        "cursor": {
          "ref": "8cacda00-53e2-4a73-a0f9-037836dcdb27",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "5722ff2b-30c5-4b68-b6a8-b7d7f9134d7d"
        },
        "item": {
          "id": "28d4d82b-7e63-4fad-99a4-c0e6953d275c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "12b0f3dc-57b5-4d2e-9266-7c3a8ebcd88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63e05414-6070-42bd-bc9f-e3a7ee859cca",
        "cursor": {
          "ref": "207c5b8f-8984-4e33-9bf3-9c515a47fdc1",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b1bb3532-724f-4af8-8513-488223961662"
        },
        "item": {
          "id": "63e05414-6070-42bd-bc9f-e3a7ee859cca",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "4c521484-b57a-491d-9148-93098b52f682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de1ef5a-fa4a-40be-9fe8-365a2f192d29",
        "cursor": {
          "ref": "7eff6f82-f4a9-486c-9619-66631a7f22c2",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "7dff09cb-567a-4b44-b064-f8897414fe95"
        },
        "item": {
          "id": "1de1ef5a-fa4a-40be-9fe8-365a2f192d29",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "b5175506-d495-40bf-a442-8b1deb6782b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc2a6ab-3245-4e18-b719-92a65453e051",
        "cursor": {
          "ref": "a0481bb8-973a-4ad1-ba07-7f426c78bcd7",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "ddbca14c-c5fd-4934-b8bf-b39d7c8fdeb0"
        },
        "item": {
          "id": "1dc2a6ab-3245-4e18-b719-92a65453e051",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cae7e43b-077d-4298-b123-5ec245daf7fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec3c53c-390b-40a4-8eb2-1b59a26689e6",
        "cursor": {
          "ref": "a3fa3433-ed2c-466c-be1b-b22eb8f52825",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9144704b-d94e-4adc-a27c-a0a77adccaca"
        },
        "item": {
          "id": "6ec3c53c-390b-40a4-8eb2-1b59a26689e6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "779e030d-d859-46e3-b593-0a0849fe1347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7587948-2e7b-466f-8bd3-810c93de1c3f",
        "cursor": {
          "ref": "6ccd6878-3a86-4388-b43d-9809dd747e2e",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "5fd9124b-988c-42b3-88c5-4098ae93a624"
        },
        "item": {
          "id": "e7587948-2e7b-466f-8bd3-810c93de1c3f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1e6e98c8-5ae8-4aae-ae04-21a6cd5807ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "557ce221-7e2b-49bc-a851-7aed720b9a36",
        "cursor": {
          "ref": "f6ef36c9-4354-498c-bf39-465fbdef07f2",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "37689f1e-94e3-4abb-9c12-4bdb9c6b9c7e"
        },
        "item": {
          "id": "557ce221-7e2b-49bc-a851-7aed720b9a36",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "60fbb3e9-573d-4c89-adf2-54741f8471e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa1083c3-1f85-402b-8d0d-ba5e2bbf5de6",
        "cursor": {
          "ref": "218bc121-5e5d-4412-a7aa-2143a8c08208",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "0ab6bf8a-a320-4229-82b3-f783b753ff5f"
        },
        "item": {
          "id": "aa1083c3-1f85-402b-8d0d-ba5e2bbf5de6",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "410a2a0e-78a2-4db9-b42c-e91eb5b4724a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68ed31da-b8bf-488e-ab04-3b28a419dd4e",
        "cursor": {
          "ref": "a5e7cbef-f8f8-4bc2-a48c-336f374799e7",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1f1f463a-37c5-41ab-9dbc-0ec516517741"
        },
        "item": {
          "id": "68ed31da-b8bf-488e-ab04-3b28a419dd4e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "8db5c0ca-de43-471b-acc0-036f74727579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 157,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "397ea521-bd7e-4ce4-a219-90e5ad5a191f",
        "cursor": {
          "ref": "a0d81e87-90eb-4dda-a734-e92ec93b574c",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0a503d52-7c70-4148-a61c-c8f33bef6ad7"
        },
        "item": {
          "id": "397ea521-bd7e-4ce4-a219-90e5ad5a191f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "0d109317-c102-45a1-a9f0-d829a74b06c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1728c6db-25d0-4589-b488-4f36b054e6c2",
        "cursor": {
          "ref": "964f15f9-6920-45e4-bfb5-b964a997bf9e",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4abc7a8e-4892-4f96-9d8e-3e201d72b16f"
        },
        "item": {
          "id": "1728c6db-25d0-4589-b488-4f36b054e6c2",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ef93ca38-324d-40cf-b78d-bb13873769a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f171091-dd73-4f5f-8f61-8353b2bb9b8c",
        "cursor": {
          "ref": "2ff7a76f-55e6-4799-ad0f-b18d746bd4c4",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2b8ac929-5b62-419f-8f69-21097092f689"
        },
        "item": {
          "id": "5f171091-dd73-4f5f-8f61-8353b2bb9b8c",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d9243c67-db03-408c-a9d9-479f639fea17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c0906cd-5c32-4c51-b715-df10dd16dfb8",
        "cursor": {
          "ref": "9741df1e-beeb-420f-8c6c-7ceda6ad1370",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "bb1573db-2883-4a91-a2cf-8e3f9fe3888d"
        },
        "item": {
          "id": "0c0906cd-5c32-4c51-b715-df10dd16dfb8",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "8e968977-a96e-4bb1-9fea-6c590de67380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "beae4c03-5eb1-406d-be53-19959651a26b",
        "cursor": {
          "ref": "5179fa7d-eeb8-4913-8add-88ad080d27dc",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "f2ce50c4-d00d-483d-9be5-28d70a09dfd7"
        },
        "item": {
          "id": "beae4c03-5eb1-406d-be53-19959651a26b",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0e22a3fb-5016-443e-9c2a-6b7d2a83d405",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e453db8-bd36-4eff-8a8d-240ced8e5523",
        "cursor": {
          "ref": "67d0f2c5-2be3-4c6d-8c12-c0228d099363",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a8023f1d-c0af-4d6d-b445-8fcf604fd04e"
        },
        "item": {
          "id": "3e453db8-bd36-4eff-8a8d-240ced8e5523",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "c6ab4427-a59e-4c0a-83ff-f7254b7528e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bb69214-286f-4c8a-b7c1-1341cca2e2a1",
        "cursor": {
          "ref": "abac57bf-e44e-47a0-8372-7278f2f73497",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2e97947b-4352-4f4d-bd5d-9b70c7ba46de"
        },
        "item": {
          "id": "9bb69214-286f-4c8a-b7c1-1341cca2e2a1",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "670d42a7-7ea8-4aeb-bae5-ba493f835f6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6987a805-9834-4405-a23a-a16907765d09",
        "cursor": {
          "ref": "ac06784a-cd24-4087-84ec-1d5604b29b3d",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "b3d40730-4b6f-4b9c-8f55-c8e500b0a7df"
        },
        "item": {
          "id": "6987a805-9834-4405-a23a-a16907765d09",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8535c612-b248-4b4a-abb6-9fac751f979b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db66ce1-0054-43e2-92ba-31d35b98ff4f",
        "cursor": {
          "ref": "02e577a9-8966-47b1-8179-d1667cba4643",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1b31c850-f9f7-4ac0-957d-51b1275c854d"
        },
        "item": {
          "id": "3db66ce1-0054-43e2-92ba-31d35b98ff4f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "6b2d5510-7da8-436e-aa76-b905a88823dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce656c77-a2d4-4d08-b13f-1c82b3fd9396",
        "cursor": {
          "ref": "4d3ba1d1-d787-4fa3-9571-47be30af085b",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "90e5d31d-e8be-41db-a3b5-4792d3f10bc1"
        },
        "item": {
          "id": "ce656c77-a2d4-4d08-b13f-1c82b3fd9396",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "44016fe9-e9b0-483e-844d-70a818f666c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26652a3c-21a0-4df5-b916-5fef78758432",
        "cursor": {
          "ref": "e1f867c6-f01b-4304-96c3-bcbce50d383a",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "26628344-c07f-48bd-a0b1-c3cd0c4c6a8d"
        },
        "item": {
          "id": "26652a3c-21a0-4df5-b916-5fef78758432",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "47d6a946-a10e-4add-8aaf-cfa03233d0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86f29e1-8911-4c51-9013-a672ffcd3dd5",
        "cursor": {
          "ref": "357bdd5f-aad4-4aaf-8949-3918ecd301e4",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "6517094c-c989-4bc7-9a15-d0e2f7925505"
        },
        "item": {
          "id": "b86f29e1-8911-4c51-9013-a672ffcd3dd5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2b6272e8-c883-4c8a-8cef-1fe2e668b8fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f37e5c6-af86-4a31-a1b6-2d7d4edbf7b7",
        "cursor": {
          "ref": "54f3c674-b20b-4ad0-a531-2c32b23b4f50",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "a12003e9-fa0c-4985-b831-b46cdd16deec"
        },
        "item": {
          "id": "7f37e5c6-af86-4a31-a1b6-2d7d4edbf7b7",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "904d515b-ad1b-43af-95e9-d8c46f6d4689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86691162-296d-4f71-9286-ccd32683deb7",
        "cursor": {
          "ref": "4c1ce0f6-5e24-4caa-89ee-88219a61f59f",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "74f77af3-acca-4d5a-9faf-192121939587"
        },
        "item": {
          "id": "86691162-296d-4f71-9286-ccd32683deb7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4f52f6e0-decc-4cfc-900d-7034909a624f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90eadabb-298b-4636-8959-d8a7c4e0c1b9",
        "cursor": {
          "ref": "72be74e2-7509-4bb2-836c-d2e3c6d2ff18",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d477b319-7b41-4936-a6a3-caa4b5464635"
        },
        "item": {
          "id": "90eadabb-298b-4636-8959-d8a7c4e0c1b9",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "acf0a525-f2f0-4a04-8796-6bbf5dc889a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f8368e-ecab-49cb-b95c-baece28ae6b9",
        "cursor": {
          "ref": "dd78ae6f-bd7c-49da-b48f-c3f790eb8e34",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "65b9de6f-f1c0-4567-af2f-45f3ea3fb826"
        },
        "item": {
          "id": "c7f8368e-ecab-49cb-b95c-baece28ae6b9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "f2187bb3-084d-4a35-8e92-8372ec5d8a81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abd18f61-684c-4006-a6df-cdb9815c687d",
        "cursor": {
          "ref": "dd78d6a1-d8f2-4dcd-b761-f02bb04c8fde",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "8121f3fa-8add-4388-8b6b-0f552ca38be7"
        },
        "item": {
          "id": "abd18f61-684c-4006-a6df-cdb9815c687d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "07c1b6fb-aebf-450c-9c31-c421e03932fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f5da7af-8be7-4b75-8d95-b370bd0580e7",
        "cursor": {
          "ref": "d73ced77-7f5c-41ea-a390-8683364420f1",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "7e9951b6-c17c-4a12-8390-ea406162e60f"
        },
        "item": {
          "id": "3f5da7af-8be7-4b75-8d95-b370bd0580e7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "78e24d10-98fe-4528-97a6-99ae6587e092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b6c5861-eea7-4534-ac43-7ae8c00f5360",
        "cursor": {
          "ref": "ceb1e66a-1fb7-4bd6-8a90-d25ddc0adc57",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "e17a6506-8c5a-4af6-9952-c0367becfb44"
        },
        "item": {
          "id": "9b6c5861-eea7-4534-ac43-7ae8c00f5360",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "dad20458-bc4c-44a5-b4f0-12f2fa664b7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12031749-8e59-44af-8cfd-07bd0871a936",
        "cursor": {
          "ref": "2ba6b51b-50d6-43b6-9141-32a50908a3df",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f185b928-a561-489e-8bbb-f6b50719787d"
        },
        "item": {
          "id": "12031749-8e59-44af-8cfd-07bd0871a936",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "9a8e3113-f308-49aa-9783-725e65b6eca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35591c20-31d9-4c65-ad73-9089859ac571",
        "cursor": {
          "ref": "8c896c4c-403a-4be0-af51-219c312d5dfe",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "f2610c3c-a267-4a7f-bf6b-0ed5251e80b7"
        },
        "item": {
          "id": "35591c20-31d9-4c65-ad73-9089859ac571",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "a6734a5c-2c93-4be0-8f6b-4996e718b772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6a8b86-08b3-4958-8caf-1c7dc11e9e7c",
        "cursor": {
          "ref": "7fcdce01-0ca2-4c87-8a51-79a12e08c34b",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "06f1f26d-e2ff-47a5-9921-9aa64d5c2b69"
        },
        "item": {
          "id": "eb6a8b86-08b3-4958-8caf-1c7dc11e9e7c",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "9ce4c43d-f9f5-4626-8ece-7ce13501a6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910662fd-5529-4232-a4f9-aa48239243da",
        "cursor": {
          "ref": "9bbb8b41-e426-4b75-99ef-6d59b8cd5cc3",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "a712f959-397f-4767-b23c-eb6e90577f59"
        },
        "item": {
          "id": "910662fd-5529-4232-a4f9-aa48239243da",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e04c0eed-1940-41bf-abdb-79a40ec66007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 814,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e1f3d8d-cfa3-48a0-94a7-3edd51db9378",
        "cursor": {
          "ref": "4456414b-ab84-48cc-8207-865c4a6b7cce",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "067361ee-3532-4fb6-b995-72375f324aa2"
        },
        "item": {
          "id": "3e1f3d8d-cfa3-48a0-94a7-3edd51db9378",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "fb1345b0-70c2-49eb-bcc2-5db7dd0babd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cb92ec-34e0-424a-918c-2705eac2bcb4",
        "cursor": {
          "ref": "67a3f631-85f8-4673-92bf-7a0135ba81b5",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "677aa866-fff8-42ed-88fd-a053aeb33055"
        },
        "item": {
          "id": "31cb92ec-34e0-424a-918c-2705eac2bcb4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "1ec5cd3f-81ad-4fdd-836f-34dfc4de9537",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f342ce64-808e-49e1-82ac-12e1c49d09da",
        "cursor": {
          "ref": "d6aa2a6d-8546-4750-b436-f80bf46ba023",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "df06054b-2dd1-49b2-bd14-9ca8f94a7dda"
        },
        "item": {
          "id": "f342ce64-808e-49e1-82ac-12e1c49d09da",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "925d86fc-2c5f-4953-bbb8-77643359b663",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e10da662-0d68-4ed9-8bf0-a0c08e991c88",
        "cursor": {
          "ref": "1c71466e-cfb5-4b17-893a-17cf2dbab82e",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "110ef5da-e739-4a91-a512-a1c73078ac0c"
        },
        "item": {
          "id": "e10da662-0d68-4ed9-8bf0-a0c08e991c88",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "e928fd17-bbe4-4f83-ab0c-b91f8d180b84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2ac6707-448d-4839-97b2-8d26c61bd577",
        "cursor": {
          "ref": "62b47597-81fa-4738-bc46-d20ff115bbd6",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "3341d953-ecb0-4e40-8b38-113f44310d9b"
        },
        "item": {
          "id": "c2ac6707-448d-4839-97b2-8d26c61bd577",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "bc581edd-c4ad-4c8d-9026-eb8a01474829",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73a1eac7-8df4-4f98-8785-076f9ae0db5b",
        "cursor": {
          "ref": "ea0eead2-fa0d-4778-968e-4d268ad233b7",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "5c7d6643-687f-4fb2-a0b7-ff5e34fdc916"
        },
        "item": {
          "id": "73a1eac7-8df4-4f98-8785-076f9ae0db5b",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8a9c683d-5f65-45f2-a246-b0ed951ac669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb4835a9-b2e0-4103-8bd6-fcdf0343c9b8",
        "cursor": {
          "ref": "ccb23f57-df2e-48d1-97b8-ec1bc12888d3",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "0e65b589-9069-4732-a9f7-c0f05ec07069"
        },
        "item": {
          "id": "cb4835a9-b2e0-4103-8bd6-fcdf0343c9b8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "22ba02e7-77fc-44d1-92db-15212279e956",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "310f9fef-c9c9-40d8-9a22-fc5bfd6a7f7c",
        "cursor": {
          "ref": "ca8eb6ca-5a01-47bb-8e71-3424fcab0485",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "032ef09a-616d-40fc-a979-6cd94319b8b6"
        },
        "item": {
          "id": "310f9fef-c9c9-40d8-9a22-fc5bfd6a7f7c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "6cff297e-49b1-415b-bbe4-c1b33575d057",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db86602-9485-42ca-8f87-2b39a44f1179",
        "cursor": {
          "ref": "04532edd-a946-424c-933b-41fcb08436a3",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0c35794d-12f9-441e-b6c6-a9a4e2d04aa5"
        },
        "item": {
          "id": "7db86602-9485-42ca-8f87-2b39a44f1179",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b505ac39-1d14-4d1a-9d8f-97b7a9d3767a",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "881de704-af09-4761-9857-daa08bd1e67c",
        "cursor": {
          "ref": "0ecb0fd9-df45-4af9-a075-31f4dca42c3b",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "6d35ba0b-146d-42e6-a143-c079838c1fb6"
        },
        "item": {
          "id": "881de704-af09-4761-9857-daa08bd1e67c",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "0a9e0ce9-0cfc-4eee-bf4e-19eb203ebf81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7301b0d6-2f73-4aba-a63f-16e499397c23",
        "cursor": {
          "ref": "eff879cf-ca24-45bc-866e-67f9de6b1d7e",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2a59cecf-609c-4052-a087-196b267299d4"
        },
        "item": {
          "id": "7301b0d6-2f73-4aba-a63f-16e499397c23",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "54e35943-6473-4f96-9924-6ab97510b484",
          "status": "OK",
          "code": 200,
          "responseTime": 136,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f355bc20-6d1c-4316-bf6b-a12f3fa07169",
        "cursor": {
          "ref": "ea221b03-b165-470f-8f12-a67ca40bde91",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "0ac94548-a9ed-4a66-b9ef-c80185263811"
        },
        "item": {
          "id": "f355bc20-6d1c-4316-bf6b-a12f3fa07169",
          "name": "credentials_verify"
        },
        "response": {
          "id": "348a51a9-9b95-47c2-ac60-10bfa99a202e",
          "status": "OK",
          "code": 200,
          "responseTime": 2886,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fb5629c-252c-4bdb-84f8-fccae3980d23",
        "cursor": {
          "ref": "34b9fd3c-022b-4d91-b5e0-0ea123d70e2f",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b4018cb4-3ea8-46b1-aae7-aacd2a71b13d"
        },
        "item": {
          "id": "9fb5629c-252c-4bdb-84f8-fccae3980d23",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "864bdf95-ac9e-4ee7-a839-9ff5a6d6f5ae",
          "status": "OK",
          "code": 200,
          "responseTime": 4949,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd76c85-a8e1-4d2e-8013-7e8c2f9f4b6e",
        "cursor": {
          "ref": "a1a11009-6dfe-4f2e-863f-18933513c2d1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9f73c532-912a-46a7-ac26-3749a93c528b"
        },
        "item": {
          "id": "cfd76c85-a8e1-4d2e-8013-7e8c2f9f4b6e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "70fafc1d-bcc7-4b2a-b5f9-75cd713474ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cfd76c85-a8e1-4d2e-8013-7e8c2f9f4b6e",
        "cursor": {
          "ref": "a1a11009-6dfe-4f2e-863f-18933513c2d1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9f73c532-912a-46a7-ac26-3749a93c528b"
        },
        "item": {
          "id": "cfd76c85-a8e1-4d2e-8013-7e8c2f9f4b6e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "70fafc1d-bcc7-4b2a-b5f9-75cd713474ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "cfd76c85-a8e1-4d2e-8013-7e8c2f9f4b6e",
        "cursor": {
          "ref": "a1a11009-6dfe-4f2e-863f-18933513c2d1",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "9f73c532-912a-46a7-ac26-3749a93c528b"
        },
        "item": {
          "id": "cfd76c85-a8e1-4d2e-8013-7e8c2f9f4b6e",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "70fafc1d-bcc7-4b2a-b5f9-75cd713474ec",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 63,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "287b469e-b82c-4b89-8183-f77d0d18f108",
        "cursor": {
          "ref": "6d5b641b-6911-4974-a539-2d420fade455",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4d4fe24f-4570-4a06-bf28-4ff6559dab18"
        },
        "item": {
          "id": "287b469e-b82c-4b89-8183-f77d0d18f108",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c303387e-7ba8-43cb-9c04-3e3230913dbd",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "2887729f-f52c-472b-83a6-55862f992f15",
        "cursor": {
          "ref": "9d7372c7-c4bc-4fc9-bfb4-de52423d04f7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "eabb0885-3da0-4fe3-8e9e-454f5980e579"
        },
        "item": {
          "id": "2887729f-f52c-472b-83a6-55862f992f15",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7165cb18-bac7-431a-a87c-7a33f1d7b3d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 96,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2887729f-f52c-472b-83a6-55862f992f15",
        "cursor": {
          "ref": "9d7372c7-c4bc-4fc9-bfb4-de52423d04f7",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "eabb0885-3da0-4fe3-8e9e-454f5980e579"
        },
        "item": {
          "id": "2887729f-f52c-472b-83a6-55862f992f15",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "7165cb18-bac7-431a-a87c-7a33f1d7b3d2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 96,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "9caba916-9d40-481b-9787-acf7444e744d",
        "cursor": {
          "ref": "df0ce008-9a78-4565-a9a6-9c0ce73195a8",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "383a2d54-e42b-48ba-8a36-9c31a50957f8"
        },
        "item": {
          "id": "9caba916-9d40-481b-9787-acf7444e744d",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "c1411ccf-4082-42fc-b27d-bbffd62e9afe",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 245,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "8bef94dc-ff05-4da2-8365-c3944bd07b2c",
        "cursor": {
          "ref": "d2ad19b0-32eb-470f-b777-2d211e61d3e1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7f300446-1c72-4b55-be24-43ea214577f2"
        },
        "item": {
          "id": "8bef94dc-ff05-4da2-8365-c3944bd07b2c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4f5f32ed-1a22-48da-a007-b329d5bbc707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "8bef94dc-ff05-4da2-8365-c3944bd07b2c",
        "cursor": {
          "ref": "d2ad19b0-32eb-470f-b777-2d211e61d3e1",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7f300446-1c72-4b55-be24-43ea214577f2"
        },
        "item": {
          "id": "8bef94dc-ff05-4da2-8365-c3944bd07b2c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4f5f32ed-1a22-48da-a007-b329d5bbc707",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "54d0f858-36bc-4789-ab4b-60e1b1bee6c2",
        "cursor": {
          "ref": "ec2ddac0-e56c-4383-b618-4c19f634f3f2",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "27fc57f7-a38e-40c0-b605-451463146321"
        },
        "item": {
          "id": "54d0f858-36bc-4789-ab4b-60e1b1bee6c2",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "c626f11e-51e2-423f-9af4-a24d0ffd4600",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 173,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}