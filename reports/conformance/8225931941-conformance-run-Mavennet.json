{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "84e6648b-88a8-438f-8be6-82dfb489bfa6",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d11f0488-46e9-4eb7-b7af-431ce9de5c00",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2fcbc514-4d49-4643-949e-b6c697509638",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f5206677-d0b6-4c59-9edb-959fc50c11ce"
                }
              }
            ]
          },
          {
            "id": "22ebf60d-0707-4785-98a3-a180902e56ae",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8012d1d6-8cdf-4f26-892e-e797c88f8d6d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "857def10-1b22-4465-a1c2-1068b07159f8"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "27c0a94e-b4b9-4b4d-b77f-46c8f9e01aec",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "cec5bdea-dd7f-4370-b34f-ff113294e6d7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c014c70b-995d-4788-a15f-b8f01d55e843",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d88a4085-67db-4fad-bcfc-f33a15ac7048",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "71044934-7d6e-4036-9e03-174ea3f89b7e"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1043602b-958f-43b0-a6d9-4cc24e0bfc52",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2c1ff92-8271-4421-8ba8-7c8e3f2df131"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "649a36cf-064b-4858-ad3e-e0844bdffd6b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b7bef661-0e76-49b4-b9fd-e8688fff1acf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9710ca75-c235-4175-9731-03f8fb7662e5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "d02220cf-32a1-441a-98a9-aa8fd9ac930d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "396d40f8-4931-41a1-b2cc-0cfb046c251e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "170d2656-9329-4cab-9a67-391cfbf194fc"
            }
          }
        ]
      },
      {
        "id": "6c4aac86-a004-4b4b-97e7-c396cf22b1fa",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1dbce0d4-a23a-48c8-8e0d-38761262788a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c7205f9-33af-4328-bf01-a4b9e8ca952a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "eba5c169-126e-4cf3-94a4-0bee1f0f761b",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e77650-15f2-497f-b446-be0eebc6bf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb3b7d31-61ad-42eb-a273-18c691568c50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64823cc0-25a4-48b1-8ad7-ef537d6288f9",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e7a06ed-6f21-4074-8f9f-125dc8526144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb0cd6ff-61d4-490c-8f89-41c563d6f6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf7ef261-a2b3-4cd7-9abb-44de39e75530",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0295c2f-06d0-469f-b1da-7312cf89f3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a0f561e3-5fd5-420c-bdd8-248fce7e006c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "cf782415-ba9d-4ad6-b787-d71d1020375b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7d7b53a-7611-4e0a-82dc-a47af6c40adb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608ae31c-cbba-4b22-b552-f0ac08797462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2a302b83-36cc-4103-a984-e2842db01914"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc89b06-fda5-46a6-8222-00b701a0f2ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b19abff0-5937-4a01-ae71-b8a33d1ee8e4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4285a18f-6b53-468a-9669-cc007be20a11",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fdef7db9-738b-480f-830a-1fd9eb5858f7",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16816ae9-b86c-4916-9511-7045ae531df9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "21445de4-a238-4f87-9db1-e7a3444650b4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4351cf14-9d64-460f-86a3-b9160152e9c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "c1db4cdc-9184-41e9-80df-19b6b35c5408"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "880e9f2b-e438-4341-82f0-473809755d9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c314c7d6-8c97-479b-b05e-64fd52966fab"
            }
          }
        ]
      },
      {
        "id": "2c801a33-c944-443e-acdb-188001e8d6c7",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "6daa1b99-c5b7-411f-a8a4-283461a6a519",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2f505c57-0931-40bc-ab7a-7b938e960ff3",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "22f33fc9-4d42-4f9f-beb6-179d9a26f117",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "065b0b2e-33e1-45aa-8627-89f3f31ba387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a06e34f-84f5-497a-898c-ecf1fa507047"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6641405f-91d8-4cb1-bb15-e594c01304ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3b0bc9bb-e1fc-419c-91e0-032d13a922a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34aff79e-0954-43c2-b642-9e75c9f6769a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446b7a58-81c5-42c6-a92c-f627786fbf74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42b28add-ef91-423f-a7ad-18eb686ec9b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b94f92-f85b-4de5-918b-30e3a0066310",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53ad42ba-d3d8-4a2f-8dcf-3f58071cef14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ec3695-6842-4520-a812-a3618eada00b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a699c7-99d3-451c-bc5b-a3cbed36dadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fea2945-87e7-4cb5-a13c-98ef109d6497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f2432c0-76f8-4951-9766-b86582f4918b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed92f2e2-0ee6-449c-9d85-61c2f2f5e0d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7960688-7515-4225-90c6-4d86173bfc63",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b38853bb-2679-468d-9d7a-94616d039c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d40e531-2619-42fe-88e5-3059526e171c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "048ff5f5-c91d-44b4-bee8-6921531967be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a3c0708f-4b68-4e0b-a85b-bf3ed8003fbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddc61c6d-4b17-4f43-a360-be3b2be03d78",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d28bf31-0081-471a-898e-9e358c222f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a2c23a-124c-430e-ad1a-8007adad2eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c595eef4-5c5d-49b6-9117-559996159d7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d45abdf-d0f0-48d1-acc2-ec3db41543a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e652f792-ef81-406f-9390-270431876fbd",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec82b43-82bc-4804-9d61-99169637c5f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58f227c4-9c9e-4a19-b910-355bab2a095f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8dacabc-aa9e-4217-b460-c40c104d4683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d4476d77-0c58-4c7a-a988-43934049846f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b7323c-ec32-4c4b-ad16-fc249e64fb70",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5719a8a1-3448-424a-99e4-a49dbb09e029",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b420e990-68ee-4638-ab37-0402010840c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ceb01c2-42d0-47f4-8c65-8c1dcd143a9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4220c430-d8f9-4635-acfd-cca8282d8e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a47cc9f-be41-4298-9a2a-41ac85ede67e",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabfdc78-e2e3-4240-9301-4538eb60abf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911b334a-0130-465b-8a69-6f8893a87366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a88d8e-c431-4968-b2d7-10694d350ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dddc91ba-9e5f-4ac1-b140-956550927494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9644a0c5-4a8a-4c7e-b440-0f1436885a81",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff4506a-7427-402a-a216-47bf11674891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753991fa-cd5c-4389-9643-c2f19c5791df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "664e6e59-66d4-4d30-9979-ccc93c5ef296",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "46a83523-cff6-439d-8320-fc2212768d4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "207a932b-4e77-4aa6-879e-b54adb8bef96",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c413c1-373a-4846-9ac1-252299142713",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d9bc28-1cf1-4d77-9ed9-bc7a2b845fde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dd3876-bb88-4687-bfb3-2f8317839e9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd3089a2-2b16-4f95-a618-2ad5867a8ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b2a998-45e1-4ce6-ba3d-19b3e0a73023",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8624d6f1-37d5-4f1d-a052-d56110c748f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0e3c5b5-9094-4fe2-88c5-2cf700fd4ed1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1553a72e-1b0e-4ab6-bff7-2c293bcb11e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bac6bbeb-6819-4d0d-8599-6b5c0e44de63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f305b5d7-0ca1-4523-876e-5643769a3be5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebd4e9c2-245f-444e-9f62-f773cd4bb263",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c74f657-24ef-4d0e-a049-cd94c7c26434"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8daa5f5-21e7-44aa-a404-6c3376eb5681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "311262b2-3cf7-448f-9f7f-34d32f7fb926"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6845cba0-ac5d-4d99-a7ae-4c3df4c2828f",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae53d5f3-8b6c-4f41-83c5-28b1698021d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39898f44-ebbe-4eac-bd0a-bf0ff1afc376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29140946-9fcb-447c-93d3-e1224e867e48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca00a301-e583-4062-81a6-f0cee81cb036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfa1f6cb-47e2-412e-a852-7e37bb10f14b",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23320012-3f77-4390-a274-b4c25c656e38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9984072-9ec3-4d5e-a3c7-87eb5494b654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53b38b23-8b56-49d9-a6d4-1260b3533cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e50d4092-a8a6-4dab-adcd-f04262c21360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ab6751-77ae-4ad5-8d85-0ba25dee9dce",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7aa7b3-aac2-41df-a88e-64ba8d0cdc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1807ff1-e401-4192-9800-fe091a1a8b79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0519ab2b-8977-41a9-8bcd-9fcd25f9adb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9061b018-7567-4cd0-b46a-33ed231e3649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac7ff5f-f21d-4121-8afa-ffb074066258",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b72438-6e93-4dc6-b61a-bc94a8890fa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acf38c37-fc9a-40fc-ab27-14ccc90465e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf295e9-9e8b-4219-8c41-b81edf02e0ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2212103a-44f6-4cbb-a445-7e2f8a60a9bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74076b6d-8a88-4319-94df-a3902dfcb3e0",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08438cc9-c8bf-4ddc-9a02-b3dd5ba5514a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383d741c-3881-44df-9bbe-a643d9ffb25b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57e37d09-fe97-482c-849a-20adbb60e845",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "990f7473-ee45-4042-92a9-e54a7a51007e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913ffd42-15c8-4f03-a32c-e12e083cfbad",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "506db8c8-3abf-4e00-bf0d-bb1d5e04c85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "851ea2ba-99c5-499e-93c6-87042bc62a0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4445d892-4858-44d9-b40c-a3f11e7a0f4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cb705fb-5769-4cca-8cae-04fe5ad2c5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c513d6e9-ec83-409f-8979-67f32e1fba59",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "923efc4b-b71a-4548-9883-944ea0243268",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "404ed063-19f5-47ef-9e85-d5f85610d9d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ec0aca-6b72-4d9b-a1fb-5aec385baf22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d17f7aa-534e-4be2-9a1c-b8e64482624b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea807cf8-02a7-4d93-b1cd-5e6814e76948",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "413919da-6b7b-4785-b269-c5db6b21ba39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df85208-6263-448b-92fd-ccce19c3425d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa937445-de91-4eda-8faf-a84c8ee97685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b78925a-f221-43f8-88c4-0f5ce75bb725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5bbc12e-947b-4b69-b1f5-4fe429fe52a4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d5f034-b712-40c8-803e-ea103712ce93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ccb2e4d-09c5-4f17-814c-e10e5eee1ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "014e90be-62e2-43b5-89de-644c26ebd976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "66f856c2-d7cf-49a0-8a22-f708b8a1d42a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0fce80-e96b-4edb-a9e4-3e99e8657748",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c7ee33-6093-4a62-a0ed-54749edc3bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94581a83-3086-45f8-b47e-d091d720e802"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4720e06-d112-4d7d-9d7b-fd8fd91b268d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "87cee9db-cca3-4545-bacc-e0310abf5b6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "864fb3c6-1185-406b-a603-5f12c9d6a43d",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e0d7698-5cb8-407f-97fe-9bc0ecff7c26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "531488c5-fbb3-4f55-8fee-fad2848d93b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6358bf4-4448-45fb-bfb6-dcef9703421f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "faf1e311-b4a8-42c9-b8d7-16c59bad0e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e65593c-af8f-4ad3-8d00-9a022222a870",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "375250b1-2171-43b1-aaa3-07fe17234aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a450e4ec-8914-4800-9991-855b5db4e818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14e5d883-0e45-4e50-8810-c10c986f09b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2615c5f2-bf8e-4ba9-a5e9-dd948e064a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded6bdcd-36e1-48dc-95cf-ddd45d3255c5",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a02a9e8-c037-41c6-bbf8-b602cfe44657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3446f87-9688-4c3b-b801-15e410e1b39e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0febee-6215-4279-b21b-848a4c993851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "aba59624-56b1-4c7f-9695-7cf01d22dfea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adaae2d-d889-48a1-bb6e-e69b41786974",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32a157a5-6c1d-4af3-979b-fd2a0a77234d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8955cd5-013e-40fa-916f-29c29a0b4a43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7baddbcf-5e54-4e28-9349-c5bff568505d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f005c9dc-c608-4366-b59b-c9323851edc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3a9e0c-d8cc-43c1-bc20-c9509dc17a4d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffcce2fe-5820-4c5c-b12d-5d2aeca287d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd0520a3-86d8-4d32-9cce-638ccb87b39a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d431c651-b89d-4994-a5df-204536fbb20f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc4e0af6-cdf3-4966-93fe-99ee4d9741cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04583a39-f85d-46c8-9cd0-7d2bf9608426",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9635a6f4-c608-4b7a-be53-0764a7ba5d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b721e5c4-4b84-429a-9203-61b46c942cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba3934dc-fcab-4010-a2fb-b42bb2ffc511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "203836f0-7d52-4e52-b22d-07457fc52c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e3818c2-b91c-4d18-a232-d1c0e154d46d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "178bcfdc-b0ce-4330-89fb-382fb8ec4618",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2185e0fb-d0af-49ba-9ab4-2cb439188856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db233e8-015b-471f-a1b0-e299ec5a959c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a01aab84-6d3d-401a-baca-ed4422b2436e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ede45c3-3e26-4bef-8917-a9e80a5cc086",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3803a6-c3de-4647-8ea2-9bed5590c051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ebce962-b88d-481b-aafc-e30a712ccd17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80adf5ba-ff8c-4af5-a4d0-14eddf638723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "52ad9c37-8ba8-463a-9222-4e27a289f96d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0151d730-5bb1-4409-be9f-e61770a6679f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff9584e2-60af-403f-a24a-4d58f715c875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ffac4e2e-96d3-4520-bf9b-1bc98725b150"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0905d9-5fa9-4dd9-b11f-b0c584d580c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c8e0166-27e2-401d-9049-6185a70deff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df4ab70b-49f5-4aa0-9f54-3ef2347291c7",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c82bcf2d-07bf-4137-afeb-371a633f3c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9074b689-f225-42e9-8c63-700e9566689a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe6450d-0782-4847-a51f-21abff0c324b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bcb037a-b20b-41de-9add-2f56607d6825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e612f95-2a82-4f7e-ab09-a1d8b478239f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ae94be-3657-40a8-a3f9-bc6d5a4c1cb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dbb1837-4ad9-4e72-82b2-8005d76db4f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892703a1-97ca-46f9-ad08-dc60335ce6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18c7312b-d3a1-4cc9-8d27-f49d04834199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fa11f15-8499-4a8d-87d0-e5f021c476e5",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "098cc60c-55bb-4faf-a251-55962f690431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8965bad4-ff4a-4e4d-980d-beec987fc258"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "796df269-31dd-440a-8e4b-4b0476aa8fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7952c31-fd2c-4bda-ae6e-20212b67772d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0137f8f-7cd7-4eb0-a37b-5b57f1ba515d",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c1cb88-2697-49e1-b8f0-9c6f535a26c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94a0607e-4ec2-4798-9c6d-4d560a764de0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e8b90a0-36fc-41d9-955c-78921db136e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "33857088-def9-4f79-a5f2-d867a130e8b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5873516f-15c5-430b-8142-e22b90d2e854",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0183a33c-221f-4d27-9b19-1fbc3f025dae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "743573c4-809e-4437-8882-c45e3634a172"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a452f764-6f71-4eff-8465-2d8cabf9d839",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c11b43aa-ba1e-46b0-87ea-62876cfe16f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fee10239-f04e-4cd0-a7e4-bcf37fb1e0b6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b5ce50f-b01f-43d7-89c1-ac66abfd349b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ab33b73-7776-4e2d-abca-9154dab900e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edc0b75f-fa32-4845-9c51-be6d4827a9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2590bd12-910d-412d-bc9a-5408cd630924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569dc911-8327-4408-9739-db8532509641",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "754e99a2-dfe8-409d-b502-a5b14a246a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060a05c9-c0b4-4019-b017-145f5fa5b9e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac89de5-8661-4df7-9128-fcdfce37d5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "eabaae95-c926-4c8c-8998-d74f6e118472"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a29d2a-532a-47cb-ba89-a896f50de399",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63af71e3-dc7c-43aa-b738-4bfca981982c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fe6906a-4d5e-44b7-8e72-c48e70842c70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0c6b1ee-4596-40ed-8482-44b7d14d4676",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "548c6ba8-5ef4-4294-9590-0028e9f404c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "791381b6-a4ed-4d67-9cd9-a3c017a1eebe",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b106fd-b38c-49d5-bd9a-8b01f9f3b561",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29aac33f-2716-4dfd-9991-7f67faaa79ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "619f6e79-8063-409c-b36d-adfa0f86fa3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "b706d2fa-5a30-4763-97a8-39edbbee63ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5be832a-9dac-4b0a-8f90-9d3dc905c2be",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "702d9519-18af-44ce-8f72-f07bc61f3bae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e0ab30b-12d7-414d-819c-48222c66fa13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae53819-5f4d-4e42-9de3-e89d48258565",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6722241-bbb4-40e5-b850-9b9a9e76e859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfa45668-510b-495b-8229-99ca21fb176f",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ed654b3-c66a-4400-b784-55d0330d4df9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c786335a-c5c8-42f5-ab98-038b29882288"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dc8e8b8-9521-4127-9ba4-796bd8eba995",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "839f9146-76ed-49bf-80fc-ef0a07cf808c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d431e792-f17d-4060-82ef-3c2f9a074ba4",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7116b02a-940f-432d-b980-97e8c4954ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda59b3b-62d5-4082-a3ea-ea3baaa7ee3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87169e8b-2b52-4aa0-9da7-ff162086fd6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bee3479-aca6-445b-a577-12f8762fba2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea95dbc7-7be0-4bee-ad72-b8460ee6ac22",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f347698-9749-4c37-a847-1cb516a5f5e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f5e25f-57cc-4ba2-8299-94535a92977c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0b60feb-86d2-4f58-9017-26c112ca0a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "c1e975a6-b66c-460e-9c17-fae4a0bf2813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd42a44-42ef-4aef-88ca-dd9ccb1f6245",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f80b5d22-5041-4e10-beb4-959a76f230c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48914374-7003-4322-a208-c448aa411baf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4088dd5-6ff7-4324-b38b-3669a29e215a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4b8dc4-ae0b-4788-b3c6-c718e85df80f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8d617b-6b90-40b2-97e0-0a4237be43ac",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81138a17-b73a-42de-8b70-0d3fd78de7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33eedc6-39d6-4cd8-a11b-bb7f54be081f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1a0203-8ba8-4238-ae21-f826434c1c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "61f6cae1-7853-4577-a4bb-e96a07ba80ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22d4806-033d-4f9a-9771-8db11fa323ac",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca53d89d-67f5-44ac-9b45-4c91de172e16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a340a472-9470-414e-8cdf-473e65dcf54b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08db6e3c-0c62-42ce-84dc-341dfa352442",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e318ad7-3b5a-43db-9bda-0b8872ea965c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78bfc364-bbc0-4682-aee9-b2d1a8778c5a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b844a636-5780-4d47-a9a0-8d0ea454065f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "181b3d4f-3834-4581-9e94-4d1132b9f899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61b81c43-eb41-4123-8890-915fdd9050e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1c2a92-d5f8-47eb-9a3f-ab2aba987bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7f677a-9a6a-47a2-88b8-7c5a6b21c856",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969caf29-527a-4638-b6c8-d8ef82af8721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0dafc73b-df74-48ee-8673-570e39fab157"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14ed8c90-910c-431b-9506-67bd2c2e432e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "efc3f221-9805-4d1f-8be0-f552fe039b2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe1e186b-1a5e-4b36-b2a1-4f13ab362251",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fb3e27-c7cb-46d5-b9db-63ca37248aca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c37c6d6-1ceb-41f5-ba9b-007d4659e1a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67ac0106-ad7c-448c-b632-a7e6e2f9f290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9cfd2bd2-2f5c-4b19-a7ef-d82c089f07f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1755fa84-4822-43eb-adb0-1f0770453b09",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b1c3273-ec7e-43f9-888e-0b5eb7cc9a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba5458f4-c065-4d28-9433-28317d295c0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f604ee-6c59-4a93-b7f4-f20fab2d6131",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "efee0a79-b67c-41eb-bcef-ede8feb93a41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0393d3b8-da2d-4d25-ad29-8d76e37cdd54",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86eace24-e8c4-4be0-8134-b6c95ca970fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ad391d1-f376-44ba-94a4-17c7a7653a00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce08980e-f845-4e2a-b978-5c05430cb50d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5525b23d-1604-40e9-9093-210906571f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dec3e5f3-43db-4680-a5db-8dc2ffe8f348",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a887afe-6866-434d-a776-d9c511cba2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a42c21a3-5a37-4b86-931f-71622ce171c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd6b34e9-4148-4692-b73a-f31fb22fdc4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3be8574c-9e48-45f5-a9b2-ba5aa26b9ba7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4131ff38-32e4-4bd8-bf29-909b262a9b6c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae4af3cc-9cd7-4b72-8c30-187bc4224f71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8568e7-32e1-4c70-bc48-c480050cac63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "323919e5-7a16-47f7-909c-ca283d2e2d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4bcb0d00-1c6c-4a95-b677-3d2855d17e82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2144b5db-0a50-40e0-a1da-0f749b418097",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "630eaf00-763c-4f5d-b2b5-30de7caad654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330e87fb-7517-476f-a70a-a21719210840"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc5a2aa-8e0d-40b8-a443-68ec0724736b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da0283a9-10f2-4ee2-9cef-f1b4536398cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcb0e1d5-bfbb-4927-8e69-8523f8f1800a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad9201cd-8d3e-439b-852e-16bb30b9787c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b39b23e-2888-45e7-9f58-fecf16e5d6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5129810b-ae20-4190-8fbf-cd5dd54ed57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "50280995-cbc0-404a-bd3f-d4e0a8d8a230"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68321327-7295-4222-acc9-05654528486c",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32610b1b-a416-45bb-bc1c-f267236b8089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04fd4e4a-7513-4271-b260-953ed9df5c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "616e6492-36c5-468a-bcb2-43939b58a3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e3ec092-c35b-4940-b555-655f353b2eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c8c4e3-79e2-4079-91db-60a666fa8f2f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9410568-ea02-47e4-9022-26e9e0f482a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7c4dbd2-c91e-4190-b6c9-a4a298859bf0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a07f08c-5adb-46db-ba4e-95a21ace36a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9434ede3-b82d-4277-aa53-349fc5d0f234"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44264b4-79af-4637-86db-2e07af43582e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0ba0559-c4f6-4339-9e51-76916535b791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5216f45-2b6f-4340-90b7-08e054d4455b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327ae2b5-d76b-4311-bfe7-7d518e2bfd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2e4408ba-2b1e-43b1-a13b-8fc8dd4a438a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a99cda6-0e29-402f-ac2e-263df5b3e225",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e39086-487f-425d-81ea-66f7105f7704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d86a9f-9e15-4edb-94ec-7f94858a29ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcf84ac1-4a29-4b6b-b303-292e8fd7cb5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "711048a0-c862-4bb7-821e-f91e070f0d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d96e35-91fb-4c31-973c-a113b837dd9e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f07c3d6e-84be-4eff-9dac-251234b85d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79cda4c-a64e-4ca5-94c0-9da76e8337c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bbc17bf-d681-42b1-ae95-321310d8e56d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "eecb1821-0e47-4c53-a444-39af545456a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a964340-2538-4cd3-9740-d45759ea2dc2",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a45d81b0-7837-4fe9-be00-f83265ebdf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25b50ca6-cd6e-40b2-a3a7-521f194312ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8266329-0a50-48fa-a8af-97647cda5951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d91c6a91-2d07-4e92-8239-9de8f0ade2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3308de1-d78f-4527-bc98-7908d66283d3",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "320e1a87-29b9-436e-86c6-302f227d8944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0060217c-416f-462d-944e-a57b86941546"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c13c5694-f555-4bad-809c-2a61ff5d0d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "01c21040-226a-4a81-80ee-8c82d0b8393d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09de2be1-df11-4611-bce2-0cac2d2cfcf5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1229ae73-a9bb-4721-83b6-6bf07ec9682f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85bad6b1-b081-4853-816b-d4eab97dbc38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd43e623-fce7-49bb-9f2e-bb166677da16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "943524bb-2679-498d-bb62-4980184e6dab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b825609-2439-428c-be7d-c589dcf5d739",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd90fa7-04d4-494f-84be-9f63d6a28945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b796e4c-7850-41b0-a602-35b11b88798e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfcdf25-a8ae-43ba-a66e-68fb54133600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "85471db3-0c83-4adf-bc6b-5cc16e0861ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19e34d2e-92f3-4aae-b196-0e1b042a1a39",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742e02ad-954b-47d8-a039-c8d9fed9de4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e15a750-a279-4cd3-933e-b9c00b7f9d9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33d9bf7f-932f-422f-9f26-886bce2d2c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0dde5ec-3aa2-47c2-8224-f97067aabb19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "309c58a1-eca0-495f-a1d3-dc992c1e255e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad76fb4-771c-4222-8555-7768c00e6b88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6badcd74-b0eb-47e4-8cbb-899598c953bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec5a81e-d8f2-422f-85a0-5d9cab504092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b9b50f2-e7ee-476c-b9a5-e7748212ebc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ecff466-d2a2-4165-98d4-7979ae62e236",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae2e91e-c89b-4f06-b67a-4482c80d6cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f91e2b5d-965b-4b09-8711-d5a7678bc7b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f591b6ea-f983-4ba5-874e-ca140eec0659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8fa033a-0ef9-425e-903f-18fd7d1deb14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c5d1d7d-88f7-4d09-993e-4d22a4d53e71",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1a765e-0fc1-4763-a9d1-92d682174574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f12a4f5b-9fd6-47e1-a89d-13e935e96cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68de7148-6e45-48c8-869a-e27b2cd58e95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edafa744-d2c3-4cda-b5e4-d9d53b1122d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a03ac45-75fa-40fd-9cc5-d74d3d59b96a",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdb31f95-b9f7-42f1-9c90-09967ed01bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb2af78c-8dc1-4cf7-8900-038356511906"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4e8731-0e09-424d-9555-0924b7a0646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f204d3c4-c11e-4900-a85f-869f9c4eba69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f026f64f-edca-47ed-b39a-d0a839ac7dde",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52c607de-6180-451c-b496-cb49fd9e2291",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb7e706-cc3f-4e26-81a1-0421c0dc1447"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7159fabb-0fc1-4830-afde-4e7572005ed9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1dcd88-0a76-4ffb-945c-55efe8f2b239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb24e8be-c083-4ae1-9f6f-60ed19acba92",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac14c725-85ce-4663-aab3-752ffdfabcc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec565af-c377-4a24-8854-6fe46a0d3fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff69b4f0-b7dc-40f5-b952-34317ffe799b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a6b03eb-500a-4dc3-8389-701ee2a7dbce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e62ed7b0-c715-49ee-b84e-ac7d9b6cb491",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d151b165-b882-4461-b6f2-8e30d4cb661c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05690596-431a-4f54-9d94-b24ea33e1885"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a505909c-9733-41a3-b2b5-415bd8922518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f2306170-c585-424a-a446-7a27c7f6895c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6052d331-1aff-43de-aa08-b2b3595c8849",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f02c4070-4dac-4d51-aa55-500428ee6ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a378dea-4783-4448-90b6-79aa56725e3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326fae37-9f30-4c9c-b1ac-a58305a99ed0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "13ab886b-ff3d-41e6-8309-f91b3e17250b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fb51998-b4aa-4eea-8168-d2130852c9bf",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2620a02e-026f-459a-86a0-03f736f8d8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fc3f16f-f1f0-4752-894c-bb900ce8332d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490da5ac-f6ae-421a-92e0-a18fbc7dd6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d3002c4e-c7f6-4919-9265-beec571e79b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ce82a7-73c1-4bfd-ad26-707f87b45031",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77a526de-2087-4e2d-99ec-41d8523a3fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768a2d78-ffa9-4bd9-aa45-c2e49dc4289e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bb875b1-669c-4e21-ba06-7d2394a2999b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0025c9ac-ab6d-4790-a56e-557d827cd86b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f3b5411-c2a3-454d-99bf-cca106951ec9",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aba74fc-e13e-4248-82c2-90c0cf197923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723f905d-4d95-49a7-b4f8-8065804cc143"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e61ec31-517c-44a1-90b0-44ab194ebe3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "63829a62-e456-442e-b245-35a0affef7f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8d4aacc-ffe9-4348-a0df-2d83ff6522fb",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78f0df6-efda-4b09-b67e-cd2d48078add",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0348bd3a-cf1e-46a8-9d57-0ccf7ff92d66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5421870f-011e-4e8c-88c7-5d46fb620ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f329151-add1-49b6-bb2f-8aba30deedfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f10950a7-5716-4c7d-a45a-68e855c8332e",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82b8802-04e1-4459-8b9d-a8c6f83fe79d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7778e0c0-a0b6-4265-8278-af58827bc736"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ea28d6-0104-46bb-a6eb-c697bd761ed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2d3c21aa-af31-4fd5-ba55-dd094883dfa9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b22f0a4c-6453-46c1-a2f6-df1373c1d35f",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "374a398f-7902-4b40-b136-036e155e1cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27c48d9c-0801-4a94-ab22-9b56f90fb28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e4bb68-3fcb-42eb-98c3-bb5e57ee3bdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "22ffcfc4-32fa-41ef-9c0b-c72a38c041f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a6905ed-100c-4a4b-98a6-f2609542f152",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df4e123-a6ed-413d-8849-b2342c7c5570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "faacaf3d-cd46-402a-85a2-772d07579496"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a76b87c-0620-43ea-b125-feb65c9f59bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb41cce-4a58-494c-96ad-03cdc93ca719"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e74b8995-c755-4526-aecf-5f3359ba72d7",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96d4a2b0-3de2-4178-9cd7-b5ec90c49874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a81d208a-8b6d-4bab-aa6d-eb16f1ae4300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a55a43e-0da7-4c77-a917-4c3371eafc44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dfb97ef-28eb-4d0f-afd0-56a7221a65d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7cf914a-a0e2-4c44-ba89-76f9efd1718f",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "617cd77f-5682-46a6-9d6d-18d92b585dd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1470694-0f1d-45a0-8cbf-ee61c8be94cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29227d31-6fd5-474f-a7b5-f35802197d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "90e9c60b-eff3-4ea0-8a65-8330fb92ce18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe2af62e-d2c6-4603-b0e4-d68e4707511c",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f73c103a-b444-450a-b630-5e5360721346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52443d51-baca-452f-ac75-eb58ced89c45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "493b31e5-4245-46f5-b903-6d3e6d5a6740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1093aed6-d646-4285-b21a-ee578112df32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4519c1a8-905d-4384-b41d-a7e6f69917b6",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb6ea49-bbc8-44e8-82a8-01b6809da781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2a2f5a-0985-467a-952b-4892ccf734b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d4d0d8-1cd5-4b96-8894-2a1a23eb410b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e197cd03-7143-4b77-b16c-13301a6f2192"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5da03773-73f8-45f5-a49c-b7ece19b2b33",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4769ce3a-814c-4efb-b0e5-11bd44a07d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b018dad-b8ad-41bf-95bc-551e08ea001d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ce1cd1c-1289-4426-bd75-9bd9468c746b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "00f1b40b-4959-4225-a877-7793130347e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a72fb13a-b7ef-4c75-aed6-33d89dcf2330",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5bd710f-5ede-44cc-993b-36829b931fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0491a5c-1fc9-475c-a397-414343fae612"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dbfc247-0d5e-42ca-9bdd-4921f5748dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce159f4-24d7-49db-8a4a-e9700c12bfa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4054875-74c4-4004-a2c2-72afd3cb30e6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb2d3b52-e741-4737-b736-cfb1e21079bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c542d15-3754-43f9-8cf0-92123bfd36a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa12e7ca-aad9-4526-a0a2-927e2a1a1fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "160c9d3d-d2b0-4676-857d-9adbada95d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed249ab8-2db8-4d27-b3d3-d47d90de331c",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b372ae-387e-4100-9666-cd99ec9136ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8dfb7de0-179f-4be7-a0f5-12b599cc3a23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1473087f-dca3-4fc0-a176-dff74c7005a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "bc123bd0-4e26-41ee-b640-15edf2f0cf59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc2de2ca-aae5-437e-b34e-2417b1ce9957",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0748cff0-3b37-4442-952a-41d7289a82a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c65d09f3-a270-49b1-afe6-9f2751f82cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a559214e-a1cc-445a-8287-e02bea2d65d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "68c05177-72a1-4c52-b9b5-d0a09938a7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e6148f-4d04-45a5-afe2-357a178e34b2",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc805a2-5e15-4257-b850-75561e39c18e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67129ce3-4c11-4e2f-af21-b8a02f1d6fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62e4d3ca-1db0-4ea8-9bf4-7ef750da35f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a383cb28-19c9-441f-9406-5326248c685e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925a6185-bed3-44a6-8453-64d39ad5beb8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94894219-0fb2-47b4-8b93-edabb8acfca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8b7ab419-de83-4bf5-a642-c7fdf6e812c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d808a00b-39f3-40f8-b5c1-b232ff8f9320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f1f1de3-e911-4511-85fd-b993ee614a69"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "05ffdc21-a0fe-464b-948f-b5e4bed36826",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4303c438-63f5-460f-bd5e-c7d2f3b7c3e9",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e8b6ce7-1156-4d27-ad3f-8a7c820ada1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8af2bab0-c642-4571-836f-d55e66e6ca30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2e29041-ae06-44b0-b55b-a0fe5561e02f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d554fa3-d216-4ea4-b8fc-0a197ba077d6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "30f32ee4-d635-44f4-b26f-0a5ed9ebaee2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23a33873-145f-41bd-b244-346ca756bc21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "65bef3f4-fb43-4c12-9f95-078ac197bf5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6f08c3b-f567-4b87-a3cb-6fd300d96af9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d19ae31-7876-4d42-a4b0-4a9e6664b828",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4dcf93c2-b261-41b7-a592-ef30675fc236"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "973beb36-11e5-49ac-9966-3bdee0eecf41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c8d438c5-61de-4835-91d0-368aeb01446e"
                }
              }
            ]
          },
          {
            "id": "44733ac0-b000-45b9-b8ab-e95bc8b9d58e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "629d4b80-f4e9-404f-a879-c6e53fc1a030",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "00ed5251-1d75-487c-b1b3-03da84f8066f",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b921a6-8e5e-48f0-8f64-1604a39e2714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "c21e04d6-6a5b-42b9-ac31-72a313f9fea3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6232a877-d2f3-4308-84a0-cbde37c2dab0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f31cd3b3-21e1-4cdc-ba6b-04c51d4f25ea"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "498ec2a4-79d6-45f5-88ed-24fbbf92e9bd",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "314c49b8-10f5-4460-a6f8-6687ce5de3cf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cc1eebe-2196-4b5c-99a0-7c7c0db89da9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "314c9532-f04f-4102-9e28-0f4d61d529c6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9ec93f4e-ef31-46db-9670-1920b72fbec7"
                    }
                  }
                ]
              },
              {
                "id": "704f1318-f40e-4e98-9038-52bd132317ac",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c54fc8e5-646c-477c-9747-92f2aaf4b464",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e3b9886c-924b-42d0-ade5-6e68dc84e544"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4762747e-a660-41df-bd9c-a2ebe7473bb3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5f3268c7-d62f-4cc1-8dad-13002fd6fd84"
                    }
                  }
                ]
              },
              {
                "id": "f48ec2e1-b540-43c0-aebb-b82f83d5cdc2",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "08f6e28d-de6d-43b5-b70d-7efd102d189c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cf741e2a-7813-4459-aac4-295a14bbead6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c6d5ec5-a487-4b59-bea2-ae4951269667",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d9d227c3-80cc-4d5e-8617-b4a1eb806e37"
                    }
                  }
                ]
              },
              {
                "id": "fb4d5577-9f87-4696-bcc3-f5e09048224c",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a7f020a-784f-4fb0-acb4-37441630e3c3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1a189b0f-7eab-41c1-bee3-102eadfd00fa"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4784770d-04f1-4c53-ad60-0e95a813a4b7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "0daee316-b6f1-4fa2-b369-7c2bbc2b8b71"
                    }
                  }
                ]
              },
              {
                "id": "de2a2275-29a2-41cc-a0e6-7026cce2d4a1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cb51e34f-c4b3-429c-b345-9c496908c3cd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e6819996-c431-49fb-bcd9-282a8f4e8f55"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c480e2bb-e08a-4802-934d-a543973aac12",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "2044f52e-d759-44e1-a8b5-3fad9e56b84b"
                    }
                  }
                ]
              },
              {
                "id": "504300e3-6e75-45ea-9b73-f69652e6c5b0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c847b66-cdd7-4d94-bec7-b99a9a1f41db",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b54f3ae8-2470-4477-bc46-df44a49dad41"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92ddccc1-d5bc-4b96-81ce-d24495da2c80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a0488a67-ec1b-42a1-9a33-ee084814a839"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "36cc4bc8-267a-4441-8438-bfb6a83085ba",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef701ec2-eb4a-41ba-ba63-bb1c83beff1a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "0e9ebc1e-b1eb-4822-9e12-c837f445732d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45fba806-3aaa-4ac5-9f80-888a6650d460"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cba80b6-7e64-406a-a63c-fe68dba8ef7a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "1f7bc2a5-3335-42c7-a7ea-6473f405cf99"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3cf2114a-85e9-447a-8e70-1cc311d42978",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e3320916-0ee4-45b3-9a2f-c6c0a2255720"
            }
          }
        ]
      },
      {
        "id": "13c880b6-4026-4128-a64b-fd216967c820",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "8b202739-fdfb-4569-814b-5b191bb17116",
            "name": "Negative Testing",
            "item": [
              {
                "id": "56440b66-0b24-4980-bdad-54661843adaf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3f7567ed-7c73-4573-bdb5-44419cacf220",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdff0ea1-5fd1-4e7e-9c0b-4a01f1fb0991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7188004-d8fb-4bb9-8ad6-7c3aeec55786"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0c82ab-d5b6-42b2-85a6-1587797db8f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "fedfdac1-42c3-4adc-999b-0f5d5662f933"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f8803b8-0366-4b4c-8539-2a40fcf2f4cb",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84896188-fb6e-4181-a5db-b8ba24a7d15f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08f86270-9ce1-4153-9dca-df5d73b85c2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "931561f3-f422-4728-a79e-b20a6b5e6d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98495b92-e7ce-496a-b2dc-eb5d92b9ff8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b17a7710-0d90-4127-aa70-1e68db3cfcc9",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5507b5e7-ab2f-4b9a-a413-99f80fb0cf8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723b92ce-cff1-4fed-9ddd-31abc94ba61c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443754eb-d695-4483-9936-180d1462dbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ab2d7f2-9208-4a24-b569-49e3c0f0f72f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56ccbcda-01a2-4944-b552-43eac4aca791",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b5aa286-564a-4491-90cf-307d1eca38fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1f8bbc-f01a-4010-b2d3-b8107fe948b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e78f4fe-787f-4f53-8192-ba7131638d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "29d52037-c2fb-44fe-a33e-6340abbc1c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4c05085-540c-49ce-b251-2d4b44702a54",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e70eb37-00a9-4df9-bc7a-b5ec0974fd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34c71d88-dafd-4073-b472-59dbc6d7e7fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa18517e-a3a8-435e-90ec-f91e3ecf995c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b7bd4a-0eff-49b8-b606-b2aa64a480e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c42667b-c7d5-4d3d-830c-5ab38a216736",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe59268c-88ef-41d5-bea7-9fdc545e3db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc4c4c99-5ecb-4e97-9aab-37a980267cbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578d7d9e-cf4a-40dd-b87e-4e6cc50c60c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8c9fbc3d-1327-433f-88f6-e3c55c191edd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e48f0681-a91f-4f40-aabd-ea23ba189046",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9049e3-2f18-44cb-a6ed-fc9149a4c6ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3cade21-a89b-41bd-8cad-b537e2c389ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beee4a9a-c36b-4cac-96e8-3a33745b23a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3de00605-fe1d-4c78-97a4-ad9ec0538084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c9ecf29-c20e-4829-bfc2-52b8e9251aa5",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9246bca1-2a0c-4597-bbe5-2a0e2d0c7c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5557dfe-3aa7-4ad5-8209-f1dcaa258f90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efb4ca30-c302-46f9-ba5e-3131713283a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "640cb13e-010c-4406-894c-5bd270ba8b0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ef5e519-106d-4b58-a2db-710d62deeb33",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8a00228-c105-4601-8739-10c58cf22e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c4f569-582d-4869-b89a-304c0eed67b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa25fd9-c3ee-47c6-9e38-1098dc6b0822",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7baf3d2d-8248-42e3-894d-d582ec21567e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9c98fc7-7312-403a-bbf8-846cb8f1da90",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a411f59-8df9-46f9-b8cd-c2a1aa2a22c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2f751c4-6a6e-4fd5-ac4b-3d61543549b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d496da61-3a44-4e9d-8161-523fcf7e7ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aa18b22b-5053-4c88-931b-43b85d49f504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813e096f-3a09-4047-a1c9-0941184268e5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c06629-d848-4c3a-9fa5-27fa793864a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b1a919f-9a3d-42b5-8083-8620ffb9f7c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49aeba8a-2e70-4cae-9978-b7293b861b29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "e6f91eae-f928-4fa1-be77-bffb70b72781"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f845816f-4ef1-4a27-a6c4-6185a6058630",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde6d292-c940-4d9d-b632-027837816a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90c6d9c8-7314-4f6b-b9b7-60d8e4e5cab9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9cff72c-87ba-4645-b662-9e8b3a7aa369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1362dd7e-7976-4c15-abc9-ca4a105f4128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c767873b-f19b-4eca-9786-70eda98dc4b3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d755f707-55dd-41a4-b612-c4902f0eed4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e738ebbb-483e-46a9-88c4-dae26edb8768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e6567e4-7cd2-4a94-964f-7b6b52ad2ce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a329fcab-cfc6-4d1b-a968-31607b34d305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7b6b27e-aaaa-4b67-9c9e-2ecd187ed934",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8688cbd-7c93-4346-a76d-6d8cf389bcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6885cc24-dc87-4c16-9a39-bbdd9725ec8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6152123-4e1a-40ce-a2c7-699a193886a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2149c243-1db6-4311-bb17-3a4ecb44a0c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67c75a78-9cce-47ab-be39-5f0c76cfc01e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae8c0b9f-5f7e-403a-be51-5883f3c7dd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5c9d8e5-27be-4ef3-9b52-37ad06a95d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "488bda29-d59a-46d4-97d4-0e1de80cfbf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "98784fa4-d7aa-4876-884a-9bdace9c4882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fdc90c8-9bd6-4191-899d-7653ff446aad",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db26266-affa-4b6e-a815-89f77a017d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04544519-1ea3-4435-bf9a-ca00988e8ba9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c02da1-420e-434f-95fa-3b9495caef1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "bf70c676-65dd-41fe-8539-40100e6e5743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ae6809-0aac-493f-8e00-e763db4a46d6",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4254b07-8ce0-49d1-bd17-b3392168f731",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f439136f-301c-45b7-862f-48ca9cafa207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e40b1f-ea48-4fe9-a115-f8f803d1732f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "39164319-6322-48ab-acb3-b6dfcdf0b451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25bc4fa0-3736-40b6-9e46-0f14fa02caa0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad24be0c-f664-43c0-8f52-107ade4f8588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d916efd2-82d7-4ddb-891a-ff3ea2d868e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "667bd60c-9493-4ea9-8338-6f905a1e4a65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a3d2bcd-18ff-47d3-86bc-a739c8d08d92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6abade0-2b89-417a-86d7-000eb8f32733",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4963315-c1ca-4168-80f0-613e9451dfe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7501aaf-8656-486f-b6a7-a1fb317490dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f23a1dbc-db86-479d-b969-df5f904bcc84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e0bb2a5-ed39-41cb-bb60-8df13c606461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc6843c-b49d-4210-8c5d-7f587cd0b93a",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bc88ac0-70de-4d84-9302-06c8a45f3275",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b11e8d2-b44a-4bac-8323-fa8d363f0653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dafd37bd-ccca-4f90-aa1f-add60eebc80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ea94c58-2dcf-4576-b99e-5ddaad8e619f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f90109ad-f2a5-4560-9e54-33bd70eea7ce",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eee67e58-767f-4f55-a969-a4af3dfbf1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c01a8d-5889-4a8d-84b9-436de16c761e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8cef5d-dad5-4c07-be53-4bbe3d37830e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b32a1e6-2837-4bfe-b881-02cda02aea3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f18c754a-317d-4b11-9393-afdb21aad374",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cd4e850-68be-46b1-84a4-c44eed890381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e13b59be-fa75-4003-9d76-f5d8b28a86b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a363fd06-b217-404c-bdb2-5bece407c4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "46ebd532-294f-4983-b3f6-1071c59d5794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e4b5be-1e58-4d46-9131-61d5dc8f0fd1",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959511b7-7a2a-40b1-89d8-55b911429c58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69eaeb35-7e38-492f-bf50-a39ee81c8ab6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c5fb9f6-6f2e-4ab7-9535-4062998cc4e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "50be4c4c-5ca0-4eba-9bd7-537ed3d646d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d388672a-080e-4ea4-bb2a-99d9db1bb568",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ea70669-e6c8-4def-bb1a-be4efc5a27b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe5038e-2ac1-49e9-8bc1-9aacb2815768"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88885ec5-d735-47b1-98c6-0cc899146c19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e705f5c-1cea-4964-bd8c-2ddc23170dcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36af3dd0-0127-4234-9e1b-693bc806afa7",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766abfce-9174-4534-ad78-cc1f77b2cfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d74e6d9-4c55-4e3b-a3a5-a26c90bb71f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c332779a-e64f-4c49-844b-83ed225f422a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d52dd0a2-e9a9-4594-a693-dfd216cae489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "810144e8-640a-49b0-bfb5-6a6705c6b4ee",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa45f77-3ffd-448e-8572-a7499de48991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "635f3ba5-25f3-4d9c-9106-6ff9ee5d95b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def9ed16-95c2-465d-bc5b-1a5cc1f84c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0243f7b-2d64-43dd-8012-d5013930a5cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "719b4ecc-1c1e-4d5c-9cf3-8b660fc891bf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea15a8fd-f628-4653-bd1e-cbf8bed63a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3c37002-7a95-4270-abc8-6511aee6d6b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86af01fd-27c7-4fac-b089-0205937b65ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6535fc2b-6ff7-4d13-a4c5-8fda1c5b47e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5656faa3-ff60-4c27-9252-d600138f5b22",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62c6ae27-1894-482e-bd91-700a03942cf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e41a8c66-4d89-4911-bd19-b1717709b87c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b007e89d-362b-4cc3-9ee9-4f984933993e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3842d709-1dc2-421d-b201-a34f5ba54ab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd8fadb4-0c72-4b8c-9a29-3ba202651818",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae145443-658e-4317-87df-b84ea4379779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27565d6a-ca54-41bb-b3f1-1dcec4b6e92f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484fee18-4f23-4c7b-85e8-4216cee64c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e125a69-8b55-4912-be05-0283fad16b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1e66c0-da77-46b4-9100-2061a175e9c8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa8a3ac-780c-49bc-891a-5f9ab6155178",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312dc9af-8730-404b-ad53-df6a506b8640"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c98d1591-a1a0-47c5-b8b0-d2a87c357e97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a788e71-204a-479c-b080-234058f3199c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd37599a-90ea-4a47-8087-2e780e45de26",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abb754f-9d33-4680-947e-ed2b94173a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b87429b-4f7a-4118-a3d1-932d911e7532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e60e1613-01b6-4327-80d0-b0f671cd9841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3de1569-93e2-4ac4-a8c6-3ea7892f5f15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f591e2d3-34d2-4fcb-ae0b-7810f52a51cb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1666bbc6-1889-483a-a25e-01ff99026257",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b369aaa-b5a3-470b-aeef-07a582602a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da6bb324-87b8-43b1-8e0c-628b71589cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b23ac15c-bf03-4afa-b296-605567e353b0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c6c6403c-dc42-44f7-91cb-f2f38cb8a359",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f5cd3184-5dd2-4555-a981-84f3645d36f7",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44540077-2f65-4a58-8f57-dfd81f304f0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "05f8e9ff-0bfe-4ef0-b26f-84fd732a935e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff2af686-541a-4ce2-bdef-610e66d627be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d91b3f45-01ab-4380-80a6-de8d659e0184"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f782e249-2c99-4408-83ab-308d40d55e05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "12e8f477-2995-4e57-89c5-49db199c84cc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9399caa-466f-46a4-b432-f5bfbdce4e1b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "eb1bf194-a4a9-4a71-be3b-cdc655188a49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60764fe1-2a74-433f-bc93-d2475fbbcdc2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f175e7ee-5e7f-462f-b4b4-5eb485fcb0c4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "91657235-1564-4255-ad1c-6884c63e095e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7bb442c5-fa62-4cd8-897a-4a62b913ed7d"
            }
          }
        ]
      },
      {
        "id": "43de62b4-667c-4b0e-82b5-cf2164850e8c",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "bc79f888-c74c-490b-8c8a-c5c3da74c614",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c443651-a7c5-4b33-a355-ba1020e629ea",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "14f344b6-8d0e-4bb1-b965-2e4faa31c590",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9370efeb-09fa-4134-8091-1a276ccd6013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be3db7ab-6da4-467e-b209-cc468008f9d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e199390-9c4f-43f1-be13-edfb3fdd36fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "069341c1-d750-48da-a490-67a012d477f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662d1489-9829-4691-90ae-f3fe91fc65b6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa03ed3f-92c4-4d6d-bc54-6448610e3104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6669ded7-84e1-4890-8c08-93123a8e228c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef685e1a-f32e-4921-93aa-dafeb869de81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "52a6a789-f6ec-4efc-8aa2-6d90012c095a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b9deba7-3d12-401e-ba7c-1fb8bf845004",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56c3ee28-745a-4475-8143-2cafd77b8ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4053fbd0-ea09-41d4-ab08-2d84decd899e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2678febf-df68-444a-97d3-9ba722c2717b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4088e733-b96a-4933-b634-eac15bfe9089"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a47fcf85-1eac-40d6-81be-4293ac1530a7",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49bb4731-fd78-4f23-9009-66ca64035512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d669ee91-9864-460a-b47d-7050bef7acaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1325feac-16cf-4dab-ab1b-8673867e9d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e76ce67a-095d-44be-87cd-982cf6cdd912"
                        }
                      }
                    ]
                  },
                  {
                    "id": "079e5b4b-8751-4f2c-8a5c-a722fbd714c5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3970a04a-b629-471a-9299-332d4b9434e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7136655-868d-4c28-b7c0-70c90ddb6a83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d718efa3-5d67-469b-b1e0-5d51481cab21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a72f71cc-1cfb-45cc-8354-2fe64fa81618"
                        }
                      }
                    ]
                  },
                  {
                    "id": "112723a2-7fef-4317-a2c3-3b7d96ce2c7e",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a38e9ab-b8ff-460b-804b-4555056a667e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1008d2f0-176e-4ab9-91c9-ebec8e14ff11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa12c08e-5da0-449d-9914-88b00dac2683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d46d6f15-4b4b-4d38-b256-08734869d5bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbda330b-ff0b-4ddf-9f7a-7ff4cce005d9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "618b2caf-23ee-486f-8cdf-db3b201baf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "facb1bff-a82c-478d-9d44-2c72472a61ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238c35e6-e3db-4329-bb40-fc38fedf31ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ff8f52a3-7cba-47c0-b443-c358717c462b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c8c547-f586-4f76-a25d-7107dc7b8991",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d0d4ed-7d0b-4a56-a1f6-53b80ee48ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45ef7ab0-793c-4c9b-80b1-bcb6fea7ff6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83560760-99b9-4efd-986e-b2fe84d72dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "812ed423-aa14-45a4-8278-b49ea72b530a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99bfd062-3539-46f8-b893-61be8abc9b9e",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c624c9c-b538-4bb2-8b8e-527d289706f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d23197e0-6507-44b6-8aa9-3ac92005ecc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf9b328-0a53-49b9-9228-785252885d7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57c28773-b033-4671-b23c-b0412a7d22af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66b559d4-3117-4be0-b01a-7f72d7485335",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7b66e3e-7c97-4dbd-94f0-4cc856519a37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a86418e-046f-4de5-bb00-01cd228f90ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fdf095f-de63-42b3-9829-50375bc30483",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b0af195-9dd9-418a-a421-32bd6d4f9300"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a953f05a-8924-43a1-a346-96717ab39489",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea84ae3-6548-472a-961e-4f685384a62c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00c9fa0c-c423-42ad-8621-5c4648bcd68b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274fa0e4-98ff-4d65-8baa-4a25f1230678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "68befaad-0b93-4cb6-a478-04a2e2dff9b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5722668e-39fe-4616-91e8-16a4a4c12ae0",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f66b9a3-4c3b-40b0-a0ba-d402d6025ae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c1aa81-8f86-4caf-8e22-5cf8ed8de296"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b5b2d54-e489-45e0-93f7-49ee88a5380b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1696ff05-8576-4d41-9cc9-7a4f457c27c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "904b1512-366c-4944-9a75-9389591489a6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2229cd8f-add8-476d-8097-75ca1b4fa083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bfa49f0-c603-47c5-95a3-1cd882019bfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438e5039-d92f-45ac-81a2-18e079492615",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecfbccd1-38b1-4800-a563-1becfff4d78b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e3e41d-c80b-400e-ac5d-4a993e31b8a6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a47d75-934e-4944-be74-5f09eb451139",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa6adbe8-15cb-41be-8722-b13e25907a17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdcf26a6-f9a8-48c4-a12b-47b00d8fba5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a46e96bb-70da-4e4a-80f2-3a5c24ab8b0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a96549-77fa-4b1e-be2d-b6db4b840b2c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678fa4cb-d4cf-4241-b86e-ad0e9abed0a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "000cae75-435d-4a3e-90a2-037fbeca38be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "416a7c8b-dc31-48b0-891a-2cae4e5ab3c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dab7529-97b1-4aaa-b0d0-023944b22d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c49988-2d83-4cc6-ab91-8ec26b964346",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fddff60-4f72-4ded-8320-51e608457eab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50b86bd6-7317-44ab-9beb-9860ef54be11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aaebcab-cec6-4a0c-aa20-a23003145eaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "52683ad5-603f-4176-be0f-2a69aa92e2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcb4fe0e-1e9a-4a17-b7eb-c52a88491bcb",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a695103-189e-4b8d-a74c-052c91afb8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db11a92a-5b73-4921-9b57-b79f78931f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4068fd9f-1e60-47e3-90eb-e1ef90fa0278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "3743d13e-da2f-4702-9aaf-cd0054134109"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac68a6c6-bea5-4856-8372-db737ca17a23",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99386bd-4f08-40af-937b-a358891c4de4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3867ac52-cbe7-4cf8-8a2a-d709c0a23f9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "222a510b-f1ac-41aa-b932-2e02308a8b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "35e09729-afb1-4afe-9c50-96a8a62ee6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1be1b48-1905-45aa-a1c1-f0af7dcea9c2",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448df21e-b320-461d-abc6-6a7259985740",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae9cf05b-c0a2-46e4-9ea9-14c0a2ae270d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b40be5c-058a-4048-a927-4851b7c1b184",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "97d6c177-9a36-4063-a943-54436e75c0f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bad3239-f2bb-4150-b131-5055c9c05b5f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9154eae-37a2-4237-a5e5-5d9d88f0d57f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a157b504-e0f8-4b8c-b26e-110c9a795044"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57a35d2c-f65b-4ada-8f27-429e33b4c8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cbdb3f63-e2f3-4271-94d1-ba44a80d8c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d00f4fb-7120-412b-84d3-f5c2c537803b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f8dc1a3-1e70-4aa5-b9e4-2d14f9ac8dd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0e93ede-69dc-4aa4-a685-91662f1ace5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83189b94-79ee-4f6d-a400-4e9e3607670c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "90bf2529-d8a8-4956-9f03-e6b836834d63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8de8114d-6340-49ca-b6c2-cac6f18d73c5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c2a7a37-203d-4b10-85dd-cd469c2af710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b55dcc33-c1f5-4a30-bf23-af1a6572936f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03cda88c-4f4a-4e55-83b9-0cafb13754f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0093d0f-be41-4fb9-91bd-00c27aa86736"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1fd19b1-6ba7-44e9-8c70-3358f49c4062",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3db4d50-2e47-4aae-b5c4-c9a0ce67e873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26131de-e4b2-4378-92d9-840839531d1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc6e2bf-70c1-4704-bdf8-d7d31819a431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "839c0c5c-b9fe-45d7-9bec-06c03964ead7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e673eb-6233-481a-9aaa-9acedd5b5142",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c05675e-28be-477d-8a66-f36e9ebc06bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9baf1a-afcf-4785-9566-b9158e889cd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35dced65-7c25-4cf7-ae98-bcd14f4f75a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "822ac9e3-90a7-4341-97d6-99aff3cbec15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfe2e3bb-8f81-4189-9747-ce268df55744",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "179eec4d-8f73-449e-9296-8f95dda442df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b072969-f358-4bd8-b064-76ef59a1cf89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2829660-1220-436b-8a4d-16f36bc3a2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63898a66-39ab-4ffc-831a-640dc59670ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caba2583-7795-44c5-85ca-25b3e0fda411",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc016b0-eb63-4646-928a-9f289197d207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e63ea856-0b62-487f-ab61-b4d669ac91f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13257157-91b7-4ea2-b6c1-dfcef5daa0dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8fb6a9d2-9a4b-4bff-92fe-3c90143ef2d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b830162a-d66b-4e10-bb0f-a32b0b2e0619",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acec0d91-da4d-49a9-b633-03e27c1e574c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a5e2b0-fff9-4838-9f9e-b6e792049660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e791cea-da52-4f8f-be2f-2161e04e469d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc18331-b539-478f-a3dd-b00c82d4644c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2c37173-fcda-4a14-80af-bfbe880479db",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fdfe31-0f69-43e5-a906-91ab2412ade7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "951475fd-b9af-4105-ad7b-410aaefe3c6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f372ff5-0f59-4c04-895d-7a6f44600303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc613a7-1bcc-4d2a-8fe5-91c0f5f4eb98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8230f5fd-d992-4e00-b85f-a4956397877c",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a6e1cc-5849-4664-971a-ec03219c0446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e55edf9-b6df-4135-9527-5b36148ff446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c6f98b-568b-40e8-bace-b19fb22bd48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a58743f6-db4f-4e91-bf3f-28dc32ab8aee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e699745c-5788-40d4-a2a0-e8c28075457a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80029a1f-042e-40f9-bdec-81d42ffb4083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21812960-1687-48ee-80c6-ccd28faa9fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996d64f8-d7cb-4222-86a1-7d39af2b7eef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "98a1b50a-d948-449d-bdf7-39ea5aa01d1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feaa5475-04c9-42c6-abc4-fd5ba0edf376",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "392a2326-041b-4fa7-8790-01cc2f67612b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1ad7e68-cfad-4df4-94e2-30d3dad345b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bba9cffd-e29d-4a0e-8834-76544fce5562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "502abce7-7fcf-4118-99fc-8b5ab4d67cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd7017e9-d025-4b32-8ab2-f47982050795",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "728ebe2b-8562-4292-9b01-3ac76c6a1e9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc36bc37-a351-4a49-91f9-14296889df8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb7e58e-ecf8-4275-9528-502437d41f1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd301cd-198b-4ddd-959e-d330fa46f1e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a3018b6-bad3-4417-bca8-3605cd706436",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e97a7b8-7aaa-4bfd-a93c-87da8e4ded47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b89dfc1c-bf3b-4868-b4c4-490da2e1b2bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f938614-6a1b-4ff8-83b9-89d27e6707e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "35fc3160-1eab-459e-a630-3a18322c896f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ff8405-cb88-4c29-8664-359ba76341ab",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "130ebd8a-58c4-4d22-8c0a-af7e47c3b0d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5ec1dc6-0702-4b1e-b41c-070b015de19f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3666cc9-840c-4876-a68f-d44bb3ac76ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "314d4f85-5f82-4807-84b3-1ee9b8fa26d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda0c9d2-1a49-4718-bef6-76ed96d08534",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdeea7d0-c82a-486d-bfa9-68c3452f3500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e4aeb08-bb35-4561-bd5e-f12080ba7182"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a368621a-c2a8-4d2b-92c0-8f0d8339a5b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dcbb6118-f625-49ce-9e5f-3fbc71a453d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57509728-0c8a-42c4-beb8-ffc7b032a735",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b5c6a6-7d44-4268-94e6-f39349496adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7152fef1-839b-4b7e-9c90-bda0f96f6bc9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6248233-9c7d-4c46-89d7-58f7faf5608b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0351bd9-c59f-45c7-b594-e13e6e73fcc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "537ec21e-b81b-410e-a6ed-8fd3d2e704b7",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e295c3d-e581-4fc0-92b3-545b49c8eac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9852b34b-9148-42a6-aa49-204ef8ec9a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "689da7e2-ea9e-4d30-ab91-7e509234e6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9eda59e-b3b8-4151-9292-6868b5321034"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2b3b464-fe77-4d63-8614-3953c0b6cfc1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b4c18ca7-7c30-4dd4-8b6f-03234de0fa0d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46bebd1-f034-448b-a4bb-bb77431210f8",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "bd376208-eb22-4d5c-a2e1-f59788154fc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b7b207-921d-467f-bb9e-15d8f79d10f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85f13526-5a44-447f-ade7-59a961e27bdb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ca83c894-8d49-4774-8cd6-65ddafb19de7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "865daacf-1892-462d-aa6a-9a298cb9d047"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a7849db-c89d-41e4-9209-95346f6f7737",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bdf661c3-4c02-4823-a70b-e3eb2161b3f3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "98ac26e6-52c3-45d1-9b67-566b6d132f2f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5d30c52a-8218-45e5-8ca1-bda614261878"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3f03319-b19a-4da7-9d83-a80ab02e470c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "92f4c193-9ace-43b8-9e77-dcc9aa05a35f"
            }
          }
        ]
      },
      {
        "id": "e60f04b9-922f-4234-ad0e-6b882a294497",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "6577bf1e-0c52-4dc8-9822-49d182b3015a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3cab2821-a6b0-4604-b931-2b1125f86793",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "49f45002-7384-40a3-9190-bc2758942ff6",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb126738-c798-4ce4-ad7b-c7a81dacc64b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfba9d88-126c-42df-9743-7db8037da3da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "425a62d0-c3b0-497f-80ee-b43e07932769",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efc2dc56-50a4-4f8c-9f25-0819506644ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c95214-1df3-4a40-af2c-0e068bb3a007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ce0b4c-a9fd-4f75-8c84-53bce91dfce7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7db85c11-3efe-41fb-ae2d-0efad24ea944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ebee84b-fe79-4e05-8397-3ef72df53bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac04627-a7da-473a-82cb-9ad8e6f67e3c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f725804e-8358-4dc1-98a4-fabd0506649b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab666422-dd8c-482d-b325-744b3a615d40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a598cd-e1be-45c1-a2a3-f396d0250d52",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30fe349-54d8-4d18-ab4c-ea7af2ffc733",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f157743-fb4f-408d-8558-78d753e78129"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3de44c5-623a-4ff6-b06b-7550dfec373d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20072e0c-2aff-44c1-ae28-355d8bebb529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae3bf39-7760-4d7e-9f7f-7bd2e76e837e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34347c23-3de5-43cb-9031-02a6e1fff498",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc878d5-0146-4e9d-bfc5-0c6eabf1176b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "847ceecc-8124-4e1e-ba54-80be6e0c3820"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84241d74-a9e6-482b-9d10-88955d22a749",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7929a3a5-8bc4-48f2-9fa1-3844d71f28aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac5ad177-c3e8-4b4f-90e3-2a2da93ef171",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389cceef-4a5e-4c8b-9c25-3a99d89a6bbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8936a409-a5a8-4466-b222-5a0eeaeb6628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6894f580-fdd3-4ea1-a774-2212fe7685ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f791d63-3a76-40d9-b9ae-d2ed3644fa36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b8114b3-7df3-4b36-a29f-c0c57691dbd2",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27ebc0a1-ba4f-45c9-8ca6-27629f8fcf9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90661be9-ba2f-487d-afe9-5de2f3853040"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f542049-06bd-4083-bd4f-951a750a0224",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd7c8a0-4e82-4b8b-8d05-02bf0f039000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2368550-d1d3-4aad-aff6-32eea5e991a3",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a4e88d1-ec67-4a69-aaab-0c1a7f656324",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07029e71-80aa-4c98-a4a0-3657caface59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d24124cb-3c83-4c6d-aa9c-e6db4092af44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bbe3a78-5142-4e6d-96c6-b2ee4e20862b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "515053ff-c0b5-4922-9a43-5f382823fdfa",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbe0010-4fe8-47a1-a937-812bc9e0c454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8c9692-2cec-441f-8264-12d45ecb5247"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37376a41-c034-4c3c-a9f3-0ccfbe2cb044",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161e075e-76a9-41e3-99ff-f8a30aa60563"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e3211c3-6d8f-47f2-8c6d-b1e88a074b1d",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070f59f5-43c0-4b9a-af57-f6e8373994d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fd452a7-ad9b-4cb1-a976-215b6cb795c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64305689-cf88-4505-9498-81bfde41df16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a5e2fe-753b-45d4-a176-1ebae3b0f54f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "437b5365-31ae-428f-b0e5-b5d538aca923",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e23aec-cf87-4ab7-b368-1ee2bcd3727b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4083c6f2-6bd7-4055-a711-c4bd2fb9515a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25d62bd-2d7d-42e9-a12b-566fde323803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "631534ba-c91e-4e98-a058-89195ff68e45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c45bcff-1dc8-476d-b2bf-013de59d23a3",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ea5ae0f-cf47-4acc-b5fc-3d8d24377658",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c447bc4b-c5e4-45a0-9a6b-be104544b17b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253d6fea-2ba5-40ff-8471-f846ae2aae6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf093bc8-9ce9-4899-8fb4-6bd054c4b8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c7e565-0dce-4651-b8b6-d1f63b1dca35",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c2311be-4354-43bf-b3cc-6b6c3bc418f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8682bc1-0a6f-4f63-a93e-92f35cd7f927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb883cf2-ee1b-46b5-aabf-66f245348182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7baadedc-b796-4730-8c49-5a2bfe51509a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "551018c9-ea07-4459-b429-1fdd8a9c7baf",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c13053f-c23f-4f50-826a-75cb277ed00c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3fa81536-a763-42c8-ab4a-aea184abe564"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f01c3a18-3208-4e75-a401-2ad8a8da2cd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af1b638c-bdb6-48dc-a7f0-c0a5403a161d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5abbed8-2641-4011-9ade-d4d1db710fe3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9080e4ce-6a43-494d-962d-5491a50c4f48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd1f7b5b-1b2b-4a78-ad73-44e88a95f15f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "129c97e9-4b35-4246-842b-a86e01202754",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de990356-0758-42d8-b542-409fbff92c46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "449305e3-0b89-4a6f-9417-12db407a909b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cda91ef-f24a-4738-bbf4-5238dd5d1c1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7890f1a4-9479-48b3-8810-d0b9e4a3d29c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57ccf66-1764-4ebd-ab77-85e6bd3e34e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f98282c1-fc95-4dbb-a529-5e8b30b46c3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0753f5b6-6204-4fe1-9a0a-c7c5d9d0cbec",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "260cd62f-8dc8-4312-a969-9e76d2803207",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68492238-ac6e-494a-9bee-91cd0305a71b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c01f3f-e4db-478a-aa1a-86f52339d362",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba515c7-be4c-4fae-b400-be067968fc6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20235ac0-2ee0-4af5-9f72-8abe1df3ece0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d70d9616-a1bb-4cf9-a3aa-8ae33faebc55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "719db21b-fab3-41be-a056-9f82fdc2098b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18873031-93e1-41ae-945c-11bab2080ee2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf77097-0f00-42ef-9071-87b263da2cd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f257d747-fe6d-4eca-90aa-735412de2692",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b9376a-e90d-4b0e-ad05-246bdac47ec6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c557212-861a-4104-b20a-4c886ec3fbb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25014152-91c3-45ac-b76c-c6dc168579a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "373d30c8-0c11-47e4-82fc-da0e85597ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3481fb-f54a-47ad-bef5-0e857b7422d2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75d9e937-6e5e-4636-9aaa-df4146a39cd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5131bfa4-ba4f-489d-befc-e7aa9a7e284e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd41fb3b-95b6-4179-bd52-305371453d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af94e528-5242-4f2f-bf8b-965574c59eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae310ef-1f83-4fdf-aa98-d1de8aa9ddc1",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363a5842-6044-42e5-b68f-1efdded77f49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b8af49e-07be-4fea-8241-65d7650f7ab5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88e2675-ce27-40e0-b58f-e8ac69daef88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5fed9a66-bc1a-48f8-ad83-b5560be0d7b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a0ca21d-f19e-4350-8616-f315d55adaa4",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41bd4e25-8feb-4ff4-a06b-423d3f7d268d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b630b8f4-5253-4ed3-828c-191f5cf4b6a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80b55615-6cd8-499b-ba42-4c8382039553",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c996cb-53d8-4244-a767-a1160e4eab43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4b66bbf-7adf-45c4-9d18-dc308aec1908",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b33f38-ebe5-414d-ae1a-fc7c0c0d575e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "910b3d63-ab2e-4f94-a28e-ea6ff3d49232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd42aa3-ed38-446d-a65a-463adecc50df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a04e9e-b4a0-4ef2-8904-266caf0b5df6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d22b7c57-fbaa-43ab-89d5-4422e11245ae",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ba13492-528a-4678-9213-429dcd62fa36",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d7210a7-00c9-49bd-88c6-d253719398ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71931452-b814-4dc5-9881-7e7da623bd0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "248c72e3-1ea6-4c14-bd4d-6ded18a62e52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "281bed8c-4f6d-4701-a606-88e2f6f98338",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdc6a97d-4ee9-4b64-8658-e195d00b1055",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41dd9e27-0c54-4c2d-9e28-529295f3f1d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b34446-4805-444a-bb62-4ef4db073579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67eb01e0-9dab-4044-9761-e4097517072d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bf70c6-cbc0-4649-b9a7-5cf8a25b20c3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0244d7-630d-4271-abe2-02cd008bb405",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165671b1-09d5-44ae-9e3b-ad35b4f06cbb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54ecff21-e150-4977-a822-4bae189309de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0256118c-4d04-4ada-8496-4dc4950b2ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bda5c6d-7c7c-4c4c-8298-392e5f080eda",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "facf4aaf-ffa1-4ad4-a38f-b71ce616b753",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "613a310e-3fd9-40b6-a89e-67865fff4730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2addd081-559b-4f6b-82b9-a9c3622fce43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d4aceaf-0e18-49c8-a7bc-0b66aebc74fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fe02f2c-1df6-44dc-8026-2e3c86c73f74",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "310563be-aef6-4c41-b2fd-aea6a1da6641",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34d663ca-f1a5-420e-b770-199028f818ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fa2229-6aab-4a1b-a376-f198c415ad21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f4c8a1-3108-4488-bdcf-d7418eddb879"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1518f22-95fa-42fd-b70d-5bbb8f5b6767",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8a1a57-435b-4be1-af6d-87fe3762faa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ac588a-68aa-4cc1-ad6f-0df73405c863"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "923af8b2-5b68-44ee-87a7-7d8d19b5c699",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c4deeb-66ba-4529-980c-47881b413fd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b75913cc-e395-4b56-9161-c3c44b8c82d5",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f3a1fd-aa28-4a78-a2e0-b0ced2628d80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70664534-2b58-43ef-86a4-43cb4f47dfe4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8163490b-4e06-4306-9de3-bcca68e90d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf2a816-3f20-4697-9f2a-489a3a1f3a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "041abb6d-77cc-432b-9e83-c850e4ac8e71",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10dcb895-e701-444d-b7e9-68eece7a15b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62b1a2cb-66f1-44c3-a0af-e3e8be0e1539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "264f4d80-987b-4617-a46e-ef39d1b15c86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb6bca72-f050-4ddf-bae8-233a696b383c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4948552-6a7d-4796-8661-c55951ece185",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8982f60c-74c7-40e3-beba-ac084441d1fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd50037a-ad86-432f-947a-00ed629aa399"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40b3a361-c3bd-4fce-b9ed-fd662b48f2bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98d6faa5-e21f-4862-8618-88afd8762f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7066226-d579-482e-94f2-571dceeee4e2",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "691baed2-facd-41e3-a595-51b264bda9d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc38100-e550-47fc-9d9f-ebd1e04744dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898d3bc0-fafd-465a-ac59-45336b9237ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5d33bef-2b6e-4b01-a140-ff46bbc60881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f202161-6791-4f6d-a8c5-0b5531704e33",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f2a2422-6849-4ced-a8fd-f051c86c4aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78da4309-f1d5-4b85-8855-1bc6f50335aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3551eb7-0f6d-46f0-9ea3-be262e0a4015",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1aad45c-e0c5-42ff-a4ce-9b2439c4577d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20f94980-f308-4d91-9f4e-7a25fd9efb4d",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "428a72b9-7e97-4493-a8e6-a3e54589e0e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2093d95e-c41e-44fa-bcac-c3abb0de3757"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "907ce6fd-5c80-41b2-bcf5-dce2192ace72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15673c7d-fac5-46a7-b2c3-b0056f26f283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdbf61a4-e49a-4008-a778-d3f04587bf91",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "092d7e5a-9918-48df-9e49-5d7ae5670b9e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7aa98ac3-611a-4def-b149-8f062c7e29c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b718de8c-2185-49b6-907d-0b5554eacc92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8af20f30-135b-4ac9-bee9-408a3de8a71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ec5b98c-32e7-4906-9a14-9ad2739750b4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae48a6e-eb9a-47d0-97ba-871c1e2b739a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671f855a-ac56-4c7f-9b78-87e646b06f18"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "433f3d0d-ab86-47ed-9e49-4d7ecc1093d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "427fc80f-10bb-4d79-a3c7-aa14071c90c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39bc1a4c-cc6d-4391-a5c2-12ab076e01ea",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f00a83a-2521-4162-afaf-6190070e36e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "669351fb-ba3b-4f9e-bf88-a38263d2abe8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166c9fff-8cd9-414a-bd33-b86879e7a420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30412964-2a9e-4374-9fa3-80505ef1224e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de279d54-ac33-4919-8ca3-222744985efc",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5079a2e-60ce-4a4d-af25-fb02305ff2cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0324c042-0617-4100-924d-2b976c172c5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60ec527d-7589-4e4d-8c31-d9b8ffa2dd2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d7b0b3e-f877-4314-bf51-af21468f2cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3b1a4c-3be1-4e4b-8d0d-15c859e34871",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f433e1b9-0a0f-4f6b-90e4-6a73da702a60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3207755b-aa68-4d24-853c-b2ece757e5e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f16f3572-b5be-4352-930b-e8ea21eaeab2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9b15b79-f531-4150-860c-daf0484ba8b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ff18e6c-e08f-40a9-9775-8e5bf6f1cf86",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a40cc99-d480-41bf-a5b6-a545710efcba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3e7855e-c194-4996-ab10-569083fa6811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd6c7f6-b3ed-462a-82ff-5acf58d54ea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df2b876d-c8aa-4861-9623-01ab1f8c7eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "044878f1-1783-41f6-8469-796ff673af18",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1db8afe-d79b-44a3-9f99-13584a8b1b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab11d2a1-7979-459b-a8e2-c1102aedc293"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18496608-f101-4371-adbc-6391e6f8ba45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6757672f-2b93-499a-b967-e817da35ec2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcba8b1b-da56-4d11-b411-dad6c7afb990",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ba83158-a9c4-4864-848b-3abe7162fa64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e07856d5-7d17-4af0-a142-8b09cdbf80a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "823191b1-82be-4453-b82d-c72b332d2cf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1d122e1-4f0a-4047-aa57-b135eac9b9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbd3bd8-7832-4315-97fe-75ed1fbd363c",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69ec3a4-b15e-4dae-b2a8-21878ac472db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e214f0-bb19-4ff9-8a5a-f884f97059d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b44189-5fa1-46e1-b745-e49fc099ed45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e647b73-f4ad-4fd2-84ca-495dffa205df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a13f01-eec0-4d26-ae11-635cd2a6b59f",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6701e4e6-286b-4d39-9567-0593216fba19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46fc2bd-a77c-4c43-ac5d-8113071103e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "165a8783-300d-4aba-9805-c93b9ee92702",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8dd0942-1ef3-4acf-b45c-260b487a451f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4727a7a-e9be-4655-9959-7403bc6206d1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f38aee1-2516-47f9-afee-fb8337f7b19e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aefb9da-d172-4152-8839-c604a6c5020a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0a406f-401e-44b2-b8df-73140f21badc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23c2151f-dcb2-4509-9c31-d53e6aa7f0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458b258c-b6af-4b0b-ba47-9954a73daaa9",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd12ca51-e7a3-41f6-be73-1945cb90a0bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3116133-d0c2-4d3c-b6c9-ade5492bb945"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b52bc38c-6b93-418d-93f0-26ee16513123",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d6cd586-8a49-47ff-9066-3846572efdcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1506cf8c-132e-4901-92d8-6f70525b0b96",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab61c19-f811-4bab-964e-861d58c9128d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bbcd62f-1f27-4081-ada0-d477147b89fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5cac86c-9f6e-46f3-9d3a-ebcc365d6199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5d4a0da-f815-4eb7-a9fc-11c271655556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d88c7d-1938-40ed-a317-c8cf4daf8f78",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e707325-e455-4af0-bed7-2be8c462818c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb7b56f-07fb-435d-82fa-6462e00a8392"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f6b5dbf-6677-40bd-bd1c-6cc5b475f6e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc3fcbec-eba8-4046-bdae-b54adc425d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20084067-db8b-41f6-8f63-4aa7a0da885d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "912f277d-fb31-49bc-8fff-af2a61cabac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01af589c-f064-4c7a-b3c5-96a00fd0d554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde14416-6b92-4569-9604-d84c934d1140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d499f91d-43b9-47bc-85d1-abdb8f17cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e685718-cd62-402c-b592-f4c41b3cfe15",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6861ce2e-8e7c-4017-9e5e-1591f31c3747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e97add3f-03cd-4259-8bdb-42718a03e225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c469432-ce0c-4c2e-b8fe-1b043977ffac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c284a7ec-951f-4e84-9260-55aad61b7b7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd9e94ec-52cc-475f-8761-b5c36f7633da",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d4b13f2-1a0f-4920-b93b-a3093c3a6a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a108b41f-8cbc-475b-bdea-22a057ca7b4d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69b44f3-c5a1-47c7-9e41-0fc714f9a79e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6830276-0fc7-4949-a878-6214ce28912a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c8d0e05-dbf9-4d09-8fd5-be4ed8d6cf7f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cb4f13a-050c-4444-ba63-a7f7afdb3e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa6e12c8-8e87-41e9-b16d-1762c79d3dd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c34890a9-0d3f-4b99-aa62-2507f43da1e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3daf6be-62f0-41a8-b75a-9d50698a43a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a831b02c-7e81-4816-9bcf-34884e9324d0",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32da221-e8d3-4570-94d6-cb1da1de6bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66033338-4290-4192-b686-e42fe89e24f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8e084b-dbd9-4606-a67c-7223cd4af28e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7210b584-b04e-4c0a-86fa-daf91dad087f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0868e64-46e0-47d0-83a9-8e6a9f413b09",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "745787b7-7120-47fe-adf4-adfbe1c30c4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31784d7a-d662-4ab3-875c-68acf12260c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f199e4d-7fca-4c95-807a-0c9e43f4bd06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe23515-3e4c-4787-a85c-e6ba48a441c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec7907b2-36e5-408d-a5b1-f348c94f495f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55d77a7-f0b0-4444-95c6-4c79a60db604",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5666713-1779-40da-a8c9-36a88ed6f873"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c04f52b-1038-4bac-b0c9-5e212c6322cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85778c55-2b84-4f62-8a87-189fb85aa2f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90d476f6-120d-43f4-95a8-455c05e33a32",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbff997-1504-4a7b-ad6f-d7c2a6e03de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0889718-d4c2-48bd-ad94-968cf8022b98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f830368a-7de8-4019-b778-94d64ccf1847",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eadaa806-ca08-49d9-ad17-cce16d50b239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d700ebf6-23eb-40ae-aec8-e6beadaf6417",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3424cb9a-1d5d-441f-b859-e87c391252b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e54afa-ee5b-419a-ab99-ea2de51512c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec1b902e-96fc-4421-8e03-f118d7f7219a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31640f5d-ee40-4036-a699-14a9fb494135"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61667e3c-56d4-47d1-b406-98c635f82bbf",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "464b0ff3-8b2b-4959-a3f8-3273ea907971",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29a32e67-eab6-4119-991f-6b7118f2235d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1821873-c72a-48b2-81ef-e8bd30a274c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29d3a6db-0e11-4d32-8669-d1ef5d83e237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9d40dec-06b6-4de2-9015-dcee03d2ec5a",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb75e254-6d84-474e-8782-d3871ee26a1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4e8bbc8-c4cf-4df5-8bc6-628919b60c8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8564f29f-4dbd-4895-99ac-28c72b5ec47a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97151235-c82e-40ab-af98-7d5592c2e083"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5724e9b-2cd1-4e70-86d4-c91672d11f07",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ca363c6-55f5-4cab-8f43-4b0dc9be0266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c62e24bc-da55-49b8-9129-c046b4038ed8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eb616cc-9193-4423-9fae-182647b3a27e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0711b3-c54f-4015-a7a7-8aae9fb9ec3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bb7d77-e6a3-49b3-b2bd-06797e4e2881",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc1f8a43-f09e-41be-b878-43297ff6b8a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80ded0b2-35cd-4219-9924-c9f0935a5603"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cd2d48-9f43-4fb3-8c5f-466766070a1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "762bded9-5ef6-423c-a090-01bd75acc679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33e8d740-0e70-455d-a793-5f5f3e716f0f",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dae5873-dfb4-4f81-9432-5c258b58fba3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26c6dd4d-5556-46da-aa0c-b5225470d26e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1d9d3fa-c58a-4e04-b4c8-0ae662c60d27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "906dac69-9f35-4202-bf21-2db22759e92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d63d62c5-ecde-421e-9781-eef5a7fc28c7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b84190-ef6d-4d23-8867-8fbb768119f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe9debf-5a20-410f-a758-d1f0c3faff63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916a163b-8fed-499e-bf37-5d77d031a529",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "886c8beb-0d4b-4913-a797-0c52bfd1e4b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "877e4c53-fe0a-4044-bf60-4de7b3405af2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249a6aa7-256e-467b-b5ef-1443d3984ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cb32d24b-6055-4bc4-9b00-df8b88b478d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08786385-fffd-48ff-8130-3f81c0b37dc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19752174-9758-4b74-b191-1f3e835b34dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d9a6666-cd1a-46c6-9f46-7fed170d2c04",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8298a234-d412-430a-86fe-0fbda67129a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e639d803-a695-45ee-bfff-d812cc6620e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dfcc66-d707-4483-83a5-19e8c5b55e21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2d6de04-3d4d-4a70-a7e3-d39c5d9ce5b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "147ebae1-e737-47b8-8f52-53d895635e71",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0cfb9c-5404-4765-acd6-363d4881b97b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "449a3cca-16c7-41bb-a9c5-4f2f2d33c9f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4d0756-0ada-479b-a271-90b3b01f99e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92e6114d-b6bb-4605-be19-2fd9b78b85fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7467f3ef-516d-4f8a-89e6-ec59193cb2ce",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "852348c7-87b9-4ae3-8668-2ae2d3ef0b99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "595ae421-c879-49e8-b2d5-812592e6ca16"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84952ea3-a8b8-4afc-9b49-9c785982f7b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f65880b9-d776-4882-958b-800d6284e1df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d42b6c-4a13-4735-8442-ae1644ac19fd",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08ec1a4e-4fbd-42f5-a8d0-04e76db88863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "05eadcf3-de28-4b21-a688-0f7f5d8535e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce6d460e-16f7-4c7e-a232-19a29b2be66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53357de5-4a31-468f-b7c7-e36c49e90860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c42f67b1-f33e-4619-9997-e265e9577950",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8373f5b2-32a6-4ea5-9ee5-0ac82000ab81",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42f45c0a-90e1-48a0-a5cd-8aaf4b97566b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "958bb9c1-a07a-4533-9879-a9453bd1565e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e65add9-e172-4ce3-937f-6dae75fc2b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682173ae-101e-420e-9fa8-c67a0d110633",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee05fcdf-031e-4ec1-a102-0b12aed7f653",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8e5d94d-8ec8-4280-abc6-9b241e6b7da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b47291c-d009-4ce4-836b-3221c41027d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f2756fb-aaee-4c3f-be68-63ffdf764ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161a68d8-0dae-4b5c-a404-4ca97e243fbb",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73fae3b1-1d6c-4f9c-ad32-8c37853e3804",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5627b26-f196-4b03-a329-eb56e6ab6d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c34f0d6-77aa-43a5-8d1c-20dc02ee88a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e8c2ff2-128e-4b83-8c0b-f1f67c44e6de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65394d9e-3fdc-47bd-8177-485ee0176440",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ce24c7-7577-4205-bc5e-88aa2d0c8adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a4db0dd5-77c4-4cc5-9c93-b8cdec8cb1fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2ff78e-07e4-4fd5-a2fe-3ac2aa8146da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d253aca4-4bef-44df-9fd6-a9ecc9c06c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb65e07-3497-4eee-8075-1a229da6d92e",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bac8d6-af47-4df2-80d0-bbc9c3dfc548",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae64f8f9-3c4d-40b6-8807-f2fe54fbb625"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4934c9e8-4755-4b4a-9ba2-9a0a747b8deb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "319b78c1-9ce1-46cd-b38c-41d1fa91684b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b076ddd7-a85b-4122-a900-cfb9f8b3ce5e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cbc0fb0-5847-4c18-916a-d5e39e11f7f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47d128da-97c5-4097-9a7f-3d9a61bed71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15c8fd6-6c3b-4e0a-8c2e-7653347a8164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4d910a6-f873-4c5e-b704-6348eab49571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0eca1506-199f-4f97-a8e8-9c5fb3fb3ea9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc3c0eb6-b542-4d9a-9006-5769cbbf4ceb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f4522ef-46f0-4e97-86a0-050f19e51d2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "074812c5-bb52-4364-8d6e-83a4f1f188da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18521997-92b2-4215-be5b-f29690d99bd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67520f91-9683-44cd-bd86-ee2a56a6c7e8",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a32c6ba5-4bad-472d-a3f5-d7af1bf86186",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18c24ded-cdb7-492f-a495-d641595c6d54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f6923c5-d8dc-43c4-ab83-fc7b5980d329",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "710073f8-00a7-4bee-9e87-23e9859c321e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7acd6e-2a63-4dbd-a55d-d185dab3f22c",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c86142-29ce-4c09-9542-4e06394b25e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f49629f4-02a6-4449-9d16-577c87cf7309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a50397-8e7b-46cc-b809-d48c487b0931",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7728dd27-1182-46f3-a09e-e5a41f44eb66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5fc6369-9ed0-40c6-a541-32cf7745f207",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3df93bc-a2ff-460e-8fc0-3d6689c415db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1a7c62d-f3dd-4bf4-a14f-54bcfb941874"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a17e5b9-c4f5-4023-9222-f0843cc8d04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34079672-08b7-4fb3-a83e-9860b223da6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426e3e28-3c72-4998-b54b-3682a4e9d565",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c6164d7-5c7b-4c20-9baa-25f8f8d78eca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee7b8dd8-3fd7-4fbc-9bb8-63e69cbaa8f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36b21774-3760-450c-ad9b-124bdbf7132e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54840ed3-5777-4497-800a-ad63adab7b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94d23398-68a4-4c80-801a-c4a200f58cd3",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e095d3a5-ef4d-4f03-bc60-f432d674157e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dbc3e54-5036-4ea4-9aca-e32de2accc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98de4327-a58e-455f-8b91-f80029133eff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e937cd5-4d0d-4d18-8add-ac448188e95a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e9439c1-8b03-46e0-9a12-d3a6dbe23e90",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b3eb295-03af-41c6-ba20-01e606da21f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66e405b4-4ea1-4753-b871-e5e6fed931a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d2cda24-1a26-4a32-ac15-7ccf48d9b855",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f66de72-8a40-4dff-bd4d-536605393c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e6e5447-78e8-4143-b439-65c1f9a7cef5",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a8c6e5-1d87-44bc-aade-b90d257bbd29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "465cb82d-27ef-4177-a9c3-7990088c542c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb94c73-1f76-45aa-88f6-912eabd7662e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "555a5e1b-1da8-49a3-9c45-b69f0c272395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74c4affd-cb83-417c-8a13-c6528983a409",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "534590db-d34b-431e-9a32-a150fca13137",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f432daf-d780-40ec-af48-eae44664da2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90b8f668-c667-41ec-b495-0ad2ec62282f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f513488-05ad-465e-a332-39398bf4f4a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51d06b35-cb43-4b55-adc2-115aac430a7e",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f593ca1-b740-4da4-a11e-ec116a99401f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "627933f4-8728-4937-8463-e2cde60be809"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbee46a0-d982-405c-ba63-39afc1791a0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d62bfb4-83dd-4f05-9777-91e18fe5f499"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2038749b-16dd-4f1e-93d2-a1b23ce03ddf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dbdc3315-729f-48ff-92aa-c139a7b2ffae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcbf5be9-b937-4505-bf85-f1458c2d831c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1f4cb0d-3e41-41fc-b080-726ad2e04484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8f8c4cd-108d-4d7b-8d3e-53e8286d41d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a371618e-69ca-4177-991c-22033c005414",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b5c9722-a8a5-43d0-b355-204df08fd636",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a7ec277-0fbf-4ce8-9d72-71585b6fc610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2d9c4f-6f7b-4a88-81dc-f3d15f6cffdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41be6bfc-355b-4c91-9718-8cafb9dbff77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5afa9f50-8440-4dbd-a75b-96ac70ac1d8d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba62235f-3562-4383-bd42-876b88396fe1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5aee718-12b7-436f-81fd-a86cac9d58ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50db5f09-1f85-4edb-9a5d-97c3d2d194d7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fff277-1d6c-4809-99f0-62fd16008ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa71cc2-c76f-4639-a7dc-61e8de7ae60a",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c974929a-8ba8-456c-9367-d6a3720d5531",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "027c1e5d-53ae-412e-9c43-5ca3c2475bf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f5e092a-4b09-4423-97a9-705cfb9a18d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f56c3569-28ab-47fa-97ba-67fa9c7be63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2f18f5-7325-472a-88d2-efafdf3337d1",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae438d8-dd29-4809-adaa-818b0add4bb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd906385-6319-43ad-a5d3-eee2c051d23d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9724ce80-5471-46c5-89da-14abdd470a49",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbfaa03c-f117-4411-ac95-5d34b31aee50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5468caf8-ca36-4a5b-854a-d9ad6fcb18a7",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0371232f-8d20-493f-a518-618a1bf6398f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42cac567-595b-4720-bb48-01c312b444e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3ceb6e7-61cc-4bf2-bf72-aeb611338b38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ddd18ef3-c538-4c30-bee8-e7de44ca3032"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221f4810-3666-4651-ad75-76560af6a599",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9e1c8f9-e924-4bb7-b612-477e2cf4fc78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e14b5bb-e5e8-402f-82aa-a7297427ce3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ac625f7-50ca-4d2a-9b18-c45b31b7cb63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2f8200-6ad3-4872-b1ec-3b0bcd4f2a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df3096c1-b237-4fcc-b793-b2461c3069fa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c80dc68-1a6f-403c-a67d-3b67e4a498b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a1791a1-7d89-4c8d-8585-7537645fced5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe73ceab-29f0-469c-b304-d327b0b5457d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3207c528-bcbb-4550-807e-b0d69edc8240"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b54cacd-eb7e-4a46-8ed3-bc7780f89975",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5620ebe2-0455-4db6-9755-f004a0d0b3c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3fe51b6-bb8a-4a67-9d8a-f88ed2e0a2ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7d03ecf-d658-4584-875f-fd153e6718be",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "099bb5d7-1a57-426b-9ecd-5b87c1527ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e218a8f8-9e55-4fd2-9349-ababf93b3489",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742a031e-14b7-4088-a8f3-643eb9ff1f4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5db610d-9510-4e9d-820d-bc8696703302"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbec7365-45f7-46a1-9e89-7a9c1c6bf3d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e045eda-b785-4fea-9594-f3dfc1e61f3b"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82205c79-c57e-49ba-94b6-ba25fc1be925",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d092c505-9029-4331-9e20-fa70b17d5048"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0f3d2d67-25a5-4af5-833a-c1e9b22f4b37",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "85d6db85-13ee-42b2-8809-038a615bed4c"
                    }
                  }
                ]
              },
              {
                "id": "c1dcf109-7f97-4922-9d3c-f70857d3897c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0266253f-a6bd-4ac3-a2f6-3c41ecd040eb",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2efa7cd3-aa86-4eaa-9662-0ce24b2a5ece",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "8d44cf47-65b0-41b2-ba84-02f0bd268709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "092372b1-6af3-4a66-a683-682531432899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2089e6d6-b32f-4679-a2b4-b96793572762"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec265b7c-afce-488f-b64d-e9476bc49f07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "051927e4-7c36-46a2-8e6c-e9f8388b27ee"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6cc79355-a5f5-45f7-b0bf-fbe783868668",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "70665ae3-b2d0-490a-99be-56d02c5806b6"
                    }
                  }
                ]
              },
              {
                "id": "781083ec-82eb-43ee-a45d-950ed0220da1",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "58bb971e-2114-4df1-94d4-07f86ef170d0",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b3f34a-3730-422a-88f2-6f429a262dec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "89f943ce-9615-4d8c-b96a-9a8d18dbbb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b4c8bc0-1346-4b34-8d1c-e37133829083",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "922b5a36-6ad2-4521-bd0d-a3415f467304"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "122ef7a0-b23e-4c3e-bfae-8de0a8a96aa0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2a7e5673-18fb-400f-8232-93a607f88b8b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "25e10240-683b-41b1-bc8d-75e0b4a771c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "45e9cecd-8201-48c2-babc-2475b47113dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5339ec2e-6ac4-4727-bbed-c236e5ea6cae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5f51abeb-9c78-4a9e-af24-a802f4344139"
                    }
                  }
                ]
              },
              {
                "id": "23e13e11-58ab-4fa1-b427-5264948afa81",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a90ca7b8-c59a-4dab-836f-26c7a165996f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0874cb15-5d29-4695-957f-13bebc0991d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7f00f14e-3465-4cab-b287-4b7770a8a57c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81eaffaa-d50f-4213-8f8b-d70b15bcaeb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3385c6a6-498a-4780-b8f0-e725174f6852",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "be518fe6-b59d-4fcf-b5b3-b686862eb909"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d8783b76-81fa-4787-8c9a-80e1551b9edc",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "253912cd-a8c7-4cc7-b140-e88000bc0514"
            }
          }
        ]
      },
      {
        "id": "b7a2bffd-3e32-444d-a284-f2b6bf0fa79b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5e39d1f2-0d37-4e73-9b6c-bca7224cf5e8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c398f851-6bb1-4e47-b73f-0789553d2dc4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0b1920ff-e2ab-42c9-95c5-ec14f9a80294",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26175f3-cc23-4ecf-a46e-5df8838e21d7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "f240e1f8-bbe2-4725-b648-b670ffa84515"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5312a595-7534-4e0d-9c14-03324f19b08b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "903fda30-c034-4205-b321-9996236dc52e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "001751ca-8d49-4721-b10b-7110d8da5e07",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b0c363d5-8f51-46d8-acde-b1d6f8ae275b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bab43b4-63c0-4e2e-82b1-d22b66166145",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc258f25-3991-478e-8cad-71affb4cd1ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b0bb615-5ba3-42b8-8dad-0007f3905cfb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "789e2e61-afa6-4f1e-94a0-a9c36e51b240"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "174623aa-9465-4322-a5ae-1916f56edfa6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8bb4fcba-1467-426b-ad6d-87cd066fbbf6"
            }
          }
        ]
      },
      {
        "id": "3a6ec602-1f93-45bd-882f-42d25ae419a8",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "495dfb46-8e21-4508-bb0b-1b0e790708c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "565021d4-6168-45e4-864b-263a2b23dac7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60807938-35f6-47bb-a7aa-78774a4f718e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "426e679c-e403-440e-9ef4-db79237c1054",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8da611db-8562-4ef0-b827-e7041dabe160"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff1b2f07-dbd2-40cb-a896-2a2d25a5525b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "17bccdcd-3f04-40d5-b2d4-64abf636c5a9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e75ebb6-d81e-49e5-8da7-7c8a89b03ac8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0449836-73cf-401f-8577-9ac6c7583c78"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c08d92bb-1c3b-4c4c-a9c8-ddb5f08e8f5f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8fd35a5f-2456-4b42-b52d-42f5cd2e01e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4d47c221-b1b6-4bdf-9539-06a4f05c77fe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "05526e35-96d4-48aa-8714-e1ffbedc22f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "29fc29c8-4e0c-426f-857a-1f89be50e325",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "35a6172e-2a74-40b7-9af0-f6a8fba2190c"
            }
          }
        ]
      },
      {
        "id": "e64dc3bc-06a1-4b8b-8437-dbedd67d85ed",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2ebb16d7-2e70-4133-beed-d9c8bf29dd79",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ac1367e-47ed-473a-ab1a-66ccaccdd0cd",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2fe3d467-6397-4929-af70-d2412511f4ce",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5002337-fe27-4f21-b1d3-7efaeeb6ef6f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2fc1f5f6-bf30-45ca-83ae-ded240b4c5dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "011fd25a-7d2e-46f0-8fb5-b7a8cc843330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "eb256529-d9f7-4d52-b105-941dd06efd1b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "edbf2c70-3249-490f-be3b-cf4c182194fb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6146f48f-ee5e-4aff-87ba-e284ebada58e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46b01ac9-f5c9-4bdf-8767-f6b952bd1f95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c00a8b5b-3a4e-425a-a60b-e493fc5dd1b3"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a60bde1c-a03e-428d-b702-23d204131766",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4b1248ee-f239-4837-89e5-7aa5721a074d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "690ca809-48e2-4097-a59e-e45c8e2d35ef",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f029e3a9-f5b7-4f7c-bcc2-d9ffcb52e7a1"
            }
          }
        ]
      },
      {
        "id": "54dd7a69-c6b8-4439-abd7-483ee9662c96",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dcd6c198-5134-4581-b410-f694297fec74",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "99766a5e-3dea-433a-b85f-a6d6a9f6627d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e11771cf-30e4-4f5f-9dc7-f076e902e67a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dfa2bcbb-625b-49eb-8b88-598ee9225a70",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3b1c672f-1a8e-44a9-b369-9a2e8814e75c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 82.20701754385964,
      "responseMin": 6,
      "responseMax": 555,
      "responseSd": 83.48906401681108,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1710117318584,
      "completed": 1710117351640
    },
    "executions": [
      {
        "id": "d11f0488-46e9-4eb7-b7af-431ce9de5c00",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2f62421a-f885-4779-9f45-0841f06d4b17",
          "httpRequestId": "87b46d26-fb16-40fc-9eba-d452ae079cf7"
        },
        "item": {
          "id": "d11f0488-46e9-4eb7-b7af-431ce9de5c00",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "52066c01-0cde-4eaa-aa72-6e7d208b25c3",
          "status": "OK",
          "code": 200,
          "responseTime": 63,
          "responseSize": 0
        }
      },
      {
        "id": "22ebf60d-0707-4785-98a3-a180902e56ae",
        "cursor": {
          "ref": "873d5661-53df-4678-b858-ec7610654022",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "91355226-e2a9-406d-a230-be6fdc9c205b"
        },
        "item": {
          "id": "22ebf60d-0707-4785-98a3-a180902e56ae",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7eef574b-f88f-4bf3-a20a-ad44efc1c1f5",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "c014c70b-995d-4788-a15f-b8f01d55e843",
        "cursor": {
          "ref": "ebd080c2-6713-4bd8-b37e-8667b5c92cfa",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "58258337-b76b-4c51-9d4f-d7ec8800ff12"
        },
        "item": {
          "id": "c014c70b-995d-4788-a15f-b8f01d55e843",
          "name": "did_json"
        },
        "response": {
          "id": "ecebb4cf-6124-439a-a8bc-8eaadbcef3b5",
          "status": "OK",
          "code": 200,
          "responseTime": 369,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba5c169-126e-4cf3-94a4-0bee1f0f761b",
        "cursor": {
          "ref": "b882c21e-dc05-451b-9a52-a8b49bc22844",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d2a680f-7f69-4aa1-9481-2669d82dc597"
        },
        "item": {
          "id": "eba5c169-126e-4cf3-94a4-0bee1f0f761b",
          "name": "did:invalid"
        },
        "response": {
          "id": "a85fa595-cd98-4bd1-8613-20a949b9b15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eba5c169-126e-4cf3-94a4-0bee1f0f761b",
        "cursor": {
          "ref": "b882c21e-dc05-451b-9a52-a8b49bc22844",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d2a680f-7f69-4aa1-9481-2669d82dc597"
        },
        "item": {
          "id": "eba5c169-126e-4cf3-94a4-0bee1f0f761b",
          "name": "did:invalid"
        },
        "response": {
          "id": "a85fa595-cd98-4bd1-8613-20a949b9b15b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64823cc0-25a4-48b1-8ad7-ef537d6288f9",
        "cursor": {
          "ref": "68cd9e34-a1b1-4e78-ae90-6ef73f398609",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "addbfc9b-1aee-4f83-94a6-e7d0443e70ca"
        },
        "item": {
          "id": "64823cc0-25a4-48b1-8ad7-ef537d6288f9",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9078238d-e057-4da5-b173-6084dadf550d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 104,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf7ef261-a2b3-4cd7-9abb-44de39e75530",
        "cursor": {
          "ref": "c3df82c9-f1d4-41a0-a7dd-dd805603deec",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "06bc3b5d-3ae0-4c5a-aafc-1076a2521dac"
        },
        "item": {
          "id": "cf7ef261-a2b3-4cd7-9abb-44de39e75530",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "48487562-6cd2-48ee-9ffb-b4aeddd21cac",
          "status": "Not Found",
          "code": 404,
          "responseTime": 54,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d7b53a-7611-4e0a-82dc-a47af6c40adb",
        "cursor": {
          "ref": "0e4c5025-992c-42a1-82ff-30a1b44f8d7a",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "107a79ce-bb64-4eab-a7d0-087e784c1849"
        },
        "item": {
          "id": "c7d7b53a-7611-4e0a-82dc-a47af6c40adb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e4b372ad-7fed-41b5-8f81-9d097534a64c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 40,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdef7db9-738b-480f-830a-1fd9eb5858f7",
        "cursor": {
          "ref": "953606b7-3902-45e1-83c7-34ceba4902a8",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "54242534-9690-4124-95f4-79448001ebbf"
        },
        "item": {
          "id": "fdef7db9-738b-480f-830a-1fd9eb5858f7",
          "name": "identifiers"
        },
        "response": {
          "id": "d17c2fad-c293-4e66-b7e4-4ab576c96d83",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f33fc9-4d42-4f9f-beb6-179d9a26f117",
        "cursor": {
          "ref": "fcf4fca8-7668-4dad-b157-bed29c7c70bc",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4bf0346a-6ffb-4a39-bcd8-b5da3e25c952"
        },
        "item": {
          "id": "22f33fc9-4d42-4f9f-beb6-179d9a26f117",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "a5e387d2-e2c8-419d-8f55-a53797452b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34aff79e-0954-43c2-b642-9e75c9f6769a",
        "cursor": {
          "ref": "d78c199d-ed6d-489a-b254-367a3dbfed38",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5644e5b6-ac40-4161-af05-263ae14fb9a0"
        },
        "item": {
          "id": "34aff79e-0954-43c2-b642-9e75c9f6769a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "71a18982-6e30-4693-b0d5-6a5a4803c26f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ec3695-6842-4520-a812-a3618eada00b",
        "cursor": {
          "ref": "6fbe7d9e-7f55-49b3-bdef-d1e226702001",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "7c441089-d65c-4fa6-adcb-fb4aab9b4114"
        },
        "item": {
          "id": "37ec3695-6842-4520-a812-a3618eada00b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "d69bc7af-27b3-4f3e-b79d-61e569fd84d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7960688-7515-4225-90c6-4d86173bfc63",
        "cursor": {
          "ref": "08eca17f-f8a0-43f0-94e3-de5126a72e27",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "244a4b97-432d-4e0b-a956-11ffbb34bfe2"
        },
        "item": {
          "id": "d7960688-7515-4225-90c6-4d86173bfc63",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1af1c854-6662-4dc6-bd21-3e800cb7a9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddc61c6d-4b17-4f43-a360-be3b2be03d78",
        "cursor": {
          "ref": "fbd52bde-286d-45a7-9f3a-a0a359e2d93c",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3090b38b-ae85-4e7c-aca9-8e875d0efdd8"
        },
        "item": {
          "id": "ddc61c6d-4b17-4f43-a360-be3b2be03d78",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "3800601b-dcbb-4fbd-9bc8-ab5fac91c1c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e652f792-ef81-406f-9390-270431876fbd",
        "cursor": {
          "ref": "11cd62ab-d63d-4673-b4a2-b9839d46cea7",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3a3a516e-3798-4756-9ef3-e345dfe85fcf"
        },
        "item": {
          "id": "e652f792-ef81-406f-9390-270431876fbd",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "44863a9b-3553-4e38-ab31-3340b2d51685",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b7323c-ec32-4c4b-ad16-fc249e64fb70",
        "cursor": {
          "ref": "c49b959c-3acb-4882-8bca-529179699b65",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e226f6af-cabc-417f-8f23-079a9bebae08"
        },
        "item": {
          "id": "97b7323c-ec32-4c4b-ad16-fc249e64fb70",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "c8b4d50c-8758-464a-89df-93a8bdbf6030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a47cc9f-be41-4298-9a2a-41ac85ede67e",
        "cursor": {
          "ref": "0360ce73-e799-4dec-9bf5-92df1b315834",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "31a6bbd0-b3af-4146-9cf8-4db5793d7c31"
        },
        "item": {
          "id": "2a47cc9f-be41-4298-9a2a-41ac85ede67e",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "6030dea9-a667-472b-8541-5e30c059d54c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9644a0c5-4a8a-4c7e-b440-0f1436885a81",
        "cursor": {
          "ref": "b381cede-ea88-4f91-84d3-b10ee4586fdc",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c8acc213-4fcc-4067-a1a1-f9edc70eb655"
        },
        "item": {
          "id": "9644a0c5-4a8a-4c7e-b440-0f1436885a81",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "cddad2ad-764d-4023-8122-c32a69450e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "207a932b-4e77-4aa6-879e-b54adb8bef96",
        "cursor": {
          "ref": "e7bc2d95-c0d4-407b-b3cf-9b86b69966cb",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "29c73c82-2ef5-4fc1-b2e9-9f89f8600b7d"
        },
        "item": {
          "id": "207a932b-4e77-4aa6-879e-b54adb8bef96",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "43d7006f-2f98-4878-9f44-bcd6066a28eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b2a998-45e1-4ce6-ba3d-19b3e0a73023",
        "cursor": {
          "ref": "95ded9a1-78f7-49cf-b72d-e4a298672d3e",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "f64f41be-13f4-4970-812f-61bb70a7e486"
        },
        "item": {
          "id": "25b2a998-45e1-4ce6-ba3d-19b3e0a73023",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "5b7b9d72-b5fa-4283-9cd8-4533b953e39b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f305b5d7-0ca1-4523-876e-5643769a3be5",
        "cursor": {
          "ref": "9019b750-12ce-4954-80ba-d23d0da8a1f8",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "54732ea2-a7e5-4b1a-8b60-58669ba6ba92"
        },
        "item": {
          "id": "f305b5d7-0ca1-4523-876e-5643769a3be5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "5aa0065c-ac8c-40db-8853-eeac0d1a6b8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6845cba0-ac5d-4d99-a7ae-4c3df4c2828f",
        "cursor": {
          "ref": "c553dbdd-7ad6-479d-8aa9-4800407ec41c",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a7b3d02f-dece-4506-a501-18d6fdda4a80"
        },
        "item": {
          "id": "6845cba0-ac5d-4d99-a7ae-4c3df4c2828f",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a89c578a-2e20-4075-98a0-44bd7a2c812b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfa1f6cb-47e2-412e-a852-7e37bb10f14b",
        "cursor": {
          "ref": "1f53fce0-f428-4bdb-a692-7d55f0546e54",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "12814f6e-80f1-4fe9-a693-b175443ba73d"
        },
        "item": {
          "id": "dfa1f6cb-47e2-412e-a852-7e37bb10f14b",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "da83a23c-48a2-4490-be9f-eea8c5597c0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04ab6751-77ae-4ad5-8d85-0ba25dee9dce",
        "cursor": {
          "ref": "eec1a793-5cdd-44ce-9e5d-4eaa9dee8a07",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "1e6d7614-72d2-4677-a07e-278921ff6794"
        },
        "item": {
          "id": "04ab6751-77ae-4ad5-8d85-0ba25dee9dce",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "55618d5d-370d-464b-8de2-4ff660e6b371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac7ff5f-f21d-4121-8afa-ffb074066258",
        "cursor": {
          "ref": "b27a172b-e1ff-401d-adc8-ad6c1c36143a",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "68b3d8d1-8cf4-44b8-a884-d1add73fd009"
        },
        "item": {
          "id": "bac7ff5f-f21d-4121-8afa-ffb074066258",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "3b9dbf37-f859-4503-a6ac-f96bbbe66da3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74076b6d-8a88-4319-94df-a3902dfcb3e0",
        "cursor": {
          "ref": "7f7312dd-9335-46cb-9d1c-5a8f7aba19f8",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "bf675e62-c931-4c80-844c-8ddf600f3a02"
        },
        "item": {
          "id": "74076b6d-8a88-4319-94df-a3902dfcb3e0",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "f515a41f-de44-4655-986a-8d01d630698f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913ffd42-15c8-4f03-a32c-e12e083cfbad",
        "cursor": {
          "ref": "a1997f62-10ed-4cd6-8df7-601a4ac238bc",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "abf1972f-9aab-41bb-9e83-2837f83c9e09"
        },
        "item": {
          "id": "913ffd42-15c8-4f03-a32c-e12e083cfbad",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2ede17fe-6fa5-433a-a0f9-938b42263758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c513d6e9-ec83-409f-8979-67f32e1fba59",
        "cursor": {
          "ref": "8764aaa7-6436-4178-92a3-cb52aa100103",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "36ee01cb-11c4-42a9-90fd-e06fccc2fa59"
        },
        "item": {
          "id": "c513d6e9-ec83-409f-8979-67f32e1fba59",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "5acacd85-3d1a-4b77-b969-088d1fcb6df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea807cf8-02a7-4d93-b1cd-5e6814e76948",
        "cursor": {
          "ref": "af003aee-a435-4c33-b21c-3180c20c262a",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ccaed438-26bc-47f4-8af2-4ee67588a898"
        },
        "item": {
          "id": "ea807cf8-02a7-4d93-b1cd-5e6814e76948",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "69a440f0-e3a8-4040-91d3-e6dcc79eb126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5bbc12e-947b-4b69-b1f5-4fe429fe52a4",
        "cursor": {
          "ref": "5238b64e-ab70-42a0-accd-b98cedcb4c17",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "d014cc16-ea66-4beb-9223-18a636547044"
        },
        "item": {
          "id": "f5bbc12e-947b-4b69-b1f5-4fe429fe52a4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4495b39f-c711-4f81-853c-393f09530850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0fce80-e96b-4edb-a9e4-3e99e8657748",
        "cursor": {
          "ref": "0cd5ac4c-1fd9-4936-bf3c-5a652ae46793",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "59f7316a-cbca-4589-aefe-4a2d0bf897ac"
        },
        "item": {
          "id": "fd0fce80-e96b-4edb-a9e4-3e99e8657748",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "0f1e51aa-2f43-4386-b963-5e94d860652e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "864fb3c6-1185-406b-a603-5f12c9d6a43d",
        "cursor": {
          "ref": "b4f70103-a775-4847-9c02-cc5b9f499454",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "195e037b-41cd-4b8e-9a97-35e8cd49c616"
        },
        "item": {
          "id": "864fb3c6-1185-406b-a603-5f12c9d6a43d",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7fc841a6-a1d8-4c01-9d40-84ee8e108eba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e65593c-af8f-4ad3-8d00-9a022222a870",
        "cursor": {
          "ref": "e792f187-2a6e-4889-981b-3f8204ff94c1",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "c3aa81e9-f3b4-496d-b9d1-4f83b8be9cbb"
        },
        "item": {
          "id": "9e65593c-af8f-4ad3-8d00-9a022222a870",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "c331228d-95a2-4568-b2a1-91b0cec5c69b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded6bdcd-36e1-48dc-95cf-ddd45d3255c5",
        "cursor": {
          "ref": "1af9651e-c3e3-44a6-8dbe-84f850665152",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "876bc86a-c44e-4ef8-9360-174c702b3d44"
        },
        "item": {
          "id": "ded6bdcd-36e1-48dc-95cf-ddd45d3255c5",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e02632db-d380-4262-a3f7-8e4b3e315ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adaae2d-d889-48a1-bb6e-e69b41786974",
        "cursor": {
          "ref": "440f6423-a0bf-4c1c-8f2a-b0d645d2c45c",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "e929e0c9-e393-44b0-a45c-b74845dde5d7"
        },
        "item": {
          "id": "3adaae2d-d889-48a1-bb6e-e69b41786974",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "532efa90-f7e8-4180-8bf4-dc0e4f006c37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3a9e0c-d8cc-43c1-bc20-c9509dc17a4d",
        "cursor": {
          "ref": "61ce16cd-7856-4624-8ea5-79c68b2aaa79",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d6ca0126-2ed2-42b8-ad4f-b6b12617f0f1"
        },
        "item": {
          "id": "9b3a9e0c-d8cc-43c1-bc20-c9509dc17a4d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "e0908b61-6fc5-449a-99b7-d5c794a75e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04583a39-f85d-46c8-9cd0-7d2bf9608426",
        "cursor": {
          "ref": "39f4235f-60ff-4da6-ba08-e8a5e810b9b3",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "04a4f1a6-3259-4405-8d65-54415bbdd9e7"
        },
        "item": {
          "id": "04583a39-f85d-46c8-9cd0-7d2bf9608426",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "97174991-068f-4a88-8797-d4995168be2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e3818c2-b91c-4d18-a232-d1c0e154d46d",
        "cursor": {
          "ref": "3056151a-68df-47ec-8986-1aac3d0bb8c1",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "c751cca5-e0c5-4587-9157-72ce961c4e2e"
        },
        "item": {
          "id": "9e3818c2-b91c-4d18-a232-d1c0e154d46d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "4d47a292-2368-4ee8-8d3b-3d7939f6a97a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ede45c3-3e26-4bef-8917-a9e80a5cc086",
        "cursor": {
          "ref": "0e5130ae-7276-4923-a8ee-71081b724501",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "2aa75d91-b14d-4f2c-991d-9191b98170e7"
        },
        "item": {
          "id": "1ede45c3-3e26-4bef-8917-a9e80a5cc086",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "cab6e42d-c948-410a-99d4-30560b0f7145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0151d730-5bb1-4409-be9f-e61770a6679f",
        "cursor": {
          "ref": "932ecc78-302f-47a8-860b-27d62be738ed",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fcf0fc1f-2705-403c-9aae-d49c62028efb"
        },
        "item": {
          "id": "0151d730-5bb1-4409-be9f-e61770a6679f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e81d4841-b3c8-47f1-aefc-dbca1cdcd6fa",
          "status": "Created",
          "code": 201,
          "responseTime": 555,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "df4ab70b-49f5-4aa0-9f54-3ef2347291c7",
        "cursor": {
          "ref": "985af258-0b0f-4573-b0e6-8a9c55707cfb",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8e32bb65-c0ca-4909-bcb6-9a0409bf611f"
        },
        "item": {
          "id": "df4ab70b-49f5-4aa0-9f54-3ef2347291c7",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "39025da1-9b0f-465b-83e2-b4623e022ec0",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4e612f95-2a82-4f7e-ab09-a1d8b478239f",
        "cursor": {
          "ref": "adb5f2c5-a9e5-48dd-8480-413dd87ef6e3",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "8d7b076d-5233-493a-9c9a-5b5b3dd48767"
        },
        "item": {
          "id": "4e612f95-2a82-4f7e-ab09-a1d8b478239f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "1d0dda6e-e139-4c67-89b5-581c2241056d",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "3fa11f15-8499-4a8d-87d0-e5f021c476e5",
        "cursor": {
          "ref": "bf2ed090-20a3-4429-aea1-986954c12c28",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5588da24-7487-458e-8e35-ac596c3e630a"
        },
        "item": {
          "id": "3fa11f15-8499-4a8d-87d0-e5f021c476e5",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "30c0261f-812c-42b7-9119-0b0f10698c96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0137f8f-7cd7-4eb0-a37b-5b57f1ba515d",
        "cursor": {
          "ref": "fbd5df14-9a45-4359-9668-e79b5b078949",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "440cac77-496e-4967-a4a9-18690c104bb5"
        },
        "item": {
          "id": "f0137f8f-7cd7-4eb0-a37b-5b57f1ba515d",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "bd04e23c-aef3-48a3-ad5f-fe9e7b25fd58",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "5873516f-15c5-430b-8142-e22b90d2e854",
        "cursor": {
          "ref": "20a17790-803f-4fd5-ba05-7eb795b0ec50",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "276983d7-3aad-48fd-bd55-79a5f96cb38f"
        },
        "item": {
          "id": "5873516f-15c5-430b-8142-e22b90d2e854",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "471254b3-1eb9-4fd0-b72c-d6b1b50873a9",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "fee10239-f04e-4cd0-a7e4-bcf37fb1e0b6",
        "cursor": {
          "ref": "5548c34e-c2be-4f75-9a1c-c6590fa3b707",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "8376cb23-c115-44ef-9960-82794da169c3"
        },
        "item": {
          "id": "fee10239-f04e-4cd0-a7e4-bcf37fb1e0b6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "36943b92-2203-4b77-9c0c-4056ef8ceb2f",
          "status": "Created",
          "code": 201,
          "responseTime": 314,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "569dc911-8327-4408-9739-db8532509641",
        "cursor": {
          "ref": "c1eee145-715d-4985-bca1-8813bce8d527",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "c5080953-623b-411c-ae6b-436cf8f6b08b"
        },
        "item": {
          "id": "569dc911-8327-4408-9739-db8532509641",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "54584337-4758-4953-b30b-7d5ed2b56bd4",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "17a29d2a-532a-47cb-ba89-a896f50de399",
        "cursor": {
          "ref": "2fd07740-2055-443d-afdb-4c763d8475fd",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "1b9a44c4-b8bd-4494-a815-cdb27efd5450"
        },
        "item": {
          "id": "17a29d2a-532a-47cb-ba89-a896f50de399",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "e0c20f3b-b5e3-487e-88fc-63ea359e2c44",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "791381b6-a4ed-4d67-9cd9-a3c017a1eebe",
        "cursor": {
          "ref": "9183b8f3-6767-4620-92f3-cae263229384",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "31819c48-9c9a-44b3-b722-bd2e1aa7da8d"
        },
        "item": {
          "id": "791381b6-a4ed-4d67-9cd9-a3c017a1eebe",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "43e6d023-cb52-4741-8da5-2c03a85c1363",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f5be832a-9dac-4b0a-8f90-9d3dc905c2be",
        "cursor": {
          "ref": "d894005b-b5f6-4128-8809-db95487dfe62",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "a5d7c684-3632-4751-a856-85a82b4c2ae0"
        },
        "item": {
          "id": "f5be832a-9dac-4b0a-8f90-9d3dc905c2be",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e6c1da58-11ea-4cc6-bcc0-2e968cc0c0a8",
          "status": "Created",
          "code": 201,
          "responseTime": 501,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "cfa45668-510b-495b-8229-99ca21fb176f",
        "cursor": {
          "ref": "97e730be-31eb-47cd-8331-a79c1ae170e6",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "62d48d2f-ceff-4b35-a0f4-c2e6422c718d"
        },
        "item": {
          "id": "cfa45668-510b-495b-8229-99ca21fb176f",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "9560f3ab-5760-4f73-b499-5305c93b837a",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "d431e792-f17d-4060-82ef-3c2f9a074ba4",
        "cursor": {
          "ref": "a3010c62-9fd2-49db-be1a-576ec4f66b25",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "196c89e6-c7a0-4cde-bfdf-5e462dc6a9b9"
        },
        "item": {
          "id": "d431e792-f17d-4060-82ef-3c2f9a074ba4",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "cb2aa0f7-df08-42bc-ae6b-c2d556894140",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "ea95dbc7-7be0-4bee-ad72-b8460ee6ac22",
        "cursor": {
          "ref": "2c43c608-1c9d-47f3-b615-c909315d40d9",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6ecbdcdd-1b2c-4ca6-8cc6-30922760a4fd"
        },
        "item": {
          "id": "ea95dbc7-7be0-4bee-ad72-b8460ee6ac22",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f9525d77-ba80-47cc-ae7e-54c357bbc533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cd42a44-42ef-4aef-88ca-dd9ccb1f6245",
        "cursor": {
          "ref": "75bc5ab7-1e3f-423f-938a-c1b8f6af998a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "9efe46d9-a285-4fa2-ae4c-7d731dfaa775"
        },
        "item": {
          "id": "2cd42a44-42ef-4aef-88ca-dd9ccb1f6245",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "1157eebb-9f87-4ea0-80b4-dfaf8dd2aa52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8d617b-6b90-40b2-97e0-0a4237be43ac",
        "cursor": {
          "ref": "44c37865-19af-4095-afd8-924b372865e2",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "5c800094-0232-43b7-b432-96f31ec1be9c"
        },
        "item": {
          "id": "1f8d617b-6b90-40b2-97e0-0a4237be43ac",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "ebd9ad94-fd1a-4480-a7be-7de561a30394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22d4806-033d-4f9a-9771-8db11fa323ac",
        "cursor": {
          "ref": "f96e78c1-5d92-46ac-86c8-07c2984d5918",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "877d1112-dc93-4439-ada6-4e11ec62684c"
        },
        "item": {
          "id": "b22d4806-033d-4f9a-9771-8db11fa323ac",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "8c80ffdb-dee5-4b2f-b3d8-5fc42af1bb70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78bfc364-bbc0-4682-aee9-b2d1a8778c5a",
        "cursor": {
          "ref": "c4aff30d-194a-4d00-996a-b6ad57a2dac0",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "d8df958a-2912-4273-bc60-665187b9fc2b"
        },
        "item": {
          "id": "78bfc364-bbc0-4682-aee9-b2d1a8778c5a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "1e3c404c-ef18-41fa-b42d-2084f07e1bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7f677a-9a6a-47a2-88b8-7c5a6b21c856",
        "cursor": {
          "ref": "c4734ba6-5821-4def-a2ec-5469f862c155",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "966c8849-3944-4add-a722-c79e1ba07a45"
        },
        "item": {
          "id": "2f7f677a-9a6a-47a2-88b8-7c5a6b21c856",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "c4598471-b31d-4910-88c4-00420f426197",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe1e186b-1a5e-4b36-b2a1-4f13ab362251",
        "cursor": {
          "ref": "77ef6aeb-58f5-42c5-80d4-279d113eaf4e",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8298b0af-605f-4013-96d7-c5b5812e193a"
        },
        "item": {
          "id": "fe1e186b-1a5e-4b36-b2a1-4f13ab362251",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f7c95fc6-8426-4993-9a71-70d343f73027",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1755fa84-4822-43eb-adb0-1f0770453b09",
        "cursor": {
          "ref": "4eb234fd-8377-4e4b-9cd8-6b8315065669",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "23896255-ff45-4c82-abfb-9dd7e2a82cf9"
        },
        "item": {
          "id": "1755fa84-4822-43eb-adb0-1f0770453b09",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "eb31ac1c-0dfe-427e-8009-3d411dc4903f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0393d3b8-da2d-4d25-ad29-8d76e37cdd54",
        "cursor": {
          "ref": "bf69c4e0-bc9e-41b5-8c07-0e94e5d9922f",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "a6af3597-d9fc-4291-ac62-9a1517b4eb69"
        },
        "item": {
          "id": "0393d3b8-da2d-4d25-ad29-8d76e37cdd54",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "0a272a36-551c-4b43-b8f2-94358b5d47d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dec3e5f3-43db-4680-a5db-8dc2ffe8f348",
        "cursor": {
          "ref": "b82a6f97-cf0b-461e-a27d-86aa93d936dd",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "31cfee28-b752-48c3-bd51-c4d63653ac88"
        },
        "item": {
          "id": "dec3e5f3-43db-4680-a5db-8dc2ffe8f348",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7606e339-d0a1-46a1-8b14-a33459169912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4131ff38-32e4-4bd8-bf29-909b262a9b6c",
        "cursor": {
          "ref": "f3ac73e2-a5ed-488e-871f-3a96a2d49dc8",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "6f91a4b8-1d07-4281-a909-bf31ae65db8b"
        },
        "item": {
          "id": "4131ff38-32e4-4bd8-bf29-909b262a9b6c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "dea0e604-4ba5-4c94-ad4e-e2fcacf492ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2144b5db-0a50-40e0-a1da-0f749b418097",
        "cursor": {
          "ref": "f2fcb465-be6d-4891-a36d-2978d58cfe6c",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "bd92556d-073c-4967-a564-9344815347be"
        },
        "item": {
          "id": "2144b5db-0a50-40e0-a1da-0f749b418097",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3ef36c78-8c77-4ad0-a92e-37a85ccf4547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcb0e1d5-bfbb-4927-8e69-8523f8f1800a",
        "cursor": {
          "ref": "c260c97b-4430-4dd3-bb0c-4174ff85e7bf",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "af213fa8-6ea2-4cea-b7de-c67a1dc06874"
        },
        "item": {
          "id": "bcb0e1d5-bfbb-4927-8e69-8523f8f1800a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "7af5846e-472c-4ce2-90ae-14ae978b8eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68321327-7295-4222-acc9-05654528486c",
        "cursor": {
          "ref": "558a301e-e772-4851-9ab3-321dfa8070ee",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "f4369d82-1327-4008-a466-cc225de3326f"
        },
        "item": {
          "id": "68321327-7295-4222-acc9-05654528486c",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "141a3b15-96c4-436b-ba05-f670251cbcf1",
          "status": "Created",
          "code": 201,
          "responseTime": 341,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "41c8c4e3-79e2-4079-91db-60a666fa8f2f",
        "cursor": {
          "ref": "64eb9844-f335-496d-885c-8076f951271d",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "49f55dec-7616-4b1e-b952-73d5ee753651"
        },
        "item": {
          "id": "41c8c4e3-79e2-4079-91db-60a666fa8f2f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "5c0f2e2f-dc82-485b-a546-7ef169f151a6",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "a44264b4-79af-4637-86db-2e07af43582e",
        "cursor": {
          "ref": "d9874a95-67a3-442d-82b6-9e0fb2b46f87",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "45d8603a-4440-499a-a823-66ff06afd007"
        },
        "item": {
          "id": "a44264b4-79af-4637-86db-2e07af43582e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "28879e60-cf90-41e8-8f7d-dafd3bcf6a45",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "9a99cda6-0e29-402f-ac2e-263df5b3e225",
        "cursor": {
          "ref": "7a20572c-20bb-4c07-ba60-6e42e0e47e03",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "2fe99a32-6128-4c98-a58f-570a25491367"
        },
        "item": {
          "id": "9a99cda6-0e29-402f-ac2e-263df5b3e225",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3e6b70fa-9fd6-4379-928a-4f45e898ade4",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d9d96e35-91fb-4c31-973c-a113b837dd9e",
        "cursor": {
          "ref": "91a07057-437a-4dce-9cda-a7f1edafee90",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "99bdc444-9913-48ae-bc19-498661102288"
        },
        "item": {
          "id": "d9d96e35-91fb-4c31-973c-a113b837dd9e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1f61056b-b17c-49b0-9589-39c92bf4731f",
          "status": "Created",
          "code": 201,
          "responseTime": 290,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "4a964340-2538-4cd3-9740-d45759ea2dc2",
        "cursor": {
          "ref": "015ab366-6e0f-4cab-9068-b88a5b92f996",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "29c5764e-b4dd-4ad0-b15b-acf84a2be886"
        },
        "item": {
          "id": "4a964340-2538-4cd3-9740-d45759ea2dc2",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "13bfd8cf-87ee-4307-8a32-c8cf477ea68f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3308de1-d78f-4527-bc98-7908d66283d3",
        "cursor": {
          "ref": "e2d68041-7bae-48d7-8130-2ae7a0d73068",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "2ec19569-6e2c-4714-97d3-8d86bf724691"
        },
        "item": {
          "id": "b3308de1-d78f-4527-bc98-7908d66283d3",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "eafffee1-0909-4105-a172-8d70a2b41080",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09de2be1-df11-4611-bce2-0cac2d2cfcf5",
        "cursor": {
          "ref": "9639f777-0c15-491a-8e57-d26330ef95b9",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "cbedd5a5-6337-4ded-baa1-ea0eb7d141eb"
        },
        "item": {
          "id": "09de2be1-df11-4611-bce2-0cac2d2cfcf5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "f79b63c4-0688-4841-be28-3153fd0529a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b825609-2439-428c-be7d-c589dcf5d739",
        "cursor": {
          "ref": "e7b75c47-7321-4cbd-bef6-30cf0bdaa7b4",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "f956f2c8-4bf5-48a4-8ad7-d8cc64513d63"
        },
        "item": {
          "id": "1b825609-2439-428c-be7d-c589dcf5d739",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2f573cd5-9e71-4718-8676-c80decce6671",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19e34d2e-92f3-4aae-b196-0e1b042a1a39",
        "cursor": {
          "ref": "8725805e-9369-4349-b6f9-4ba29d972cca",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "af7df14e-4133-4ac6-9b2f-199d0cb0df57"
        },
        "item": {
          "id": "19e34d2e-92f3-4aae-b196-0e1b042a1a39",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "34d30a79-b1c3-40df-a3b6-e1a317a1064a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "309c58a1-eca0-495f-a1d3-dc992c1e255e",
        "cursor": {
          "ref": "d2894b12-d0d5-4aa2-87c5-925f92d673d4",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "88ecb0b6-0333-4a73-a112-21a7460319be"
        },
        "item": {
          "id": "309c58a1-eca0-495f-a1d3-dc992c1e255e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "ed7dfabf-b803-4fc3-8b27-346263ffeaea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ecff466-d2a2-4165-98d4-7979ae62e236",
        "cursor": {
          "ref": "a6450816-d599-4288-a574-5f9ae2fa2eee",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2b1c4949-a0ea-463f-96d8-943ea7174bbf"
        },
        "item": {
          "id": "2ecff466-d2a2-4165-98d4-7979ae62e236",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "9e34ae35-40a3-4c18-afe1-f71864326b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c5d1d7d-88f7-4d09-993e-4d22a4d53e71",
        "cursor": {
          "ref": "17994d47-4ded-4396-9f28-f722cb0c2321",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "90464f62-3917-4d41-9477-dfe65bc4a24b"
        },
        "item": {
          "id": "2c5d1d7d-88f7-4d09-993e-4d22a4d53e71",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e7ecf94b-b1ed-4988-b97a-9ffb4f2ad251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a03ac45-75fa-40fd-9cc5-d74d3d59b96a",
        "cursor": {
          "ref": "27f7fa5d-cf1b-477c-ba0f-83f1cdb4cfac",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "545381f4-cbac-409c-a596-784849f3adb0"
        },
        "item": {
          "id": "2a03ac45-75fa-40fd-9cc5-d74d3d59b96a",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "21b585fb-acb3-4f34-8e4c-f403a8dd6310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f026f64f-edca-47ed-b39a-d0a839ac7dde",
        "cursor": {
          "ref": "d253c30d-e6da-4498-a568-86abc68d0593",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "56ca304e-27dd-4a8b-9f79-3a4befc1b4ee"
        },
        "item": {
          "id": "f026f64f-edca-47ed-b39a-d0a839ac7dde",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "93599fce-0ff1-47da-9ba9-9df2ea28df7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb24e8be-c083-4ae1-9f6f-60ed19acba92",
        "cursor": {
          "ref": "8371e8ae-f4ef-4b01-abd6-7adf3ba56524",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b18b4df9-8daa-4a25-adb1-4d42ff03f9cc"
        },
        "item": {
          "id": "bb24e8be-c083-4ae1-9f6f-60ed19acba92",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "012cc117-321d-4fe4-af88-9525d7386895",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e62ed7b0-c715-49ee-b84e-ac7d9b6cb491",
        "cursor": {
          "ref": "51ce8c1e-c40a-4d10-b7c6-6365837c1dd9",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "9f169f9a-1a55-4f38-905f-c9ab837fea57"
        },
        "item": {
          "id": "e62ed7b0-c715-49ee-b84e-ac7d9b6cb491",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "be5afc04-45fc-4297-be47-2c36eda05324",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6052d331-1aff-43de-aa08-b2b3595c8849",
        "cursor": {
          "ref": "1111af44-0ce5-43bc-abd7-3c35382784d2",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "bc3cee54-373b-4111-85e7-53ea494e6426"
        },
        "item": {
          "id": "6052d331-1aff-43de-aa08-b2b3595c8849",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "49afc7e3-09a7-494c-addd-c4b2ec729f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fb51998-b4aa-4eea-8168-d2130852c9bf",
        "cursor": {
          "ref": "57c32eeb-a830-47d6-9a2e-9605aa715068",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c864ab79-9608-4c0f-b2ca-e0c3fa05072c"
        },
        "item": {
          "id": "5fb51998-b4aa-4eea-8168-d2130852c9bf",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "246c30f8-27f3-41ff-9b1f-37392a882105",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ce82a7-73c1-4bfd-ad26-707f87b45031",
        "cursor": {
          "ref": "d04c3830-6f6f-426f-9a5e-0a247b4174aa",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "9453da4d-0b2d-4429-93c7-4bab68a6b6d5"
        },
        "item": {
          "id": "21ce82a7-73c1-4bfd-ad26-707f87b45031",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6a631a50-8e37-436e-9a1a-2865906d398b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f3b5411-c2a3-454d-99bf-cca106951ec9",
        "cursor": {
          "ref": "898b915d-f59a-450f-a03a-cf223aaed022",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "796741e9-9434-4dda-8f39-dca43d6237ca"
        },
        "item": {
          "id": "6f3b5411-c2a3-454d-99bf-cca106951ec9",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "8bfce371-5012-45bb-a40b-5a647759fce1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8d4aacc-ffe9-4348-a0df-2d83ff6522fb",
        "cursor": {
          "ref": "78ae02b4-1cc8-4009-bf8c-3358a44e9c53",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "c901fbe7-878a-422f-a0f2-359bcb09e8a2"
        },
        "item": {
          "id": "a8d4aacc-ffe9-4348-a0df-2d83ff6522fb",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "5d130beb-0830-4a95-8c78-7b8b1eacef51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f10950a7-5716-4c7d-a45a-68e855c8332e",
        "cursor": {
          "ref": "c79fc9aa-5862-427f-afa3-2228d1a92f08",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "cbcac1d0-6e95-4d2f-ad5f-61f152844af1"
        },
        "item": {
          "id": "f10950a7-5716-4c7d-a45a-68e855c8332e",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "76460290-0e86-45e6-b9d2-958f1dfcbbe5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b22f0a4c-6453-46c1-a2f6-df1373c1d35f",
        "cursor": {
          "ref": "44e881b5-b4f0-4270-b83f-ceb6c3a41ad9",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "21e55073-3597-4bfd-9056-f56ab8f20ae8"
        },
        "item": {
          "id": "b22f0a4c-6453-46c1-a2f6-df1373c1d35f",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "ae852f65-2d3f-4c98-952c-40b076cbef72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a6905ed-100c-4a4b-98a6-f2609542f152",
        "cursor": {
          "ref": "bf8213ca-1e2e-476b-a7a4-ce66be2b1b31",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "d32f66d3-1ac2-4890-be2b-76bd6b701786"
        },
        "item": {
          "id": "0a6905ed-100c-4a4b-98a6-f2609542f152",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9926cd42-ccd5-4487-bd8f-403eacf3e1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74b8995-c755-4526-aecf-5f3359ba72d7",
        "cursor": {
          "ref": "3e5931d2-1f82-439f-80c6-fac53782b9e0",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3c480713-ed76-4f1a-9dc7-b1e6de74b0d7"
        },
        "item": {
          "id": "e74b8995-c755-4526-aecf-5f3359ba72d7",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "8a39bc18-ef5e-4c73-a64c-977e6a551a7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7cf914a-a0e2-4c44-ba89-76f9efd1718f",
        "cursor": {
          "ref": "e464a838-7148-4cf7-b268-941569f94b08",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "eeb546ce-9b1c-4266-b214-7b8b91f689fb"
        },
        "item": {
          "id": "c7cf914a-a0e2-4c44-ba89-76f9efd1718f",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "075361ee-7a04-425e-bb91-c084f5c26737",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe2af62e-d2c6-4603-b0e4-d68e4707511c",
        "cursor": {
          "ref": "17b83660-eeec-468f-aa7e-c58c440df919",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "65442e02-4e6c-4947-ba17-5329f8d602ec"
        },
        "item": {
          "id": "fe2af62e-d2c6-4603-b0e4-d68e4707511c",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "9796d965-5d2a-47a4-9235-86641ea56459",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4519c1a8-905d-4384-b41d-a7e6f69917b6",
        "cursor": {
          "ref": "57c54b3d-8bdc-4a2e-91c6-2072563daf11",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "9306298e-2de2-4c65-8bff-ba172ff24d69"
        },
        "item": {
          "id": "4519c1a8-905d-4384-b41d-a7e6f69917b6",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "b819e763-a12d-4e1e-af94-62ea85b61815",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5da03773-73f8-45f5-a49c-b7ece19b2b33",
        "cursor": {
          "ref": "6ae41539-160e-4195-963f-3ad694df1f02",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8481d43d-08ac-4b58-8df0-92621e20964e"
        },
        "item": {
          "id": "5da03773-73f8-45f5-a49c-b7ece19b2b33",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "4ed2ce74-9ec7-4156-83d4-82d945b0b56f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a72fb13a-b7ef-4c75-aed6-33d89dcf2330",
        "cursor": {
          "ref": "c4d4747c-a2d4-416e-98d9-ec1aae8909ba",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "05fc6d3a-255c-4c6c-9cfd-46dd02878643"
        },
        "item": {
          "id": "a72fb13a-b7ef-4c75-aed6-33d89dcf2330",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "08c1e4fd-8f2a-4a4a-8c50-a2ea4e4b9226",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4054875-74c4-4004-a2c2-72afd3cb30e6",
        "cursor": {
          "ref": "62846974-5f29-4376-bdd0-d35971e71dec",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "971bff65-ef62-4cb4-be9b-1410c5784d0e"
        },
        "item": {
          "id": "d4054875-74c4-4004-a2c2-72afd3cb30e6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "14d7216b-b382-4ba4-969a-5efaea1960ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed249ab8-2db8-4d27-b3d3-d47d90de331c",
        "cursor": {
          "ref": "e629bde6-332b-4b2e-81f0-b8bd538f4283",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "cad75f0b-764a-4dc2-b9f2-71a0bb8c3191"
        },
        "item": {
          "id": "ed249ab8-2db8-4d27-b3d3-d47d90de331c",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "c057bb6f-a36d-4812-960b-93ae24adcf69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc2de2ca-aae5-437e-b34e-2417b1ce9957",
        "cursor": {
          "ref": "74175945-be84-420f-aaba-0d41ae8266f3",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d2bd8055-dbf1-428f-8b7d-5f8d52af9798"
        },
        "item": {
          "id": "cc2de2ca-aae5-437e-b34e-2417b1ce9957",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "992dbfcf-b8b8-4208-b5f4-0658ab67c2fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e6148f-4d04-45a5-afe2-357a178e34b2",
        "cursor": {
          "ref": "f3211e00-ce07-49ed-a797-5981a6983e2a",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c726a2f1-eda6-4904-a38b-f10f1f0966f8"
        },
        "item": {
          "id": "68e6148f-4d04-45a5-afe2-357a178e34b2",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d33dfea9-b44f-4af7-9a93-8cf38a28eed0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925a6185-bed3-44a6-8453-64d39ad5beb8",
        "cursor": {
          "ref": "493d9ead-2cc3-49cb-92dd-1b2550b2f524",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "10c734e2-55ae-4f2b-a3f8-6c76833945ee"
        },
        "item": {
          "id": "925a6185-bed3-44a6-8453-64d39ad5beb8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ea32f2a4-c97e-4450-a9f8-86000eee4683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4303c438-63f5-460f-bd5e-c7d2f3b7c3e9",
        "cursor": {
          "ref": "30d6f850-c0ff-4031-82cd-bb74bf01b7fc",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "14c34302-f7ac-4f60-9428-815d003cab2f"
        },
        "item": {
          "id": "4303c438-63f5-460f-bd5e-c7d2f3b7c3e9",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9ccfdaa0-5583-4943-888a-6caa8ad1e24c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00ed5251-1d75-487c-b1b3-03da84f8066f",
        "cursor": {
          "ref": "6d0d3dd7-ddf0-4127-865a-0e2d3a113592",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "b0176713-684d-4124-be41-d3f8eedf3c0d"
        },
        "item": {
          "id": "00ed5251-1d75-487c-b1b3-03da84f8066f",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "79465f48-20aa-4f23-bf31-5d329582ef57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "498ec2a4-79d6-45f5-88ed-24fbbf92e9bd",
        "cursor": {
          "ref": "dd6dff0d-a626-4478-8042-d434dfed179f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "44d23352-f27c-4869-ad3a-2d9091b8fa7a"
        },
        "item": {
          "id": "498ec2a4-79d6-45f5-88ed-24fbbf92e9bd",
          "name": "credentials_issue"
        },
        "response": {
          "id": "83985952-5594-411a-84b3-a5053e2b922a",
          "status": "Created",
          "code": 201,
          "responseTime": 350,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "704f1318-f40e-4e98-9038-52bd132317ac",
        "cursor": {
          "ref": "08ad74c2-b07e-4976-9341-0120abc16bd0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f4794a00-3837-471b-8de2-3367afb65cdd"
        },
        "item": {
          "id": "704f1318-f40e-4e98-9038-52bd132317ac",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "84cb5e3a-fd79-4793-9090-6fc98cce448b",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48ec2e1-b540-43c0-aebb-b82f83d5cdc2",
        "cursor": {
          "ref": "13e37390-3c46-4e38-a99a-247f83b1668c",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "d565fe04-73e4-4b40-9895-de5f0e93b860"
        },
        "item": {
          "id": "f48ec2e1-b540-43c0-aebb-b82f83d5cdc2",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "49c48b3c-bfc0-42a4-a0b2-dd08fe18861c",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4d5577-9f87-4696-bcc3-f5e09048224c",
        "cursor": {
          "ref": "5cff4395-2ff3-4c82-ba82-fd0d2e3f00d4",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "6398e385-5b79-4dd4-8f45-5805522aa69c"
        },
        "item": {
          "id": "fb4d5577-9f87-4696-bcc3-f5e09048224c",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fff24312-8d3c-4081-9b49-307c104248d8",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "de2a2275-29a2-41cc-a0e6-7026cce2d4a1",
        "cursor": {
          "ref": "c90fb535-b788-4c10-be03-deaaf43535b5",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "dc61a8bd-eec5-4b79-9123-2468153c4f19"
        },
        "item": {
          "id": "de2a2275-29a2-41cc-a0e6-7026cce2d4a1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "980a3282-6084-4363-93da-35b04619d8a5",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-11T00:35:34.526Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-11T00:35:34.526Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "504300e3-6e75-45ea-9b73-f69652e6c5b0",
        "cursor": {
          "ref": "a0762033-0a50-4ecb-ad96-32faa71e6c9a",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "d4d042f3-04ff-485f-af8f-287190db7855"
        },
        "item": {
          "id": "504300e3-6e75-45ea-9b73-f69652e6c5b0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "01e837d8-968b-4a7c-bfe4-442bc8606dd6",
          "status": "Created",
          "code": 201,
          "responseTime": 301,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7567ed-7c73-4573-bdb5-44419cacf220",
        "cursor": {
          "ref": "161fe32f-0d82-40c9-a4da-cddb8df7e4db",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "112da76d-0897-4df2-82e1-dbbf5ff30b02"
        },
        "item": {
          "id": "3f7567ed-7c73-4573-bdb5-44419cacf220",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "98ffac57-db24-4b1b-b6da-8438cd6500aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f8803b8-0366-4b4c-8539-2a40fcf2f4cb",
        "cursor": {
          "ref": "8994ef08-b35f-4569-ae78-7d90f57b00b9",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "13b3f25a-c00d-4c2e-9d9c-35880439bf72"
        },
        "item": {
          "id": "4f8803b8-0366-4b4c-8539-2a40fcf2f4cb",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "2b7c3c57-9220-4558-bf99-61841198aacd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b17a7710-0d90-4127-aa70-1e68db3cfcc9",
        "cursor": {
          "ref": "9c95769f-5642-45d5-ac0c-b8437af6e6f6",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d2c1e63f-70c3-41c8-9d06-c21fa41af2c0"
        },
        "item": {
          "id": "b17a7710-0d90-4127-aa70-1e68db3cfcc9",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3ce10702-df99-4af0-84a6-ceea88f5b20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56ccbcda-01a2-4944-b552-43eac4aca791",
        "cursor": {
          "ref": "eb2fcd23-1939-4d09-a844-c61453143a45",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "c9bb2645-8ef2-495d-9d45-2046c91c64cf"
        },
        "item": {
          "id": "56ccbcda-01a2-4944-b552-43eac4aca791",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "81bd03e6-e783-466d-bcc5-2c9021976563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c05085-540c-49ce-b251-2d4b44702a54",
        "cursor": {
          "ref": "95be67ee-8500-4b94-a1c5-5e80b3eb48e4",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "cb8fd63a-ec2e-4aac-ad66-6ef336cae9ae"
        },
        "item": {
          "id": "b4c05085-540c-49ce-b251-2d4b44702a54",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e597ed1a-4327-4a8d-aea7-d031cda506d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c42667b-c7d5-4d3d-830c-5ab38a216736",
        "cursor": {
          "ref": "3861a3fe-5550-4328-9e59-785a0fae0954",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f8e3f687-c3b8-4a7f-ab3f-d7c8b4853b48"
        },
        "item": {
          "id": "5c42667b-c7d5-4d3d-830c-5ab38a216736",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "88bb1ea3-8411-43ab-b3d3-0fdc5ba465f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e48f0681-a91f-4f40-aabd-ea23ba189046",
        "cursor": {
          "ref": "f83559a6-822e-4ce8-af44-3a99299c62b6",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2779a127-7c3f-4d97-908c-c080d302a28e"
        },
        "item": {
          "id": "e48f0681-a91f-4f40-aabd-ea23ba189046",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "05bc4c60-d907-4d85-9db9-57d87a80396e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c9ecf29-c20e-4829-bfc2-52b8e9251aa5",
        "cursor": {
          "ref": "db3a12e7-8596-486a-a348-7d4058531d48",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "9cba1e11-de14-4e6d-9f04-7159a757f276"
        },
        "item": {
          "id": "1c9ecf29-c20e-4829-bfc2-52b8e9251aa5",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "d2a39191-ad46-42be-a818-7f85b515e4e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ef5e519-106d-4b58-a2db-710d62deeb33",
        "cursor": {
          "ref": "c761a60e-3cb4-4789-8564-9b195942da18",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "d04636e0-db35-43cf-b830-1b8e9349681d"
        },
        "item": {
          "id": "8ef5e519-106d-4b58-a2db-710d62deeb33",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f71aeb1d-854e-4b7e-955e-9693a14bb620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9c98fc7-7312-403a-bbf8-846cb8f1da90",
        "cursor": {
          "ref": "44be210b-9bda-4601-9a5e-809977668e73",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "4c8689cc-b5bd-4a0b-b581-1d75b3e0e0bf"
        },
        "item": {
          "id": "d9c98fc7-7312-403a-bbf8-846cb8f1da90",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "18a4d9a4-2260-4ccd-881f-9ffc17cf7ab5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813e096f-3a09-4047-a1c9-0941184268e5",
        "cursor": {
          "ref": "a59ec6b2-beb9-4cb1-be69-e5a90db113c6",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "56306a93-a3b4-4b20-b9a5-86e8fe7824ff"
        },
        "item": {
          "id": "813e096f-3a09-4047-a1c9-0941184268e5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ad866023-adf8-4806-8766-94de013f30f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f845816f-4ef1-4a27-a6c4-6185a6058630",
        "cursor": {
          "ref": "a8e482d8-4af8-4d2e-963d-10d7e57f1f90",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d90286c5-5df4-41a5-970c-3f31a15b6dbe"
        },
        "item": {
          "id": "f845816f-4ef1-4a27-a6c4-6185a6058630",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "775d9265-143c-4d98-be8e-99eae2731932",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c767873b-f19b-4eca-9786-70eda98dc4b3",
        "cursor": {
          "ref": "f53f22dd-303e-4eec-be34-60061395ef27",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "00b16048-7233-4133-abbd-1e783f9f8080"
        },
        "item": {
          "id": "c767873b-f19b-4eca-9786-70eda98dc4b3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "eae60ba9-24b3-4411-bb44-0f40aea63b64",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 105,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "c7b6b27e-aaaa-4b67-9c9e-2ecd187ed934",
        "cursor": {
          "ref": "8f4271a0-10e9-4273-8838-06d8e619b6e5",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "7948eae0-a75a-443f-8c63-2305588370d3"
        },
        "item": {
          "id": "c7b6b27e-aaaa-4b67-9c9e-2ecd187ed934",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "32717f00-c8ef-4fb5-be13-f9322338247e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "67c75a78-9cce-47ab-be39-5f0c76cfc01e",
        "cursor": {
          "ref": "bb541271-fc58-4f03-a673-e147eb037e86",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2d43f118-7c81-4318-aa01-ee201c4423ee"
        },
        "item": {
          "id": "67c75a78-9cce-47ab-be39-5f0c76cfc01e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3f04e3f8-0162-45e5-ab17-136d4ab3d63f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fdc90c8-9bd6-4191-899d-7653ff446aad",
        "cursor": {
          "ref": "d5698bc9-e2c3-4afe-a689-a05bd4ca06a8",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "c5552a58-7334-4d7d-9f4e-eea2d27a2bc3"
        },
        "item": {
          "id": "5fdc90c8-9bd6-4191-899d-7653ff446aad",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "9e5693c9-8b52-4a6e-ad4f-50ace075694f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ae6809-0aac-493f-8e00-e763db4a46d6",
        "cursor": {
          "ref": "45269fc7-c867-4824-bf1a-996ba17ce912",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "626c6c44-b382-4451-bf0f-e8e921e3df15"
        },
        "item": {
          "id": "14ae6809-0aac-493f-8e00-e763db4a46d6",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c924f4ca-3817-40a2-8cbf-ddfb41bcfd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25bc4fa0-3736-40b6-9e46-0f14fa02caa0",
        "cursor": {
          "ref": "e6e59011-f58a-4a05-8db5-932efcf4290b",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "5b12e27d-a56f-43c6-9085-2e8ef25c796f"
        },
        "item": {
          "id": "25bc4fa0-3736-40b6-9e46-0f14fa02caa0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "57bed90b-1542-494d-8e7f-32e077780fc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6abade0-2b89-417a-86d7-000eb8f32733",
        "cursor": {
          "ref": "126a34f9-fab3-409f-9018-0c62496c6e78",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e88fa247-953b-4a7f-9d35-62f8e759d2d9"
        },
        "item": {
          "id": "d6abade0-2b89-417a-86d7-000eb8f32733",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "f4d54d9c-432f-4ddc-bced-568d38bab6c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffc6843c-b49d-4210-8c5d-7f587cd0b93a",
        "cursor": {
          "ref": "00491e59-5f3f-4bb3-a9e9-a0ec348a4e6d",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "1a48a4f4-fb5d-4589-b59f-6f5592b570c0"
        },
        "item": {
          "id": "ffc6843c-b49d-4210-8c5d-7f587cd0b93a",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "3b259752-eee9-48c6-84db-bd87f49fb5bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f90109ad-f2a5-4560-9e54-33bd70eea7ce",
        "cursor": {
          "ref": "2f4a35e6-768a-4dba-a600-89dd1a7a0a68",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "a7c23bdb-69df-4378-b47d-944134644dd5"
        },
        "item": {
          "id": "f90109ad-f2a5-4560-9e54-33bd70eea7ce",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "24bf0148-c3a2-481e-b9fc-ba15da530148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f18c754a-317d-4b11-9393-afdb21aad374",
        "cursor": {
          "ref": "2c2682e8-c144-4932-8f85-86464363c819",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "31210694-7130-4b66-926c-2d67717ea903"
        },
        "item": {
          "id": "f18c754a-317d-4b11-9393-afdb21aad374",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2a7e7032-0f29-4df7-92ef-8e714b28bf6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e4b5be-1e58-4d46-9131-61d5dc8f0fd1",
        "cursor": {
          "ref": "57a865f0-e417-4a20-b145-c8960acef25b",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3aed71cd-7706-42dd-ab2c-65d0a0049acb"
        },
        "item": {
          "id": "33e4b5be-1e58-4d46-9131-61d5dc8f0fd1",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "8e53b0d4-8d7b-4c57-a5c4-3fa437043657",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d388672a-080e-4ea4-bb2a-99d9db1bb568",
        "cursor": {
          "ref": "f0a8a799-c3ea-4049-aff3-35db6346b43a",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "11d9545d-76db-4a94-a317-a244a46b3945"
        },
        "item": {
          "id": "d388672a-080e-4ea4-bb2a-99d9db1bb568",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b22a1be0-a998-4817-a831-43fd740b1511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36af3dd0-0127-4234-9e1b-693bc806afa7",
        "cursor": {
          "ref": "3289d778-523c-4560-95e9-966d4128b8da",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "be72e393-51d9-4422-ba27-f34133c4aaf1"
        },
        "item": {
          "id": "36af3dd0-0127-4234-9e1b-693bc806afa7",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c15afd74-f7d2-476a-93f2-0beeb090f4d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "810144e8-640a-49b0-bfb5-6a6705c6b4ee",
        "cursor": {
          "ref": "af4a5952-9db8-47ab-a351-c17bc520e69d",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e309125f-3141-4e65-9cc9-70eade967f30"
        },
        "item": {
          "id": "810144e8-640a-49b0-bfb5-6a6705c6b4ee",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "f1141fd4-e6ee-47d3-be69-166d3e2d6afd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719b4ecc-1c1e-4d5c-9cf3-8b660fc891bf",
        "cursor": {
          "ref": "12097f21-ef06-4aca-aa07-571070cdb7ee",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "57218101-ea54-48c5-a85a-fbd8a24e87c9"
        },
        "item": {
          "id": "719b4ecc-1c1e-4d5c-9cf3-8b660fc891bf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c56e1363-9f38-4580-b2b5-de94021855e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5656faa3-ff60-4c27-9252-d600138f5b22",
        "cursor": {
          "ref": "ac614f01-4540-475b-8dbb-48ab5debcdeb",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "de156cfa-26ea-4efb-a16e-5da80ec69a28"
        },
        "item": {
          "id": "5656faa3-ff60-4c27-9252-d600138f5b22",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "04340fda-32bc-4b50-b65f-870f0bce4f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd8fadb4-0c72-4b8c-9a29-3ba202651818",
        "cursor": {
          "ref": "8417d08a-225c-4804-b303-b139a49b60a2",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "f03e48fa-c788-4e58-890c-da30ae35f9e9"
        },
        "item": {
          "id": "fd8fadb4-0c72-4b8c-9a29-3ba202651818",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "011993cd-08b2-4502-ad22-85ed43bfec2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea1e66c0-da77-46b4-9100-2061a175e9c8",
        "cursor": {
          "ref": "9afaff59-728f-4729-a2e6-124641c1c107",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9ea52397-870b-4222-86c8-69ed57b9be7d"
        },
        "item": {
          "id": "ea1e66c0-da77-46b4-9100-2061a175e9c8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "9ccb7a98-9b1b-48b5-a6e3-763ce1a2e025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd37599a-90ea-4a47-8087-2e780e45de26",
        "cursor": {
          "ref": "9dc35477-8451-4371-a240-2809d9e72f19",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "eeeb745f-ad26-455f-855f-de25c1f9ab5e"
        },
        "item": {
          "id": "fd37599a-90ea-4a47-8087-2e780e45de26",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "2003130f-6c1b-4a25-8411-e1eb1fe37a2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f591e2d3-34d2-4fcb-ae0b-7810f52a51cb",
        "cursor": {
          "ref": "62278657-3be5-491c-8581-4f83a4553dd1",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1ca306e6-9421-4a78-99e5-bdc1d37e4cd9"
        },
        "item": {
          "id": "f591e2d3-34d2-4fcb-ae0b-7810f52a51cb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "400939e3-7934-48b7-8637-890e68fef36f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 104,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "f5cd3184-5dd2-4555-a981-84f3645d36f7",
        "cursor": {
          "ref": "4c02d7f2-4150-4c88-973d-8f15037b2994",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "0690672f-b4d0-4117-a374-b32ba117afd9"
        },
        "item": {
          "id": "f5cd3184-5dd2-4555-a981-84f3645d36f7",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "524e66e1-10be-4e63-a94c-196dd2d91888",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14f344b6-8d0e-4bb1-b965-2e4faa31c590",
        "cursor": {
          "ref": "e5533316-d48e-4949-bdca-2f245a3ac0d4",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "2b3072aa-0b7b-4617-a1f1-397d667b3640"
        },
        "item": {
          "id": "14f344b6-8d0e-4bb1-b965-2e4faa31c590",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "8252b32b-477a-4de3-9c4a-d78babc47a2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662d1489-9829-4691-90ae-f3fe91fc65b6",
        "cursor": {
          "ref": "60870173-cba7-4b2d-96e5-c9c86db755d6",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a4ca75ad-918f-40cc-9426-e77b5d1d8c76"
        },
        "item": {
          "id": "662d1489-9829-4691-90ae-f3fe91fc65b6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "728dcce4-9fb0-466d-a501-496133aa9e65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b9deba7-3d12-401e-ba7c-1fb8bf845004",
        "cursor": {
          "ref": "52cd2997-75ca-448f-a598-1a2383e0e2ab",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7525c86e-0f8b-47e4-a4fb-79c73597bd31"
        },
        "item": {
          "id": "4b9deba7-3d12-401e-ba7c-1fb8bf845004",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "eb8b3e19-9507-47ba-be67-30b4bb7bb8a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a47fcf85-1eac-40d6-81be-4293ac1530a7",
        "cursor": {
          "ref": "d9b7938a-9bc5-4ccf-ad53-182137bdc817",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "15b09439-b6e4-45fe-a8d7-6f8b02675421"
        },
        "item": {
          "id": "a47fcf85-1eac-40d6-81be-4293ac1530a7",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "87212be7-78d7-4b58-9f9c-3f72464bf5f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "079e5b4b-8751-4f2c-8a5c-a722fbd714c5",
        "cursor": {
          "ref": "deb5f4f1-cb35-42a0-821e-8d14809fef7c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "3a6f6c26-76fb-4c81-828f-2a61e239eb45"
        },
        "item": {
          "id": "079e5b4b-8751-4f2c-8a5c-a722fbd714c5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "0bcb2575-61ec-4fa6-8a10-c030bf7a1c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "112723a2-7fef-4317-a2c3-3b7d96ce2c7e",
        "cursor": {
          "ref": "3eeb5c04-ffe3-4925-b376-e01af3f4ab98",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "e90baff8-6480-4f75-8d0b-1c0d0c59a23b"
        },
        "item": {
          "id": "112723a2-7fef-4317-a2c3-3b7d96ce2c7e",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "30957531-787a-4a75-bef7-d9c130ab6ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbda330b-ff0b-4ddf-9f7a-7ff4cce005d9",
        "cursor": {
          "ref": "5af28c46-96a9-4bce-ae30-500783e4d02a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4f455f6e-79da-4c60-81bd-10f518a02c51"
        },
        "item": {
          "id": "bbda330b-ff0b-4ddf-9f7a-7ff4cce005d9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "feec8f38-367d-4f3c-8e9e-68f639811209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68c8c547-f586-4f76-a25d-7107dc7b8991",
        "cursor": {
          "ref": "40251192-509b-40ea-a556-127144b47ea5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "29d9ca93-5d44-4a9a-b81d-5f7d362f224c"
        },
        "item": {
          "id": "68c8c547-f586-4f76-a25d-7107dc7b8991",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "62465da1-9912-4d51-aed8-79f9329bae24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99bfd062-3539-46f8-b893-61be8abc9b9e",
        "cursor": {
          "ref": "dc2d923a-f867-4b68-96f7-0378bd278b91",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "84c6c745-8370-4a40-849f-51796c0a8c26"
        },
        "item": {
          "id": "99bfd062-3539-46f8-b893-61be8abc9b9e",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "ce4813ef-d704-43e2-b37a-f7706b7ae6e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66b559d4-3117-4be0-b01a-7f72d7485335",
        "cursor": {
          "ref": "bc032937-01a6-46fd-a9c0-dd10649694e7",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ed10079b-9feb-4c6a-ba2e-67bf2940c501"
        },
        "item": {
          "id": "66b559d4-3117-4be0-b01a-7f72d7485335",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "115e1680-4ae9-48aa-bde5-94285474da58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a953f05a-8924-43a1-a346-96717ab39489",
        "cursor": {
          "ref": "0cf7cf9e-ac53-44cc-a3e3-ae96f7bceca0",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "d326c637-c4ba-431a-9587-3ebfedbef56e"
        },
        "item": {
          "id": "a953f05a-8924-43a1-a346-96717ab39489",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ab27fd7a-863e-421d-b682-788247b31848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5722668e-39fe-4616-91e8-16a4a4c12ae0",
        "cursor": {
          "ref": "7328518d-7a0f-4dd2-944a-df46c19e8be6",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1b7243d1-db21-4d95-a570-9842916ba27f"
        },
        "item": {
          "id": "5722668e-39fe-4616-91e8-16a4a4c12ae0",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "876fb567-3de2-40a2-b478-ec334a20f50d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "904b1512-366c-4944-9a75-9389591489a6",
        "cursor": {
          "ref": "964c5542-0654-4d97-ac29-2163cb54372d",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "113e28a2-a339-49a9-891c-56c06e395fd6"
        },
        "item": {
          "id": "904b1512-366c-4944-9a75-9389591489a6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "6e51e1b3-1edf-4e9f-8011-03d138c96a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e3e41d-c80b-400e-ac5d-4a993e31b8a6",
        "cursor": {
          "ref": "48f7245e-767d-4499-9511-be5cd8e676d6",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "53d224dd-1e3c-4af2-b56a-680fcfdadcbf"
        },
        "item": {
          "id": "88e3e41d-c80b-400e-ac5d-4a993e31b8a6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "c95a3a5d-59e8-4527-930d-f6ccf7e71acd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 88,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "44a96549-77fa-4b1e-be2d-b6db4b840b2c",
        "cursor": {
          "ref": "6453db29-75e3-4348-95ab-9093fbbf074b",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "3488f5e7-7634-4964-88f7-cabcdc745676"
        },
        "item": {
          "id": "44a96549-77fa-4b1e-be2d-b6db4b840b2c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cac275b4-8651-4148-b08b-b857d90a34cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7c49988-2d83-4cc6-ab91-8ec26b964346",
        "cursor": {
          "ref": "2ac9b901-8b95-4a57-aad2-406efa3d26c3",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "95a3018c-7cc2-4abb-af1c-23fa4d18ec3d"
        },
        "item": {
          "id": "f7c49988-2d83-4cc6-ab91-8ec26b964346",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "20494767-3b94-4546-bb6d-a8e0917339bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcb4fe0e-1e9a-4a17-b7eb-c52a88491bcb",
        "cursor": {
          "ref": "1fcf2976-f638-4023-8a1f-c490e896eac7",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "a129274e-b35d-4033-a480-6c23e849f0b7"
        },
        "item": {
          "id": "dcb4fe0e-1e9a-4a17-b7eb-c52a88491bcb",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be899b5e-266e-41a5-bc6d-c6c826a35f21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac68a6c6-bea5-4856-8372-db737ca17a23",
        "cursor": {
          "ref": "cc312d03-bdc7-4592-99ac-8b1d0680247e",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "15326f2a-67ce-4694-b99f-72061a097eea"
        },
        "item": {
          "id": "ac68a6c6-bea5-4856-8372-db737ca17a23",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9dad5dcc-41e3-47eb-a4bd-047e0041949e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1be1b48-1905-45aa-a1c1-f0af7dcea9c2",
        "cursor": {
          "ref": "ff6bc68a-2370-4db9-89fe-b4ed3a46ad61",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "81a562f1-f0f1-4311-b1e8-ab0aba830972"
        },
        "item": {
          "id": "c1be1b48-1905-45aa-a1c1-f0af7dcea9c2",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "168384b1-e0ef-4c18-b471-5953c5960238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bad3239-f2bb-4150-b131-5055c9c05b5f",
        "cursor": {
          "ref": "1a0a3710-076a-4e71-b3d4-635cd5a4f79c",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c7323a7b-778f-4893-9205-082c7d3705de"
        },
        "item": {
          "id": "5bad3239-f2bb-4150-b131-5055c9c05b5f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e0ec8003-19ca-48ef-b3b1-c82f16cbc9e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d00f4fb-7120-412b-84d3-f5c2c537803b",
        "cursor": {
          "ref": "52bb32fa-231a-49b0-9ea5-2b3f5f6ed550",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "2c65d427-73a5-4967-a4e0-93833655962a"
        },
        "item": {
          "id": "3d00f4fb-7120-412b-84d3-f5c2c537803b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "f579d925-21b6-4e98-8433-d2c67042d230",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8de8114d-6340-49ca-b6c2-cac6f18d73c5",
        "cursor": {
          "ref": "fbb0abb4-f894-4cc0-acd9-d41eb06ec2fe",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "6c1a4afa-ead9-4c26-8194-5f743a221169"
        },
        "item": {
          "id": "8de8114d-6340-49ca-b6c2-cac6f18d73c5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "35d1d9e0-bc4e-4cf1-8a22-61e8416d5730",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1fd19b1-6ba7-44e9-8c70-3358f49c4062",
        "cursor": {
          "ref": "9a34cfb7-cf4b-4d14-91fe-ec91fba01e09",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bd74eac0-a2ea-446c-ab54-531b43c4405c"
        },
        "item": {
          "id": "d1fd19b1-6ba7-44e9-8c70-3358f49c4062",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "267af661-1531-40e2-8f56-fc1b6bbf261f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e673eb-6233-481a-9aaa-9acedd5b5142",
        "cursor": {
          "ref": "48ba036b-2af5-4238-ad90-de43b3329c24",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8800a502-2d6f-48df-be85-7d3be28c595a"
        },
        "item": {
          "id": "62e673eb-6233-481a-9aaa-9acedd5b5142",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "057b52a9-97af-46dc-a553-3adf93a8a3ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfe2e3bb-8f81-4189-9747-ce268df55744",
        "cursor": {
          "ref": "6e0b3cbb-6d7d-4478-bb95-c6d17a3fec22",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "0bed8568-0640-41af-90ba-5f1f88900ac3"
        },
        "item": {
          "id": "bfe2e3bb-8f81-4189-9747-ce268df55744",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "aadbef67-ee03-48b2-891c-9841dd826900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caba2583-7795-44c5-85ca-25b3e0fda411",
        "cursor": {
          "ref": "d1992410-d36e-4eb6-8dfb-e91e3b367e14",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "419dac09-0933-4174-baa7-5aac0db2ad67"
        },
        "item": {
          "id": "caba2583-7795-44c5-85ca-25b3e0fda411",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7df5818e-f240-46b8-ae95-4eef5170d8d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b830162a-d66b-4e10-bb0f-a32b0b2e0619",
        "cursor": {
          "ref": "0f821770-4dbd-4d87-9e97-760557ffcbef",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "b924f241-94e7-4823-b5a0-8409b693410e"
        },
        "item": {
          "id": "b830162a-d66b-4e10-bb0f-a32b0b2e0619",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "f54fe5ba-0e7c-4646-8962-a4c251074e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2c37173-fcda-4a14-80af-bfbe880479db",
        "cursor": {
          "ref": "87160ad1-ad99-44f9-8655-30426978ddcb",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "c5450eb4-95ec-4012-89c7-2c62f63c8a82"
        },
        "item": {
          "id": "b2c37173-fcda-4a14-80af-bfbe880479db",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "cc391c5d-5d4c-48c3-a71e-e63bc6664232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8230f5fd-d992-4e00-b85f-a4956397877c",
        "cursor": {
          "ref": "6ada69e7-c87e-4aee-80d4-e1f8b206261e",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ab77246f-968f-4ef4-b8a4-181dd284f243"
        },
        "item": {
          "id": "8230f5fd-d992-4e00-b85f-a4956397877c",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "253c486b-03f7-485e-97a3-06ce5eb86015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e699745c-5788-40d4-a2a0-e8c28075457a",
        "cursor": {
          "ref": "3ba383e0-8fa8-4b99-8e04-1d262fc31583",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "2cf29b8e-c808-43f4-b336-393ebf31fa61"
        },
        "item": {
          "id": "e699745c-5788-40d4-a2a0-e8c28075457a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "58a003f2-713c-4d02-9694-9fe31f4dd81e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feaa5475-04c9-42c6-abc4-fd5ba0edf376",
        "cursor": {
          "ref": "5899c9ca-492c-444d-a5c2-d6f063f83667",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "42772b38-f858-4e7a-b8ac-16a0fb52d310"
        },
        "item": {
          "id": "feaa5475-04c9-42c6-abc4-fd5ba0edf376",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "82050c89-bffe-4a67-a893-d044d07266a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd7017e9-d025-4b32-8ab2-f47982050795",
        "cursor": {
          "ref": "e235dc5f-6ccf-4704-a901-598988fe5366",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "07c44301-5ad5-41fe-a398-a0b4d7056677"
        },
        "item": {
          "id": "dd7017e9-d025-4b32-8ab2-f47982050795",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0b033122-65be-4b8f-8500-13864b1bad81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a3018b6-bad3-4417-bca8-3605cd706436",
        "cursor": {
          "ref": "b1edabf1-25bc-4291-abd0-b705ef1d8e9c",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "77d6e8a3-fa93-4770-a3de-2ef00828c853"
        },
        "item": {
          "id": "4a3018b6-bad3-4417-bca8-3605cd706436",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "8a5241b4-355f-4570-9d1a-abf76436693a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ff8405-cb88-4c29-8664-359ba76341ab",
        "cursor": {
          "ref": "5f7fd0f3-cdcb-487c-ada0-b1c0b01a262e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "84a5dc3b-577a-4646-9a8d-fa22832d4100"
        },
        "item": {
          "id": "a2ff8405-cb88-4c29-8664-359ba76341ab",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6233cce7-bdb1-4288-9951-96e7dac16a5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda0c9d2-1a49-4718-bef6-76ed96d08534",
        "cursor": {
          "ref": "454d838d-7cb0-47ee-b99f-1de4c62c3cbc",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "217db0bf-918b-4625-ad50-5055e722193d"
        },
        "item": {
          "id": "eda0c9d2-1a49-4718-bef6-76ed96d08534",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ac5a9aec-a8fa-4efd-9c03-3d6cd7d7c927",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57509728-0c8a-42c4-beb8-ffc7b032a735",
        "cursor": {
          "ref": "ae1f0e9f-cb11-42cd-b3ca-2aafb7e92e10",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "af02a2b0-93f2-4c30-932f-9bb62ce7f9a0"
        },
        "item": {
          "id": "57509728-0c8a-42c4-beb8-ffc7b032a735",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "84500fd4-bb8b-4df7-bfde-132cefe39d84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "537ec21e-b81b-410e-a6ed-8fd3d2e704b7",
        "cursor": {
          "ref": "7e4e9b09-44f4-4ff5-86dd-280528bb55ed",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "b0f05546-03bb-42ed-a37a-a42a1fcd7f4f"
        },
        "item": {
          "id": "537ec21e-b81b-410e-a6ed-8fd3d2e704b7",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "eb03dc60-17b2-43c5-a78f-cb3182039382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4c18ca7-7c30-4dd4-8b6f-03234de0fa0d",
        "cursor": {
          "ref": "02c77653-25d5-477b-a314-a790865a1a5b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "655f6bbb-ee5c-4da3-9813-388aeb95f33a"
        },
        "item": {
          "id": "b4c18ca7-7c30-4dd4-8b6f-03234de0fa0d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "24c443d7-e888-438a-b0bd-065b5f853845",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49f45002-7384-40a3-9190-bc2758942ff6",
        "cursor": {
          "ref": "667a70d3-8ffa-4b96-8068-b5adfb990e83",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ab312bc7-9432-41fc-94ff-f155f0442580"
        },
        "item": {
          "id": "49f45002-7384-40a3-9190-bc2758942ff6",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "8e57bd74-5364-4f08-8241-e7d7d2cc2244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "425a62d0-c3b0-497f-80ee-b43e07932769",
        "cursor": {
          "ref": "2248f903-1456-4ae7-b0b1-1458af146cc5",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f9d274f9-5f77-4000-877c-3e8469d9bdec"
        },
        "item": {
          "id": "425a62d0-c3b0-497f-80ee-b43e07932769",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "02b789f7-058b-4fd1-bc6f-af4f13489971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ce0b4c-a9fd-4f75-8c84-53bce91dfce7",
        "cursor": {
          "ref": "fbe50d06-ac19-4585-a7a2-83e8da04dde1",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0000a76f-16c1-4525-beec-4fcf8490269f"
        },
        "item": {
          "id": "d1ce0b4c-a9fd-4f75-8c84-53bce91dfce7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "476a2736-d1f9-4723-b1dc-a78a38cbbc07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac04627-a7da-473a-82cb-9ad8e6f67e3c",
        "cursor": {
          "ref": "fc9e3f21-550a-4c12-8beb-636708a39be6",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "771ddf90-b263-4f0a-854d-2cd1d937dc5c"
        },
        "item": {
          "id": "3ac04627-a7da-473a-82cb-9ad8e6f67e3c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "b84b7480-0225-474a-be21-54d14949a629",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a598cd-e1be-45c1-a2a3-f396d0250d52",
        "cursor": {
          "ref": "4a8a468d-3b33-4ef8-b385-34440de13c24",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a4735750-7deb-433b-b861-c2f0949a5563"
        },
        "item": {
          "id": "29a598cd-e1be-45c1-a2a3-f396d0250d52",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "8a346936-95e1-4636-82f1-0dc1d889e238",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3de44c5-623a-4ff6-b06b-7550dfec373d",
        "cursor": {
          "ref": "4a6d71c2-a1be-4670-b009-fedc8cd9ad3e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b76f404c-8a32-4e39-b5af-1f1f1092f7dd"
        },
        "item": {
          "id": "c3de44c5-623a-4ff6-b06b-7550dfec373d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "037ec5d2-2a75-4625-b774-d21ad529d20e",
          "status": "OK",
          "code": 200,
          "responseTime": 174,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "34347c23-3de5-43cb-9031-02a6e1fff498",
        "cursor": {
          "ref": "55ac6571-ce10-4e3b-823c-47355e739a16",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8a8fdd3a-6621-4072-922d-08fd5218601f"
        },
        "item": {
          "id": "34347c23-3de5-43cb-9031-02a6e1fff498",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "9e8dc3f1-5773-48a4-981b-e0d3c66e2eff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac5ad177-c3e8-4b4f-90e3-2a2da93ef171",
        "cursor": {
          "ref": "5220ffcd-3758-4fc8-9038-ac86f8c9471a",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "7f2e264f-597c-4935-9495-b3a417dc4b7b"
        },
        "item": {
          "id": "ac5ad177-c3e8-4b4f-90e3-2a2da93ef171",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "94512649-979f-43e7-a99d-7a98d548dd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b8114b3-7df3-4b36-a29f-c0c57691dbd2",
        "cursor": {
          "ref": "c7f5cd84-a878-4567-a0bc-8c1981eba9ec",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "86fd080d-aea0-4d73-b3d6-bb12dce295a2"
        },
        "item": {
          "id": "4b8114b3-7df3-4b36-a29f-c0c57691dbd2",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "6c6c0774-dfdd-44c8-b559-4aa21561f69f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2368550-d1d3-4aad-aff6-32eea5e991a3",
        "cursor": {
          "ref": "e92633b4-c6ec-40c8-b995-2e3ccbfe0908",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "37f3efae-ee3c-47ee-af4c-b32a88e308bb"
        },
        "item": {
          "id": "c2368550-d1d3-4aad-aff6-32eea5e991a3",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5d14ab2e-3f6d-4165-a45c-eae019ec5f66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "515053ff-c0b5-4922-9a43-5f382823fdfa",
        "cursor": {
          "ref": "4d5df958-b308-4b39-b8b7-7cc73ce512a0",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0693d6d8-ea4d-48d1-83d3-15e93a448f20"
        },
        "item": {
          "id": "515053ff-c0b5-4922-9a43-5f382823fdfa",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c650bbdc-c341-4e20-8871-fe88a9074a74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e3211c3-6d8f-47f2-8c6d-b1e88a074b1d",
        "cursor": {
          "ref": "023b280a-a9f4-4adf-a5ba-ac8c7e16008f",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9ec4922a-ee63-4de9-8290-e09e0d87a617"
        },
        "item": {
          "id": "8e3211c3-6d8f-47f2-8c6d-b1e88a074b1d",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "32ef2252-81e2-408f-950c-5872dcde3cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "437b5365-31ae-428f-b0e5-b5d538aca923",
        "cursor": {
          "ref": "04ed429f-8b8e-4d40-b786-a1b2eba13c8a",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8d18377f-218b-4069-99a7-1fff4c64c895"
        },
        "item": {
          "id": "437b5365-31ae-428f-b0e5-b5d538aca923",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "dcab308c-0ed4-4d2c-8e63-2e06f3422d28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c45bcff-1dc8-476d-b2bf-013de59d23a3",
        "cursor": {
          "ref": "0bfdb220-ede4-48c3-9956-8d130f072f23",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "75ecbbfb-a297-493d-9a3d-b48121376438"
        },
        "item": {
          "id": "2c45bcff-1dc8-476d-b2bf-013de59d23a3",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "b88901ab-b92d-48d8-89a7-989477acd0b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c7e565-0dce-4651-b8b6-d1f63b1dca35",
        "cursor": {
          "ref": "01ff9c79-72eb-483e-a992-cafdf36e7d88",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "e81ae5f0-5083-4852-9712-fc65f595cab4"
        },
        "item": {
          "id": "52c7e565-0dce-4651-b8b6-d1f63b1dca35",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "f287e4b2-7d8f-4f34-8fc4-967a2097a6bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "551018c9-ea07-4459-b429-1fdd8a9c7baf",
        "cursor": {
          "ref": "81b98178-92a4-40d7-9af0-60b7e584b6bf",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2804efe3-e9b2-48a4-adc1-3ab93a9399ba"
        },
        "item": {
          "id": "551018c9-ea07-4459-b429-1fdd8a9c7baf",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a90f8853-e2ef-420b-aa95-02b81d4477a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5abbed8-2641-4011-9ade-d4d1db710fe3",
        "cursor": {
          "ref": "0e7f5237-c8f1-4815-82e6-3f22e0ae0018",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a1ad2a96-0e6a-4fdf-b77d-b5e631d481d0"
        },
        "item": {
          "id": "e5abbed8-2641-4011-9ade-d4d1db710fe3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "00a8d907-ed2e-4d19-9235-3521379a4b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "449305e3-0b89-4a6f-9417-12db407a909b",
        "cursor": {
          "ref": "eb148b91-3413-4c63-b0e0-5df7edb5e56d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "5b3dd3f0-6442-43e9-a128-47f140c1de29"
        },
        "item": {
          "id": "449305e3-0b89-4a6f-9417-12db407a909b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c3974504-d6e9-4680-a304-b32eabefc501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0753f5b6-6204-4fe1-9a0a-c7c5d9d0cbec",
        "cursor": {
          "ref": "3a328ce3-2d01-4444-9382-7b392cf8c1bc",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "d5e75fc3-eb68-4e9b-aecc-a76b080e4547"
        },
        "item": {
          "id": "0753f5b6-6204-4fe1-9a0a-c7c5d9d0cbec",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e9209be2-8344-41f2-b162-ff17792d2160",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20235ac0-2ee0-4af5-9f72-8abe1df3ece0",
        "cursor": {
          "ref": "3610c97d-85a2-4756-b086-9c7cbe720b37",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "865a13db-cf66-4018-a3fc-128ba50f8ed9"
        },
        "item": {
          "id": "20235ac0-2ee0-4af5-9f72-8abe1df3ece0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "f765294c-b7ae-4f45-8799-20483cc6a199",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f257d747-fe6d-4eca-90aa-735412de2692",
        "cursor": {
          "ref": "86943588-7b4b-4952-bad6-d96e85536429",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "adcc3682-e985-4b29-bc96-bdfc8a166fbc"
        },
        "item": {
          "id": "f257d747-fe6d-4eca-90aa-735412de2692",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "4c0e4074-af2f-4ebf-994e-e38fda2cdf72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3481fb-f54a-47ad-bef5-0e857b7422d2",
        "cursor": {
          "ref": "a13d56c4-15a6-4897-bc47-1681d8b5d478",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "9a43401b-203f-4ca7-b74b-b9f8faf08d69"
        },
        "item": {
          "id": "7f3481fb-f54a-47ad-bef5-0e857b7422d2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "07b819dc-61e2-4b10-bfd7-d6727dc36b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae310ef-1f83-4fdf-aa98-d1de8aa9ddc1",
        "cursor": {
          "ref": "e7afe15e-4bba-4b6c-8002-837cc45b9841",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "b9cf15cf-5a72-49fc-b152-2ad602aed1b6"
        },
        "item": {
          "id": "6ae310ef-1f83-4fdf-aa98-d1de8aa9ddc1",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d9e396aa-26e0-49af-9c64-1d96b2453ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a0ca21d-f19e-4350-8616-f315d55adaa4",
        "cursor": {
          "ref": "60ed9277-943b-4d81-bc28-fa751880670e",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "2e5aff4c-8279-47ed-90e3-78c364819c17"
        },
        "item": {
          "id": "0a0ca21d-f19e-4350-8616-f315d55adaa4",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "f9a04aa2-a14f-4c09-9a0c-83c4b74f107a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4b66bbf-7adf-45c4-9d18-dc308aec1908",
        "cursor": {
          "ref": "4ad68203-cabc-4262-afe9-cd98da936a02",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f6c23d12-000a-450b-b83c-3fda7775a6f5"
        },
        "item": {
          "id": "b4b66bbf-7adf-45c4-9d18-dc308aec1908",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "f8a206bb-64e4-41e6-8fb0-45446dbc7184",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d22b7c57-fbaa-43ab-89d5-4422e11245ae",
        "cursor": {
          "ref": "5a8880bc-9fee-431c-b143-a194ceb3ad05",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "75d1914a-2ca6-4a13-b2b7-2eb2db6557c2"
        },
        "item": {
          "id": "d22b7c57-fbaa-43ab-89d5-4422e11245ae",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "da38b94b-b571-4681-a8f9-54144eab4df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "281bed8c-4f6d-4701-a606-88e2f6f98338",
        "cursor": {
          "ref": "1740bd1f-d38f-4fe3-894a-3c6c26639b6b",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "28349f89-7ad3-428c-a270-f9025f3a50ea"
        },
        "item": {
          "id": "281bed8c-4f6d-4701-a606-88e2f6f98338",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5643a62d-23ca-4df2-9631-0916c7bd5b4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bf70c6-cbc0-4649-b9a7-5cf8a25b20c3",
        "cursor": {
          "ref": "cb6f31b3-819f-4a11-bea7-f7fd45de8b4a",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "d07aed46-ae28-439c-9395-8f18b3f9f752"
        },
        "item": {
          "id": "17bf70c6-cbc0-4649-b9a7-5cf8a25b20c3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1aadfbbd-3586-4c6b-84f7-ffad9ad008aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bda5c6d-7c7c-4c4c-8298-392e5f080eda",
        "cursor": {
          "ref": "0c2cdb14-1ede-4e1a-b8dd-456eaef4ff98",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "cfe4d6f4-b913-47ca-92f1-720e0555dab8"
        },
        "item": {
          "id": "1bda5c6d-7c7c-4c4c-8298-392e5f080eda",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "708143a2-e395-4a3a-9a76-6a37b43adf9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fe02f2c-1df6-44dc-8026-2e3c86c73f74",
        "cursor": {
          "ref": "d07b91a0-e1db-49b1-b9ce-ad3a17238035",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "86b4095c-71aa-47d3-88dd-eac76a8038c0"
        },
        "item": {
          "id": "1fe02f2c-1df6-44dc-8026-2e3c86c73f74",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c82d5e4e-6186-4f98-9a5e-029b082dcbf1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1518f22-95fa-42fd-b70d-5bbb8f5b6767",
        "cursor": {
          "ref": "6f8ccec0-f252-4342-bb36-1089c18e3926",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "7c06ca35-6636-4ece-b12a-b8b372cc36ed"
        },
        "item": {
          "id": "d1518f22-95fa-42fd-b70d-5bbb8f5b6767",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "19ff5d28-35d4-4718-958b-b5db9442805d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b75913cc-e395-4b56-9161-c3c44b8c82d5",
        "cursor": {
          "ref": "b2003a46-f98c-47f1-ae86-5c10ce35ab3a",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2ca3e533-3097-486b-a647-b1a207eee5ce"
        },
        "item": {
          "id": "b75913cc-e395-4b56-9161-c3c44b8c82d5",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e4804f5f-4dd8-46b2-a793-461b3b41c3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "041abb6d-77cc-432b-9e83-c850e4ac8e71",
        "cursor": {
          "ref": "2f0f718d-1fef-45c2-ac3c-8c34e20fc2e2",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5002fc30-fabd-4eb3-989d-603f60e5f88a"
        },
        "item": {
          "id": "041abb6d-77cc-432b-9e83-c850e4ac8e71",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "ec83146b-1be0-4a87-9f97-e346b0f88822",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4948552-6a7d-4796-8661-c55951ece185",
        "cursor": {
          "ref": "b602dc11-9abb-43e1-ab70-b9a24d49479f",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "41c95fac-c917-4673-825b-eabab6bd563f"
        },
        "item": {
          "id": "d4948552-6a7d-4796-8661-c55951ece185",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "21688cc7-c8e9-487a-80e6-1563772d7d4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7066226-d579-482e-94f2-571dceeee4e2",
        "cursor": {
          "ref": "91bf5616-9af5-47dc-b6ef-289a215d74e9",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "269305c1-f23b-4e1a-ae5a-f5800a1a94c6"
        },
        "item": {
          "id": "a7066226-d579-482e-94f2-571dceeee4e2",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "27719589-a142-4849-bfc6-6ef0ac9f8d76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f202161-6791-4f6d-a8c5-0b5531704e33",
        "cursor": {
          "ref": "6ca316cc-b8cb-4cb2-a718-19fccdb4a0b7",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "06cd5ea5-eac1-48c4-b561-57ab268ac651"
        },
        "item": {
          "id": "3f202161-6791-4f6d-a8c5-0b5531704e33",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "56964d36-a603-4504-ba03-34301645a5f8",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "20f94980-f308-4d91-9f4e-7a25fd9efb4d",
        "cursor": {
          "ref": "32674dfe-618a-48ba-95aa-d0620af8b1dd",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "2bcf5a4a-5ad0-4ae5-bec3-a3a04df71579"
        },
        "item": {
          "id": "20f94980-f308-4d91-9f4e-7a25fd9efb4d",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "bebc29ad-332e-4a15-9dfc-003ac05a9747",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "cdbf61a4-e49a-4008-a778-d3f04587bf91",
        "cursor": {
          "ref": "61ff7001-c19a-4281-8ad0-2d7aa0be0f07",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "01920f96-ad3c-4405-bfed-65500f914005"
        },
        "item": {
          "id": "cdbf61a4-e49a-4008-a778-d3f04587bf91",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "e0aefe5c-71c6-448e-9074-848613b21357",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2ec5b98c-32e7-4906-9a14-9ad2739750b4",
        "cursor": {
          "ref": "af25a4d2-3307-472f-95d9-750f9d79390c",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "013ee328-d5a4-4c54-b668-15728e1777c3"
        },
        "item": {
          "id": "2ec5b98c-32e7-4906-9a14-9ad2739750b4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "e9606781-dccf-43cb-beb9-496a2592cdba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39bc1a4c-cc6d-4391-a5c2-12ab076e01ea",
        "cursor": {
          "ref": "6ae54b81-e8bc-444a-9fe6-56a74d8b2cc9",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a3af2055-13b5-47b5-a26b-eb0c07266df4"
        },
        "item": {
          "id": "39bc1a4c-cc6d-4391-a5c2-12ab076e01ea",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "eb533819-6554-4848-8d08-2e433675a46f",
          "status": "OK",
          "code": 200,
          "responseTime": 275,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "de279d54-ac33-4919-8ca3-222744985efc",
        "cursor": {
          "ref": "eb6a295e-b7e4-4e0d-b092-dd6bd088bcbc",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "1ef5e15f-ac31-4ea7-8b20-8c85aef99b6f"
        },
        "item": {
          "id": "de279d54-ac33-4919-8ca3-222744985efc",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8d201180-0dda-4142-aed5-dc71a81117e3",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1c3b1a4c-3be1-4e4b-8d0d-15c859e34871",
        "cursor": {
          "ref": "95165b5b-0acd-4d2c-8dc5-c61a43b6cb71",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "45d45401-dcc4-4e7d-a879-7e93587e001c"
        },
        "item": {
          "id": "1c3b1a4c-3be1-4e4b-8d0d-15c859e34871",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "7fba69ed-d349-4462-9e17-b092ce0d410d",
          "status": "OK",
          "code": 200,
          "responseTime": 165,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "3ff18e6c-e08f-40a9-9775-8e5bf6f1cf86",
        "cursor": {
          "ref": "8222f458-2241-449d-b71b-7f6ee611dd0e",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "33a4437f-5f85-469f-b14c-909c7548846f"
        },
        "item": {
          "id": "3ff18e6c-e08f-40a9-9775-8e5bf6f1cf86",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "72cb3916-10e2-4b3f-b666-70abc5a674cb",
          "status": "OK",
          "code": 200,
          "responseTime": 152,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "044878f1-1783-41f6-8469-796ff673af18",
        "cursor": {
          "ref": "40eb99a9-74d4-418b-8840-bfadfb43e0e2",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "4e12fa99-1cd1-4965-ae7d-bbe460ddb5ad"
        },
        "item": {
          "id": "044878f1-1783-41f6-8469-796ff673af18",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9a5a032c-f0b0-4cac-bae2-aba9abbf3678",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "dcba8b1b-da56-4d11-b411-dad6c7afb990",
        "cursor": {
          "ref": "0ae63e67-6efa-4adf-aa0b-1a4d96bdfdc3",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "4fe71738-4389-4387-928b-7b6ef5a33638"
        },
        "item": {
          "id": "dcba8b1b-da56-4d11-b411-dad6c7afb990",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "325d8fe7-316a-4172-81a1-a5da7700bec9",
          "status": "OK",
          "code": 200,
          "responseTime": 163,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "6cbd3bd8-7832-4315-97fe-75ed1fbd363c",
        "cursor": {
          "ref": "129e81c5-b9c3-4a98-a60c-127549ebb787",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "90e81adc-e953-45e5-ae80-7fb6e7d32560"
        },
        "item": {
          "id": "6cbd3bd8-7832-4315-97fe-75ed1fbd363c",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "968f5fb6-8647-43a4-b6b9-e5e8d1b73e60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a13f01-eec0-4d26-ae11-635cd2a6b59f",
        "cursor": {
          "ref": "e489ad56-6dbb-4c42-8f3b-2daf09ddf523",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "730ba9ce-f526-4796-99ee-43952e9cf4f3"
        },
        "item": {
          "id": "b9a13f01-eec0-4d26-ae11-635cd2a6b59f",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "04a53cc7-6ed4-495c-a291-4a8cd2f44129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4727a7a-e9be-4655-9959-7403bc6206d1",
        "cursor": {
          "ref": "683e33cc-6a6b-4a62-a96d-34db8d64d78f",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5aa258da-8157-4d2c-b4ee-178c6d140931"
        },
        "item": {
          "id": "f4727a7a-e9be-4655-9959-7403bc6206d1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f6bfd60f-0626-4183-ad67-e2f4754ae684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458b258c-b6af-4b0b-ba47-9954a73daaa9",
        "cursor": {
          "ref": "a4930cb5-e2ed-4e13-97ba-d26a537d636e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8f30023f-9172-4690-aa0c-8b1a49a942f9"
        },
        "item": {
          "id": "458b258c-b6af-4b0b-ba47-9954a73daaa9",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "9cf77573-ad50-4bcb-8c19-9610a4e27511",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1506cf8c-132e-4901-92d8-6f70525b0b96",
        "cursor": {
          "ref": "e0a44171-7fab-47dd-b821-1c1e93b654d4",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "de6dfa51-d9af-4a34-8452-94c9ae4a9878"
        },
        "item": {
          "id": "1506cf8c-132e-4901-92d8-6f70525b0b96",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "3732602a-5d4e-4154-b0e8-a06486fa8db7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d88c7d-1938-40ed-a317-c8cf4daf8f78",
        "cursor": {
          "ref": "611ff449-3c4f-4055-84df-383814fa128c",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "6aaa90ef-5c1d-4cf0-ab5b-00f8c178260b"
        },
        "item": {
          "id": "e4d88c7d-1938-40ed-a317-c8cf4daf8f78",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "73572eb4-42cd-4b2d-9f86-02f269544d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20084067-db8b-41f6-8f63-4aa7a0da885d",
        "cursor": {
          "ref": "06aad349-c17f-4f65-8028-68352bf46577",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "9d146c4e-4b4a-4249-be28-1e8dcfbb3ffe"
        },
        "item": {
          "id": "20084067-db8b-41f6-8f63-4aa7a0da885d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ccc3c81d-b790-4720-97a0-9fbbd6ffa740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e685718-cd62-402c-b592-f4c41b3cfe15",
        "cursor": {
          "ref": "4cd61392-f85d-4f7d-970a-183fc84ce340",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "d26578eb-492e-40b9-a83f-1073783d053e"
        },
        "item": {
          "id": "1e685718-cd62-402c-b592-f4c41b3cfe15",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9b3c4624-d523-4068-a3e8-61a184491451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd9e94ec-52cc-475f-8761-b5c36f7633da",
        "cursor": {
          "ref": "62d11079-80d8-4d73-ad6a-d4191409c5a4",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "91b7d928-b2e8-44ef-ad99-03b0643c815c"
        },
        "item": {
          "id": "dd9e94ec-52cc-475f-8761-b5c36f7633da",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "a48d9997-bc5d-42f2-911e-8c70ebd67f86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c8d0e05-dbf9-4d09-8fd5-be4ed8d6cf7f",
        "cursor": {
          "ref": "f7ec5b2d-f332-4bf9-8a3d-bff7075cd0cd",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "460b807a-c71a-4188-9e7f-e4f981a231a5"
        },
        "item": {
          "id": "1c8d0e05-dbf9-4d09-8fd5-be4ed8d6cf7f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "97ac8f1f-1c12-482c-82ce-421d9c36ec20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a831b02c-7e81-4816-9bcf-34884e9324d0",
        "cursor": {
          "ref": "27fd3a21-d2f3-4e60-b76b-0eacfb2c7e64",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b15521a5-a7a1-4891-842f-8a4adeae43e9"
        },
        "item": {
          "id": "a831b02c-7e81-4816-9bcf-34884e9324d0",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "2210f780-b846-4afa-ad6f-0d51a0988bda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0868e64-46e0-47d0-83a9-8e6a9f413b09",
        "cursor": {
          "ref": "4b6f8c5c-e2fc-43a6-b30e-6518f5093ecc",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "dc48ee0e-f13a-4ab0-b41f-dafd006143c5"
        },
        "item": {
          "id": "e0868e64-46e0-47d0-83a9-8e6a9f413b09",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "067704fd-ef4f-49d4-bcf0-91f5bfeb020a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec7907b2-36e5-408d-a5b1-f348c94f495f",
        "cursor": {
          "ref": "058d224c-ac53-4bc9-8fd8-8252fd33fc08",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "53ba705a-fbae-4eb2-a839-0ed047b1a7c5"
        },
        "item": {
          "id": "ec7907b2-36e5-408d-a5b1-f348c94f495f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9ee9fb92-e952-4489-88fe-860ea03e6979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90d476f6-120d-43f4-95a8-455c05e33a32",
        "cursor": {
          "ref": "6f7daf33-da1b-47fc-b700-8183b6109af2",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "95c7a06a-1d27-4214-bbe9-1947a6c384b7"
        },
        "item": {
          "id": "90d476f6-120d-43f4-95a8-455c05e33a32",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "d848dc1d-e0fc-47e1-81f2-4f4671591276",
          "status": "OK",
          "code": 200,
          "responseTime": 158,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "d700ebf6-23eb-40ae-aec8-e6beadaf6417",
        "cursor": {
          "ref": "235c5951-38d2-4d57-86f4-cd39bdac8da0",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "170b3761-87b6-495e-aed9-45e5cb51237c"
        },
        "item": {
          "id": "d700ebf6-23eb-40ae-aec8-e6beadaf6417",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "78a8941d-bdec-4439-ad7f-4c0ffcacf139",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "61667e3c-56d4-47d1-b406-98c635f82bbf",
        "cursor": {
          "ref": "33470644-f791-46fa-9407-9ef9846d7e77",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ad65606e-6a62-4c8b-a3d4-501061f9cfc9"
        },
        "item": {
          "id": "61667e3c-56d4-47d1-b406-98c635f82bbf",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "cb9bcc36-9a73-4845-bb24-0cce7c148d0d",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "d9d40dec-06b6-4de2-9015-dcee03d2ec5a",
        "cursor": {
          "ref": "01bca452-d259-4cd1-bb26-62d398496c84",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2ccdf77d-3fb9-46e7-951d-3492a8e5e32d"
        },
        "item": {
          "id": "d9d40dec-06b6-4de2-9015-dcee03d2ec5a",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "b73adb99-ec38-4845-8d7b-cba8baacb057",
          "status": "OK",
          "code": 200,
          "responseTime": 153,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "a5724e9b-2cd1-4e70-86d4-c91672d11f07",
        "cursor": {
          "ref": "1df860ee-222b-42c9-a44f-ba8cf88c17b2",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "c40fcb30-c885-493d-8d4e-87e2bdf1bdb9"
        },
        "item": {
          "id": "a5724e9b-2cd1-4e70-86d4-c91672d11f07",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "1cc3460c-b49f-4c64-b8a9-ab82aa28c8e1",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "26bb7d77-e6a3-49b3-b2bd-06797e4e2881",
        "cursor": {
          "ref": "bb64d2c7-cacd-4634-900e-186081e1e187",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ee656eb3-6bd0-411f-b5f6-d09ef4464c80"
        },
        "item": {
          "id": "26bb7d77-e6a3-49b3-b2bd-06797e4e2881",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8d96ec93-6d1a-4c5d-a272-999e17995015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33e8d740-0e70-455d-a793-5f5f3e716f0f",
        "cursor": {
          "ref": "ac8a7b22-b509-4317-8997-9c27d12cdb72",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "3c31d49b-52a2-4413-b105-069eaf32d4c9"
        },
        "item": {
          "id": "33e8d740-0e70-455d-a793-5f5f3e716f0f",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "0db23bc2-5dcd-4095-8a1d-d10a6ad972c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d63d62c5-ecde-421e-9781-eef5a7fc28c7",
        "cursor": {
          "ref": "6a0f5ff2-149f-49ee-bc2a-64e4bda9cfde",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a8be3d15-2535-4e7b-9dcc-839ab47a1a65"
        },
        "item": {
          "id": "d63d62c5-ecde-421e-9781-eef5a7fc28c7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d4354f06-bddb-4a3f-a79d-da602ef7a2ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "877e4c53-fe0a-4044-bf60-4de7b3405af2",
        "cursor": {
          "ref": "51a4fee7-5297-4271-a4e1-b8252b2138ca",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "69dbe06f-50db-4e6e-b115-598400e62dc9"
        },
        "item": {
          "id": "877e4c53-fe0a-4044-bf60-4de7b3405af2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "10306d47-fe78-4bd4-a1fa-7209ec0090d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d9a6666-cd1a-46c6-9f46-7fed170d2c04",
        "cursor": {
          "ref": "72a27161-85a0-4c03-a54a-fc8076825a09",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "edfd20f8-2ef8-43ab-8e52-53c299a6aede"
        },
        "item": {
          "id": "1d9a6666-cd1a-46c6-9f46-7fed170d2c04",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "c38a34e7-bd6d-4dd5-8e68-27de47ef4823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "147ebae1-e737-47b8-8f52-53d895635e71",
        "cursor": {
          "ref": "e3e86a1c-0b00-43b2-98c8-636850325b0d",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "cbd3dadd-63e7-424b-88c6-a338e7265ceb"
        },
        "item": {
          "id": "147ebae1-e737-47b8-8f52-53d895635e71",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "a039920b-5a03-4915-bc51-cfb0a35e3bc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7467f3ef-516d-4f8a-89e6-ec59193cb2ce",
        "cursor": {
          "ref": "8f20272e-1182-4722-ae21-abed244dad91",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "70065a24-adcf-4992-ba5c-4644d07b4550"
        },
        "item": {
          "id": "7467f3ef-516d-4f8a-89e6-ec59193cb2ce",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7855d4f1-94cf-40fe-a586-b035abe74786",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d42b6c-4a13-4735-8442-ae1644ac19fd",
        "cursor": {
          "ref": "d8dbd0dd-93f1-46ea-afd7-071437583391",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "7aa3e2c9-7ba4-4234-a85f-40df8238c891"
        },
        "item": {
          "id": "47d42b6c-4a13-4735-8442-ae1644ac19fd",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "44398384-e9a0-4812-98fb-4803a042f7b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42f67b1-f33e-4619-9997-e265e9577950",
        "cursor": {
          "ref": "0d28068b-9268-422c-93a2-24b51a501fff",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "461206d7-6e93-4d5b-9d4e-9890bdf09594"
        },
        "item": {
          "id": "c42f67b1-f33e-4619-9997-e265e9577950",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "1b5766a6-8397-4386-a0db-6ce016dc469d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "682173ae-101e-420e-9fa8-c67a0d110633",
        "cursor": {
          "ref": "e3dbd987-c567-4080-8dea-e70b656fd135",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "12ca29ba-4263-4f7a-9fb5-d72a5d5708cf"
        },
        "item": {
          "id": "682173ae-101e-420e-9fa8-c67a0d110633",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e0bbd3e0-6e16-463c-9ef9-cc69ab0a56a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161a68d8-0dae-4b5c-a404-4ca97e243fbb",
        "cursor": {
          "ref": "0a6168c3-3289-463a-96e8-fd5fe14aaa8f",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "3d4c6262-5d8d-4e4c-912e-2f96a4353940"
        },
        "item": {
          "id": "161a68d8-0dae-4b5c-a404-4ca97e243fbb",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d029b774-30ec-42d8-896c-e31192a65fca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65394d9e-3fdc-47bd-8177-485ee0176440",
        "cursor": {
          "ref": "201e9af5-a9d2-4ed1-8463-3c7f28aa2668",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "c4ee098c-142a-41ff-bf58-4c01484f0709"
        },
        "item": {
          "id": "65394d9e-3fdc-47bd-8177-485ee0176440",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "4cebc2d3-2492-4d74-af1c-71c63283c11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fb65e07-3497-4eee-8075-1a229da6d92e",
        "cursor": {
          "ref": "56d6f9fc-4856-4426-a2dd-480d8fa16d9e",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "11956943-ecf1-4b5c-a88d-4a3e85acc12f"
        },
        "item": {
          "id": "7fb65e07-3497-4eee-8075-1a229da6d92e",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "54c7daf0-1802-4e43-a9f2-98f5d5e9d348",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b076ddd7-a85b-4122-a900-cfb9f8b3ce5e",
        "cursor": {
          "ref": "415de430-6c20-46ef-a888-04a3c9afa17b",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3c8bf414-60f2-4bf5-9e7b-7553a8fe8320"
        },
        "item": {
          "id": "b076ddd7-a85b-4122-a900-cfb9f8b3ce5e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "42dbeeb0-980b-4de4-bc55-70bc23995aab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0eca1506-199f-4f97-a8e8-9c5fb3fb3ea9",
        "cursor": {
          "ref": "1dd4598d-a399-48fe-a142-efa11f411d82",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "b908d050-0f6d-4998-8703-82661ad848e7"
        },
        "item": {
          "id": "0eca1506-199f-4f97-a8e8-9c5fb3fb3ea9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1cf96196-a083-4512-a4bc-c7cc97ba5373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67520f91-9683-44cd-bd86-ee2a56a6c7e8",
        "cursor": {
          "ref": "d4690e64-9bfb-4964-971a-4e0c0bcbe3fe",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "3e72d0a9-b868-458c-93cd-664c5294e50d"
        },
        "item": {
          "id": "67520f91-9683-44cd-bd86-ee2a56a6c7e8",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "68ec73ff-183b-4e2b-85af-863607a1e0c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7acd6e-2a63-4dbd-a55d-d185dab3f22c",
        "cursor": {
          "ref": "7380bea1-699a-45f4-9ed3-8e1038648cdf",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "f6ea9cf5-bcc8-4035-95c3-32622455dcf2"
        },
        "item": {
          "id": "3b7acd6e-2a63-4dbd-a55d-d185dab3f22c",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b877ce8e-2cf8-4d2e-886b-e216ff7672b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5fc6369-9ed0-40c6-a541-32cf7745f207",
        "cursor": {
          "ref": "ebffb751-a205-4043-94dc-2bd71a277f5e",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "e2769ab6-120a-4a2c-b3f0-4479936d1c1b"
        },
        "item": {
          "id": "b5fc6369-9ed0-40c6-a541-32cf7745f207",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "816cdd08-3d50-4bcc-bdb7-685f0622c723",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426e3e28-3c72-4998-b54b-3682a4e9d565",
        "cursor": {
          "ref": "5f8c6a9c-26be-4c6d-b757-74fb8fe1777b",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "5e947aba-5927-4160-9eed-52caab507186"
        },
        "item": {
          "id": "426e3e28-3c72-4998-b54b-3682a4e9d565",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "d5a5a3c4-341a-44a9-8868-94f8c4759e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94d23398-68a4-4c80-801a-c4a200f58cd3",
        "cursor": {
          "ref": "a061735a-17ec-4f68-92ce-436cfd5e4436",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "90429883-dcd0-4fe6-a2bb-253de47f420e"
        },
        "item": {
          "id": "94d23398-68a4-4c80-801a-c4a200f58cd3",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "18178b5c-e230-4167-aa6c-0dc02c42690a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e9439c1-8b03-46e0-9a12-d3a6dbe23e90",
        "cursor": {
          "ref": "d659e00f-c906-4c31-87a1-01d91d814469",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "96f47bbb-0f1a-43cc-b168-2be3544142b3"
        },
        "item": {
          "id": "1e9439c1-8b03-46e0-9a12-d3a6dbe23e90",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "85424f3e-ad44-4ffe-8be9-27e505e1bb58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e6e5447-78e8-4143-b439-65c1f9a7cef5",
        "cursor": {
          "ref": "6c03734f-8ea7-4a42-b61d-a098b6f76f2d",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "223db875-9023-41ed-ac78-da9876424e49"
        },
        "item": {
          "id": "9e6e5447-78e8-4143-b439-65c1f9a7cef5",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "265e9ed6-cafc-4dd4-bb7c-696fa143c826",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74c4affd-cb83-417c-8a13-c6528983a409",
        "cursor": {
          "ref": "9c862b5d-63e3-4296-875b-d279392c2688",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "770bbb2e-ef15-4a2a-b69b-e6e1f1c0655b"
        },
        "item": {
          "id": "74c4affd-cb83-417c-8a13-c6528983a409",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a836be26-cd50-4845-9a0d-a354a7dd195c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51d06b35-cb43-4b55-adc2-115aac430a7e",
        "cursor": {
          "ref": "d784ed2c-800a-4410-a291-ddde348fd18b",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "2eea3640-1cb1-4cd4-a11e-d782c4210bb1"
        },
        "item": {
          "id": "51d06b35-cb43-4b55-adc2-115aac430a7e",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "57b5d599-6d23-4c11-8cc8-26e88282d366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2038749b-16dd-4f1e-93d2-a1b23ce03ddf",
        "cursor": {
          "ref": "931a38e5-e583-40f5-9a78-18e6cec1c70a",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "697040aa-05d5-4d8d-833d-3528fd97cbde"
        },
        "item": {
          "id": "2038749b-16dd-4f1e-93d2-a1b23ce03ddf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "4f86e900-5988-4831-99a4-9f6ca39847e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a371618e-69ca-4177-991c-22033c005414",
        "cursor": {
          "ref": "7f0e4b88-f7a6-4d5a-beaf-47dd4b141ef2",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "25fa6601-3db4-4f70-bc12-e0c1f18f879a"
        },
        "item": {
          "id": "a371618e-69ca-4177-991c-22033c005414",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "3d24c15f-9d25-4c84-9b1e-eb53c3f75ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5afa9f50-8440-4dbd-a75b-96ac70ac1d8d",
        "cursor": {
          "ref": "66c66ec7-614f-4a5d-bd02-b22b65d39eda",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "51e384a2-d90f-4495-b481-9c25affa716e"
        },
        "item": {
          "id": "5afa9f50-8440-4dbd-a75b-96ac70ac1d8d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "06f43806-c774-4c39-b78e-6dd73870c5cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa71cc2-c76f-4639-a7dc-61e8de7ae60a",
        "cursor": {
          "ref": "c9a5d9d4-0ec0-4cff-96b4-c5984610af33",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "c90d1104-d786-4b39-a5a6-6bafca42cd3d"
        },
        "item": {
          "id": "faa71cc2-c76f-4639-a7dc-61e8de7ae60a",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2dc2653e-a204-4f68-9304-6f573968d9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed2f18f5-7325-472a-88d2-efafdf3337d1",
        "cursor": {
          "ref": "69001303-26a5-49ad-838e-904993b4a823",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1744d497-9d03-46f4-ad98-d0bb0cbece9a"
        },
        "item": {
          "id": "ed2f18f5-7325-472a-88d2-efafdf3337d1",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9db7903c-3fdc-44df-b584-a83d1451cf87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5468caf8-ca36-4a5b-854a-d9ad6fcb18a7",
        "cursor": {
          "ref": "1e8a95e9-ea3d-4efb-a30d-2ffe3192e1e4",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "ceb962f5-28d8-4e7b-9297-88c6eefabec0"
        },
        "item": {
          "id": "5468caf8-ca36-4a5b-854a-d9ad6fcb18a7",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "cedfcf23-1a48-48ae-98fb-5aa224c7408f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221f4810-3666-4651-ad75-76560af6a599",
        "cursor": {
          "ref": "73a7a1ae-7d28-4078-982b-99206ecace97",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "13240308-ed5d-43ad-8743-b2d23d2c32cb"
        },
        "item": {
          "id": "221f4810-3666-4651-ad75-76560af6a599",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c4019e1b-60a0-4636-89fd-a8aaac8a9271",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df3096c1-b237-4fcc-b793-b2461c3069fa",
        "cursor": {
          "ref": "f03e01fc-e2dd-4b78-a784-0288e20f526b",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "76123684-8e14-40f2-a67f-a9b74fbeb68e"
        },
        "item": {
          "id": "df3096c1-b237-4fcc-b793-b2461c3069fa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b134cff0-57c0-46b2-a920-c39ff3908707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b54cacd-eb7e-4a46-8ed3-bc7780f89975",
        "cursor": {
          "ref": "2ae11868-58c9-4814-94d9-a8cc03d6a120",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "be0f1199-ec7b-4615-a07b-8d17d63a2439"
        },
        "item": {
          "id": "3b54cacd-eb7e-4a46-8ed3-bc7780f89975",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b302d4d4-1345-4a0e-8680-acb040b5ef71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e218a8f8-9e55-4fd2-9349-ababf93b3489",
        "cursor": {
          "ref": "b24e00a0-5b3e-4a32-9fa2-8436b5774d25",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "78643a95-738b-4548-aca5-167bd8cbe205"
        },
        "item": {
          "id": "e218a8f8-9e55-4fd2-9349-ababf93b3489",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a16a2244-3f12-4a4d-b3e4-10577816bad3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0266253f-a6bd-4ac3-a2f6-3c41ecd040eb",
        "cursor": {
          "ref": "08b3e6bb-4c2d-412e-872e-6a824daf7117",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "478b91a4-54ff-41ae-8adf-21ef0eac5079"
        },
        "item": {
          "id": "0266253f-a6bd-4ac3-a2f6-3c41ecd040eb",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "87872a34-0694-4ca2-af3d-0a3b74282dc4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bb971e-2114-4df1-94d4-07f86ef170d0",
        "cursor": {
          "ref": "d9fac3dd-c1be-4e46-9116-674ae481c175",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "e87843b8-4555-4287-a58d-42a28f079b2f"
        },
        "item": {
          "id": "58bb971e-2114-4df1-94d4-07f86ef170d0",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "51596896-b24e-4f01-859f-ea02bd27baec",
          "status": "OK",
          "code": 200,
          "responseTime": 147,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2a7e5673-18fb-400f-8232-93a607f88b8b",
        "cursor": {
          "ref": "0804c607-2b42-4f2c-90af-16576e1a53ef",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "9d3a5867-f383-4fef-ad3c-94e5d47ff900"
        },
        "item": {
          "id": "2a7e5673-18fb-400f-8232-93a607f88b8b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "71aff8ae-5cbd-43ee-950f-78cab1933992",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e13e11-58ab-4fa1-b427-5264948afa81",
        "cursor": {
          "ref": "0c5f85f8-1347-4dc9-a838-901c7dabf628",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1bebf6a7-d3f7-4191-9236-b25742ecb802"
        },
        "item": {
          "id": "23e13e11-58ab-4fa1-b427-5264948afa81",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "e568c1d5-d4a4-4dc6-ab31-f0565cff383b",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1920ff-e2ab-42c9-95c5-ec14f9a80294",
        "cursor": {
          "ref": "857b1244-e42c-4f01-922d-88be36fe05a2",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "39ef2788-815d-413e-a6c2-b86de5addc6b"
        },
        "item": {
          "id": "0b1920ff-e2ab-42c9-95c5-ec14f9a80294",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43524bee-90ad-4b47-a9ac-ad4b422a2341",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b1920ff-e2ab-42c9-95c5-ec14f9a80294",
        "cursor": {
          "ref": "857b1244-e42c-4f01-922d-88be36fe05a2",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "39ef2788-815d-413e-a6c2-b86de5addc6b"
        },
        "item": {
          "id": "0b1920ff-e2ab-42c9-95c5-ec14f9a80294",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43524bee-90ad-4b47-a9ac-ad4b422a2341",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60807938-35f6-47bb-a7aa-78774a4f718e",
        "cursor": {
          "ref": "8ef93e54-c3ce-4235-bfc7-533301c43dee",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "02b9be66-6c54-4102-8990-346ec9135291"
        },
        "item": {
          "id": "60807938-35f6-47bb-a7aa-78774a4f718e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "4c6f3343-677e-4e00-9b8f-ed0b4e62acab",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fe3d467-6397-4929-af70-d2412511f4ce",
        "cursor": {
          "ref": "6b18df4e-6c15-4cb9-a86e-c5bfbbf706b0",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "382a4de0-356c-4b22-a1f7-5089e307c15d"
        },
        "item": {
          "id": "2fe3d467-6397-4929-af70-d2412511f4ce",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "1d61e6b9-cce2-41dc-845b-d800d3918cc1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}