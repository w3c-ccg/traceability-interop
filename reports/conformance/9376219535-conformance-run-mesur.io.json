{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b7997dfa-cfc9-4e14-955d-ba1b563f7760",
        "name": "Clear Cache",
        "item": [
          {
            "id": "545cc8f7-a2b6-4623-b605-8e2d611e0fc0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7869637c-f9ba-4432-ba90-a5f88e927fe4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "253f31bf-add0-499a-be1a-c14309548023"
                }
              }
            ]
          },
          {
            "id": "3554157b-2dae-423b-aef8-1c3dc7f8bbcb",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0f4f3c44-0b13-4eeb-87de-0f1264f11722",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "adcd264a-5443-484b-9726-a1aee63264ee"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e1cbaf59-f4d0-41cf-9aeb-9a635ac34cb3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bf70cec1-e3b5-4044-884b-619892449fa3",
            "name": "Positive Testing",
            "item": [
              {
                "id": "62420269-f982-45e9-b2af-91f4e6c01567",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6d12aec5-cc9f-4b1a-bfbe-020055a4426c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "048b95fd-50b0-4a87-ad33-a8f06a9018f6"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d382e3f2-4406-4582-b19d-7e3c51c67e45",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c9bc41a5-548e-4f73-a580-50d1132febe8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "96c569ca-94a5-4f91-a5c5-cffde5df535a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "73be3c8b-1a90-477d-9c86-cad31098256f"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "942ff5b2-b4c8-4811-bec0-ecda3e698aa5",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "07f81979-f91f-4004-b47e-b7fb300faf41"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "345aa263-e7b2-4580-9263-9b6c5fd2fceb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8e752077-97fd-4af5-86bd-1c865cc8e226"
            }
          }
        ]
      },
      {
        "id": "a5d8475d-34ae-475e-905d-0605e23ba609",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8968802c-2995-42c7-9937-fb5d8d1ae0d2",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e24df289-5315-4d6e-90df-f3c4e8890577",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "44c5f4d7-7b9c-40ae-8e4c-5fb5403f34b3",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5af51c86-2c31-453f-a5a8-20ac1c30493c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "142534ba-b5ce-4efd-850c-9ff4a27d3e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03fde927-3cfb-4350-909f-65af365f6517",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79bd4689-232b-427d-bac3-b80936c550cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e6bc6eaf-0efc-48f9-8fd9-d82d7110cc50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760d546d-e910-497f-aeb2-525992be35ca",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5078c6a-f9b5-41cc-b421-1cca952fb939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f5c3b5ca-5c96-4cfa-ade2-5dd3544c37a3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6b38d9a3-30fd-4cf6-9b2b-49d1c9b7ac6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "39773538-149e-4f50-897c-1a5c783b2ab0",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32b167f4-7a74-49be-b1f9-af93de5bc154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "53afefda-a96a-4fd3-90b1-bcc954f9576e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e379e575-939c-4cad-a798-68cce9a77678",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0314cea5-99c0-451a-88bc-201df5bc1093"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "25f493e1-04c2-4360-bc06-21565ff7685c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5a73d71e-ebdf-448d-8b8f-1694d69843ff",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "02f38e8c-c566-4192-9555-2b5e8dd1f3bc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "6b33faa0-ee14-487e-b688-24e6a5b2efed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fa038630-f44f-4f2e-9f37-0e11ff1938b4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "31dbaeb3-7b34-4d3d-94e3-d668da8d7a2b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "68379503-ad31-4758-b6bc-a494efdef821",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a87a78d5-771b-4441-8883-0f5b752c5cc3"
            }
          }
        ]
      },
      {
        "id": "4739fbb0-d7eb-4e8b-bf17-ce32bd52d11f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "de83c267-b675-4527-a1c7-33f29be9a811",
            "name": "Negative Testing",
            "item": [
              {
                "id": "81194125-54fc-4d8d-b1d7-af73dbfe96b9",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "2fb7d8b3-bc0f-43fc-a984-cf57f77d29da",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2990d48c-95f9-443e-bffd-95eb125615aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d27ad599-6ebd-4b99-97eb-71d043aee29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e951acc-4c50-45a7-ac64-d1cd75a54e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c994c8d9-2054-469c-959c-b4270f4657b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabe535e-d0bf-4261-a830-bb091dd6948a",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e4a849-0fc9-4632-bb27-53a58ef3c5ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7295ef54-fbb5-47f3-8f97-aebc885f65db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b26fd1b0-cc92-41db-92a0-6b5db03d4951",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "00bd63a9-063b-4ae1-9606-bbf10229aa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d2906d3-16b3-403d-ad4e-c241100177e6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9844dca-cfa2-46ff-92e8-1413c1318f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "334e2363-74d9-4df8-b6a1-8b56d9115b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6964404a-b1fd-4dbe-b7c3-a30efdb7481b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91336bae-29f6-4e40-86fc-43c14e01e48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9eab981-abb2-46a8-a037-7f991bbb9a46",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f869d7a-b8a7-431d-a03d-a0310f94dce5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c0aa051-7963-4f8f-ad40-950f5cc86b23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cced10e-9833-46b2-bdc1-341d7eb7d26e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8188fb7-4a0e-4c01-8d84-70fceabb03f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ab2927b-bdd4-43e3-8881-8161783b310e",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b2961f0-c567-4892-b02c-3f33a28847e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66e62ad2-76df-4a91-a045-d975f02bbcee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "444f388b-d8d2-4998-af9a-1f71cdcbb38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5422c881-8650-41cd-9469-c53bbd82c756"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fff8bb-051a-45a6-a0fa-8ea4f9c435d3",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d919da1-a2f1-4500-92ae-80a83aa173f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b24630-28d1-43a4-8fc7-030a9156c2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9a575df-6804-48c5-a0d3-dce60d1fa2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e18daa26-e030-424d-80a5-087f702c8036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab55512b-dca8-47e1-b748-4021d400a394",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3523eb5c-bd67-4c39-8bc0-0fa3f1d928ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b94748-7451-4c1f-b045-9d1f491f06a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c65f53a6-6eec-4f27-a055-6736ac403c34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "134fb537-81c5-4f2d-b8e1-ab42001ffa27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63b502f1-f50c-4200-8f5f-83b2ba554df6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a9dba3-3b16-4bd6-8b1f-5afdeb1a14c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750ec40d-2962-4a8f-a25b-f17656d7f531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dca9a44c-fb7c-45d9-b552-295f9ec56466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "63026dae-9a98-4b49-a258-db72911643f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69e19d9-e771-4baa-80f9-9557e9bba6ea",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b35c038-bb4c-499b-bac8-73bd28427d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1064206-c273-4ac8-8f47-83048c548638"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c75946d7-5510-49a5-9d95-bf5467ef42a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3de39e6-6902-4567-a3de-59be66d4c085"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59cbc44-9517-4491-9c67-b98252f9317a",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a2a9ea9-5f87-46ee-88d0-1b90d1f78e2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6488702-9153-42a9-820e-81a6326ac797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5399d7-775b-478c-9fe0-a4bc8421c58e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "55515cdd-c258-44ca-a6c1-bdda2f16a1b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24a77f17-1b88-4c22-89d9-db5bd153a4c1",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62aeaebc-1e3b-435f-94e9-4dec052bc9a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6aceb35-09c3-4d44-9a88-931edf715865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ea142bf-d41f-4d47-98bf-328950c6ac61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e1a3c76-23f4-41e3-9ac2-f0e5341c398a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f454042-a9d9-48e4-aa63-7fe10ec4c5a5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fe62ba-176b-4e50-af9a-7e8e4a4a230f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec03ed0-0ce4-49f8-be2b-c7f530c12398"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a96ebe-61f3-4125-95d9-e26b4bc09399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1e85d54-8c88-4e46-b162-956e33190441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba4b165-4aad-4705-bfb9-f66ed9cc552b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c5fdf01-e2de-4cde-80ae-9f21133a9685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bb627d8-1488-4a7b-a3b7-cc8b837a66b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2be4ce02-01dc-4bb2-9860-0656d620211e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5c8d28a8-8444-4727-b154-99d25dbda8af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a12ecaf0-aa5f-4d97-9938-22f1757adfdb",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deec9396-482b-40ee-a9b5-0c8a536f1e1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d32d6d-e8e6-4149-81f0-42a8ff274679"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e96a116-a10f-4396-9999-3f0cd94080e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "050f0f68-fa46-4710-8769-a09a4572e1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bb725af-87f6-4763-a4e9-2f19744b6f8a",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85ba9a5d-1e26-42d4-8e39-312dda2ca7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36901b7a-6310-4658-a07b-807d0c188a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acfc4d31-24c9-42f5-b1f0-04171350b415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67888357-68c4-4b29-a465-0020a095a810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fd44726-79a2-415d-859c-bb40d7c342ae",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43cd4950-1690-4abb-ae53-36b3d982ea82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fb2daa8-e36d-4f28-8f8b-38c054ae22af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9a4a4e-64f7-426e-8f43-11c32301581b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e843b1fb-25a6-42fa-b668-1ff8a35e4ed2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6a34bc-5220-4f64-adf9-fa39f6040647",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e73514ee-9055-4771-b06f-ef0b775e7f18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc13173f-69d4-41e6-8b5e-ad59267579fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f59b155c-6ef7-4138-ac63-a669a7421cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83ebdaa2-76fa-4044-9fde-dfc22b79c7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c742b9dd-2498-49f2-a0ca-0a6e1acd081c",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e64d9580-66a0-4a74-9e89-b4f6eb8a63c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "047912b5-65a9-4581-b77b-6ab913f50a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45398f98-a705-4709-86ba-eb89c1fe352b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf001843-4c22-45a4-9d18-78b2f8924b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74228c23-bbdc-45dc-9e9b-f3b294b93a2d",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ba22c04-cb43-49a7-8ab6-5b89705fc399",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a756950e-9d37-428c-af3d-f07b62ee00bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a992db8-66aa-488c-8479-e434b1d58bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "591d2e80-a2f6-4124-990b-daa410fc2788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21db399-90cc-4f17-b84c-90d6a3b4bff0",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e18c35b-5c87-4809-9afb-1f47296fc955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67923388-2aab-471d-883e-26a903b0b6f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dbbb541-49f0-4b79-b2e3-bf28682abe57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e7e30f5-5aa3-4600-a2ff-393ca9cea746"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b258051-fa07-496d-b5d2-c7e3c048bcb3",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "becd2f76-c2d4-4b57-9b64-c2799c5d04ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcfbf10c-4b16-4db5-8afb-818d725421f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "160a3857-f9eb-40b7-a1e0-6e560091bd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6283cff8-f7b0-49db-bddb-88dba1fcd068"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b97bcab-570f-415c-997e-af475d06528d",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9894b5b7-e1b3-4a48-a490-f9591c960a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44b80390-3b8f-4364-b9b0-c5d979487364"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de743d61-c300-48d6-a8e6-971b02d1f16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dfc41d73-8030-4ca6-a158-d2fb7f573e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "482c0f49-d062-4d2e-8e8d-8bbd3ac92672",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7089567-5a98-417f-85ae-fe4799ae3ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f225f64b-5c3a-43d5-a437-0ee7577bcf5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6de762-77f3-4b95-9fac-991c770cdb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "00543ab4-671e-4106-9997-d8bf8daf1d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fd6f5a2-41af-4800-8253-d0a7bc16103d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34d0c5a9-61f4-43fa-ad67-ffb4a4d254c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9718e1c7-ab36-4c52-8b66-0983e34f10f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b795ef-cb93-41eb-b8e0-86cc96a7760c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "9119c4ef-7646-450c-86dd-ca8e333b2462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eed1d3ed-92f6-4649-ac29-51b7d1ec13a8",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a3d843-b109-4645-8613-51bdd10aff29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a52c300f-e542-4ead-84f9-771a58f59848"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c94f06d-4682-4c51-84b9-9646fe8fe336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95f0135c-fa32-4aa0-aea5-84d0148dbf38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8e1bb6-998c-4f0e-8b66-652f31d69b9c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fd4d28c-2190-4ada-93c3-b90063c81451",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d09519bb-2d82-4e95-a274-ccaba48e1b0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f77722-d690-43a9-87e4-e73fc9ebb831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e57e072-1152-4344-83ea-db3f009f8571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ebee4d8-26d3-40bd-8084-7283e3d7313d",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99abd742-9a03-4a59-8864-69b0d60ee003",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "496a6dac-2c74-4a85-aa67-96211a5f320e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9abc508c-8c62-4716-8bee-4e8f334e9e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e13caec8-41fe-4744-a9d4-3000b778798c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6540359-5f87-4a6e-ab2d-9f77e5777eb3",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d868fcf-adb0-4511-a748-75b2d0feeed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12fa7db2-b1e4-4b1e-810c-768d5c850094"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5693a1-c619-436a-8d10-41f000535071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1c59d1-6a56-4f5d-a2bf-2638ac8dce07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fc25c9d-b8ca-4517-8c88-22d86e3f8846",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94e5ca7-1bd0-44b0-b9d4-43f192f783db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccbc4108-0e19-4775-8d54-3391bd2f70d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76953f27-5d64-4d85-997b-9a725bb1b230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5183487-316b-4938-9f83-d59aeffbc966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbaaf197-e1ff-42bd-b583-0601ca421311",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceedc3e6-f388-4927-940f-446fa5f30884",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2806827-877a-41ce-8b99-ab3c816f9f17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46494f8d-4cde-4d58-a48b-141f05271fcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b602c53e-b17a-420a-a085-4225daee0573"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05ff663f-29d0-46a9-8bb3-8fb0719d8aca",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dff45207-e7cf-48d3-8f14-5cbeda19adb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7574df20-c087-49c4-9147-837cf904e314"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d889c0f1-ff3d-4ef3-8fe9-aa4c9e916346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d54cf1a-b2f8-4d6b-bc20-7a4d684eff4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9f667c-1c4c-4eb6-bdd2-8d2bb98907e5",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "076bdd9e-79ad-42dc-8b59-5cf0f6cac380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67c8f85c-2fd1-4e8f-85b8-c6915873a4fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce14ede8-ddad-4836-8836-e0ecfca192f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8f61d9bf-a4aa-4b47-adc8-ec85de8d8c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d248de3-8af1-458f-bcaa-0d81830e912e",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad851b2-4c38-4fde-b1f7-fc31fcc0cdfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4df4357-9d89-4eb0-80fd-7158bbc48760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9c65a7-6668-4d3f-8229-47b19efcd4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5631dd13-4a2d-42ff-a1cf-b7d3413d4bbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56c3872b-177f-4b08-9f9c-17fa39cfd7fa",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "797b2a8b-2679-42bf-8667-b6de9cbfe7e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65391947-1529-4dfb-91e3-997bb17cf7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f487815-656e-4457-99ef-6bf728d53ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbede5d-bf4c-4b4b-ac4f-216b87bf38e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a063dc3d-25fd-4cc4-afd5-b291ca453ffd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00e0282e-a515-48ca-9012-b9f8e1094895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa29c104-cf05-4bee-b120-a625b31bab25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aff78076-738a-43c2-b833-bf2b10562255",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "de19b2e3-a139-4fec-8ba7-02fc81413348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2c4e050-d3be-4d2c-9e8e-783f79467a21",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e3b7aeb-bbb3-4c6c-a9cc-5248d21d8ea0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dd08251-adb2-4d70-89ee-f5be35698f82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75872334-cb82-4bad-88bc-1cc004a452ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5245f896-da64-47b1-97e7-9bd5dd0935ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89997e4b-91bc-4d54-a413-a8e782568c09",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c793ba-e85b-4113-a9be-dd9c9929b205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "289d43f1-073b-4386-8bb9-58193f6366c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2835b4cf-31d2-45f8-b9be-7818f5bb144d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8b099c8d-8eb1-48b9-a19d-483c59d4dcdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa09872-ce36-4d16-831c-f1843e07c494",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "634292c6-b45c-420a-8273-4387be17780e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e054ee84-12c7-492c-9a23-6c80988e4bbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "427834ea-edfa-4801-aebb-510c3f3f0106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "682740d2-f4c0-49b9-b209-e740708a9d99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba94082e-3898-408b-b1fa-b854a5a0f60d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4285ef6-99dd-4b25-bc0b-7f84e612b715",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74a4bda-f742-4800-b254-dbe5f6692f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89c0e70d-94c0-4281-89bc-826e29d5f0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "08e05833-d401-4323-8b18-24a3134469cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62dcb5a1-6fbe-4b4b-8c51-6b3b74b1e438",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aba0c0d0-c69e-4bbb-9e63-ea005675a658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2befc626-1683-4c8d-b3cf-3bad47dda0d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6878bd92-91f3-42ba-906a-c5e2e39f403d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d01f83e6-807e-44c7-a6e4-f87b3a31633b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "336d9032-a00a-49ce-af90-99cdc5f287b0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e58519-d0de-4e54-8fcd-0f7bc686dc28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b23335a-d026-42cb-866e-f02339aa81f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9c27c2c-1625-490f-a58c-4a1a57be20c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c38c88-2f89-4ec5-bcd5-0e74c3f2348f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb3caaa-eecb-4162-9846-37d7be117f05",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "699f4576-2448-4d86-8f08-7e86e339eb24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4bf9cc51-3da9-413b-befc-0a51deba909f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2e0643-5779-43e0-a500-6d1ce8a23d5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "908b4f96-df39-4d14-b3a1-d49017b91667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "895c72be-d689-4f07-9c33-244b3c25fed1",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0753c49-b9f6-4063-92ac-be6681b50d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd81da3-fd3a-428c-83e8-f3376d0a2297"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64448b10-7b30-4d30-a378-710a70b3603e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f5dbdfad-f2a3-4633-94c7-ead409812eb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db3f35a-7217-41a3-9b4b-fd32eaa6a79c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcef0df6-0e7a-4be9-aafa-dcf466a333cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b56d23fe-ec59-4d25-a17c-90183aa13d29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c09bda31-a805-4861-ab4e-5120f80ad5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d08c43-1bfe-4929-b362-8e640dc8053e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b542243-8fc8-4254-a419-dd5742a0eee0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66f5e66a-7b51-46f0-b0b5-c9df02541cef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "893196d8-ad05-4cc8-bc8d-318dc281d813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62cb04b-a7b7-4e56-9f4f-1c1f877945bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "10d93d6c-6881-437e-81cd-c0babfa80c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b87e41f3-6893-4f38-a026-6ddeefcc59ba",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37b8889-821b-45f7-be3b-212f05a402a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1484a515-b6d5-41a7-853d-7ea8ca14b270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe59b20c-29c6-4499-8f5c-21cad2ae94a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2e1389-eba5-4719-ae43-5eed77fe3378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37bc08ed-a20e-4954-8496-30593506e3d2",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d715a6dc-3faf-4be6-823f-55f8c6f05767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7df08181-0b61-4ce4-9752-f4763d32fe70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387626d7-4df3-4b84-add8-382f4201653b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "231bd44d-92fb-449e-b4bd-979ad668e4a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038ca29a-0d75-4fc9-9633-25dd8252a744",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d75fbc3d-d1e6-4763-9196-12c308d80d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c47304d8-db1b-4f66-838b-0b432bd34ff5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb2cda6f-550e-47f7-a531-6168620867b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "de9ff826-5e92-49fa-98fa-1e98726b78ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c95d319f-3a2d-4ba8-9566-2c710ffb9a6a",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "653de0c9-d2a8-4fd0-ba3b-84dace7f7efb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33be7c1e-eb5a-4956-b38a-4e3cbf3bddf6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f71be9-7a05-4af9-a1bc-ac0f40caca28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7c99fe51-11b2-43ea-933f-513ef6dd28f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40039b7-2b6d-4c14-9c78-e8ce44a41481",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8772325d-5bfc-48b9-8527-41ce2029d9d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ddfa8e-e0a4-4dd6-ac8b-d7dae38ba80b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5715613-802b-42cd-8d06-86517ad68aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0d51badf-04f9-43ee-8544-cd53388e17f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b9ba63-4796-46e1-a186-b13d00fdf9a3",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcfe5228-f4bf-4494-bff4-0d4632e4ab69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62dffcfb-2e03-4441-97b8-f50ef2599066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a619ab7b-7c9b-485e-9733-7ef241bf0685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "47b9071a-9027-4aab-8384-d67a3fec4f2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58258406-6f44-4376-8369-a5fae3921621",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1aa4662-99ac-4731-ae38-ffef1b161a47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f6ae71a-172e-4521-90e8-bd2ed1c77464"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9725e94c-5f14-4f87-9030-80d22fcb6e67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a6dc5384-c3e8-42f9-88a9-025630319357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec3ab4c-85fa-4cbd-8563-abe183752b3a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1713cd2f-9bab-47ef-aaee-d3539a870d1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d083793-1c03-4197-ae36-ecbf5b414711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e794bd35-b5fb-4856-881e-570d032908df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22532794-900b-47d9-afdc-66f4c1fb4550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c10bf45d-0dcc-4a8f-b50d-4ff1a5f5a5ca",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a71a301c-de59-406a-8327-b0d624802354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f2ea99-656a-4fcf-a044-650d7762a34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac713abc-159b-44cd-98fe-bb44a5719f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9f91573-814f-416e-92f7-5eb94983afe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67d7317-38c6-42c6-a72e-f639c67fafcf",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f737eda6-adc6-4859-9488-e50d4ad3721a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3ab8d52-8eb9-435d-96d7-a655091db2d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ccac24-5e7a-47ab-b661-416c100cd347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a28c5b-fb3e-4c67-95b7-2fa2805aa3ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d492a6b-1423-4277-a932-61e9e68d6fd4",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5713e0-d635-426e-9538-40d8dd8a4c98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "481e0b14-b0b1-44a7-b15a-8f9bbec7f93c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1550e8-78f0-4dc2-aab5-bd85c0cbe554",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6a6d6f-6ae0-4fe3-b3c7-9c489c75f8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3e967a0-8cf4-4e1f-9c7f-cf09c5f6efb5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df3175c-f877-44a0-9ed0-fafefc157328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63c98cf9-a55a-4266-81b8-ff7d1cdd3146"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a46ac9-2c4f-434a-9e1c-58a711ecb5f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "72f7c541-01f3-469f-9cf5-d3450a6e6295"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce97298-bf26-4b05-94ba-b4dd54a222cf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6965fdd1-1ad4-42d4-9f0a-3a018f753ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d547a6c-6850-44fe-91a0-5efb4c7b7796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bda9e89-7360-4244-8ae2-2c5b5e8b0ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "87722ee4-a237-47d1-8100-94db528f6387"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1677a5d-6f9e-4965-8c22-4f50b2bf81d1",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b87df0-d405-4a8d-8ce4-639f98975b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7da901-09b4-41ff-bf41-eabb6e72b4b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8df676b7-56e7-4654-92c6-e9c5f72c30c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "3436afbf-d753-4ba4-ac43-903a510a1c24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c860e802-84e3-4644-b40d-b412020c9ed4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d20db0b-9d87-4787-bea0-4a74ee80b96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd3e841a-b80d-4807-8db2-e20e1cab9a75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf266bdd-0a66-46e7-884b-22c21f31058c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "24639fa2-30b7-482b-a4bd-78265bbe02c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b904a3-3592-48e0-b843-01a10342dede",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d88b227b-24a3-4a7f-b90e-84ba2f444639",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec3c21c0-00d1-4b28-a3b6-278241450c90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df59b385-fa26-424f-96c8-481a1b778cdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "24d6a70c-8bd7-49b9-a98a-ba3fff15b427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ffe7d58-907c-44e0-89d0-5b096f04d222",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fdb2f99-9f86-47a4-a3d9-1ad93ee2a4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fdc0864-76de-4f50-8848-699866903e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e899158-52e6-4ca3-9f5b-79804b2d1f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "734839bf-714d-44b1-982a-8ea74bb50d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b56772c-b769-400d-9e65-8899e924301f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b2d0603-3bd6-48c1-82ce-d8a059e9a215",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d415a9-4a99-4b04-b7aa-5ae103a54a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86e5fe38-89bc-4873-bdfd-114263c4605c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7409eac3-fd20-4fde-acb2-487bb951be12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b911ac-91a6-4cef-9ee9-6da3e0de49e0",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea02aa35-596f-458b-bdc8-4a5dff8222ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9acd8cd-3158-466d-ad1a-f562360dfc46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fddcac-6dd8-4d6e-a5ad-c653ba166009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bb6ab9f-f8e4-42fc-a2e2-f09edbbcd10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67cb7e34-a428-4d36-88a9-98116c308a72",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f41a234-d713-4101-ba0a-c236d4260e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1aeb043-18e3-4c40-87b6-ee087314f304"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9afdc41-0ef6-4f98-8da1-ef5445b0ac69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0622a32-895e-43d7-9bfa-a4db3dda3446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c335afc-3c52-4d3a-bf61-570dab00f59b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42538483-b409-457f-804f-4d1e5a69f0c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c6dde5c-b8b2-4f41-acb0-0dbc1dba0f14"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23b406a1-16f2-4028-be0a-f3fdb27a5df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dc0211cf-c112-4637-b5e9-abfb3cbdedf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65ec10ba-55a5-4795-bc67-8710847264b2",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d6f6d91-0b90-4f19-bcb2-42614314e3c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b24ed74-5b7e-473c-b98d-c1612a0b8005"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "389ffec8-adb9-4ed8-aee3-0f770539b308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "18cfabe9-ced0-4849-b2bc-4a4e71a8022f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bddc8267-d698-4793-968b-8529ae8a24d8",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "360e76c6-2558-4da8-8d02-4ecad35d9cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff3864f-efe6-46fb-acfc-36cbe8f69add"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "def0e648-64ab-4e79-96d3-e08a568dba26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "576596fc-9c80-45bd-8d30-e139dd08127a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1a4aaf-0106-4721-a8fc-2ccbcb2daca6",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7726b63c-b8a1-41d2-bc66-af708d4eb8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7ec3373-7e94-41bc-896b-89d1d32ec58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e2dc49-d8f3-42df-83b6-e138584d0130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "06f8aa1b-f678-4b8a-9686-ce89201c6f4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b97d75-52d7-4654-9c10-7d922efd9529",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e70abdc-9d58-43f2-885d-2ec850934873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb11ed34-38b3-4c02-8cc6-cdaa26e2e951"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d424ed48-73b2-4864-80ac-795261d12881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "147e539f-d485-4a5f-8c80-d1c4ab53f2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb07ea0-4ab5-4806-8fff-45227e3439de",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f2b84da-ef73-4d4e-8a54-cbac0623fbff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a953becf-fe95-40ac-ae81-9024c9c11cc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c1d4894-be7c-4f8a-b2ee-0239548706e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0236655-914f-4baa-9dd5-00d25e6db483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160fb2d8-1e51-4f58-a20d-d8731fd8f576",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c05867e-6b98-4a9d-980b-9b23b9f852b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8bf538d-00ad-4537-856b-7032526679c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "773f2b21-70af-4b00-b81c-71034f586d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce2fb472-faed-4742-8d04-7587f05bb5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfc3a2c-c788-494b-8002-4a42bf3aaa5e",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2836f451-3d50-4ae3-b045-dcd747e542e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5a670b-411b-487f-b9bb-6e7a520dd61b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405fa63f-0ca1-41db-a818-9d29f3831c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ef0b73ca-038c-443e-9b2f-cbc9085ca20b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1f47465-d7e5-41fe-a5b8-1be4b22510bd",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72d01860-de70-4a44-9c10-90a1d811daa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3fdb58b-3b6a-4948-aeac-5cd9d9acaa8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9585d28c-79d0-4df2-b792-8e59be916c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2b6c1b96-0d06-4faa-b8be-4c6cf9124d4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a39b971-0a6c-494f-b1b5-362840388a03",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0394424f-d800-4561-ac3d-fb4be7a7cd06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9de499d8-d502-4b39-ba64-d753e6404c37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d05c84d9-c087-4c6b-8760-8f7984cf2433",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb370a56-a953-4d50-8026-a6cbeea2b71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2bf407-3626-497e-a848-aba925c5c4eb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a50ad9-04b0-4533-9858-e85840776ea8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45f53d83-1f13-4952-8f8e-1f4dcfa68afb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec915232-63b9-4ada-abe6-1700e3583c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "83dc72fb-5dd9-4f03-9961-e4ad5905016e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac486f7-eda3-45ba-8bdd-e51550de02b3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878aa315-56ad-469b-a6d4-d4fe07ad0696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bc30bbf-a792-4413-9c1b-68008c7f3689"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac707c9-7b93-482a-8693-90073ca7fec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5598322e-3aae-439d-bd0b-39e9f34ca095"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db5b4c3f-dd5f-4cc7-b1ea-d887dc9b1e30",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd4a74d0-6de8-4303-a26b-ccf88e74950d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b92b6f74-4810-4fb5-b2d0-08d1f9c9cff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94bba4ab-fccd-4589-a771-a5e387d8410e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b5f0935-2023-4dfb-b204-0009a9fdf33f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3430538b-5100-4086-87bd-7c8eef7be811",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd67480d-c057-4412-b5d9-2e510434c2f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c833387b-2b57-4a84-a658-d528ae14ce85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65eaff6e-c955-4e98-b058-da1d95081270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d5bd8755-5e34-40bd-b6c9-03e79c0cfe37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd58915-bde2-4cc8-b440-e369e731ab99",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04013801-d20f-44eb-b28b-a6848bba127a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51eb3c28-67c6-4869-8d76-c72db7abf65b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36c869c9-ad06-4078-81a1-729c04d040ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8c37ed62-f779-4040-a876-4fa69a0f8865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fedaa8e-d2fb-4b9f-9a5c-d7b177ee33d4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12c01d42-f3a0-4d52-b195-581b70ef215b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea337370-ff0a-488a-bc14-095be6f13718"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21254a99-d1f3-47f6-ab26-9e5db71be23a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af9546f1-5a0f-4545-868b-fbae50a575a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43d4ee94-a9ec-4109-9f74-c831ec530df0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1978cb-ea20-494b-96bc-b60f4843efff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "205cb4f2-8b04-42ab-9f80-664f02dfc4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c068cb7d-5ad2-4132-957d-242e1a2b6f95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0549760e-0cb7-4640-8eac-8fe1f9f64906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeafa8ee-5153-4a6a-8edf-7716a15dc683",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f128ad-3820-4910-baa5-2a9c6300fade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17e4bb77-ae40-45bf-be02-a2fa365b2533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3ad1ae7-19c3-4674-89b3-04814527e8eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3858920-9417-44bf-b35e-1d3d3096edd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cacb3e3e-4be8-4580-a59f-efd847b4cca7",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0417d958-a13c-4d89-8d47-257cd8869803",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f41745-f564-46a7-8e70-6a0bfb8c9c5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12caf8a8-79ca-42aa-80f0-c26c95e406a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4a08328-db5f-42dd-9c3c-84b82a9e4a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05f2e1e0-cbdd-441f-9757-57e901fce8b0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ee4e313-bbcd-44d1-84be-6b237cf8ac10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a85fcd17-b776-4f56-a021-bee89d53956b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d18707d-5e35-4bf5-8924-13ce33498710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "19349925-d4a7-459c-af4b-ffc3272eecc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea83b5c3-674c-4c77-8628-99cee9a8f37b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ec06492-db22-4f4d-be30-95a7a37a0909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c82c9f4-099e-443e-a8f1-0ff4c99d8d16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e12a00c-a2a5-47c7-9356-6cc097eea645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "057d91d5-ec2e-4e5a-b052-921099df258e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9ddc59-29f3-4a8b-a05a-57dbdb3b8e53",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71347636-b138-4db3-be53-d2a3b87fad64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75850162-e482-4398-988e-2d1bf62eb532"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74979ee2-a031-45f5-8ba8-60b84b8fa3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f52f6112-20cd-4fac-8e49-c4f954b74cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e96f35-ba64-41f2-b15e-0836cb20f9bf",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8a94779-d961-47c2-b162-ffbe8f1f1764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cfb6519-e821-4f89-896e-123c8711c9cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd0c1871-ee3d-4efd-abb2-cdf06150b91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d32fe08b-4cfe-4a3e-ab47-7f89d919571d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474a5b11-c1c7-4487-99fe-5fd1da4f9328",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc2b75f3-13e3-4160-93c8-a488a883d699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "384f44a5-4e72-4205-bb41-4d68ce4e3381"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8024db1-a61d-4563-ba8f-79bcb11ad6c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "43fbadd1-c1b4-4281-bcef-d4fad5a3c27c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1c4f4da-2803-42c1-a329-f95d3a805da3",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4407acd-6cda-42d6-9904-158c108b1551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7268bdb-ea44-4507-8dab-ec0979d66129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed49f0e-3b66-4c27-9f62-b7ceebae60ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "24f83359-cb52-48a9-835b-1be0e9f5783e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1dc4a437-0ea5-4873-a42b-0d8379d0ada0",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f762e8-b66c-475a-a660-a0b1978b1925",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "685aa48c-6632-4357-a723-f7139447bd2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf234e9-d11e-4466-8c7d-580b97bd66e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d2f5fe25-3544-433b-9856-c6953029bf77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01dd9483-de2c-488f-8bf5-70620b9f62f8",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd35795-ab0e-4255-9ee8-29be58a8b376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e3718512-8f00-4014-a6ea-67bc0d1744e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7042f0e1-be80-478a-8e1a-d3df98421369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "34c3e22b-6255-4266-8167-718f99ddcfec"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "616f81e8-2325-48f6-ae8d-2fb379a6d850",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d6e193f-a8c2-4a35-a957-06addff58c1d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3661ff49-f1fc-4a8a-8abc-79ed1586a8e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12601309-34ba-4e9a-869d-ffbd01c804ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef26505-e710-4bbd-812f-5d61ef6d611e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8a9d068-f98e-4599-8505-8968cefa34f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8562d710-97e4-4b27-a42a-329108684ba3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee667687-d95e-4256-8461-ad6ed7218a7d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "995d8f89-d9ea-408a-b2dd-da3a9524fb14",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54ae6f5e-e07b-45ae-a084-f201b605a993"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "29c18980-2dea-4aeb-9d1e-d76f205ed2e5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "198c42a7-ee7a-4d1b-a263-a76e0269d1b2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6816f743-5552-4a0b-814a-2fbafdb71ac8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cf8f3645-fc42-436b-aaf4-f5e8f649cd77"
                }
              }
            ]
          },
          {
            "id": "28baef72-f37a-478f-8bb9-bfd294cac305",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2e30ac47-915a-47eb-9c3b-896b059840e5",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "a6402c28-3c20-4185-b6a7-098fe0f66c2c",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87592d39-aea0-4466-b0de-0f8880caefe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "34888b36-ff94-4690-99c9-26472d4845bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3610fb0-649a-4b01-8d0d-d77145a9a967",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d98ad41-6a5b-42ad-986b-969e61878578"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ac46947c-f9f2-4b67-a288-e81e709fd272",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ab2c9a2-1cdf-40c5-b1d9-a02f8cc76c11",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5acfc43-bd60-4b10-b3bb-c66556e2cfb1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6453950f-5212-4ded-987f-35b2a529d4eb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "37e864ef-7ead-44c4-991c-96208a9b8e79"
                    }
                  }
                ]
              },
              {
                "id": "2eaac729-4af2-4c97-a3f7-d249d1c6e8fd",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "afe3114f-5151-4443-9981-98a77c67712f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c662a909-5a10-4bb0-abce-d3627c8b37f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c9ee4462-0786-4641-acaf-083ee5e0c0ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d46133f-7fc9-4566-b9f0-69373afe62e3"
                    }
                  }
                ]
              },
              {
                "id": "13842ca9-952c-4402-be7d-bf86525ee194",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0cc5bfc0-17aa-441b-9d01-6e87ea69872d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ba974538-907d-4761-81c5-da3b88599cc9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ed5fead-5a9f-488b-b8cb-76b78a626796",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "02f771d0-6ee9-4d4d-ad93-1318eb502647"
                    }
                  }
                ]
              },
              {
                "id": "d3933ec4-76de-42f2-b863-4eda196013b3",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "924c008f-ea67-4458-8a2b-aaa4619a861d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a2365e2-afc1-4e64-bbab-94a80b2164d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c88c63aa-99a3-43b6-b4e9-252685c43dbf",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "640b59cb-4228-4b96-b711-181143a51e44"
                    }
                  }
                ]
              },
              {
                "id": "bf2840f1-4a86-4355-bec5-3a18198fbc2f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cf69d6e-3598-4af8-af65-7516ed7ffd7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c40e7f54-ebf0-4d7e-9418-db57e2fb5884"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b25877ac-a1a7-4bce-ba08-beb86ad2ade7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "5f9262be-d9b3-4366-8738-bdf4c9e427a8"
                    }
                  }
                ]
              },
              {
                "id": "1bfd05de-b156-43a2-a4ae-c687a44b6afa",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5f3b97d-641e-4326-a527-3ef98dd53442",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ca894ab3-33c0-45bf-9e1c-6c8a906ba4ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec0b415f-bd03-475d-8ba6-e9545514686c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "9d1acd88-f2ae-482d-a6c1-1a17f1856e63"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cd90c017-a7fd-41c5-979b-fa3f57812864",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "eaf68f54-e350-4ab6-8000-9f36fa02fbb4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "8e99b536-20a3-4ca6-906d-e0bdcc033e66",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "75521c22-eba1-439d-a6b8-e13c5c3e184a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3a5eb36a-6ea7-470a-9081-5c754699a891",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ee2ad93c-964a-4695-913c-fbf372294eb2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57a7d46f-72de-44d0-9c3b-f58cfbce9cc2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e58ad018-dbf9-418a-b38c-327c09da8577"
            }
          }
        ]
      },
      {
        "id": "f2498a20-2e94-4089-a269-195877938bd5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "098f767a-1373-4157-9708-4553e145f84b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "db4051b3-1728-4240-84c0-a83a6ca42c42",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "447f78a1-47a9-42a9-8e58-04d64ae1d817",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9924f66-c484-4848-8f11-bfeef2746cfe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2fe3b76-98bb-4513-96a6-895e16354c0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd2e34a-f7ae-48f5-86c2-3d95de383498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "488a361a-c209-43aa-b554-c0f8c935fa85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aec6124e-a9ca-4474-a126-1b86d6233ff8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf9a3e69-36bd-4569-957e-5262030d3ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbc70e9-2392-46f7-8961-08620ffd71cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8dc2f12-f702-41b5-b521-009930952f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "deefd2f8-bde9-4beb-9284-c8d12495500b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed423277-2298-44d2-82b5-3d3311c9c046",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00485cfd-d4c0-4792-9688-2f1c34cbbaa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03abafc2-1cd2-4b12-98b0-ab671a64ccf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76eb51b6-06ff-455d-8e35-7d86c1595d5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef90df42-d167-4208-8633-0ee872cc3f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c89792a-d202-4720-916e-1c205d1bd42b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74f70dfc-6eb3-47b1-9efb-f3e2c3e545be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f26495b9-a170-427f-9cbf-6cb88d64760c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a0f336b-4c63-4926-8f48-1d3984117266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c0084a4-9cdc-4fc7-9037-2d0b81a4acc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d40b50a-b841-4805-994c-f476e2a52a51",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3ad16d-58f5-45e4-afa6-8ed20c8e8e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbbdaf65-f077-4ac5-b384-f0c57dd291b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "132a3695-dac0-40c9-ad34-afb41e914a49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc14455f-8154-4081-8a67-e6ee6370ef36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d32122-869b-44ec-bcc7-bf1217dc5132",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b83c8b0c-0c30-4ca1-ad2e-d1a3355b7741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc392d6-0e71-489a-8f73-dbea31c25824"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de4590e6-2eea-427f-b315-ef780a7279a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "401b9430-3839-4cd0-a433-33544182b6b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f572705-4a52-4121-b92d-b443964407fa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb92a45-8361-46b5-819f-036e4c920acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "836dc88f-bee1-4f47-9638-a91d14f75307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1b682d9-2e76-421f-b639-b4fff0a8fc35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9ddc0595-b3c1-4180-9c4b-c55f1e3500e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62954ce3-b77a-4342-8d0c-5a27d172f319",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9800ece2-8ab8-4f0a-9eeb-88ebf3477e10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5698aafe-16fa-4233-be69-f8381957fa86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18c9546-c1cc-44f9-85c9-47b3a0f3f250",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "394c91df-8344-462b-8256-66a8538f5e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106b03de-87c2-48f1-bc7f-871b27cff93d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "494c01ce-2051-498d-a81e-a12a5fa96d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e71bcd1-03f7-4ddf-9113-b50a9591ece9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a322fbed-2708-41d8-a07d-f37dc2b0a420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "abcc9183-7178-4b09-bbf3-751fe0654ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953ef3ad-0897-4825-8856-4b6c7dbe1eda",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6983fce9-0335-4559-9e8d-3a978621cb89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d8250d-88fb-4198-8979-a53863594d49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a7b2353-cc0f-4e88-b89a-af5ef11a0387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab30428a-3c17-4a6d-9df7-85bac285a77a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bd26dc2-5d57-4e11-9a16-d51d60b96ef7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12aa1b81-ec6f-4b48-b0c5-c121d611db27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6f9255b-8e92-48c9-97a8-94b6ea073440"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c509497-f899-4d13-8350-36d93447ef09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6d4175b1-5563-43b5-85e7-b5962793f1de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f49996c3-d160-4ba6-a676-04cd38926f01",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84649fb0-d5f2-496b-a858-011b85c6c4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44106618-5775-4613-99e8-a5020eb88e15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438e6b66-2de3-4534-855d-967da2797df1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7747253-c6c9-4762-a079-dd0546349e14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc614b66-1904-4bc8-9528-545770d27095",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a727c6-4783-4399-86b8-5323a26f0806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76a24172-aa2c-407d-87e3-532287607ce6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e423d556-66cf-45d6-9733-054bdd6a4424",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5ea4ecad-514c-4110-980a-be6d740ff06f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44bf4dc9-e31a-4b94-8f9f-78dadddad484",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0c8a13b-1aa9-4985-b71d-269e34d4e703",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ca45f0b-7f45-4890-8cd1-c227c496571f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf9ede10-1606-49a2-890c-2e78b0e1192c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "a110f1a7-9878-43dc-b080-6f17ab9b0c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784c6809-37da-4c1d-8cb6-6f88b86bcc41",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e870fb73-cc26-476e-a992-c0b63181b3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30e85708-11c9-4f0e-8c48-dea126b53220"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c6dfc9-4cbb-4fcd-849e-73b00466d665",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fdcc1e3-a469-49b1-bc02-eb8e729a1047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c7f39e-6fa9-4f99-a7da-dea4caf6ad33",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dae4e567-bc18-419d-bf2c-4328931bd9a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b1ca521-5588-4fc2-82cc-b6d008673019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c31b7a1b-17b9-4c97-8bde-44b5c3ae0552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f33edad2-e566-41c6-a623-f7c1bdc12709"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1699ff34-dd71-4506-8e6d-6478eff9cf14",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3fe100-b757-485b-a2a9-9d5f687803e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b5c117d-1c61-4058-b3ce-c03ae551e8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7f0c7d-6d3b-496b-a944-4b8d706d4e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d863f08-35ab-4cf5-a26b-a43466b299d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d179f6bc-26c5-4caa-8180-e84c97608acf",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c9cc029-5dc2-4914-9d1b-b5a9734b8969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1c239eb-9367-4007-bd87-a9651640accb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c06e55e3-a314-4aec-8bc1-1c4b3047936a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "af69954f-ed1c-447c-b8e5-011cb3a7266a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6933d17f-1cc4-4e1e-a1c0-9617c2520309",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3086f40c-0946-4fd0-9bc6-60824e7a4998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f359c6-e1f3-4061-b625-268c914d579d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80a7bb0-a06a-4448-a09d-0db33994c38a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af4c85ee-1198-438e-b10d-a2a7ae14b82d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc608cb-60a0-43f5-9b3e-f2a9eeb197aa",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76057108-3f13-4513-8521-e5dfed288d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "275919cf-5f98-4e63-9045-2d2711d7bbb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4576009e-77d5-4a66-a618-424bfba9a46e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "81bca3af-6280-45ff-88da-092e1e8cbd82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "055e4356-d3da-449a-a375-1a6378503612",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5bdb7a-30a6-4cae-86aa-8847d93b0ac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0da8b11d-b6fb-41a1-94b1-b3967b1ca2ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15097783-9cde-4acf-a07f-731c41802b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e542b034-2cef-4168-9f8c-9dcb8db01807"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52624517-d031-4046-aa46-d0461314fe15",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e8482ed-7a0f-45f1-bea5-b125e5e146b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59b5db58-c6a4-4054-b3bc-40e50738bfc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d72115b-ed11-4028-ac01-1e7545c50cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a1fca534-f012-4f15-9170-e63547fbf87a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28de0c1-dbb5-41ff-807a-5083d0921f09",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45222fbd-9b08-41de-93a0-22969a360050",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43f2d066-9b47-408e-844f-8ff83c487889"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3767a8a3-8837-4842-b52d-1e3233075df7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ebe5a795-9fb6-43d2-94f4-7ef74cf710f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb77575-e5ff-4937-890e-68d6a2cb36ea",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "984c4b77-6573-42c2-ad03-2d14e392aef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "114f20b6-451b-4efa-bc33-368ab3610b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0910c5db-6578-42ae-b880-b9e1d18958fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc7c88b7-16d8-47e8-aa44-e2d2ce46711e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60fde5ca-8a09-49de-a29a-be0c7bf82b55",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12d6d316-b333-44ea-bf00-4f690bf0180b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64d10184-de7b-47b8-8ab5-69b2cfe3def3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14caaaac-894a-42fd-a68c-2b40de80556f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aaf20f2f-614e-4ca8-b9b4-7625fe5423d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99fdf0de-0d19-4e8c-9837-d2aa2f661afd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ca2c23-9b2e-4b0d-9f49-72ce92f16225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bbd8db6-44fa-4ec8-874c-d4e167b66ef3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70f12ab-f8d8-492c-865e-0ab4996ae954",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82552194-55e8-4b3b-8798-77993f237484"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2582cdc5-de9c-4a6d-8f84-86cc90bbf628",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ccbc975-fdd8-4148-850b-b088e931ee54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b352b595-9fed-4b5c-9fcd-035e938ca787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1e5712f-63f9-4709-8853-82c11e4d8aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0e454734-1114-4de1-a306-7adc32f4bebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea661330-abc2-4319-8af2-afebb03df5af",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3febbe0d-8311-49fa-b4a5-715c399bf2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8ae902-75d7-4cb6-8245-8427d2318832"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "819a4fe5-2308-49dd-8829-a6c3e9daab2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3538bb8e-60dc-4300-b76e-b2fe96df1ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a12a92-9403-4a73-923b-6b169ca367c4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e352be14-269c-437d-94a3-fe39f1504834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c20a8ec-827a-41e4-9917-250aebcb252d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25b4ddb8-93d2-40a6-a7ec-a3241754c338",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "95b485df-2f09-4271-8147-e18df1bcbd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c0c7705-fc41-4447-9c97-20269903dcfe",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a863047-9b5c-4bfd-bc6e-fb63cc8cbbd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482a8d8c-0267-48df-8041-6e2b1a666498"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54f5002-49d1-4c02-9405-070ab7473487",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4d138f-23f5-4078-a0cb-fa6774ce63e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b768cc6c-ce08-4a21-ab3f-087d3f91152f",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "806228fd-8aac-45a8-8aac-953a182c4910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea9631d1-78c0-4774-8139-c7f76483217e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217a7af0-26c3-4857-9f74-5eacff85d35f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bce9876a-25e5-4199-aa80-9e436dfbfcb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5920f5ae-5541-4fb9-95ae-c4a1f0f56990",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12e6d678-61a3-4208-b5d4-1f4ee23e1fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1d152fa-bd67-4743-9451-916c6aa772df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e51bd8a-fe03-46d7-8f62-e45fe73aa393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6f9bf020-c1ad-43cb-9bb6-d085213c2fb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7909a9-26ca-49fb-b4ad-aca96c09c78c",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d0e6fa0-e185-4e4a-b595-c4133e9cb103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2652fef-64b8-4507-9c3d-24df75f5f362"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ed09d94-421b-49e0-a4ec-e97130eb4b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "09768f29-f8e0-42e9-a292-8358cb1895bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d6b961-7074-43d0-90f4-680d1eeb8b99",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9edf39-8ae7-4f99-9f2d-176e699c60ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55f6b49c-5556-43e1-9ce2-a9e32b24f255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcb9fab7-908f-4c1b-84cf-c04ca37f7e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "605657fb-4c0a-48f8-ae0c-d7eac7e6b27e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7190fea0-d548-40ef-9688-3a3bcbcb8fab",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1373762b-8987-4238-9ccd-abc229758239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a21d1c81-000f-41e0-b9a8-2e4f5aa75270"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3611d8cd-cc5c-44e3-a086-de098b721b54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1102f205-8fbc-4392-9f4a-91e91ba338e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb88508-c2a0-4dfe-9576-4dabf7ed8092",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef0e4be-2183-4f1c-9f5d-a8bdfdbb0701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60786952-4497-4dff-bcbf-724e5bd785db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3c1258e-fd61-4cda-9e21-e2736e560f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45e9d1d7-027f-4ab2-bac2-e5464df85e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78c99985-b15d-44c8-98bb-746e843837e9",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abfec627-3319-40bc-ad97-201acac2c4d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87dca30-06e7-4a01-ad53-14fea9c6953e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee42eff-431d-4954-9f3e-33a5101f99c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63e32a39-ab5c-4800-9002-1739042ce7dd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5b05ebc7-6520-48fc-9479-1da357ceccf0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "762007f0-c037-4b6c-b554-b7338b4d513a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2ee6fa3-7208-4533-81c6-b4d73843f490",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "feb19a96-3854-41aa-8a01-532b7cbfa37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b49f407e-eb74-4626-b1eb-0d09fc2548bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "96fbf7e3-0db2-49bc-90d3-463349dd4297"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bc6e8be7-6f21-4fa6-aff2-e214478e478b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00ca39ac-62a9-470f-bcba-4169ca987d7e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c10cac95-4b2d-491f-be03-3cf5593714ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc5990d4-587a-41ea-be74-a4d87abf46b7"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f03f367-0cfd-49d8-8347-32bfc50c66a4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "15df5402-c047-49e8-a92d-c1a8c35e2da5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c191aadf-048c-4437-b647-20ac629bfe75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c8a08ede-419a-4fd5-a944-fcb82a30a383"
            }
          }
        ]
      },
      {
        "id": "1aa09a87-63f2-409a-97eb-b70326872987",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "5ed90223-159a-4e61-b652-2f376d203fa4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "19930902-a1c9-4fd7-ad90-a69e22be6658",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a779ffba-f4b5-440d-a366-cedb226a3d78",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cabeefc-51f7-40b0-b17d-24445010a8b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7415d168-526c-40d6-9af5-c4f37cedab45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52184723-2437-4095-abec-59c4058dbe11",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7daf3ee-934b-404d-b78d-8931303f4b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23ba19c-ec63-4322-8e68-74d2476b7892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32348d35-e73a-4b96-9678-8eee153adfb9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c9e95c-c6b6-4451-be3e-2f2bd6db6ee7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea5eb118-eaf9-4401-a14d-dbce094a72a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f79470-0861-414d-9e64-2aa283671ff6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1a006b0-f6b8-41f2-a089-d8486b9910c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03677696-42c0-4d58-8540-700a27c8114b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a48f12ce-95da-486d-9865-8d5baeb97a68",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fcee397-cde2-4bf0-94ac-fb8ba6bbb453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc433f7-d92f-4f59-bf02-631476b284cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aea0bd2-7eb0-4873-b31d-bb42e49e4266",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ace37ef-5905-41ed-8f39-00aa1b21bac7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7cefc85-5cee-45fd-9d24-31b3e99f0820"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08e5bc59-2d67-4662-9a7f-3a47a2af5c8c",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d5cba6f-cfef-4d58-b967-b9f32272770b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4aeec886-0ee7-4175-befd-ab82c8b7a7f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d28386-d41c-4083-86fb-ac0e9cf4e5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5dfa919e-8787-4d1b-8227-0fc0bc3ed22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d21f086-24b8-4fae-93ab-8e308a53ced1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d383aa98-2138-432d-8a69-e070e81206e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "848f0c37-a6d3-41b6-bf49-864d6d47b4d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90112988-1849-4ed1-8662-762e7fcbc38d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72cd337a-c85c-41cc-ac73-eb216fbe9698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0235d00a-96c5-47cc-a7a7-b694c65a8b67",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee66746e-87f5-41f8-8354-e978bd89fedd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436dfafb-1195-4254-a577-894fa72d6735"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f65983-6f56-4a18-a2be-fab8857cc341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806f71dd-f45d-43e7-a9be-cf5f6b562764"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cd58dff-bb3f-433d-8199-a94bcde549cc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fb6b023-608a-4f15-8229-521f4cdab8a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5aa30768-fff3-4191-aa47-9da55cd1d32a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60af3ee1-14c8-4fdf-b4c2-5e6726c3282f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ca40cb0-8aff-448c-b942-b74578c89f06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dae4d5a7-f668-4f72-bac2-5748dfc883fb",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3487be9a-da28-455a-8932-bb582a431d8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c49c822-c02a-4d99-b181-39aea6e31f4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba95fe8f-5ebf-4486-ad89-138f4adfa3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2117641c-fa8a-48ad-96ca-278c335acec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bea777d7-078b-4d39-8e34-64d84203b4e0",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef577506-2531-4589-b924-b1a4e602d588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "002ea242-0f41-42f2-a57f-1f0399b6ebc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7347d588-81c9-4f88-9f81-68e0b88d24d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9461ca53-c18c-4bc1-be82-e98eb92708d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f48e10a7-1ba9-4efd-9239-ab5857550035",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b88c8e-505d-412e-ac9f-c1bda4294dd5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47b9ef72-f286-4732-8d07-e78a5b8f3985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0db2ab45-5fd9-41cb-a7fb-12365fca8b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5e907c9-172c-4a89-8916-428bf44e7078"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6bb9c59-4624-42dc-a31c-bcfddfdb364b",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f592cc-9bf5-402b-a831-2cb952ec166e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce72daa8-55e6-4b3e-975b-2852c86f6cc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "087e4ecc-b75e-4c37-8b4d-59ae65e66786",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83dbe0b6-1e5f-4c2e-b87b-75a9b2a21ca5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab947e2d-2c83-4720-ba16-1320517dbcf8",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abfab9e1-058d-4be8-a902-b0342762a8ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78c4d34b-b2a1-43df-a5e8-1f9e8f038317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4f06b60-610a-4ba7-a651-019e8917c4d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fda70a3-6653-4e69-b916-886a1d773d41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e52de007-4a22-4d8b-8904-24fa21858630",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e0e979-a6fa-4358-b516-6d8f40aa0523",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6c08c14-dc93-42bc-a2a7-4884007e92cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecc036f7-822b-49da-8b11-d8a8b87ac4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "950f1702-4b22-497b-8541-923fcffc2c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2961572-1cdb-4f52-b84a-b29faa48ed01",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a66df6a-c4e3-40db-af5f-59f19863d487",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "493b1e78-4e8c-4b7f-8ea9-34217f7445ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4923122-eab2-414d-9570-ff88a193c837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "386b61c2-000b-43a3-901d-6d7d56d9b214"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06018dd2-bc39-4b81-b55f-5450536a9196",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c063f2e5-454e-469f-8c05-59b14d385d68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c64c429-a2b5-4690-a1e1-d4d784364ce9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88a2d774-2ac5-44e3-83cf-75367c483e8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5615301d-47b7-4578-8845-46b6a6258d66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3936d8fc-9bcc-4c9d-b579-f05fb62de10c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9cbed5b-4931-40e2-87ae-666f1e784fab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9538251d-e2e5-420e-ab86-5c78647610ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec0f890a-5d83-4828-a440-ddc4b6fcafe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2ac0614-7182-4305-ad81-2ed1934a1c8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68e962d5-735b-469f-8047-f5ceb2176b84",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32da0437-e626-4079-a80e-4d584e98e4ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7cab22-a7a9-4a6a-9e1f-630e22212397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eed14bd2-b0d2-4999-8977-0d9911af221f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44be18cd-c697-44e1-b05f-4df4468fc698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3919f92-c816-411f-a70b-5930fadcf7d2",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c9ae1b-ab63-4a90-bbf0-8bd0f33df992",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78ab21fe-0c61-40e9-99f1-a5014711fae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0100c696-7512-446c-94a1-230b5234ad23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c45dc522-7d29-45f5-aa77-b41343bf18ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d99c388-fb41-4679-bca0-2a7d6bc45078",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9701f9f-3dbe-498c-a468-3da0319c46de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d21897d-1cc0-4112-a054-9bda9e29c1a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84e12d2-3ff7-4f26-89cc-c09ff72e9c2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68baa709-3710-4681-9f5b-7b7555940828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4efcd7bb-5b83-40cf-80c4-d06fbf499691",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b30e4fc-010c-45c3-9c86-c966bae53660",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7833556a-048e-45a3-a744-1e5bb9dd3d0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f7e532-0ab6-4f0c-92ff-b678a8c7a58f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d72f3892-7fe7-4fe0-9730-3e2a162230cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d27723a0-b4fa-4dc7-8cd2-0db4fec546ce",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "497c7ccd-deae-469e-9097-19b89cfc2e92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bf493dae-31e1-4b02-91cf-5d074b852d81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91709d8-87c4-44e3-b8db-a76d912875db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a8cb5a8-ea52-4140-86e1-a08a6e836633"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fa24c5-3d7c-4bf0-b3b9-37b59ea9bec4",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65b5db33-acd7-49aa-bcd7-d1cd014ca8f1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b0f4107-5ea9-417d-846f-b5334d72645c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "138acff9-c300-4cbf-b4ad-135fee1f5811",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8874656f-c4ed-402b-9477-ddd0e7349887"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ea5ea10-ca1a-4f8e-8424-b2a159aa4db2",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f60da6d-80d0-4ec9-9720-ae990a1a9ac6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f494431-cde4-47a8-88fa-76ea10d9e767"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0f6e798-03c4-4237-b391-d25cf7946abd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bd9d046-83b0-40e2-9d5b-ef113199b2eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87d3fef7-6e8e-4c1c-87b8-aa8bfc209271",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebdf0e2-c74e-4e80-9923-f45e4ee71566",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82bcd018-e05c-40f8-8e68-415e455a0e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8167e191-8774-4381-b715-7ab67b1ed75b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a80de70a-e0b8-46e5-9237-e2b441721391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85edc39-7c56-4c8b-bca1-836ac6104ad3",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "647f27fb-13ce-4586-b132-d05ee2680060",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f648a1d-395b-4ed9-ac61-4f9b6ab79b59"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb83ec0-f129-475e-ad93-b10782af1101",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c5a4ad5-0bd0-441b-88e4-7996dde67ad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04c02af8-8474-4e64-a37a-d3a1910464ea",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0a55b7-6a06-4b3d-bf8a-07477f60875c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d42061f-4561-4c89-a5b7-b08ca206a574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66132531-b55e-403d-a7b4-81885fd064a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63d8a015-edf3-49ba-86c2-ae0c5aaf5bc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "588957ea-3041-40ac-bbb4-afc4bea224cb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b57bbc03-833c-4cf0-a502-5e3c8ed931c8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3e36a4bd-09f1-4d13-b3ab-50951b85877e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd49663-a20c-494f-b3ba-9324960407a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ed50201-383e-429f-96c8-d0a179a313db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf6c9528-551f-42bf-ba16-6d66609c8dcf",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10d0ca5f-8f4a-42ca-b923-193c27102063",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "52958e63-0a96-4fa8-8e45-67983e9b4645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf2bfc6f-a1a3-408e-91b1-f2eafd0d563e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e4f4316-f2a4-4f19-92e3-2b4742c3760b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c20ab362-c395-4ce2-824f-548fdacc71ff",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341f9da2-125c-4362-8218-5b94acb08771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5ef2872-da6b-4915-ab8c-194718b99e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af9474c0-99a3-47e5-bf9b-d528b59dc0a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a90da4-281d-4b62-98e8-37523995343c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de25c6c6-38af-4d28-b8cd-f19db6ef89a8",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b85c5a2f-dff2-4496-a1e6-401c9f6370a8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95228921-c85c-44b4-9954-6dd13f4807fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16789ae6-f8d7-4429-8ba6-6e53fa0817cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf708f25-c09c-4053-913c-4280be4c2e22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f61717e1-b0d6-4914-999d-37e3cdfc5fb8",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76fbbc8f-bbe8-49b0-8f45-caf7390fa4c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "362edfeb-c57d-41f3-8ceb-0decf0853150"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02037192-f3e9-4a8a-84e8-327cd11d0448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "802238bc-f15f-4638-90e4-61cb82dd677f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82d648a0-4331-4430-b43d-78891dd6b59b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87038675-e4db-4bee-bc4e-1d1420f2c8f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e61cd4-fe63-42dc-bf3f-f6e2aa08edc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bae601c2-3f13-4c8c-8bcc-67b524adc6d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63676f75-488a-4ca2-bf5f-8e1b2ed39185"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65081bc8-ce30-4a10-b530-23c006ea1cfc",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92527ee8-9e0f-4bb4-88b6-42e743f1ff21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ff339d6-758d-4234-a1fc-d0bd607dc1ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "368bf091-6463-4fe5-b6d0-397ae9d3aa91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c7eca9-ee3e-4610-a416-f9dccecf7e9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c906271-11c4-428e-ae9a-8e88b53c2e64",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae12dc1a-a2d5-44e6-b8c2-db18bf94ce02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5eaa0774-1897-4a92-af6b-be53a9b22552"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "000ebd53-6f41-4cad-9e0b-e17fa93ec3fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02b09e2e-319b-4c71-b867-2f493d7213ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d286f098-0f37-423e-9460-f80cd970795c",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31dc9314-c923-4463-b90a-f2a8bbf1f3bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e32a760e-998f-4a0c-8168-cc658305413e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f1a3705-5576-45bc-a3cb-d269782a9c24",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05448668-7ed4-4776-ba04-09c35f2235e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b07fa34-94ae-489c-96cd-97dbd9168cac",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6671b4d-de0c-4f05-83e2-2d83484d9b70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d379c48b-738e-4dd6-b7f6-7a14e1810a57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fedf10c8-3ee6-4d62-9b1e-79888bdb1737",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "596d2b3a-e502-4672-87e0-c88e9b66d125"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9a37f3e-4189-45af-ae5f-560bd4c4fa1a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac2df20f-989a-4fe4-ad9a-56003643bf43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "407abbcd-d8ab-4613-acaf-02ef650a200f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb74191-7c42-448e-8d35-ab5849110af0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c7195bd-5b7f-44ac-9bf3-d4a5e78e70a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc1a72e5-3e70-4784-afc7-62ecdf323f75",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b1ff1f-c485-4d5b-83dc-07ce9a4f839a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bc83a21-80cd-4b8a-9468-cb4d8868cff9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e0add8-698d-4946-bd96-ac79b5526f98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d92c9c97-cdf2-4ba9-a005-6e0212dc5217"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84a19cf5-a141-4376-a646-9ccdc3b2afab",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cdb021f-7b66-4d85-b2c5-dff8e35e8128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c1c645c-9bc3-4b60-86e1-05b7a05aa8ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2feffd-fdd9-49d1-820f-bdf36c88c72e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88303b8a-60c0-41bd-92ad-f1edcd86058e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76e24a38-f7f3-449b-bb23-3c7ed344a8ee",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a3f88f1-fc53-4fd9-8322-62a70849fdac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "242e0c97-3ab7-4d64-9f92-85405c447941"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7c07dc-bfbd-4a20-a8de-837264917cbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93d9b5e0-d7a8-4de8-a6e1-7dee33d74f36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e23afe4-e474-4b76-b557-51491d0c8e99",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "141ede19-cb34-4a8a-aaec-4053d1521b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95d46432-39ca-4e1d-bb1b-dbf632d05da7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fa151f-065d-4928-a731-934194c508b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76309153-4bc0-4ef9-b366-e14159bcad1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25815bd9-0105-4ae7-9184-8b871d43da43",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c61b0c9-534c-4ffe-a2eb-f221f5810c40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8965a30b-40b8-4266-91e2-18117c9cc4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce960ed-544d-4e31-af6c-5c4ac2cef5f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5753cf0c-a98c-487e-b312-a21dd04569be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29ac5774-ee6f-4441-92f4-132a8408e8c1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0441615-ca1c-4e7f-82d0-dcb827086629",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "134678e1-e443-41e9-8da5-8b11e922e330"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c4d4f62-65f1-4cda-903c-65da21367c33",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e592b11-ec9d-4d30-a18d-0c639e12d6b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ecc17d-506a-4a5a-887b-b4b3f8ae7335",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b26f83c-aee6-480e-9d96-a12cd68f25db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cd40a38-0b14-4756-b573-a65b9ec572e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b61fdb5-ac13-4dff-afc1-054dd3fbad45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38da5730-73a1-4fba-8844-93246663a334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82e8f9a9-2264-41a5-8819-d7907d4da94d",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f022f013-e2c7-406b-809d-902701f5ee7a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eefd0c47-6abd-481e-9dc7-94c589416d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bf42e47-0124-465b-8db6-c2e6fed1e575",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "907fb566-cc48-4d5d-89ae-1eea4e53a25b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7624a487-ce63-4c91-892a-6f747ad8e7e2",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114e7a78-c3fd-40f4-9bbe-032bd70eb557",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d7f6b4e-a13a-45dd-b393-c6c141184135"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8d9eddd-6b32-4c84-91ef-959b7d2247dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "afdd19ce-cc0f-4a97-89a4-afc67562ae62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c235a64-6770-4aea-8828-d3a4ca36c24f",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8966018f-4952-4059-be69-814c41d92dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f636244b-6e4f-4fce-98b2-8e011e46dc50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cf1d3d-be55-4103-837e-a647bad1ecd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c08164-c961-4688-ad96-fadab1347159"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b9e1422-19b0-4073-9751-e08d8962e633",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea4dd55c-3bdc-4d1e-bfe9-330e126aa0f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8f6d0bb-b374-4ad2-89c2-32be1e61895b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfe18f2-24a9-4912-9e71-84d512400f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35685b5d-5ef4-4b91-9413-7bbad3d299dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc803533-bd8e-472b-abb4-dd1d3e814c71",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b3b1fe6-5fa9-4c55-8bee-151a3c9098ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7639e31-69b0-48a1-9148-047a1ff4d9ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02cfe47c-624f-42ff-ba5c-8bf791b0b1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b4f034d-6c66-4c73-954c-42c32adde9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee0e7639-a995-40b4-88c1-295536e50b51",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f78b6cc-267a-4a23-afa9-a64199a6f6b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf881b3-42a8-475c-84f8-0517554551d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4917d6a5-ada0-4205-82c7-d02417a629a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f92d120f-5c15-421d-bfab-bade58849f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717c71e2-dc42-4247-bb89-16a2bfbe2b28",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1ee9c3c-a974-4d74-b1cf-179b7a6c2dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56a87b42-d311-4c11-bb7a-a87ced6ca979"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff5a9ac-8c5a-4625-b781-7d664681aa34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff7a4c4c-7271-4944-804b-265773a26c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19d47f0-8bb0-4b2d-bc3f-d5bcd9c8b1ba",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92d632a-d133-43f4-93b5-f16d634d4975",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd50997-acb0-418d-9c29-be37b8188aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c020c9b5-00e7-4da9-a079-19529a414de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f72d73e0-c6bc-4382-b273-82c09a6deaa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0eb191-bd46-415e-b8c9-9238b183e735",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e81e15-a38a-4feb-9b74-e351a1424012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c765545-8bad-4bb3-8932-9a09ac5f557d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17bed8ef-f61c-4a1e-b691-98ec610d5003",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9632fa21-abb1-451d-aaef-0b167565c457"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24419a3a-9e08-4d13-8bc6-8aad434eaf2a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0ba7098-6aba-49ab-99ac-85f9e9413eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caa30f5e-4b37-4362-a67f-13a4007cb5ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5d5d96-9971-4a67-8550-981fcaff3675",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8280a6f-8455-4709-85ba-c7db2fa5c600"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0c80984-0f9e-49ae-9581-cf3b47d4e280",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4a03ee-dd9e-44b2-b915-7e035a6b7fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4338ba67-28de-49c0-949e-6971a0ce096d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e44935bf-ad60-4be3-9440-e50d8efd05b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d4d5019-c105-4b53-aebc-edf26adae34d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1d33f3-cca5-4c0a-9fa7-3df3df0a5a53",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a36b72-493f-4e9d-b808-1b752475ca6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd9daa2f-d12a-4ce1-bd2f-73f27d1e5a87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f78e1036-f9b4-4276-bdb8-2e376d5683c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32c8f5f6-dc1a-43a2-99bc-15885da5b71b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f94e1ed8-b9f0-4d90-b257-88561b26a11c",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d8d88e-76ca-487d-afa6-4e44be914906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96151091-a3d3-4b02-a3e2-347c2512fc48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d9629ef-be37-40e0-a7de-d7a52315c179",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9b53e38-92e9-4396-80b3-e4b58a1900a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b4608c6-b302-45f8-a472-7f5e3f7a2629",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dc4f1e5-15cd-4837-a8ca-b3a9bd2569eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b168f4e-e64f-4bf2-b01e-e2ba47f2a6d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11202e66-5b73-475b-8c33-1974dc589e4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ebe48ac-0666-45b6-81b7-d0f1a317b139"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09033cde-a424-46b7-9ed3-39b2b5411989",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0ab9a52-54d0-4c1b-af00-355e8ce0f073",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "223e489b-3c1f-479e-b235-571d6017751b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5222078-3e36-41fc-aab0-5b7a1b3e4974",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38bc2788-9224-4bc4-93ec-f1474bd01a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab715b83-4a68-4700-9f83-1b39a79ee71d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326556a0-ac53-4d97-b3fe-a93789c5d884",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4869a9d-3acf-4909-9d40-c649b2997cf8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5a05870-649e-41d4-a1ca-280ba4db2949",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a9c216-9f2a-45d5-9188-184d96cd95e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "928f602f-2479-4893-ac77-acab3815d80b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cec5f239-d9d0-4dbd-95f2-d5971bb62185",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9946d1f-7a4b-4da5-bfe0-4dd4d481ef0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc19e1a-fa98-4287-92c4-453f95d06321",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f2e581d-d9ea-4a7c-9814-b21ff5d6e80a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bc3dd8d-e582-459a-8c39-c527430389c3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240bfe78-819d-4c08-9f24-aed2bd5a2bf5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49d7ec75-c824-4ee7-bec6-993a2cbb7265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28ecf796-aaa4-4b6e-befa-f93992a845bd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ded1acf4-637d-4a5f-ac9e-95d019a83c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "831f2baf-010d-423c-a758-843c6bbeb1c1",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7be6f94-b113-497f-8b96-8d944bf84856",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b2a6e5c-52d8-4ea1-9168-c3bab7a50059"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63130e57-e4f4-4593-8fa1-683c9ee93429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70b18f75-61dc-401e-95c5-37dbd2dec7d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef0b5d20-21eb-4a52-8cd5-877674772891",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d3a638-25d1-42f4-a633-c26b62d706d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8824fdf2-8011-48bc-aad6-7b541e504582"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c34231-6af5-4186-b044-ea6d6d54680e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d06183e7-1ad9-4468-97bc-391aafa12aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024ccf85-36ea-4fbc-94f4-61c0ebad1b8d",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6a9440f-0822-4c99-b776-ed1ec98b2cbe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e355d3e-2851-48af-8bb1-233468f63d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79391bdf-5842-43a2-a822-cbd36b3ddade",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d28bdf-162c-466c-b36f-916a0f4751f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5374a1b0-b5c8-404a-9519-a6e3fb1ed5d8",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0cdf311-3366-421b-a662-2189659a6df1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0e3ed32-ca14-45c8-b7af-52720671105b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e373b9-a747-439a-ab33-524c85f7a6a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516add42-b47d-4888-8b4b-c3d796c94415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d4b3ac-6645-4319-97e1-00ca59f571fd",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a49b43-94bd-471d-bfc0-5dc5f24cbe65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e195914-04c9-44a2-8da8-951ca4e73ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f056adc5-8ea5-42e8-9118-38a0af574355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3fcf5ed-35f5-442f-bb2e-454117d6642a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31687991-c04a-4361-88dc-fceaa0f4becc",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "217a82d4-3051-4f06-b4d2-2bb77729bbfd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88fa4166-2849-4abd-bbf6-6af0590fb3d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "162b89c0-c94f-4605-a8f6-2ab41bd24195",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "489ae189-2c52-45d4-930b-d8ae57251cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64123d3e-25c0-4878-be40-a4488b68acae",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cda1b48d-4027-488d-bbcd-23b4944469d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "386df71f-2212-4b3d-9b33-5fdd42ae68d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dbc56e-c0f5-46a5-ade8-f8057f7479bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb71fb4b-306c-4ed4-9e89-dd44984f2711"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaf82118-4915-46fc-827b-09623df30084",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f07d50c-957a-4af6-b6fa-34f440dcbd8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3d0d12b6-6634-4d84-bc11-c9e9d5972db5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d469b26-b873-4237-80dd-a1f36218c677",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eac17ec-9d1e-4a07-9ba9-203ae6a47df2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251bf4ed-41c7-4d39-8d07-aef7d5bd8795",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e7ba3a6-4f2f-4d5b-b5c1-9a89fc6b57c9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe0c0fd3-c92a-4333-9ac9-c2e5951d2f1c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6051ed8-8a2f-46e7-83b7-d6895141c4e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d091dd5-55f1-4467-b56d-a6cf3b567e21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a27e38-c9f2-4280-a2b1-b045e127f4b4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb0c2bcc-b68f-4071-ac60-90b84987bd4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5673a390-aeca-4283-9a7d-5e6a9c02de5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfe14fe-4a94-42e1-aab5-b2402fc52323",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef407c3-e306-43b1-ad34-376e7db931a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4811b66-84f0-4c44-bf7b-ccd24bcfb8de",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc4a1471-b761-4c70-90bf-8deb825a5a0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fafd9b5e-7823-4943-96ae-7cf1949d18f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be2fba80-f36f-4f14-9d5b-37b78dccd86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d595a4a-71c8-4c53-8e0e-d090aa1edd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6113ffa1-cc50-4514-ac02-932a09568505",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f01d7520-7c38-46b7-a6a6-83db00319f4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa45d618-eb79-4d6b-951e-b49d7ab9afb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fddbe0e-57c4-4e88-b1e6-d49b641af8b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "258dbb56-08ab-4589-99dc-6798ee78b673"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed3b1e79-1864-420d-939a-6d3d253a443d",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d18456f-879a-49cb-a13e-825d0f254f33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57d6a120-83c4-4176-ac1f-cc8d05dcad95"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2d57ac2-9d23-410d-9461-a5623c5b941e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5c96295-85e5-4008-a63a-efcf657e8d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "370c5acf-e1c7-45b2-960e-6554cda51667",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18cd951a-9357-4dad-8e2c-1e5daf319d65",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2bd5c32-4d65-460b-9794-9a6c8920ba43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88f7cc1f-2564-44ff-b688-af3d6e0a63a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52d8f5fa-0805-4954-911a-843de96a8aac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e79872-358e-4522-bb11-1be488b6615f",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c6ed9a-1f6d-44a2-af76-a4f3b29110bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8fd8c8f0-73c7-4ea3-a12b-3ae1964dcd70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51759ad4-387f-4d05-9bf0-0536ba3d85fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57e746c8-6f40-409b-b768-fc6a0215de15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90509573-539b-4d2b-bf95-80389a803e96",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05f1aa1-8d2c-4d84-8353-5e1ff4aa5bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e82df04-7d1d-4773-a750-30e54703e953"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bac68c8-c900-4460-bcfd-949944f42eba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daf291c2-eed9-4542-b3b2-074e88f4bcd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bfad7d5-e232-4b06-985e-54a1cd2c428a",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e17fe09-e971-4251-aeb0-dd37963502dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b97b410-df46-4759-b9f8-2bd60244baf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fce30670-6548-47a5-896f-71dae3cecabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43e547f8-4498-4d03-b933-5af2818c9e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c0df615-38ae-4c31-9562-53c3def89805",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8301ba1-a082-4f65-b21a-3fc12355ae4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eb05439-135c-46ce-8417-8f40723e10e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f3a3720-8101-4586-882a-c7e1a4fabd70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0df602c1-768f-4b24-95f1-846ac655a146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db7ccfde-596e-4ed0-acb0-dbddd3c86363",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3705b472-4c69-4315-8d75-d03716cd51be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15031db5-ef79-4db5-a066-a3c3b0c31996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3ebe92-319c-4416-8790-76baab3ad98b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b957b2cb-720a-4f5a-839c-404fd2a22e1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "970e2578-09c2-4a16-bc60-dcf0876c6776",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3becf4d-c9be-4533-bb22-bf5948ffff8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31ead14a-45a6-418c-825c-c76f52565c13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a03479b-d5ce-46e5-b001-da2c04d32200",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb22a66-0412-4b60-9452-002fdbccb6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438c4cdd-a3e8-4682-b2de-6dda15262331",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4239920e-68a8-4066-9202-34abf97d172d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36176e28-edb6-45f3-ba2f-89a2eeb6f7d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c9e6dd3-22d5-4433-98f7-737288eb8d79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d74ff7bf-c951-434f-94a8-31fae52531bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fe1491-655e-400b-97cd-9c2dde1aa984",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74466eee-0546-4ae7-b90e-e0bc3405969d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "084866e7-f484-4d1b-b096-0d7cede4bd4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c5f24cc-4032-4390-b3cd-b9001617ca3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6ddbd51-bdbd-4dab-bb6a-a5d21f73c205"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5e439b-e37e-463c-bb53-23a318bdd8d0",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc843873-4873-4bae-bbbb-02d8be53d38b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f4acb0-13e8-4c39-a434-4a06d7d7a4bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bfe6f24-1237-4b34-b237-422b08e93819",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29bdb68f-97aa-4e78-a4fd-f42027b253bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08c74f59-c2c5-4b71-ad76-6b6d5f74b615",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2123dc5e-ca01-4ebc-b1e5-ee6dad83edf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba6cbc83-3616-4d24-a8c4-8dc0d9d30c73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "681a3b3c-1890-42a7-acc6-c7b5ceb786e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7ee688-8213-49a7-a51c-30e7ae2de2e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1a35f4e-5b2b-4f97-bac2-65f3c9139ef2",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6825ead6-bfbb-42ea-8dac-23ca8508d536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "88ca7a3e-c47e-44ea-8e9f-1f742ed2321d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b25605ea-9e1a-4862-be19-e65b3d94ebca",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e111b1b1-9189-46cd-b5d0-b1390eba6d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b934b65c-c212-4161-97e3-c9b72daa3664",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c0c4a53-36a9-459a-8b2b-0c603afa71f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa584ecd-5b09-47f3-aa07-8191df22e265"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f432fda2-2a6d-46c3-8909-8bb1e4173b3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb513197-21a2-4529-81ca-be2c3f53a266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90d713e-e9ce-4b5d-8295-261dcceda526",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db7a34b0-943d-48af-9c01-d6f98b46f4db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb2727ac-2622-4db8-ad0a-bd7d3f5a2dfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bf8ead-c70d-4f70-a9db-c1ff8c463131",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ced7c28-b965-45d9-9a84-d570e3eead66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c16e401-031f-45f2-beb2-15ca66208240",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8b3dd11-6c7f-44c3-8afa-54d82bb099ef",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2b56070-f7bc-448c-9eb8-8b831417fcad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c48a24f6-da26-4a1f-9519-49351e97b543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaadb7c1-7c02-4a64-b707-442075b58ab5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7338d33a-5f52-406a-bd5f-cc284bedaa06",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2a03eb-6eb0-4b0d-bf61-a706b1301136",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2a1898b-5fff-464d-a959-2e0a08045ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfb177b8-538a-4dea-a79e-8e660ab9532e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "426a7679-22d6-4ad4-ada1-b68b5b63c1bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8ae9973-3a25-4e62-8e9e-3e2d295af8fa",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80589f4b-095a-42a1-a750-716bf7fc5aa0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80c7b4b0-ed30-4ef3-b224-44f39d2dcd35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63865d7f-154b-4a29-a502-f84c7bf6f46a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1ba06bf-c441-4788-a206-974be1fa9189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b93dc26d-0cc7-4f16-88b6-955dee7a90d8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ea607c-bc4b-47ce-ad60-fc4d7fa0734b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f29207fe-5256-43da-b352-4f305e9160c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac0c7684-e17e-4d11-8a9e-258843813e31",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65964f56-4301-4af4-9847-71ed120593ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8ee4fd4-9813-4962-9089-b4a9652e4b03",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60361c28-518c-4fcf-97f6-62113c9e6982",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1fa3984-b929-4f54-93da-5ab8b39dbd32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "480f3eb9-4ac1-4b40-8dba-c6d1a2c704d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7dfe8a6-a863-4b82-bad2-6e00d8735cc5"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ecfa2f07-89a6-4804-9942-c83fd87bd03e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4cef519c-8dc0-4b24-a5f1-caf2dbc9a450"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed5430bb-8daa-4243-8daa-4a319eb4dc91",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "efaa60d2-f1ec-437d-993d-ddd132e6783d"
                    }
                  }
                ]
              },
              {
                "id": "46a08e96-8cc3-4da6-804f-78278eacef1e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ee7fc86-e725-4d16-b881-684de80796db",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfee3ac0-f8be-4201-82f2-2a43aea9f8a7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "02c7d914-0a46-473c-8c73-1902bd0e6f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34bfe600-c3c7-4700-b960-41ae3f5364df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d67e602-bee4-44a7-b21d-d13f0d519a49"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b340173f-f26a-4a6d-a815-a77888940193",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c37a4d37-dd08-42bb-9366-533cf81355e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f450fc72-4101-474e-935f-f20133c6612a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f4d7b706-7ef3-4023-82be-98556acb3312"
                    }
                  }
                ]
              },
              {
                "id": "e0f339d5-4e43-4953-87ac-72d62e17b1c8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ae1c717e-7232-4c39-8808-f719c0862afd",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9803581c-3538-4e6b-b721-072e39d5529a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "883b6d15-8c33-457c-9e89-713cfc9caa3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a26d9edc-7a08-41ea-a903-026c7c1e3047",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bf3636-910f-4ecc-ac03-25ceb7705dac"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a0d04a79-047b-429a-89eb-bf536524e1b9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ac49f178-a1c0-4417-a3dd-5d4857ad8d83",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3f573aea-9492-43a4-9f8c-796444815a3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b91870cc-51f2-440a-a8a5-b1f5d7f56bc5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3dacb2b5-df94-4f74-a590-30c3da923fc9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddc055f9-207c-4c9f-b025-972a5ae09bdf"
                    }
                  }
                ]
              },
              {
                "id": "6c0ebdf1-d0f0-4146-a965-2f940eac03c2",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9125ee84-0fd5-4407-a3eb-a5b74cf9b11c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "07f62360-7509-459d-aca0-790a938a8f64"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e784d205-fc69-4725-95df-48d72a15af12",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "190540e2-df46-4681-8a62-f606fa3584d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "397e5208-95d1-496e-80bb-958110519cb2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "6ba0eaf9-3181-4169-bac1-a951ca7df5e5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4c7e4e0d-cc56-46e1-bf24-308a7c57d4ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4a07ff20-b65c-4330-b8e3-efaf59de84cc"
            }
          }
        ]
      },
      {
        "id": "b78d5812-d760-46f5-a071-6b1ebbfb11e2",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "64bb341e-7c1e-4221-bdc7-2a2e5ae06133",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d40169d7-bcc1-43d2-a4c2-2b5cf2e8099a",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a525d8e0-c869-471c-8e85-ebdb71a1db2d",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe5d616-76da-484b-bfaa-ea72893db939",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "61b98328-be3a-4be9-8381-75d7adafedd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b9f4f16-f5e2-44c9-adb0-592d6a2a8382",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29e8ce62-c0ac-4447-9ca0-95f3da1b87f7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "485389d0-eaf7-4e11-8e41-f47e885039dd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffa46ef4-513c-4194-90dc-0826025c10c9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9d8ef20-a684-4845-b0ac-3d6be43057d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18471f11-bc49-4546-b1f4-4f5347c5fa46"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "da80483e-1638-46c7-9f06-cc6fd96ece5e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "17f7d474-acdd-403f-af14-d5bedeb160c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49d1f124-921a-443f-942b-4f34d2c81263",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7b29349b-a274-40d8-944f-e62cf060fab1"
            }
          }
        ]
      },
      {
        "id": "cff0e591-b9a0-4729-a8a9-04156e8d0392",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "2790ee00-5ab0-4c84-b528-0473fc72ebcf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5ccaad3-edaf-42e2-a577-56ff4854f788",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "18cc7b06-6972-42b8-aebb-a635e7b32b88",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e953280-496e-43b9-9040-d83f4e4604c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a4b9904-aa9a-4588-a2db-e0ff6b774156"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6448c402-db18-4b03-8f40-6c85af19d506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "154f2b22-b33e-4e65-8aea-1032cc39f9d5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f6fc2422-280c-407d-8f78-1ddec78621da",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c257e91c-fb6e-41bb-aacf-b96930685fa4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ae87b423-8761-4816-8f2a-f66ba76a5df8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8b05f744-88e9-4c21-85ae-741a8df7308b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef4970f1-b4cb-4423-b94c-059fe694e6b8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13b9cdfc-a3fb-425c-a81a-3c2da49db381"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e85f0a1-32e0-4a8f-afb0-2ab2bb5b7efd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fd408094-354d-4055-b94d-004dd8b3d438"
            }
          }
        ]
      },
      {
        "id": "da23e271-1ae5-4fa7-aa8a-b7f28eedbd5b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "61c15c43-6c73-472b-b0f5-3b3e7b141300",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37aec196-f5cf-42af-8519-567cbe4637c8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3ef2c764-5b41-448f-b3f3-30a06754ecaa",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad60355d-01d9-4607-bfd5-bf3139e202fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06ec4d1b-6838-40de-88be-bc43256fd221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5b84ef-12d3-42ec-99c1-778f17a38408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a671c7b5-7afd-41ea-97ff-298e359d7eea"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "291dda19-e6d0-4bc2-8cd4-dbd3fdce618d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3146c014-90f1-4a13-a56a-27938fc4c0f8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "95c57ec1-62d7-448e-8f66-0a0c032d33ca",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce672fd6-3e05-41d4-8d81-6722e501d416"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d39bda2a-1c85-425f-870f-cda4cba5a8cf",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "cbad295a-a11d-44a2-a495-4182c2af185b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b7d7925b-d020-458a-ab39-aee6187ba870",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "04cac7db-5f20-4e4f-8278-01b974543e5c"
            }
          }
        ]
      },
      {
        "id": "c1945021-08db-42d7-8e81-6f8c8c937537",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4441ae07-5278-4178-8ef5-8ebbab4cb2e3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c3fbf143-8c5f-4e3c-8dad-a94d66e838bb",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "6ac917a9-7f23-408f-b01c-b9163eed9e82",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "478bcaa6-49b7-4613-a9ed-e4483eb19fa5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "449f7ed1-7628-48d7-9863-0681d86d5b17",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 263
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 57.150793650793645,
      "responseMin": 21,
      "responseMax": 334,
      "responseSd": 25.43403152643284,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1717547842014,
      "completed": 1717547864692
    },
    "executions": [
      {
        "id": "545cc8f7-a2b6-4623-b605-8e2d611e0fc0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "50a627bd-05e1-4507-b9b3-d0149c37e573",
          "httpRequestId": "4e092d62-ce4d-4df4-a5d1-b6a8275358f9"
        },
        "item": {
          "id": "545cc8f7-a2b6-4623-b605-8e2d611e0fc0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f6e93c22-52eb-4f6d-a5d1-673d305677b9",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 0
        }
      },
      {
        "id": "3554157b-2dae-423b-aef8-1c3dc7f8bbcb",
        "cursor": {
          "ref": "cbb47ffc-f2dc-48b7-aa60-8e39bb64b939",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "38ec35e7-e862-452a-8439-8f2bdc45b251"
        },
        "item": {
          "id": "3554157b-2dae-423b-aef8-1c3dc7f8bbcb",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7a0c087d-708e-4f86-9712-6a0284ea2886",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "62420269-f982-45e9-b2af-91f4e6c01567",
        "cursor": {
          "ref": "45dd5374-96a2-4814-86cf-200898486ced",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "681fac2c-5ef3-43cd-87fe-7213d55357bb"
        },
        "item": {
          "id": "62420269-f982-45e9-b2af-91f4e6c01567",
          "name": "did_json"
        },
        "response": {
          "id": "4f80e06b-ea1f-4ca9-90c6-9dbe4a153151",
          "status": "OK",
          "code": 200,
          "responseTime": 180,
          "responseSize": 1329
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c5f4d7-7b9c-40ae-8e4c-5fb5403f34b3",
        "cursor": {
          "ref": "77480fa3-62fd-4b79-a2fb-8ce22c294f40",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3cf56954-bde9-4d7b-b4b3-85acd1701dbe"
        },
        "item": {
          "id": "44c5f4d7-7b9c-40ae-8e4c-5fb5403f34b3",
          "name": "did:invalid"
        },
        "response": {
          "id": "76ec36e5-f8e6-43ab-a3f8-0c8e8c58546a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44c5f4d7-7b9c-40ae-8e4c-5fb5403f34b3",
        "cursor": {
          "ref": "77480fa3-62fd-4b79-a2fb-8ce22c294f40",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3cf56954-bde9-4d7b-b4b3-85acd1701dbe"
        },
        "item": {
          "id": "44c5f4d7-7b9c-40ae-8e4c-5fb5403f34b3",
          "name": "did:invalid"
        },
        "response": {
          "id": "76ec36e5-f8e6-43ab-a3f8-0c8e8c58546a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 180
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03fde927-3cfb-4350-909f-65af365f6517",
        "cursor": {
          "ref": "fa5d3972-aaa3-484e-bffa-dec08fa6c51e",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c592b435-7713-4203-accb-05cffa3471fc"
        },
        "item": {
          "id": "03fde927-3cfb-4350-909f-65af365f6517",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0eb2d9e4-425e-4891-bec7-7709a4b830f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 190,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 404",
              "message": "expected response to have status code 404 but got 500",
              "stack": "AssertionError: expected response to have status code 404 but got 500\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760d546d-e910-497f-aeb2-525992be35ca",
        "cursor": {
          "ref": "29d73d0f-fc45-457e-b963-9503458ed11d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "9e6d4563-c43c-49ad-ae1c-b95b6cda80ee"
        },
        "item": {
          "id": "760d546d-e910-497f-aeb2-525992be35ca",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "270e4409-e9eb-407b-86a6-110c8bce4fdb",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39773538-149e-4f50-897c-1a5c783b2ab0",
        "cursor": {
          "ref": "f63b62d6-325a-4e86-9579-6328cfebdde0",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bb176e49-25b0-47e3-a8b0-46fe30ec69fc"
        },
        "item": {
          "id": "39773538-149e-4f50-897c-1a5c783b2ab0",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e012fec5-45a4-4b3d-87b8-a805cd6d0f93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 53,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a73d71e-ebdf-448d-8b8f-1694d69843ff",
        "cursor": {
          "ref": "6227cacb-e19d-4057-afc5-49cc5f035bf9",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "17eb472f-b6b5-4e75-a659-04e0d1adbdb6"
        },
        "item": {
          "id": "5a73d71e-ebdf-448d-8b8f-1694d69843ff",
          "name": "identifiers"
        },
        "response": {
          "id": "6eaf8838-fea3-46a9-a4ec-e26dbf920481",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 1345
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fb7d8b3-bc0f-43fc-a984-cf57f77d29da",
        "cursor": {
          "ref": "2d831ede-c546-4403-925b-86c86f33f7f3",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "1b57a99b-b197-48c9-a22b-c1a0f6085131"
        },
        "item": {
          "id": "2fb7d8b3-bc0f-43fc-a984-cf57f77d29da",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "2d019776-7c70-405e-9225-0ef46128e491",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fabe535e-d0bf-4261-a830-bb091dd6948a",
        "cursor": {
          "ref": "c16c1d93-c6ad-4290-b62c-716763394a39",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "fd00dc26-4cf9-436e-af9a-e79404140a90"
        },
        "item": {
          "id": "fabe535e-d0bf-4261-a830-bb091dd6948a",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "d9bf8ee9-1d59-499f-b2bd-14bfca71ef35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d2906d3-16b3-403d-ad4e-c241100177e6",
        "cursor": {
          "ref": "0136915e-03a3-458c-8065-75ff1619aa30",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8a873c60-52a5-4449-a7ad-fcd3e502ff11"
        },
        "item": {
          "id": "9d2906d3-16b3-403d-ad4e-c241100177e6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "8171845e-5c0d-44e2-893e-4c3cd8af334c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9eab981-abb2-46a8-a037-7f991bbb9a46",
        "cursor": {
          "ref": "9ce46359-5302-4353-99d2-3e95d92351fc",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e96cdd1d-e2c1-424f-944a-e46120d6d0be"
        },
        "item": {
          "id": "c9eab981-abb2-46a8-a037-7f991bbb9a46",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "941e3a53-a047-4f41-810c-79963696eb97",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ab2927b-bdd4-43e3-8881-8161783b310e",
        "cursor": {
          "ref": "74431b94-6852-4b56-8dc9-62256869fb93",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "09c44cfd-fb6c-4f34-ad84-14a582b4ccda"
        },
        "item": {
          "id": "3ab2927b-bdd4-43e3-8881-8161783b310e",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "08ee7cff-891b-4b1c-bc48-3dcaae45bb15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:13)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fff8bb-051a-45a6-a0fa-8ea4f9c435d3",
        "cursor": {
          "ref": "2d0d76d2-a7b5-427b-8272-7e21efb569d3",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bfd8a121-6fbf-41a4-a5b0-f3002071cf19"
        },
        "item": {
          "id": "31fff8bb-051a-45a6-a0fa-8ea4f9c435d3",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "f5827539-da13-4530-82dd-0fbd489fe3cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:14)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab55512b-dca8-47e1-b748-4021d400a394",
        "cursor": {
          "ref": "cfbe5808-b69b-40aa-b318-4d898ead590d",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c30abc07-2f84-44f4-aaef-33048164e279"
        },
        "item": {
          "id": "ab55512b-dca8-47e1-b748-4021d400a394",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b7e48070-86f4-4c00-90d6-bdcb8bd2774a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:15)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63b502f1-f50c-4200-8f5f-83b2ba554df6",
        "cursor": {
          "ref": "ec464fea-9eb2-4c2c-a2aa-e04d860c2df5",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "a2b1cdd4-627b-4349-bf18-d86655ea0373"
        },
        "item": {
          "id": "63b502f1-f50c-4200-8f5f-83b2ba554df6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "246f9d1b-7d70-4972-b90f-4e80b50ebd6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:16)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69e19d9-e771-4baa-80f9-9557e9bba6ea",
        "cursor": {
          "ref": "fe446d47-d22a-441b-b480-bf91e5f21b65",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c1ddfc9e-8ea1-444e-8804-2d4783608330"
        },
        "item": {
          "id": "d69e19d9-e771-4baa-80f9-9557e9bba6ea",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "5c8c9f0d-3ac8-4f19-bbba-7d357568dd62",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:17)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a59cbc44-9517-4491-9c67-b98252f9317a",
        "cursor": {
          "ref": "6cd19849-176e-401e-9ca5-fd798330a38e",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "0fbb8c16-e088-4040-8eaa-6ebf7a95fe7d"
        },
        "item": {
          "id": "a59cbc44-9517-4491-9c67-b98252f9317a",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "60efd664-2589-43c1-893a-611fd6512f4d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24a77f17-1b88-4c22-89d9-db5bd153a4c1",
        "cursor": {
          "ref": "b2f28c26-e7a7-44f0-81d8-320c62020dca",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "6d475575-ddb8-4d4d-9cb0-a5977a0e6b19"
        },
        "item": {
          "id": "24a77f17-1b88-4c22-89d9-db5bd153a4c1",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "62e7d6ad-0822-4108-9d4a-17358de3a741",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f454042-a9d9-48e4-aa63-7fe10ec4c5a5",
        "cursor": {
          "ref": "2fb30313-a63a-412c-8ac8-073ee1404cb2",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c94140f8-5279-4de0-8e87-2b6c7037ec2c"
        },
        "item": {
          "id": "8f454042-a9d9-48e4-aa63-7fe10ec4c5a5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "75b74d0e-606d-4494-b66c-00e03097ffbf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba4b165-4aad-4705-bfb9-f66ed9cc552b",
        "cursor": {
          "ref": "b6dd4027-76c9-4bc8-b3a0-bfb44ab9174f",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "ecaddf2e-8ff9-47a2-b58d-df8886d2d66c"
        },
        "item": {
          "id": "0ba4b165-4aad-4705-bfb9-f66ed9cc552b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "afdedf25-ad54-467a-bc65-81654038d71d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a12ecaf0-aa5f-4d97-9938-22f1757adfdb",
        "cursor": {
          "ref": "235eadad-98ea-4721-a942-80508ac59613",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cc9423b8-027c-428a-afdd-d0eb24916bfa"
        },
        "item": {
          "id": "a12ecaf0-aa5f-4d97-9938-22f1757adfdb",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "29276675-d126-4ca4-a00e-db53134339b9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bb725af-87f6-4763-a4e9-2f19744b6f8a",
        "cursor": {
          "ref": "97839b64-c80e-441a-b8f4-3babd41d2f70",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "b5307a51-2303-4dc5-8c18-b41bb79932f6"
        },
        "item": {
          "id": "0bb725af-87f6-4763-a4e9-2f19744b6f8a",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "75ad79e0-f931-4241-9cfa-3f0d64b98f73",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fd44726-79a2-415d-859c-bb40d7c342ae",
        "cursor": {
          "ref": "8122907b-34e0-4d3b-9750-64ca58112661",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "dd6b72b3-a2fa-4858-9b63-c064347b247a"
        },
        "item": {
          "id": "2fd44726-79a2-415d-859c-bb40d7c342ae",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "94ba5a01-eecf-4269-bd90-91cb89d4dc2d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6a34bc-5220-4f64-adf9-fa39f6040647",
        "cursor": {
          "ref": "8fae511f-61c6-4ab5-9737-9792297f612c",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ed0487ff-fd8c-4613-91f3-86791cf6915c"
        },
        "item": {
          "id": "4e6a34bc-5220-4f64-adf9-fa39f6040647",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "7ebcad66-a64a-45da-aa04-0e9f8e63bd98",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c742b9dd-2498-49f2-a0ca-0a6e1acd081c",
        "cursor": {
          "ref": "463799bf-57ce-4751-ac2c-6cc9f3a9d7b6",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3a475fb8-9ea2-4168-970b-4f6a43f69ecb"
        },
        "item": {
          "id": "c742b9dd-2498-49f2-a0ca-0a6e1acd081c",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "1421653b-e2e0-495d-968a-450c31b71d88",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:26)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74228c23-bbdc-45dc-9e9b-f3b294b93a2d",
        "cursor": {
          "ref": "93452dc1-6d74-4f0d-a470-49cbfa6dc9af",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "5d952db5-fdac-4d10-ab2e-0f8a160c5e82"
        },
        "item": {
          "id": "74228c23-bbdc-45dc-9e9b-f3b294b93a2d",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "98769191-12c1-4f77-9db5-9f184d66e184",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:27)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21db399-90cc-4f17-b84c-90d6a3b4bff0",
        "cursor": {
          "ref": "bc4105e9-327f-4187-b026-34d052b35f8d",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "c07500b0-d619-4754-aead-6511e1d5f396"
        },
        "item": {
          "id": "c21db399-90cc-4f17-b84c-90d6a3b4bff0",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "236d7f33-19db-4119-b895-c52faa87abcb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b258051-fa07-496d-b5d2-c7e3c048bcb3",
        "cursor": {
          "ref": "6bf11fe2-d1df-4e69-9a31-8a4ec838fe39",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "075d0200-1d96-4ad8-8359-ed308d330dd9"
        },
        "item": {
          "id": "1b258051-fa07-496d-b5d2-c7e3c048bcb3",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "5477c596-286d-43bf-ba0c-09470a89a572",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b97bcab-570f-415c-997e-af475d06528d",
        "cursor": {
          "ref": "eb70980b-437c-46c4-9796-d9ac76ecc78d",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2e169de0-e1ca-497f-9c1b-e2aa3125d4ec"
        },
        "item": {
          "id": "5b97bcab-570f-415c-997e-af475d06528d",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "727605a6-dc4c-4740-b5d6-33ddf163e6df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:30)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "482c0f49-d062-4d2e-8e8d-8bbd3ac92672",
        "cursor": {
          "ref": "3484cf22-0a1b-48f7-accc-8190e56ef3ab",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "e575c851-9988-4aa8-bb97-06b31131bf4f"
        },
        "item": {
          "id": "482c0f49-d062-4d2e-8e8d-8bbd3ac92672",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "63f8c78c-7810-4751-810d-d942d527e715",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fd6f5a2-41af-4800-8253-d0a7bc16103d",
        "cursor": {
          "ref": "725d5dba-3175-4397-b4d0-942135307d86",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b76d77be-1096-496c-8838-b3eecb5b2c74"
        },
        "item": {
          "id": "9fd6f5a2-41af-4800-8253-d0a7bc16103d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ace1d4af-ebf9-4814-9eba-5da5cb98630f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eed1d3ed-92f6-4649-ac29-51b7d1ec13a8",
        "cursor": {
          "ref": "9aa9a676-416a-437c-b76d-76453287cab3",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f57b1f4e-55fd-45af-b84f-561d5deb1734"
        },
        "item": {
          "id": "eed1d3ed-92f6-4649-ac29-51b7d1ec13a8",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "75f8eeb1-65d5-4152-bab5-a9131615505c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8e1bb6-998c-4f0e-8b66-652f31d69b9c",
        "cursor": {
          "ref": "51679c41-3048-44ec-ac3c-9353d38cf006",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "902d9e81-3c73-4f0b-9464-5bb38f7e3f8d"
        },
        "item": {
          "id": "cd8e1bb6-998c-4f0e-8b66-652f31d69b9c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "4aa62a21-e7f4-4c83-8478-226ff663013d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:34)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ebee4d8-26d3-40bd-8084-7283e3d7313d",
        "cursor": {
          "ref": "f33bf65b-3922-4a2a-8072-c72265290f48",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b42c888a-b63e-4671-a15e-61a4ca0f177b"
        },
        "item": {
          "id": "8ebee4d8-26d3-40bd-8084-7283e3d7313d",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1b9440a4-3743-450c-bcbe-46fb301ea280",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:35)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6540359-5f87-4a6e-ab2d-9f77e5777eb3",
        "cursor": {
          "ref": "8be70933-9dc3-44d6-b6bc-f98b9b448205",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4700ee1e-e21a-4dd9-90bb-6e1fcc3d13d1"
        },
        "item": {
          "id": "d6540359-5f87-4a6e-ab2d-9f77e5777eb3",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f36147e8-b774-44d1-aa91-da1d101182df",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:36)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fc25c9d-b8ca-4517-8c88-22d86e3f8846",
        "cursor": {
          "ref": "84724df7-8976-4264-b070-231a2514ccc3",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "1950e913-0ea7-4e32-b02a-c4dd310a5885"
        },
        "item": {
          "id": "0fc25c9d-b8ca-4517-8c88-22d86e3f8846",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "94d2db18-5432-4019-9638-b5ac0c21b50c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:37)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbaaf197-e1ff-42bd-b583-0601ca421311",
        "cursor": {
          "ref": "0bbc0760-b294-4569-ac34-7c0201c2113d",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "f985bfe9-500a-4419-8377-80e1e731f321"
        },
        "item": {
          "id": "cbaaf197-e1ff-42bd-b583-0601ca421311",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "07eec67a-4323-4fc0-b920-9ad8cca57cb0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:38)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05ff663f-29d0-46a9-8bb3-8fb0719d8aca",
        "cursor": {
          "ref": "c0757258-40ac-4fb8-b90a-5d84907f4dd8",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "6b24036a-1a62-467b-879b-d705eab6ff30"
        },
        "item": {
          "id": "05ff663f-29d0-46a9-8bb3-8fb0719d8aca",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "4335b3d8-7139-49d1-8344-4ee2d508c6ca",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9f667c-1c4c-4eb6-bdd2-8d2bb98907e5",
        "cursor": {
          "ref": "14e160ac-48b1-4f09-9bb3-5e0ebb99ff44",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0ba849ca-91d6-4a9d-88c8-32f3f37baa85"
        },
        "item": {
          "id": "cb9f667c-1c4c-4eb6-bdd2-8d2bb98907e5",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "13936535-19e4-4cc8-abc5-1970d5d7ecb9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d248de3-8af1-458f-bcaa-0d81830e912e",
        "cursor": {
          "ref": "9b151253-42fe-4f61-ace9-978fd4d37929",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a0b6bce1-fcc8-4b3a-93f4-3a06c0584dca"
        },
        "item": {
          "id": "8d248de3-8af1-458f-bcaa-0d81830e912e",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8e2c8dfd-7d39-405d-aead-6f01c3021428",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56c3872b-177f-4b08-9f9c-17fa39cfd7fa",
        "cursor": {
          "ref": "14bed51a-b95b-4827-928b-1a6fadbeeed4",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "71cc7f92-30d5-40dc-bc08-fa9169f6047b"
        },
        "item": {
          "id": "56c3872b-177f-4b08-9f9c-17fa39cfd7fa",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "62d8cda0-4e0b-46dc-9671-f18bbd373d3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a063dc3d-25fd-4cc4-afd5-b291ca453ffd",
        "cursor": {
          "ref": "5f6f7494-26bd-45ff-bc4b-ac9a8051aa6b",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "ed50daad-dac8-4f7f-a56a-a772da6f3cc9"
        },
        "item": {
          "id": "a063dc3d-25fd-4cc4-afd5-b291ca453ffd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "882f3718-8f9d-4d23-9989-18f6817e7b75",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2c4e050-d3be-4d2c-9e8e-783f79467a21",
        "cursor": {
          "ref": "98e26223-6585-49dc-b2c5-55a59642c0fc",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "7954159d-07b4-41e3-bb11-560417ec6da2"
        },
        "item": {
          "id": "e2c4e050-d3be-4d2c-9e8e-783f79467a21",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "0005cfd5-a7e7-4a10-9ddc-79ca82b01842",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89997e4b-91bc-4d54-a413-a8e782568c09",
        "cursor": {
          "ref": "58d2d7c5-3484-415d-8346-4eb6f0568f6b",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "619eaac7-ffda-4a9f-82f3-8c351c57e2fb"
        },
        "item": {
          "id": "89997e4b-91bc-4d54-a413-a8e782568c09",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "658e7734-ce4b-424b-bdb2-981f36af1b86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa09872-ce36-4d16-831c-f1843e07c494",
        "cursor": {
          "ref": "b6cdba36-16a5-4987-a909-7b7ebf12d529",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3fb80ef8-0c66-4076-93c2-19812a09452c"
        },
        "item": {
          "id": "7fa09872-ce36-4d16-831c-f1843e07c494",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "051c2b65-0d09-4c4e-ae9c-f1e4736e4bd9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba94082e-3898-408b-b1fa-b854a5a0f60d",
        "cursor": {
          "ref": "a1f8660a-a621-49cf-b4c9-358153b05916",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "c33067ef-5581-49c1-98cd-b6956ddfa13d"
        },
        "item": {
          "id": "ba94082e-3898-408b-b1fa-b854a5a0f60d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "744aee73-7586-426f-8bd0-c633b8d8a171",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62dcb5a1-6fbe-4b4b-8c51-6b3b74b1e438",
        "cursor": {
          "ref": "0da05b27-49bc-4f37-96d1-7c3a82780a03",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "126006dd-5011-412e-ac3c-6f97d13ac45d"
        },
        "item": {
          "id": "62dcb5a1-6fbe-4b4b-8c51-6b3b74b1e438",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "3ce560c4-87cd-4a84-a387-f505bbe53430",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "336d9032-a00a-49ce-af90-99cdc5f287b0",
        "cursor": {
          "ref": "f0e12853-2b79-4c85-8cf6-151e33a8f5dd",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "502b632e-1fbb-48f1-bfbe-603bad2236b8"
        },
        "item": {
          "id": "336d9032-a00a-49ce-af90-99cdc5f287b0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d50854be-4943-456f-bdf1-ed99afd5d3a9",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb3caaa-eecb-4162-9846-37d7be117f05",
        "cursor": {
          "ref": "df4227ab-a4f2-4630-8d1f-8b5872b78534",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2f102e2d-6747-4b01-983b-c612cb16209e"
        },
        "item": {
          "id": "8cb3caaa-eecb-4162-9846-37d7be117f05",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "d66849ab-4e06-43b8-b91e-8716439fea2b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "895c72be-d689-4f07-9c33-244b3c25fed1",
        "cursor": {
          "ref": "282d0b9e-b3b9-4e3c-a0f1-4e198374dc82",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "0b3470b1-fa7c-4e49-bf78-83173f4f4454"
        },
        "item": {
          "id": "895c72be-d689-4f07-9c33-244b3c25fed1",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "88634e55-ffe9-4bd1-9f4b-aa2f269875ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 500",
              "stack": "AssertionError: expected response to have status code 422 but got 500\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db3f35a-7217-41a3-9b4b-fd32eaa6a79c",
        "cursor": {
          "ref": "4e194a4c-43d6-43ff-a3bd-98e3a15584bb",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "3edd5970-9cde-4dd6-a57e-7b8e54584dba"
        },
        "item": {
          "id": "2db3f35a-7217-41a3-9b4b-fd32eaa6a79c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3a59b28b-7f80-4f7d-85c7-bca5054ccd6e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b542243-8fc8-4254-a419-dd5742a0eee0",
        "cursor": {
          "ref": "25f95018-38ac-494c-86f7-9d8556341022",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "5b28daa5-1c2e-43bc-aeaf-a0e7491be270"
        },
        "item": {
          "id": "5b542243-8fc8-4254-a419-dd5742a0eee0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "e208d442-89f2-4d61-a66c-38e98ee7b6dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b87e41f3-6893-4f38-a026-6ddeefcc59ba",
        "cursor": {
          "ref": "b29c6d9d-e51e-4847-8861-726f20ac49fb",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "b6114d7f-03c9-40d7-ba22-02dbbb9e5d92"
        },
        "item": {
          "id": "b87e41f3-6893-4f38-a026-6ddeefcc59ba",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "1b315a1b-74d2-4f35-aea3-2dd1476e819b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37bc08ed-a20e-4954-8496-30593506e3d2",
        "cursor": {
          "ref": "1c9c4c18-436e-4228-b8d6-13d5d7687ac5",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "f9b1dd75-48e5-4a96-a66b-5431cc11049e"
        },
        "item": {
          "id": "37bc08ed-a20e-4954-8496-30593506e3d2",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "db8f259a-80eb-4604-bb53-8e705eb2b73a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "038ca29a-0d75-4fc9-9633-25dd8252a744",
        "cursor": {
          "ref": "fa3ea657-7205-44ba-9364-9cf73fa7da8c",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f2c1cd01-df9b-4d75-8d12-8d73e230b005"
        },
        "item": {
          "id": "038ca29a-0d75-4fc9-9633-25dd8252a744",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "632e2fe1-cd8e-42ff-8c75-a01361844e8f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:56)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c95d319f-3a2d-4ba8-9566-2c710ffb9a6a",
        "cursor": {
          "ref": "7e1d04a0-7972-4f31-9a48-2b91a1504a1c",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d23db796-cf24-4b68-af99-391736f6f733"
        },
        "item": {
          "id": "c95d319f-3a2d-4ba8-9566-2c710ffb9a6a",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "34500afd-ac6f-4273-a5b6-17d8cd764695",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:57)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40039b7-2b6d-4c14-9c78-e8ce44a41481",
        "cursor": {
          "ref": "300e2f93-0eed-489d-bc4f-8ffc179127c5",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "92895bd3-bdab-4589-96cb-a85125a59bde"
        },
        "item": {
          "id": "a40039b7-2b6d-4c14-9c78-e8ce44a41481",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b9681372-27ab-4c93-8ba9-c396e9f95dd3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:58)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b9ba63-4796-46e1-a186-b13d00fdf9a3",
        "cursor": {
          "ref": "3012f36a-ca4f-4ceb-b839-9906708e8e8e",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "86bc65bc-8b46-4c9c-a8e4-ab88863ec68a"
        },
        "item": {
          "id": "b9b9ba63-4796-46e1-a186-b13d00fdf9a3",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "50c614a6-c73d-48fa-8614-e643664ec11e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58258406-6f44-4376-8369-a5fae3921621",
        "cursor": {
          "ref": "f15de41c-a889-482e-950f-6b178a4a1531",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9e6bdb8d-1014-493e-bf38-f7365494d733"
        },
        "item": {
          "id": "58258406-6f44-4376-8369-a5fae3921621",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "099e1bb7-7af2-4446-96cf-18dbcd24ebb1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:60)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec3ab4c-85fa-4cbd-8563-abe183752b3a",
        "cursor": {
          "ref": "b3bc5ff1-30ff-42ed-b103-d4409ea318ae",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "dc5428dd-5abf-4153-9ede-5ec9db15a3ba"
        },
        "item": {
          "id": "7ec3ab4c-85fa-4cbd-8563-abe183752b3a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "721b5376-2506-4e65-b4cd-fca3f956d91d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:61)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c10bf45d-0dcc-4a8f-b50d-4ff1a5f5a5ca",
        "cursor": {
          "ref": "dee31e0b-fb52-46e1-a413-d3b5528e10be",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "413315c3-0813-45b8-a1f2-a3557828eb8e"
        },
        "item": {
          "id": "c10bf45d-0dcc-4a8f-b50d-4ff1a5f5a5ca",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cc803239-d14b-4ac9-8364-36baadea9f82",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:62)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67d7317-38c6-42c6-a72e-f639c67fafcf",
        "cursor": {
          "ref": "630d37ee-cad9-4f05-aa8f-e1d9a1de8b5f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "9428fcee-eadb-4b97-8d5d-2038f1d5bb6a"
        },
        "item": {
          "id": "b67d7317-38c6-42c6-a72e-f639c67fafcf",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5fa927eb-ca6d-4b9a-8fec-7bed5d7ac52f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d492a6b-1423-4277-a932-61e9e68d6fd4",
        "cursor": {
          "ref": "d8a15b88-4706-48e1-9d35-47a1f3ce6c6c",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "5b51df67-35d0-4312-8eea-7e4249c7a62c"
        },
        "item": {
          "id": "2d492a6b-1423-4277-a932-61e9e68d6fd4",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "33038635-51aa-48b0-88ee-76d80e1f3ae6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:64)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3e967a0-8cf4-4e1f-9c7f-cf09c5f6efb5",
        "cursor": {
          "ref": "03ec9218-5c07-4d05-a3c9-4177dd06b3c5",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "da6e8cbc-772f-4250-888f-07c8726fee35"
        },
        "item": {
          "id": "f3e967a0-8cf4-4e1f-9c7f-cf09c5f6efb5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "f2ff6860-6f87-4968-8aea-6a5307a3c2d8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce97298-bf26-4b05-94ba-b4dd54a222cf",
        "cursor": {
          "ref": "30bd8bf0-7de9-4a5a-a6f0-b1e6933bff43",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "6fdc4fb4-94de-4264-8db7-ef02603ebe10"
        },
        "item": {
          "id": "1ce97298-bf26-4b05-94ba-b4dd54a222cf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "954cad17-b233-44d8-965c-819cb90cb893",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1677a5d-6f9e-4965-8c22-4f50b2bf81d1",
        "cursor": {
          "ref": "99797100-5d3b-4d84-b3ae-6f6dd10a47d6",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "1e1b22e7-d4ff-4df3-97cc-599175179924"
        },
        "item": {
          "id": "c1677a5d-6f9e-4965-8c22-4f50b2bf81d1",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "77ce588c-a817-45c7-871b-58192c2e9d1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c860e802-84e3-4644-b40d-b412020c9ed4",
        "cursor": {
          "ref": "a2f73519-89fc-4bd4-9efd-2a711a4f2916",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "41b37450-66f8-4c17-b0b8-3baae9a0844d"
        },
        "item": {
          "id": "c860e802-84e3-4644-b40d-b412020c9ed4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "5b0530dd-8b32-41c5-905d-67839042d70d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b904a3-3592-48e0-b843-01a10342dede",
        "cursor": {
          "ref": "88a087f8-7ad3-4ec2-9587-79e450dbf0d0",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "68e3446e-c0ea-484e-a303-b8e0af0f3d23"
        },
        "item": {
          "id": "93b904a3-3592-48e0-b843-01a10342dede",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "268870dd-ccfc-42ab-bfac-3265227c998e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ffe7d58-907c-44e0-89d0-5b096f04d222",
        "cursor": {
          "ref": "771ebc01-8d68-4d3e-aae5-77a7bb38128d",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "308cd2cd-090c-491b-9a3e-85bec574e781"
        },
        "item": {
          "id": "9ffe7d58-907c-44e0-89d0-5b096f04d222",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "41cb83d6-90a9-4332-a560-19237a7c45dd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b56772c-b769-400d-9e65-8899e924301f",
        "cursor": {
          "ref": "a9197e1d-ba96-4f19-9790-19b291ac40ad",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "f94b98af-100a-4a31-ad5c-2a27c0283300"
        },
        "item": {
          "id": "9b56772c-b769-400d-9e65-8899e924301f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "6d140075-a3a0-4459-9e24-0f4f784325ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40b911ac-91a6-4cef-9ee9-6da3e0de49e0",
        "cursor": {
          "ref": "cabe766e-55a8-4236-9927-37bda92dd267",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "8a6f83ed-46d6-422e-bc22-d8f41c6ec44c"
        },
        "item": {
          "id": "40b911ac-91a6-4cef-9ee9-6da3e0de49e0",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a1e92167-110e-464e-b732-c41a16ae08ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:72)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cb7e34-a428-4d36-88a9-98116c308a72",
        "cursor": {
          "ref": "fc6f5b26-0f8b-4743-b495-d2bb87e1b885",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2f9cba6e-4e19-4030-b9ce-abd8e771f52f"
        },
        "item": {
          "id": "67cb7e34-a428-4d36-88a9-98116c308a72",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "2e652ed8-9a9c-4ec9-b7b6-717969e4215d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c335afc-3c52-4d3a-bf61-570dab00f59b",
        "cursor": {
          "ref": "44856b5c-28a1-4996-a64a-bb3c06519571",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8dd97e39-9a22-400b-ad9e-f5c90e2f7510"
        },
        "item": {
          "id": "0c335afc-3c52-4d3a-bf61-570dab00f59b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "be879741-8030-4380-8ecf-cab81e792237",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65ec10ba-55a5-4795-bc67-8710847264b2",
        "cursor": {
          "ref": "540f5509-9687-4e74-b5c8-2443e250f862",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c19f8abf-0507-42f1-ad26-970e3c591db1"
        },
        "item": {
          "id": "65ec10ba-55a5-4795-bc67-8710847264b2",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "921ffec2-af71-44bc-9941-4bb5f66295e0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:75)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bddc8267-d698-4793-968b-8529ae8a24d8",
        "cursor": {
          "ref": "d01009c9-be90-4824-9981-a0db3ef46fcd",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "f0200ce4-e1ff-4f87-8c51-c49a8a41cfcc"
        },
        "item": {
          "id": "bddc8267-d698-4793-968b-8529ae8a24d8",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "337a3025-976d-4bfe-bb4c-b0ac30d9b86c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:76)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1a4aaf-0106-4721-a8fc-2ccbcb2daca6",
        "cursor": {
          "ref": "22ea937d-a943-4b8f-948b-1cd900629692",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "83da7e70-5943-49c9-ba73-f15edbc729dd"
        },
        "item": {
          "id": "9c1a4aaf-0106-4721-a8fc-2ccbcb2daca6",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d8262c17-152b-4a2a-a907-9d72215c2816",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:77)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b97d75-52d7-4654-9c10-7d922efd9529",
        "cursor": {
          "ref": "a4c2c8b5-efcd-4e14-bf58-3ad1872dd1db",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "dfdf2a05-b54b-404b-852f-092038cf32aa"
        },
        "item": {
          "id": "f6b97d75-52d7-4654-9c10-7d922efd9529",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "aefccf53-4818-4ba4-b88c-5579338f1b0f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:78)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edb07ea0-4ab5-4806-8fff-45227e3439de",
        "cursor": {
          "ref": "69be06d5-d38c-46b6-b23f-67111bfe2734",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "fa49b34e-44ed-47ee-aef0-ae70356fe1a4"
        },
        "item": {
          "id": "edb07ea0-4ab5-4806-8fff-45227e3439de",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "2de65b31-b092-49b2-a689-24a9bc1aaaa5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160fb2d8-1e51-4f58-a20d-d8731fd8f576",
        "cursor": {
          "ref": "b17c4127-48b2-48c9-b261-101b187714ec",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "69740014-813b-496d-ac51-b04f5adf3810"
        },
        "item": {
          "id": "160fb2d8-1e51-4f58-a20d-d8731fd8f576",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "217aac09-c2c6-42e7-959b-7a91e653b268",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:80)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfc3a2c-c788-494b-8002-4a42bf3aaa5e",
        "cursor": {
          "ref": "cb55467b-b589-46fc-b75e-a11b9641bfaf",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6aa38ce1-35b1-4f83-9ad0-dd2e98d15281"
        },
        "item": {
          "id": "2cfc3a2c-c788-494b-8002-4a42bf3aaa5e",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c67a720c-4b68-4e47-a591-040b012f5eaf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:81)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1f47465-d7e5-41fe-a5b8-1be4b22510bd",
        "cursor": {
          "ref": "46644fb2-b429-45e5-92c2-12d462d0c54e",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "5bc233e0-4d59-434b-abc2-33d15c739b2e"
        },
        "item": {
          "id": "c1f47465-d7e5-41fe-a5b8-1be4b22510bd",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9658e3e6-1c5f-42b2-ab46-e0b314f808bf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:82)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a39b971-0a6c-494f-b1b5-362840388a03",
        "cursor": {
          "ref": "f4b065fc-a71f-4911-9b17-f59c59b2de93",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f231c144-0670-4ab9-a443-c795ec287ed7"
        },
        "item": {
          "id": "0a39b971-0a6c-494f-b1b5-362840388a03",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "ee4a10a8-5bc0-4c90-8ead-bb062a54cb81",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2bf407-3626-497e-a848-aba925c5c4eb",
        "cursor": {
          "ref": "165b5705-c52b-4242-8b1b-3190c1d4b8a5",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "1c3f0ecc-7c4a-4573-b4c8-4c2c201ee553"
        },
        "item": {
          "id": "1a2bf407-3626-497e-a848-aba925c5c4eb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5b44e576-9ae1-45af-a3be-4b1adfe8868a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:84)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac486f7-eda3-45ba-8bdd-e51550de02b3",
        "cursor": {
          "ref": "37c8647e-b79f-4795-ac09-c2a03e793447",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "c50971aa-bd1b-4ade-ae77-bd59fbbd4bad"
        },
        "item": {
          "id": "3ac486f7-eda3-45ba-8bdd-e51550de02b3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f9772e16-65d0-4a6d-a8bf-e288dbfd3537",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db5b4c3f-dd5f-4cc7-b1ea-d887dc9b1e30",
        "cursor": {
          "ref": "31361356-40cf-4035-b096-472e1c512628",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "46392a53-c908-489b-8ff9-910514e06259"
        },
        "item": {
          "id": "db5b4c3f-dd5f-4cc7-b1ea-d887dc9b1e30",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a34f15ab-fbe0-4ea8-8c46-e590f674a300",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:86)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3430538b-5100-4086-87bd-7c8eef7be811",
        "cursor": {
          "ref": "e4900181-ad40-4129-87d5-fa8bb8f1ae93",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "aa697bdd-d841-4a1e-840c-bcb98a0685e0"
        },
        "item": {
          "id": "3430538b-5100-4086-87bd-7c8eef7be811",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "934f250f-ffb5-48f0-8ca3-59da090ce38d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:87)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd58915-bde2-4cc8-b440-e369e731ab99",
        "cursor": {
          "ref": "63baf069-7773-4de7-bec4-821ba74e062d",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "3a91fc4f-662b-4446-9e1d-cb5f8e76317a"
        },
        "item": {
          "id": "afd58915-bde2-4cc8-b440-e369e731ab99",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bbe4f8d2-ac28-4d0f-a41a-470197a2d09e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:88)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fedaa8e-d2fb-4b9f-9a5c-d7b177ee33d4",
        "cursor": {
          "ref": "827fc2c5-405c-4251-a343-ac4f00646c5e",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "93e0103e-e389-4644-ab7a-f4825d8e49bf"
        },
        "item": {
          "id": "0fedaa8e-d2fb-4b9f-9a5c-d7b177ee33d4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "0efb5bd1-345b-46b7-84e8-64a5de321b15",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43d4ee94-a9ec-4109-9f74-c831ec530df0",
        "cursor": {
          "ref": "d7730da9-c269-43d3-8151-2f236034d32a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "13badf3e-e3af-48a5-958e-6b3955bd9570"
        },
        "item": {
          "id": "43d4ee94-a9ec-4109-9f74-c831ec530df0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bfb1eb2f-e4d1-49a5-9201-63e8e98c4840",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:90)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeafa8ee-5153-4a6a-8edf-7716a15dc683",
        "cursor": {
          "ref": "9669629e-98a4-48b0-827d-68a443b53a6b",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "495dc80f-a4af-4009-8c9a-8fe2f4bffcf8"
        },
        "item": {
          "id": "aeafa8ee-5153-4a6a-8edf-7716a15dc683",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "64ac924e-e503-4ec5-915c-c071cebe8788",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:91)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cacb3e3e-4be8-4580-a59f-efd847b4cca7",
        "cursor": {
          "ref": "92dff951-2c98-4064-bee9-6c22f31eb733",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "54712252-1509-4208-abff-c16074bf1cf7"
        },
        "item": {
          "id": "cacb3e3e-4be8-4580-a59f-efd847b4cca7",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "585a4a86-2735-4771-bb39-7dca046e8da8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:92)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05f2e1e0-cbdd-441f-9757-57e901fce8b0",
        "cursor": {
          "ref": "4f64f2bc-8297-4d0b-96d5-ae9ad37d5988",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "10045266-9b58-4ae5-a803-796d177cec04"
        },
        "item": {
          "id": "05f2e1e0-cbdd-441f-9757-57e901fce8b0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d377c7b6-2973-4d16-96d0-951244efe21a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:93)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea83b5c3-674c-4c77-8628-99cee9a8f37b",
        "cursor": {
          "ref": "d066eb40-e24f-44cb-b633-f52fb7786713",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "4fa51008-b4d3-4bab-bc33-be354902b8c3"
        },
        "item": {
          "id": "ea83b5c3-674c-4c77-8628-99cee9a8f37b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "60be6144-3959-47a2-8034-b4f67090b655",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:94)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9ddc59-29f3-4a8b-a05a-57dbdb3b8e53",
        "cursor": {
          "ref": "9a83f18b-8152-4ea4-897a-fb99cec44642",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "26ed6c1d-949e-4fa1-baef-021a0f3210ba"
        },
        "item": {
          "id": "6f9ddc59-29f3-4a8b-a05a-57dbdb3b8e53",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3f1a17ba-86fe-48c3-b231-331cb6a64c6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e96f35-ba64-41f2-b15e-0836cb20f9bf",
        "cursor": {
          "ref": "c009b9ff-845a-4d4f-9c73-85012ceb1edd",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a985ad9e-4f63-4dbe-9c25-0c76a93d9b6f"
        },
        "item": {
          "id": "88e96f35-ba64-41f2-b15e-0836cb20f9bf",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "747abe41-0aff-4c6f-8908-dd21e6cc5228",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "474a5b11-c1c7-4487-99fe-5fd1da4f9328",
        "cursor": {
          "ref": "c5ca311b-7b8f-484c-8a5b-26dd3f78f12b",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "810d176c-d62a-42c9-8834-64d91cfc0c67"
        },
        "item": {
          "id": "474a5b11-c1c7-4487-99fe-5fd1da4f9328",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "af2b6c44-ee76-406d-a6c0-1c0df067e9f5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1c4f4da-2803-42c1-a329-f95d3a805da3",
        "cursor": {
          "ref": "cf0cd2be-cdf2-4865-ac5c-4a7124ba7a9e",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "3d179997-ee51-4286-8f9d-cf26468a9c56"
        },
        "item": {
          "id": "c1c4f4da-2803-42c1-a329-f95d3a805da3",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "f48dab94-8dcf-4316-8966-88b8b0994612",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1dc4a437-0ea5-4873-a42b-0d8379d0ada0",
        "cursor": {
          "ref": "a0104928-bab4-4df8-830b-a0c1f76c8884",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2a2c0d14-643e-43b2-bf01-bea97ae7bb4d"
        },
        "item": {
          "id": "1dc4a437-0ea5-4873-a42b-0d8379d0ada0",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a9463306-3ee5-42a0-b5de-05ce1a4c26d1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01dd9483-de2c-488f-8bf5-70620b9f62f8",
        "cursor": {
          "ref": "4e8caa9a-5401-4a72-86ef-cdf12e94dc50",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "9f7fb6d2-2a67-4e53-afcb-578b799ef21e"
        },
        "item": {
          "id": "01dd9483-de2c-488f-8bf5-70620b9f62f8",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6c9fbfbe-16ec-4e22-aa94-b8bb698e7cde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6e193f-a8c2-4a35-a957-06addff58c1d",
        "cursor": {
          "ref": "ebf6fea9-9655-41bb-9c3b-18842e769b59",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "851d8a94-2bf5-49d4-8106-570b1a039aa7"
        },
        "item": {
          "id": "0d6e193f-a8c2-4a35-a957-06addff58c1d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5b02d095-d850-4ba2-bfa2-f532086364f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6402c28-3c20-4185-b6a7-098fe0f66c2c",
        "cursor": {
          "ref": "6d466ed6-d151-425b-ae2f-ef1c7ba1314c",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "da3bf1e1-2ecf-495d-b512-18ed7b1ddecf"
        },
        "item": {
          "id": "a6402c28-3c20-4185-b6a7-098fe0f66c2c",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "836a46f9-b1c0-49dd-874b-90c278551f1a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "ac46947c-f9f2-4b67-a288-e81e709fd272",
        "cursor": {
          "ref": "1238683a-a5b0-4fc5-a2fd-3ea208e603c0",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "bcfc065a-e2c2-4d0d-abaf-56ad634e64b1"
        },
        "item": {
          "id": "ac46947c-f9f2-4b67-a288-e81e709fd272",
          "name": "credentials_issue"
        },
        "response": {
          "id": "377308a5-9b92-40d0-a6f6-d71a1680910f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 334,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:103)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:103)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:103)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:103)"
            }
          }
        ]
      },
      {
        "id": "2eaac729-4af2-4c97-a3f7-d249d1c6e8fd",
        "cursor": {
          "ref": "bd416e79-5679-4734-bb70-c833af4c033a",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "50ff287a-236f-4220-98d0-fb547034e93d"
        },
        "item": {
          "id": "2eaac729-4af2-4c97-a3f7-d249d1c6e8fd",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "54177bea-4b7e-4c10-878b-54a50fd285ba",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:104)"
            }
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response verifiableCredential.id matches request credential.id",
              "message": "Cannot read properties of undefined (reading 'id')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'id')\n   at Object.eval sandbox-script.js:3:104)"
            }
          }
        ]
      },
      {
        "id": "13842ca9-952c-4402-be7d-bf86525ee194",
        "cursor": {
          "ref": "12707dfa-b4cb-4bdb-90e0-296e3a6be948",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "593500de-5415-4184-b550-8a788f3f2a94"
        },
        "item": {
          "id": "13842ca9-952c-4402-be7d-bf86525ee194",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "21692c2b-40f0-4f08-b8ad-a2b2b2881d4f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:105)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:105)"
            }
          }
        ]
      },
      {
        "id": "d3933ec4-76de-42f2-b863-4eda196013b3",
        "cursor": {
          "ref": "45beffc3-cd0b-4f79-b8f2-5d31a40618ac",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "c3ccd8a3-3f30-41cf-8eb7-be7b944a9ecf"
        },
        "item": {
          "id": "d3933ec4-76de-42f2-b863-4eda196013b3",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "c9ae173d-59e0-455e-aae3-5371db34cd6b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "bf2840f1-4a86-4355-bec5-3a18198fbc2f",
        "cursor": {
          "ref": "68fa5064-0549-41b9-82fd-593f8a71b4d3",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "c8a0510b-6e9f-4dd2-a6d1-cf034ff59077"
        },
        "item": {
          "id": "bf2840f1-4a86-4355-bec5-3a18198fbc2f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d0853533-90d9-403e-9a2d-49d67d093a30",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "1bfd05de-b156-43a2-a4ae-c687a44b6afa",
        "cursor": {
          "ref": "9f77b7e0-1e21-49e9-ab7c-f5f7eff6422e",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a0abd910-12ef-482e-b236-653ccb94aaf0"
        },
        "item": {
          "id": "1bfd05de-b156-43a2-a4ae-c687a44b6afa",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "d851c01c-23e3-40c0-8f27-44e84b0e2198",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 500",
              "stack": "AssertionError: expected response to have status code 201 but got 500\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          }
        ]
      },
      {
        "id": "447f78a1-47a9-42a9-8e58-04d64ae1d817",
        "cursor": {
          "ref": "f4d15508-906f-489c-a19d-5cc3fc4e7775",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "3de7f30b-5c3c-4932-ac51-c0ec3a8b4fb5"
        },
        "item": {
          "id": "447f78a1-47a9-42a9-8e58-04d64ae1d817",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "552f08e1-5a53-4622-8dcb-e67624109e69",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aec6124e-a9ca-4474-a126-1b86d6233ff8",
        "cursor": {
          "ref": "7a28a885-f41f-4725-97f9-4b563852b4d4",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "cd544f9e-6b99-4e01-bc88-8c7dfe52db4d"
        },
        "item": {
          "id": "aec6124e-a9ca-4474-a126-1b86d6233ff8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dc8971fe-f64d-4523-98e2-69ac88fd468f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed423277-2298-44d2-82b5-3d3311c9c046",
        "cursor": {
          "ref": "9c0e17d6-7bb1-455d-a81d-ff57d3cf87b3",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "34c401b8-23f4-41c5-93fa-d9146ece54da"
        },
        "item": {
          "id": "ed423277-2298-44d2-82b5-3d3311c9c046",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ddf02007-74b4-4e06-a59a-d36bbddf5db4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c89792a-d202-4720-916e-1c205d1bd42b",
        "cursor": {
          "ref": "a6177520-5eab-4fee-b14a-ba8834bb6c5d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "cd993a1d-229f-48fe-9b7f-3f5fb753260a"
        },
        "item": {
          "id": "7c89792a-d202-4720-916e-1c205d1bd42b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15f135b6-6201-4920-b9c4-18e94b2067a1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d40b50a-b841-4805-994c-f476e2a52a51",
        "cursor": {
          "ref": "c2c314bb-8bc5-4011-9b60-a2b03ee4729e",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "aea99e4b-e428-4fbe-8ce9-7114a79e923d"
        },
        "item": {
          "id": "2d40b50a-b841-4805-994c-f476e2a52a51",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "28a31d9a-04a6-4b6a-b1b7-20ef2f6d4297",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6d32122-869b-44ec-bcc7-bf1217dc5132",
        "cursor": {
          "ref": "b52887e2-caaa-4f83-accc-d4f251a5b5ac",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1cc27da5-9928-4447-9cd2-a2f0213a80a2"
        },
        "item": {
          "id": "d6d32122-869b-44ec-bcc7-bf1217dc5132",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eb078a35-237a-4567-973a-3ad6fab88d0d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f572705-4a52-4121-b92d-b443964407fa",
        "cursor": {
          "ref": "caffc65b-4e22-4779-8756-88152dbb9485",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "dc168bad-0985-4479-b53f-6d3c78e8fb1a"
        },
        "item": {
          "id": "2f572705-4a52-4121-b92d-b443964407fa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "276407aa-8e57-4dd4-8ec8-0070ad33e5e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62954ce3-b77a-4342-8d0c-5a27d172f319",
        "cursor": {
          "ref": "b0e1ea8f-819c-4fc0-b5ed-b4427085a254",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ab377256-28ff-46d8-850b-d46e43c54e92"
        },
        "item": {
          "id": "62954ce3-b77a-4342-8d0c-5a27d172f319",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "698d5873-ae45-4d79-90a1-23b10729641d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106b03de-87c2-48f1-bc7f-871b27cff93d",
        "cursor": {
          "ref": "8de59dc7-2431-4b46-8112-edbe27e8fe28",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "34649c30-7e2c-40b1-8770-2016b0f08ab9"
        },
        "item": {
          "id": "106b03de-87c2-48f1-bc7f-871b27cff93d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d9f07be5-4790-4626-bc14-cbcd4b394a1b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953ef3ad-0897-4825-8856-4b6c7dbe1eda",
        "cursor": {
          "ref": "c90c6d49-f3b5-410c-8b98-84702e429908",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "6dd47b27-b75b-443d-9763-91734e061fea"
        },
        "item": {
          "id": "953ef3ad-0897-4825-8856-4b6c7dbe1eda",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "07181ba9-7ad7-483a-a3ca-c860b2e5c8ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bd26dc2-5d57-4e11-9a16-d51d60b96ef7",
        "cursor": {
          "ref": "040f38ec-05fc-426d-b410-1c815f62e93f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "09024dd8-d9a0-4608-a10a-bccd45b64a1c"
        },
        "item": {
          "id": "1bd26dc2-5d57-4e11-9a16-d51d60b96ef7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "62158d6f-c326-4217-8a1d-7d839fcda16c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f49996c3-d160-4ba6-a676-04cd38926f01",
        "cursor": {
          "ref": "44bcf4c1-2365-4a9f-9356-5c6e0eda484b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4111bf18-f6ae-4ae8-99af-4274069c32f6"
        },
        "item": {
          "id": "f49996c3-d160-4ba6-a676-04cd38926f01",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8b88a063-f3db-4bd0-bddb-02da3342b034",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc614b66-1904-4bc8-9528-545770d27095",
        "cursor": {
          "ref": "47c0d2e6-eb73-4241-94ab-9fd94170acda",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2daba9aa-4cd3-4f24-a2d0-4c34387e7caa"
        },
        "item": {
          "id": "bc614b66-1904-4bc8-9528-545770d27095",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "152017a3-9ae0-4aee-aaee-234060ce129e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44bf4dc9-e31a-4b94-8f9f-78dadddad484",
        "cursor": {
          "ref": "c3888257-88f9-436a-9b04-d99b9cdffadd",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0ff83ec9-6e8f-4d2e-8300-5cbee348a377"
        },
        "item": {
          "id": "44bf4dc9-e31a-4b94-8f9f-78dadddad484",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "42b49929-6eb2-470b-849b-8eefec263ef1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784c6809-37da-4c1d-8cb6-6f88b86bcc41",
        "cursor": {
          "ref": "af5695b8-9290-45e3-a0ca-4dc709bdbda6",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "2cd0bf67-5d53-4878-ada3-214b47aba659"
        },
        "item": {
          "id": "784c6809-37da-4c1d-8cb6-6f88b86bcc41",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "366b2f28-c333-40b4-9b43-96cd6c630391",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c7f39e-6fa9-4f99-a7da-dea4caf6ad33",
        "cursor": {
          "ref": "cd2b8af8-9357-4be0-ae00-60c125751eaa",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "14c9afbe-cdcb-45b0-9b46-a390517b78d2"
        },
        "item": {
          "id": "60c7f39e-6fa9-4f99-a7da-dea4caf6ad33",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "ad8bb77e-e091-4af4-ba2c-1566de142254",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1699ff34-dd71-4506-8e6d-6478eff9cf14",
        "cursor": {
          "ref": "745742db-749f-433f-8d06-cb0b9c85ba2e",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e8ac07b5-dae3-4117-8523-dd4f80e7e3d8"
        },
        "item": {
          "id": "1699ff34-dd71-4506-8e6d-6478eff9cf14",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "8f74cc9c-1edb-4042-901c-ee7aa6204771",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d179f6bc-26c5-4caa-8180-e84c97608acf",
        "cursor": {
          "ref": "993ee3ac-2f6d-46e7-bd88-00f48cd758b6",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6a85ca95-76d4-488c-ac7c-438c83ed13a8"
        },
        "item": {
          "id": "d179f6bc-26c5-4caa-8180-e84c97608acf",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "097444b0-9d87-4b71-8e31-44843d85931f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6933d17f-1cc4-4e1e-a1c0-9617c2520309",
        "cursor": {
          "ref": "8c48758b-efcc-4714-8a18-dd409aa486b2",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "cc780b0a-a4ef-435d-92e1-e9fdfc02a7d7"
        },
        "item": {
          "id": "6933d17f-1cc4-4e1e-a1c0-9617c2520309",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "8891bc74-b40d-476c-8b17-b62b0ccb0267",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc608cb-60a0-43f5-9b3e-f2a9eeb197aa",
        "cursor": {
          "ref": "0270974e-0c09-4dc6-851b-784e0e948d9b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7bdcb3bb-1ed0-4a9a-84cf-3caad6e62ebe"
        },
        "item": {
          "id": "6dc608cb-60a0-43f5-9b3e-f2a9eeb197aa",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "4b5d897b-4d4c-417f-9178-0fff81e40457",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "055e4356-d3da-449a-a375-1a6378503612",
        "cursor": {
          "ref": "5ae8b52e-a6dd-4d82-8b67-8a6cb4e7660a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "f02c35a0-945d-4a64-9fbe-77deac293820"
        },
        "item": {
          "id": "055e4356-d3da-449a-a375-1a6378503612",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "3be85ade-5487-4d7a-a7e9-1de5caadc5c7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52624517-d031-4046-aa46-d0461314fe15",
        "cursor": {
          "ref": "475328d4-0598-46b0-9ebc-51c5be3297da",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "1809d56b-ac9a-4d10-8f7f-abc32f296ce6"
        },
        "item": {
          "id": "52624517-d031-4046-aa46-d0461314fe15",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "6576ecfe-cd0f-4d21-af20-1d37fe758c5b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28de0c1-dbb5-41ff-807a-5083d0921f09",
        "cursor": {
          "ref": "1f6bdce0-03af-4fe0-8e96-5da125f866de",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "566bc6da-694f-402d-b65a-711de9b68053"
        },
        "item": {
          "id": "a28de0c1-dbb5-41ff-807a-5083d0921f09",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "03043d68-3ba1-4e44-860c-e97128c3236a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb77575-e5ff-4937-890e-68d6a2cb36ea",
        "cursor": {
          "ref": "67518c41-4256-4916-8ccf-cb9a75135920",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "586b495b-ec50-42d0-874d-3c5ddc084776"
        },
        "item": {
          "id": "ecb77575-e5ff-4937-890e-68d6a2cb36ea",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "eebfd729-c530-4096-8370-130cc24a23be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60fde5ca-8a09-49de-a29a-be0c7bf82b55",
        "cursor": {
          "ref": "bf73c829-3c67-4b99-8186-74cb3b133867",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fff32626-4271-493c-9573-3bb7df2820d0"
        },
        "item": {
          "id": "60fde5ca-8a09-49de-a29a-be0c7bf82b55",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "501f5705-348f-4931-a4c4-bec27aee351b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99fdf0de-0d19-4e8c-9837-d2aa2f661afd",
        "cursor": {
          "ref": "9e1fab96-a1d6-470e-b650-c1bdb36e03cb",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "46599821-393c-40c8-9266-b3a7f6040f8c"
        },
        "item": {
          "id": "99fdf0de-0d19-4e8c-9837-d2aa2f661afd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "91430f5f-a483-41a8-9d6f-b4d3e201aff1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2582cdc5-de9c-4a6d-8f84-86cc90bbf628",
        "cursor": {
          "ref": "f04544a9-0a35-430e-9e52-f6e3c0ebea2b",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "04cb9223-836c-49fb-aab2-010f116cce59"
        },
        "item": {
          "id": "2582cdc5-de9c-4a6d-8f84-86cc90bbf628",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1b69e6db-f6b4-43ae-b94b-b14e2d109d16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea661330-abc2-4319-8af2-afebb03df5af",
        "cursor": {
          "ref": "6510f093-5631-4f58-9486-e5b1f82b8a18",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "052a88f3-aeab-4962-975d-38fc6037da90"
        },
        "item": {
          "id": "ea661330-abc2-4319-8af2-afebb03df5af",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f932d532-66eb-4dbf-9709-1c2668dcc846",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a12a92-9403-4a73-923b-6b169ca367c4",
        "cursor": {
          "ref": "12453a0f-b008-4c01-bc48-6715a6780033",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "429fefc3-a31b-498f-b79b-8ee5c2eff0df"
        },
        "item": {
          "id": "c1a12a92-9403-4a73-923b-6b169ca367c4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "09c5987c-1624-46d5-be12-5ebe28715746",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c0c7705-fc41-4447-9c97-20269903dcfe",
        "cursor": {
          "ref": "7a20d77c-3f19-4750-83d0-557bd229fcf7",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "ab4cf477-cbbb-4bb9-94f9-42efd91275de"
        },
        "item": {
          "id": "6c0c7705-fc41-4447-9c97-20269903dcfe",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "8554aba8-8c62-4ebb-a321-b5c746312bb6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b768cc6c-ce08-4a21-ab3f-087d3f91152f",
        "cursor": {
          "ref": "6a84db5b-3186-4501-bccc-2ef7c0202669",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "04ca71e7-40b0-4c62-bdcf-e23bc3258ce3"
        },
        "item": {
          "id": "b768cc6c-ce08-4a21-ab3f-087d3f91152f",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "6949925f-bcdd-4904-afbd-fda682631ae4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5920f5ae-5541-4fb9-95ae-c4a1f0f56990",
        "cursor": {
          "ref": "b4bf7eb3-94a1-4a1a-8073-4b8f3060dffb",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b0f4bb17-9bae-4b1b-9f1a-b1fb04b3faf9"
        },
        "item": {
          "id": "5920f5ae-5541-4fb9-95ae-c4a1f0f56990",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "083981fa-26d1-4cc4-948b-289c2235f751",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7909a9-26ca-49fb-b4ad-aca96c09c78c",
        "cursor": {
          "ref": "a03f7e67-05d5-4207-93c0-4e33fed0142d",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "60100539-d565-4b37-87c9-b21c8985e1e3"
        },
        "item": {
          "id": "6d7909a9-26ca-49fb-b4ad-aca96c09c78c",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "caf9ecb3-e4b7-4f79-af9d-27a91f4fbe85",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d6b961-7074-43d0-90f4-680d1eeb8b99",
        "cursor": {
          "ref": "e04da401-a61f-4ef4-8e02-36d2dd48ece9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "a48876bb-5b31-4392-8001-cfb20f8d55db"
        },
        "item": {
          "id": "81d6b961-7074-43d0-90f4-680d1eeb8b99",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "de1ea425-5953-448e-8f7d-65e47367084f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7190fea0-d548-40ef-9688-3a3bcbcb8fab",
        "cursor": {
          "ref": "f21880cc-fa6d-422b-b136-41f31807c80c",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "eef0bd1c-76f2-4ec6-8469-e25740ea0547"
        },
        "item": {
          "id": "7190fea0-d548-40ef-9688-3a3bcbcb8fab",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "ed4e5727-b9d4-470c-ae45-59aa7191d075",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eb88508-c2a0-4dfe-9576-4dabf7ed8092",
        "cursor": {
          "ref": "91ecd243-16f8-4e2b-8c40-c716ad48ec3c",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "557788bd-525b-4826-afa0-e65ef594f0c6"
        },
        "item": {
          "id": "2eb88508-c2a0-4dfe-9576-4dabf7ed8092",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "603f5133-3034-4c41-ac6f-1a2d3cd050d7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78c99985-b15d-44c8-98bb-746e843837e9",
        "cursor": {
          "ref": "45ca9be9-768a-4c9c-9c4c-3283bbebcf58",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a177f6fe-a178-4163-84b0-9f440e18cd17"
        },
        "item": {
          "id": "78c99985-b15d-44c8-98bb-746e843837e9",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "f21cbd5b-b936-43c4-92cc-00dddf0bb699",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "762007f0-c037-4b6c-b554-b7338b4d513a",
        "cursor": {
          "ref": "64ce8f8a-816c-435e-88c8-62549d194265",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "c63b958f-3305-4409-8687-26531748f4e7"
        },
        "item": {
          "id": "762007f0-c037-4b6c-b554-b7338b4d513a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2d4ea27a-f544-4db2-8f5e-8f62ad5eb73b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a779ffba-f4b5-440d-a366-cedb226a3d78",
        "cursor": {
          "ref": "a0ca9033-7502-4a64-9630-d7433f27f1c9",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "924cbbf2-c52d-425b-b687-f1f61d858d98"
        },
        "item": {
          "id": "a779ffba-f4b5-440d-a366-cedb226a3d78",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ada18931-bb5a-4d42-80d0-158b8e40e283",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52184723-2437-4095-abec-59c4058dbe11",
        "cursor": {
          "ref": "63838dd0-7a2b-477b-b133-47e668cb4a46",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "82253d52-f616-4a97-b8ae-6db80e3a7b4b"
        },
        "item": {
          "id": "52184723-2437-4095-abec-59c4058dbe11",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "86247645-6faa-4f93-855a-3de91f8a2532",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32348d35-e73a-4b96-9678-8eee153adfb9",
        "cursor": {
          "ref": "7f9f9b31-7460-4c9d-8e98-e03155b2b79c",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ab0d0ac6-fb77-411d-a00b-bcd80dea3999"
        },
        "item": {
          "id": "32348d35-e73a-4b96-9678-8eee153adfb9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "77fe7137-3407-4f5f-9522-323933561b27",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f79470-0861-414d-9e64-2aa283671ff6",
        "cursor": {
          "ref": "34b30088-e348-4016-9291-c1b799918aff",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2da7d7f7-1528-4e33-a0c0-9bc6c2b005a6"
        },
        "item": {
          "id": "98f79470-0861-414d-9e64-2aa283671ff6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e0c63f1b-7454-4f54-aa40-d2be09a110cb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a48f12ce-95da-486d-9865-8d5baeb97a68",
        "cursor": {
          "ref": "e56eb95a-218f-4d3c-8444-3057233534c7",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "98035b95-4e0f-4182-9299-e9c008f123f1"
        },
        "item": {
          "id": "a48f12ce-95da-486d-9865-8d5baeb97a68",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b9b3351e-3d6b-4b30-a82e-30f0f617342a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aea0bd2-7eb0-4873-b31d-bb42e49e4266",
        "cursor": {
          "ref": "d19fee25-af12-4d28-9506-37b83e6a2fbb",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6cb9c0ce-a225-46d6-9d6f-3a93d7658929"
        },
        "item": {
          "id": "5aea0bd2-7eb0-4873-b31d-bb42e49e4266",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "17c1b969-9b49-4615-89e3-fd2fd58f22c6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08e5bc59-2d67-4662-9a7f-3a47a2af5c8c",
        "cursor": {
          "ref": "679a4227-ebe1-4535-a9bc-478af0efd054",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "c9e53717-05c7-464c-beed-685396ae1098"
        },
        "item": {
          "id": "08e5bc59-2d67-4662-9a7f-3a47a2af5c8c",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "46818e90-773b-42bb-b1e4-b6b6e62f485a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d21f086-24b8-4fae-93ab-8e308a53ced1",
        "cursor": {
          "ref": "30d597bd-fd9c-44ac-a8f7-23c688ca2d35",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "10e46cba-f553-4265-ad5b-cda25de0ec60"
        },
        "item": {
          "id": "5d21f086-24b8-4fae-93ab-8e308a53ced1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5a8e4c59-ae20-4120-8939-41a05b756b7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0235d00a-96c5-47cc-a7a7-b694c65a8b67",
        "cursor": {
          "ref": "9826138c-a64d-46d7-82b5-302922c2cef5",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "02a72f7f-9e9a-4848-9e11-8724bac75947"
        },
        "item": {
          "id": "0235d00a-96c5-47cc-a7a7-b694c65a8b67",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e186103e-bd2b-4010-a084-b9ec2182b8db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cd58dff-bb3f-433d-8199-a94bcde549cc",
        "cursor": {
          "ref": "f3e2c09f-def2-4585-96db-fccc7e2adfe3",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8ccdc0c5-15e2-4cf2-bf46-ee02128a8f7a"
        },
        "item": {
          "id": "6cd58dff-bb3f-433d-8199-a94bcde549cc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "3d713497-5731-4985-b61d-87c131fc6a44",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae4d5a7-f668-4f72-bac2-5748dfc883fb",
        "cursor": {
          "ref": "9b41f12d-28f3-4e7a-80a1-d7827e41c4e2",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4e1c49c8-518b-408f-ae85-6c1f6fc36f83"
        },
        "item": {
          "id": "dae4d5a7-f668-4f72-bac2-5748dfc883fb",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "df10aeef-e278-4333-aefe-3dea2868ca78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bea777d7-078b-4d39-8e34-64d84203b4e0",
        "cursor": {
          "ref": "6102d6d3-0bb5-4292-afea-75c94f2a7db4",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "947587df-8a8a-4778-998a-408a65e0eb72"
        },
        "item": {
          "id": "bea777d7-078b-4d39-8e34-64d84203b4e0",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "cf4ba20c-0f29-4942-a8b7-9dfb69dc8467",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 59,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f48e10a7-1ba9-4efd-9239-ab5857550035",
        "cursor": {
          "ref": "5686bfb8-0ec2-4632-b752-ed00a1a62195",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "59526ba3-bac8-4095-a438-f09bd528bd2e"
        },
        "item": {
          "id": "f48e10a7-1ba9-4efd-9239-ab5857550035",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "fc9b9991-6bdd-47f3-ad6b-73959d1b7a04",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6bb9c59-4624-42dc-a31c-bcfddfdb364b",
        "cursor": {
          "ref": "701f81e5-ccc2-4b9a-9df1-4b1188a3976d",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d9e27569-2653-4784-a836-57870a55e36d"
        },
        "item": {
          "id": "a6bb9c59-4624-42dc-a31c-bcfddfdb364b",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "129a98cd-275c-45a7-9441-669268a53d2c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab947e2d-2c83-4720-ba16-1320517dbcf8",
        "cursor": {
          "ref": "20a0bf08-be75-45f7-842f-f0753de027f1",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f442efbb-0876-49a6-b6db-2fdef1ea463f"
        },
        "item": {
          "id": "ab947e2d-2c83-4720-ba16-1320517dbcf8",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fb8155e9-60c9-4bd9-8a21-2e9c727e906b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e52de007-4a22-4d8b-8904-24fa21858630",
        "cursor": {
          "ref": "5dd813cb-f6b9-416d-b003-046825cdfa53",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "3f64a820-01eb-4ac9-b58d-513aae3fb12c"
        },
        "item": {
          "id": "e52de007-4a22-4d8b-8904-24fa21858630",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d0dd756a-978b-4d37-ad0d-01dd3b21539b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2961572-1cdb-4f52-b84a-b29faa48ed01",
        "cursor": {
          "ref": "0d284ee0-e7bd-4129-824f-71b321987ff1",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9fe92e2c-658f-4196-9a3c-734757c51b79"
        },
        "item": {
          "id": "b2961572-1cdb-4f52-b84a-b29faa48ed01",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8d1c5eae-5a94-45b1-88f6-9b6496869be0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06018dd2-bc39-4b81-b55f-5450536a9196",
        "cursor": {
          "ref": "83c3add7-2adb-4934-822b-755e7d3b32e8",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "d280422b-26d9-4e52-9a3f-6f304b702c81"
        },
        "item": {
          "id": "06018dd2-bc39-4b81-b55f-5450536a9196",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "fac9d100-2169-4f09-8d50-4a8cc88411aa",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3936d8fc-9bcc-4c9d-b579-f05fb62de10c",
        "cursor": {
          "ref": "839d55d6-d600-4aa7-8fe7-0517527f536b",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "2442969d-05e7-48fa-aa86-5088667459f3"
        },
        "item": {
          "id": "3936d8fc-9bcc-4c9d-b579-f05fb62de10c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "7e3bffac-9533-4074-ac58-cc867c8d2dde",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68e962d5-735b-469f-8047-f5ceb2176b84",
        "cursor": {
          "ref": "cf3d28b7-7929-4aff-a2df-297cffe23d37",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d5721d8a-8d6b-4598-8e44-a12ea4472550"
        },
        "item": {
          "id": "68e962d5-735b-469f-8047-f5ceb2176b84",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "c25a1e9e-cacb-4340-8fb0-4c9c593eddf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3919f92-c816-411f-a70b-5930fadcf7d2",
        "cursor": {
          "ref": "2623184f-1e11-4088-854c-3b9821e6de0a",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "afaa9479-2402-4e89-820a-2a2c12171e5d"
        },
        "item": {
          "id": "f3919f92-c816-411f-a70b-5930fadcf7d2",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "067ae359-a52b-45f0-a32b-66a4761ae0d3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d99c388-fb41-4679-bca0-2a7d6bc45078",
        "cursor": {
          "ref": "5a2fe618-aafd-43c7-a8ca-53a82fa20902",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c5767247-a708-4826-b56b-3daaf6803f31"
        },
        "item": {
          "id": "5d99c388-fb41-4679-bca0-2a7d6bc45078",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "f67b67ee-c1e1-49ad-97bb-c0d71f9448c8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4efcd7bb-5b83-40cf-80c4-d06fbf499691",
        "cursor": {
          "ref": "1f74d155-7ac3-4558-9de6-2afaf5bfaf35",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "5f7e1833-f15e-4fd7-a21b-ba8389f7fd08"
        },
        "item": {
          "id": "4efcd7bb-5b83-40cf-80c4-d06fbf499691",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "6d217912-f534-4e9b-936d-4fde7ffd3d16",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d27723a0-b4fa-4dc7-8cd2-0db4fec546ce",
        "cursor": {
          "ref": "5ee89c1b-0901-4721-9510-77132281496c",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1501045b-b8c2-4c41-b6cd-ba0d107dc21e"
        },
        "item": {
          "id": "d27723a0-b4fa-4dc7-8cd2-0db4fec546ce",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a41e6587-7deb-402f-87e3-326292eb5da5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fa24c5-3d7c-4bf0-b3b9-37b59ea9bec4",
        "cursor": {
          "ref": "ba42759a-b24f-4366-835a-babd1ed91ef5",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e328dc10-de5e-447d-8370-3b4805f50863"
        },
        "item": {
          "id": "31fa24c5-3d7c-4bf0-b3b9-37b59ea9bec4",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "be990d7d-836b-40d7-8662-2d4f5d07b154",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ea5ea10-ca1a-4f8e-8424-b2a159aa4db2",
        "cursor": {
          "ref": "4fbccf33-9f69-412c-886b-a395529ccf9b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "66847820-67d4-41fd-bf3a-ad7878d3b494"
        },
        "item": {
          "id": "8ea5ea10-ca1a-4f8e-8424-b2a159aa4db2",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "a9487334-8c26-4d04-ba39-fbc53ab4f60d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87d3fef7-6e8e-4c1c-87b8-aa8bfc209271",
        "cursor": {
          "ref": "1cee996e-b7b1-41b6-914c-74b1190e2454",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "32e96749-4df9-4f48-91d5-54d2d5c775d2"
        },
        "item": {
          "id": "87d3fef7-6e8e-4c1c-87b8-aa8bfc209271",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "20d6f9d0-b768-49e5-8d80-169932352f6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f85edc39-7c56-4c8b-bca1-836ac6104ad3",
        "cursor": {
          "ref": "7acdf9f8-0040-4c20-bc1c-d1f2382d3552",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "85fa3789-a3c5-4aee-a5d8-396f3a12907e"
        },
        "item": {
          "id": "f85edc39-7c56-4c8b-bca1-836ac6104ad3",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "5dffd8be-3469-4a0e-a6fc-976402aa1f89",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04c02af8-8474-4e64-a37a-d3a1910464ea",
        "cursor": {
          "ref": "0a35ed46-22ae-4ae0-806e-3b96fba9559d",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "9e137399-3a46-4bc3-83c1-edd430456c1d"
        },
        "item": {
          "id": "04c02af8-8474-4e64-a37a-d3a1910464ea",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2eb13d8e-a2c4-4180-b240-fc4203e33466",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "588957ea-3041-40ac-bbb4-afc4bea224cb",
        "cursor": {
          "ref": "b0da3e47-72de-4bc7-bde3-ab2bef706d7b",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "123c1628-09cc-40b9-a95a-5daea85b570a"
        },
        "item": {
          "id": "588957ea-3041-40ac-bbb4-afc4bea224cb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "c843af02-e6fb-445d-ae3b-a5aa747ba54e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf6c9528-551f-42bf-ba16-6d66609c8dcf",
        "cursor": {
          "ref": "54664e94-702c-4372-866a-ed91877d40ef",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "8bd17642-77a1-4a00-9b20-3ef65d3d60c5"
        },
        "item": {
          "id": "cf6c9528-551f-42bf-ba16-6d66609c8dcf",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "9d08731f-b8a5-41e6-9087-992cce0c8ef5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c20ab362-c395-4ce2-824f-548fdacc71ff",
        "cursor": {
          "ref": "1e88f8c8-af5d-4d95-90d9-eed72f1ef917",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "22d7f847-17dc-4058-82d6-7c12189196f8"
        },
        "item": {
          "id": "c20ab362-c395-4ce2-824f-548fdacc71ff",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fa4e9b57-9a54-4763-b4b0-86e4507faca8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de25c6c6-38af-4d28-b8cd-f19db6ef89a8",
        "cursor": {
          "ref": "7a2cc19e-e982-4aa9-88e7-68f153ba782a",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "53d1540f-d13c-404e-8203-e617d8ad47a1"
        },
        "item": {
          "id": "de25c6c6-38af-4d28-b8cd-f19db6ef89a8",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "985e225e-245c-469c-867d-ead660284613",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f61717e1-b0d6-4914-999d-37e3cdfc5fb8",
        "cursor": {
          "ref": "ba13bdcc-e79b-458d-8697-5e0073fc21f2",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a69cb1da-d491-41ff-933d-e35ffe966e16"
        },
        "item": {
          "id": "f61717e1-b0d6-4914-999d-37e3cdfc5fb8",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a49324ba-59c6-4821-abaf-18097a681c12",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82d648a0-4331-4430-b43d-78891dd6b59b",
        "cursor": {
          "ref": "9a31dc90-5bcf-42b1-b81e-108dc5c28327",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "10ea6532-e260-4453-8d0b-4048df4efb65"
        },
        "item": {
          "id": "82d648a0-4331-4430-b43d-78891dd6b59b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "08a60760-67ab-464e-bf68-e99947ac9039",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65081bc8-ce30-4a10-b530-23c006ea1cfc",
        "cursor": {
          "ref": "c893cdf4-7fb8-446a-b26d-2b0093fd1cb0",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "229c41f7-8ab2-4370-a2af-92e7cdb4d902"
        },
        "item": {
          "id": "65081bc8-ce30-4a10-b530-23c006ea1cfc",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "908b752e-eda6-4370-a964-2c016925b506",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c906271-11c4-428e-ae9a-8e88b53c2e64",
        "cursor": {
          "ref": "86660b56-a49b-4eb9-a2c4-4505681efc2d",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "74e1a354-3313-4281-b02b-a34047e895f6"
        },
        "item": {
          "id": "0c906271-11c4-428e-ae9a-8e88b53c2e64",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "44f6bc63-9e91-44de-b7b1-a0f20370768e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d286f098-0f37-423e-9460-f80cd970795c",
        "cursor": {
          "ref": "e3faebed-1e36-4c79-b194-4e7e0a471c14",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "ebdc48d0-b951-4403-8d19-228cd0386042"
        },
        "item": {
          "id": "d286f098-0f37-423e-9460-f80cd970795c",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "a59ff6bb-403c-4443-83bd-88130aa52b65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b07fa34-94ae-489c-96cd-97dbd9168cac",
        "cursor": {
          "ref": "069ae807-3886-4622-90c1-4a91eff4f8df",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "60082cda-85c8-4175-96b5-c917867f1b25"
        },
        "item": {
          "id": "9b07fa34-94ae-489c-96cd-97dbd9168cac",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d1abe6d7-3e83-451e-bf44-03a425e5ab3e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9a37f3e-4189-45af-ae5f-560bd4c4fa1a",
        "cursor": {
          "ref": "836bac50-2993-4675-83be-a2f9893fe777",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "b78da654-e9a0-40a5-9e76-1c133207bb9f"
        },
        "item": {
          "id": "e9a37f3e-4189-45af-ae5f-560bd4c4fa1a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6da470bf-2d6b-4c31-be08-450f612c1bec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc1a72e5-3e70-4784-afc7-62ecdf323f75",
        "cursor": {
          "ref": "a0b23f8f-c249-4d3b-a49f-527c68aa59b3",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "961cddf3-aafb-47a7-8bcc-294c350ff31c"
        },
        "item": {
          "id": "fc1a72e5-3e70-4784-afc7-62ecdf323f75",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "39c205cd-387c-4616-a0c9-086d6ec346f6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84a19cf5-a141-4376-a646-9ccdc3b2afab",
        "cursor": {
          "ref": "446ad032-da77-4114-97e2-88264bce568d",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "f534ad20-5de9-4cc0-bd11-264f81872ecc"
        },
        "item": {
          "id": "84a19cf5-a141-4376-a646-9ccdc3b2afab",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "46713c73-b066-48e6-804a-3ab8bd78d91f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76e24a38-f7f3-449b-bb23-3c7ed344a8ee",
        "cursor": {
          "ref": "d2d6a357-092e-4fd6-8c3d-7596a6d26cd1",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "c62c617d-20a9-4f08-9dcc-aa8844f49f96"
        },
        "item": {
          "id": "76e24a38-f7f3-449b-bb23-3c7ed344a8ee",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "4b4ad729-c161-46e0-994c-d12b10385214",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e23afe4-e474-4b76-b557-51491d0c8e99",
        "cursor": {
          "ref": "31944745-d638-4335-a57e-644e11805308",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0a86ad1b-287f-404c-baa7-4219007f96cd"
        },
        "item": {
          "id": "4e23afe4-e474-4b76-b557-51491d0c8e99",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "356f7920-6de3-4c3a-8af9-4d26accfb8dc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25815bd9-0105-4ae7-9184-8b871d43da43",
        "cursor": {
          "ref": "10cc104e-0639-481d-803b-1f13024bbb54",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7d9f9aad-0fc5-42bf-86f7-b20f26d069c2"
        },
        "item": {
          "id": "25815bd9-0105-4ae7-9184-8b871d43da43",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "9a634183-8885-4fc0-bdd4-450d78106a1e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 58,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29ac5774-ee6f-4441-92f4-132a8408e8c1",
        "cursor": {
          "ref": "7c6e5a41-8dff-4f94-a22a-32656fee8598",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "4af62765-5162-4c2e-8212-c4d6afcb04d1"
        },
        "item": {
          "id": "29ac5774-ee6f-4441-92f4-132a8408e8c1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f6ae4a4e-5c88-48eb-9b34-51ba29e938e3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ecc17d-506a-4a5a-887b-b4b3f8ae7335",
        "cursor": {
          "ref": "7f2a499e-9474-4d5e-9910-796376be92dd",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "ba70a693-ebab-418c-bd68-dfed887162f7"
        },
        "item": {
          "id": "93ecc17d-506a-4a5a-887b-b4b3f8ae7335",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "05afac1c-1f4f-455f-a51e-291558dbc315",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82e8f9a9-2264-41a5-8819-d7907d4da94d",
        "cursor": {
          "ref": "4232ecf1-2149-48af-a90a-fabfaa3a5553",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "27c7ce93-a936-46b1-9425-015a722c537c"
        },
        "item": {
          "id": "82e8f9a9-2264-41a5-8819-d7907d4da94d",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "ef9f0d52-d421-497f-8e6c-b478f3398084",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7624a487-ce63-4c91-892a-6f747ad8e7e2",
        "cursor": {
          "ref": "7c6b729e-2036-464f-a3dd-25bac58f1d58",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "4400141d-9307-48a0-848b-ff97038e7f54"
        },
        "item": {
          "id": "7624a487-ce63-4c91-892a-6f747ad8e7e2",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "46b35c51-ff6e-4d5d-b4ec-136d2fc00371",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c235a64-6770-4aea-8828-d3a4ca36c24f",
        "cursor": {
          "ref": "26d58087-1904-477e-a0b0-b05d186d04a0",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7eea7a45-d7f2-4b92-9a52-77e87c424cec"
        },
        "item": {
          "id": "4c235a64-6770-4aea-8828-d3a4ca36c24f",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c77c2b59-fcd8-49f2-8342-dbc96c961af3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b9e1422-19b0-4073-9751-e08d8962e633",
        "cursor": {
          "ref": "31227d35-127f-4019-888b-aceceafb7a6c",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ca022018-c980-4ee0-9486-9e1f43c5b82a"
        },
        "item": {
          "id": "8b9e1422-19b0-4073-9751-e08d8962e633",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1416bd5e-6b6d-46f8-b48e-d58a3c9c84b3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc803533-bd8e-472b-abb4-dd1d3e814c71",
        "cursor": {
          "ref": "b5658a61-3f71-4f58-ab3a-aa50207bc56c",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "3263534c-7755-4f58-b189-8ca22dc79ac4"
        },
        "item": {
          "id": "cc803533-bd8e-472b-abb4-dd1d3e814c71",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "1ae412fa-af23-4b53-8d92-b378cf1bafc2",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee0e7639-a995-40b4-88c1-295536e50b51",
        "cursor": {
          "ref": "294ce370-2c29-4981-a4d0-3c545c31ec19",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0d84c8d4-29e0-4b34-b5fd-83c6609b5b16"
        },
        "item": {
          "id": "ee0e7639-a995-40b4-88c1-295536e50b51",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9a8cfa5e-9069-4ccc-898f-b7f8e2d2f554",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717c71e2-dc42-4247-bb89-16a2bfbe2b28",
        "cursor": {
          "ref": "f5c3b172-1fec-460a-95d7-219eed27a69a",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "60ec0ce1-16d4-4466-b807-59c2c0ec412d"
        },
        "item": {
          "id": "717c71e2-dc42-4247-bb89-16a2bfbe2b28",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4110e5ca-e275-4094-8d5a-669b7a2bda29",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19d47f0-8bb0-4b2d-bc3f-d5bcd9c8b1ba",
        "cursor": {
          "ref": "6ac514c9-5f1a-40c2-9f1e-1a7e7e762725",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "013104bf-edd1-48df-a1b8-d938263a5631"
        },
        "item": {
          "id": "b19d47f0-8bb0-4b2d-bc3f-d5bcd9c8b1ba",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "b364ce3e-02ad-4c56-b7d6-bb5dc33f57b4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd0eb191-bd46-415e-b8c9-9238b183e735",
        "cursor": {
          "ref": "fee066a7-6aec-489d-ab9a-558af219880e",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d2a6f968-1671-4ba5-b584-657d8d406423"
        },
        "item": {
          "id": "fd0eb191-bd46-415e-b8c9-9238b183e735",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "9cbae099-512a-4d77-b3d4-b58cde589d93",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24419a3a-9e08-4d13-8bc6-8aad434eaf2a",
        "cursor": {
          "ref": "89d12d69-b375-445a-b005-ac6c5a18604b",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a457f14b-2224-4b4e-8ba2-dc68faa3978a"
        },
        "item": {
          "id": "24419a3a-9e08-4d13-8bc6-8aad434eaf2a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f8c31da2-420e-4c54-83d3-31d58eb43f14",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 160,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0c80984-0f9e-49ae-9581-cf3b47d4e280",
        "cursor": {
          "ref": "c6d1e2d8-9fdd-4067-bd10-11dd7908040a",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "311fbabc-2c2b-479c-a953-09bda2c65b2b"
        },
        "item": {
          "id": "c0c80984-0f9e-49ae-9581-cf3b47d4e280",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d90efa7d-6f4e-4f9f-9187-9a6ae246f7a8",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1d33f3-cca5-4c0a-9fa7-3df3df0a5a53",
        "cursor": {
          "ref": "4f71d681-f8a2-4fe0-9794-f526d9faa81b",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "10c18248-0bf6-4ae1-ab40-4dab2747bb44"
        },
        "item": {
          "id": "4f1d33f3-cca5-4c0a-9fa7-3df3df0a5a53",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b274c66d-a005-4086-a859-ac69a6202670",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f94e1ed8-b9f0-4d90-b257-88561b26a11c",
        "cursor": {
          "ref": "6ec82d5d-54a4-444d-bdf9-4da36353f4b2",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "dd4fb303-c4c0-4ce8-9a68-ff06df064ea3"
        },
        "item": {
          "id": "f94e1ed8-b9f0-4d90-b257-88561b26a11c",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "60a8daab-6be4-42f2-a3e2-28a28bfd6651",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b4608c6-b302-45f8-a472-7f5e3f7a2629",
        "cursor": {
          "ref": "d367a09d-bb57-48b1-86bb-34add2edd1cd",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "befcd8e6-a081-4c4c-af37-362091a2fd59"
        },
        "item": {
          "id": "8b4608c6-b302-45f8-a472-7f5e3f7a2629",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "3dc09d75-884f-45e8-b0b2-503ec7e9896a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09033cde-a424-46b7-9ed3-39b2b5411989",
        "cursor": {
          "ref": "8dd3947d-2e4b-45d3-8d77-5550e51afa71",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "2880bd5f-e58b-434d-a8b9-3030242b8c86"
        },
        "item": {
          "id": "09033cde-a424-46b7-9ed3-39b2b5411989",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "c3562aaf-4c6e-4d47-b0a6-b82e4969c575",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab715b83-4a68-4700-9f83-1b39a79ee71d",
        "cursor": {
          "ref": "5c61156a-d6f3-4348-9539-0b94d41baa0f",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "348241c2-dc3e-44c4-843c-59c3dd938516"
        },
        "item": {
          "id": "ab715b83-4a68-4700-9f83-1b39a79ee71d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a864e222-83b1-4f03-adf6-ccc90a8ebd86",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "928f602f-2479-4893-ac77-acab3815d80b",
        "cursor": {
          "ref": "e451f7c1-75e4-42b3-baef-e8ae5767d104",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "0a82ebe3-74c8-4fec-bbe0-d0942b5e0415"
        },
        "item": {
          "id": "928f602f-2479-4893-ac77-acab3815d80b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9c38edd3-b037-4df7-aef8-f8ca46bbd010",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bc3dd8d-e582-459a-8c39-c527430389c3",
        "cursor": {
          "ref": "a10490ca-4f9c-47b6-b258-ed5bb16a50df",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6d301440-cb13-4062-ba52-435a4e29a0c8"
        },
        "item": {
          "id": "1bc3dd8d-e582-459a-8c39-c527430389c3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "b917e00b-7f66-4461-9768-ef0391650f57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "831f2baf-010d-423c-a758-843c6bbeb1c1",
        "cursor": {
          "ref": "db0c6136-a7d1-4a8b-b5c9-e3522a23fae0",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2227868e-37b7-467e-a731-015e91921007"
        },
        "item": {
          "id": "831f2baf-010d-423c-a758-843c6bbeb1c1",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "bf667a81-a119-4057-b69f-f81875e3005c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef0b5d20-21eb-4a52-8cd5-877674772891",
        "cursor": {
          "ref": "1dbc8578-a225-4868-a988-282ed56db0f4",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff1eb902-8243-4506-96ba-f9de54aaf19a"
        },
        "item": {
          "id": "ef0b5d20-21eb-4a52-8cd5-877674772891",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "be8edaa0-c695-47ad-95a5-a6057af1afae",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024ccf85-36ea-4fbc-94f4-61c0ebad1b8d",
        "cursor": {
          "ref": "0f171c96-cf31-486a-8950-b96a709f7eb3",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b039963c-a643-4c8d-9c80-9d556039084f"
        },
        "item": {
          "id": "024ccf85-36ea-4fbc-94f4-61c0ebad1b8d",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "765d7652-8c22-48b0-8d26-140d061438d0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5374a1b0-b5c8-404a-9519-a6e3fb1ed5d8",
        "cursor": {
          "ref": "293de3b0-bccc-43e6-b184-84578afdcbcc",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c52a5612-4890-49f9-a368-aba5b3747de0"
        },
        "item": {
          "id": "5374a1b0-b5c8-404a-9519-a6e3fb1ed5d8",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "568c8c66-8fe3-4731-bd2f-33e3327c1c10",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d4b3ac-6645-4319-97e1-00ca59f571fd",
        "cursor": {
          "ref": "a9527e50-8fd8-4d8a-9c29-7b25db4a6f37",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "f189c76d-d2da-4340-8bc3-bec1d6a2172a"
        },
        "item": {
          "id": "30d4b3ac-6645-4319-97e1-00ca59f571fd",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9f98cba1-d300-4b2b-9987-b140648b84e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31687991-c04a-4361-88dc-fceaa0f4becc",
        "cursor": {
          "ref": "8c3b234a-746b-461a-a241-85881f4e71ef",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4ff954cc-b379-4aaa-9b24-e82e45819468"
        },
        "item": {
          "id": "31687991-c04a-4361-88dc-fceaa0f4becc",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "53938606-76f9-4140-9b97-060adc099d61",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64123d3e-25c0-4878-be40-a4488b68acae",
        "cursor": {
          "ref": "b902de84-d29e-4330-a1cd-8221dcfe9043",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "be8682af-f059-4a31-95e8-61d5b014c5b8"
        },
        "item": {
          "id": "64123d3e-25c0-4878-be40-a4488b68acae",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "a56eda3f-f219-4291-9f70-f66569928cf0",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaf82118-4915-46fc-827b-09623df30084",
        "cursor": {
          "ref": "e483766a-08f0-410b-92e6-cc7c82003a27",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "8407a797-44cb-4699-bd1d-ddf322693484"
        },
        "item": {
          "id": "aaf82118-4915-46fc-827b-09623df30084",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "c19ddbf3-01ff-45c9-8453-1eb74557c402",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "251bf4ed-41c7-4d39-8d07-aef7d5bd8795",
        "cursor": {
          "ref": "410f805e-9575-4f2a-a8f8-72fdce829183",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "47eb861d-f8fa-4262-bab4-2de8d9479822"
        },
        "item": {
          "id": "251bf4ed-41c7-4d39-8d07-aef7d5bd8795",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "089c58a1-ca6a-4cfa-81e3-d798a7830f6d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17a27e38-c9f2-4280-a2b1-b045e127f4b4",
        "cursor": {
          "ref": "c9e22682-a7ff-42a0-b398-84275dc72a18",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8694a416-2100-49c0-b97f-3b3ad0d3d57d"
        },
        "item": {
          "id": "17a27e38-c9f2-4280-a2b1-b045e127f4b4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "54b3b74e-0091-4a7a-88bf-72021077196d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 55,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4811b66-84f0-4c44-bf7b-ccd24bcfb8de",
        "cursor": {
          "ref": "39dce7e4-76fb-4436-abc9-cf089037e566",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "5bdb5b67-5f92-4f7d-9306-729dd6d49057"
        },
        "item": {
          "id": "b4811b66-84f0-4c44-bf7b-ccd24bcfb8de",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "e99ce250-175a-40fe-ab6f-ed158a12b325",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 54,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6113ffa1-cc50-4514-ac02-932a09568505",
        "cursor": {
          "ref": "d4ec2b67-69d3-4a62-a56e-66e26c6e545f",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "065e05e8-7770-4e90-8414-899f3ea6b21b"
        },
        "item": {
          "id": "6113ffa1-cc50-4514-ac02-932a09568505",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d7ca0f3c-930b-43bc-bf43-1ab31b3d402b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed3b1e79-1864-420d-939a-6d3d253a443d",
        "cursor": {
          "ref": "43220087-7fc0-4f40-96ea-fe86e6eb746a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ff19f6e5-6d58-471f-b750-feecf265ec45"
        },
        "item": {
          "id": "ed3b1e79-1864-420d-939a-6d3d253a443d",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "01171785-4a7c-4e35-a224-8e06574e95ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "370c5acf-e1c7-45b2-960e-6554cda51667",
        "cursor": {
          "ref": "4bffd676-9e33-4313-b321-d737f2855559",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "be261f7a-8490-4278-8692-ea66eb69ed04"
        },
        "item": {
          "id": "370c5acf-e1c7-45b2-960e-6554cda51667",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c4395268-1e60-4b17-a54f-2e11d930b2e1",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46e79872-358e-4522-bb11-1be488b6615f",
        "cursor": {
          "ref": "706a14f7-8268-4a04-8163-d67367876bf8",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "1b28dc56-bd32-4517-b617-f2fb037807fe"
        },
        "item": {
          "id": "46e79872-358e-4522-bb11-1be488b6615f",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "cebd201f-8fe4-4f75-bdcb-067715ca3ab5",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90509573-539b-4d2b-bf95-80389a803e96",
        "cursor": {
          "ref": "015cf612-a4e8-4d6c-98b7-2ea1d53c886c",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a1e1459f-a7f3-4acf-a97f-dc1e0acba5fc"
        },
        "item": {
          "id": "90509573-539b-4d2b-bf95-80389a803e96",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "8c55bb96-9268-44ba-9c75-e58f25f3c5bb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bfad7d5-e232-4b06-985e-54a1cd2c428a",
        "cursor": {
          "ref": "4fa9311e-c380-4ed2-857e-bf62ed2f4c02",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "4ea7722e-17d6-4d3a-9ec4-1683274f7285"
        },
        "item": {
          "id": "2bfad7d5-e232-4b06-985e-54a1cd2c428a",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "54a88b00-1f57-4406-a3cb-11ac58b32574",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c0df615-38ae-4c31-9562-53c3def89805",
        "cursor": {
          "ref": "eb3ea88f-ccb2-4ac5-a527-6c55a5a94f5c",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "6117f6c6-e08f-4234-8a0b-38bbf54d989f"
        },
        "item": {
          "id": "4c0df615-38ae-4c31-9562-53c3def89805",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "e0070291-edd7-4b38-8547-08ba6fdfdba4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db7ccfde-596e-4ed0-acb0-dbddd3c86363",
        "cursor": {
          "ref": "32c36f10-42e2-4d60-aedd-4be8d8f86b83",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "2820987f-5a1e-466e-8fb9-8dc02e0539fc"
        },
        "item": {
          "id": "db7ccfde-596e-4ed0-acb0-dbddd3c86363",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "91f58939-ff6f-4025-a005-d2d5a73ae4db",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "970e2578-09c2-4a16-bc60-dcf0876c6776",
        "cursor": {
          "ref": "ec357d00-13ce-4e95-acce-e9939d90432e",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "27a725ab-ffb5-44ff-a420-229cedeac26d"
        },
        "item": {
          "id": "970e2578-09c2-4a16-bc60-dcf0876c6776",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "31550f1f-19c9-4e4e-89c1-7e76b101057d",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438c4cdd-a3e8-4682-b2de-6dda15262331",
        "cursor": {
          "ref": "d2853a54-ba3c-4971-9990-082c8591b417",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f7f23964-dd9a-4bf2-a415-1b7e1308dfc1"
        },
        "item": {
          "id": "438c4cdd-a3e8-4682-b2de-6dda15262331",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "00901d64-8bb0-4ae4-9d7b-9bee259f2242",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fe1491-655e-400b-97cd-9c2dde1aa984",
        "cursor": {
          "ref": "b5fb0907-f54c-47d5-8947-4834c0893849",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "ffcadee4-df71-45b8-9f18-9c3b4883c4e4"
        },
        "item": {
          "id": "b2fe1491-655e-400b-97cd-9c2dde1aa984",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "350d418e-124b-43d9-8cec-098954189485",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5e439b-e37e-463c-bb53-23a318bdd8d0",
        "cursor": {
          "ref": "f5959a58-dee1-4c3a-947f-c6ad366fadc5",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "dd0174a5-c70e-49e2-862f-12fab8d43b2f"
        },
        "item": {
          "id": "cf5e439b-e37e-463c-bb53-23a318bdd8d0",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f3107858-1bd7-4f24-a737-63cbb920ccf3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08c74f59-c2c5-4b71-ad76-6b6d5f74b615",
        "cursor": {
          "ref": "bc71d72c-c826-4d70-9a0a-bc25ba4ac425",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "3ece0ccd-3d4a-4f35-804c-b47bb9715869"
        },
        "item": {
          "id": "08c74f59-c2c5-4b71-ad76-6b6d5f74b615",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cda9b12d-66d1-4bef-9ec9-610cad3162f3",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1a35f4e-5b2b-4f97-bac2-65f3c9139ef2",
        "cursor": {
          "ref": "17efb26b-3995-4132-b105-05f4b2875c3f",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "cc17462d-0d8f-459e-895e-df40d9147dca"
        },
        "item": {
          "id": "c1a35f4e-5b2b-4f97-bac2-65f3c9139ef2",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "8a9ce193-436e-462d-8bd1-0d695fcaf5cf",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b934b65c-c212-4161-97e3-c9b72daa3664",
        "cursor": {
          "ref": "77ad9654-b266-47b7-a006-ccdc77173fa5",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "e3e5263e-46b0-4be2-a3da-530f953ce72b"
        },
        "item": {
          "id": "b934b65c-c212-4161-97e3-c9b72daa3664",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "de58eaa2-33e8-4213-8324-837c96398f65",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e90d713e-e9ce-4b5d-8295-261dcceda526",
        "cursor": {
          "ref": "ba16d6e5-5f84-4722-b41f-a0d61a72e43f",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0a4fa0d8-e9dd-4959-b8c9-34286229d9fa"
        },
        "item": {
          "id": "e90d713e-e9ce-4b5d-8295-261dcceda526",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c1d27c9a-610c-4a3f-a007-56f9ae65058f",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c16e401-031f-45f2-beb2-15ca66208240",
        "cursor": {
          "ref": "7b28c5de-6a1a-42a8-8400-1494f0953ee9",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "3ad79f8a-634c-49e6-8d06-20c43e8db0a4"
        },
        "item": {
          "id": "9c16e401-031f-45f2-beb2-15ca66208240",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1de1b3d7-4bb4-4c93-a805-a20fb8d4e466",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7338d33a-5f52-406a-bd5f-cc284bedaa06",
        "cursor": {
          "ref": "f0810da9-23a7-482a-a663-cfbf076e5da9",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f86c1efe-efb9-419b-a288-23361efcb378"
        },
        "item": {
          "id": "7338d33a-5f52-406a-bd5f-cc284bedaa06",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "12acfdd8-e2b4-4769-84b0-cd16e703069a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8ae9973-3a25-4e62-8e9e-3e2d295af8fa",
        "cursor": {
          "ref": "2f0e39c2-b520-4425-8395-55f2fe784166",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "a5fefcf2-f38d-436b-80cc-b8a1bbac4ba3"
        },
        "item": {
          "id": "b8ae9973-3a25-4e62-8e9e-3e2d295af8fa",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "2570b930-4920-4aae-aba5-c5c7a89ae5ef",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b93dc26d-0cc7-4f16-88b6-955dee7a90d8",
        "cursor": {
          "ref": "5dc8144c-577c-4e5c-ab79-8cfe1461f606",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "70bd6a59-9d55-489a-aa2f-7ea0cff7c383"
        },
        "item": {
          "id": "b93dc26d-0cc7-4f16-88b6-955dee7a90d8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "141c5e48-a44f-498f-9367-3667f0acf6ec",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8ee4fd4-9813-4962-9089-b4a9652e4b03",
        "cursor": {
          "ref": "02493365-287e-4160-aa2a-debd832b75a9",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6a92c877-0970-4475-a449-8953611eb211"
        },
        "item": {
          "id": "f8ee4fd4-9813-4962-9089-b4a9652e4b03",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9aa83aa6-1e00-4202-96bc-8b0a4b0d392a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 52,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee7fc86-e725-4d16-b881-684de80796db",
        "cursor": {
          "ref": "7e8afc74-7b8d-46c6-af1b-d434bd94014e",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "47f8194e-d4b3-44a0-932b-4112df6fc68a"
        },
        "item": {
          "id": "1ee7fc86-e725-4d16-b881-684de80796db",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "a94df0f7-321b-49b0-8386-96f53de5f4f4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1c717e-7232-4c39-8808-f719c0862afd",
        "cursor": {
          "ref": "2f70f2ad-d739-4131-b755-a3cf27fa62f8",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "67d93392-e0a5-4e72-b69e-3940cf167114"
        },
        "item": {
          "id": "ae1c717e-7232-4c39-8808-f719c0862afd",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "d945feda-c096-4eb5-8d15-6cf6cda324e4",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "ac49f178-a1c0-4417-a3dd-5d4857ad8d83",
        "cursor": {
          "ref": "34436dd0-1312-4fb7-85d5-4ac41eb51107",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "375fe907-ed5b-47e1-9a65-516874262795"
        },
        "item": {
          "id": "ac49f178-a1c0-4417-a3dd-5d4857ad8d83",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8f969446-9e9a-4d8e-bed4-6d64637a8b32",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "6c0ebdf1-d0f0-4146-a965-2f940eac03c2",
        "cursor": {
          "ref": "563da7f8-4511-4ed5-91f2-4b11cc9193dd",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "83f61d79-f506-4aa7-8035-397fc3858a6a"
        },
        "item": {
          "id": "6c0ebdf1-d0f0-4146-a965-2f940eac03c2",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "20454888-085b-418d-9533-2da4e35d2fa7",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "a525d8e0-c869-471c-8e85-ebdb71a1db2d",
        "cursor": {
          "ref": "6af0a2a2-f19c-4ab6-a4b5-a96e11e247c7",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e77bbeb2-3f09-432d-b3b7-da7aab342b09"
        },
        "item": {
          "id": "a525d8e0-c869-471c-8e85-ebdb71a1db2d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa6c6c63-0630-432f-9342-ea7383eafd02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a525d8e0-c869-471c-8e85-ebdb71a1db2d",
        "cursor": {
          "ref": "6af0a2a2-f19c-4ab6-a4b5-a96e11e247c7",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e77bbeb2-3f09-432d-b3b7-da7aab342b09"
        },
        "item": {
          "id": "a525d8e0-c869-471c-8e85-ebdb71a1db2d",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "aa6c6c63-0630-432f-9342-ea7383eafd02",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 51,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18cc7b06-6972-42b8-aebb-a635e7b32b88",
        "cursor": {
          "ref": "9468c439-2baf-4842-b017-e6a36e2ac791",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "41c863fe-abc8-4b00-af73-64755e3d3123"
        },
        "item": {
          "id": "18cc7b06-6972-42b8-aebb-a635e7b32b88",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "99576c23-8f2a-4cdb-bd2b-c01f8e015745",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 51,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ef2c764-5b41-448f-b3f3-30a06754ecaa",
        "cursor": {
          "ref": "24b0ff44-4b8a-4819-99c6-1c8532760247",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2e9b42f5-bda0-4088-acea-09ed96178dc3"
        },
        "item": {
          "id": "3ef2c764-5b41-448f-b3f3-30a06754ecaa",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "eb8fef0c-5fa1-4903-8bc1-75d85125d124",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 53,
          "responseSize": 109
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 500",
              "stack": "AssertionError: expected response to have status code 401 but got 500\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}